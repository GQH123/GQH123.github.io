<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Goseqh&#39;s Blog</title>
  <subtitle>A JuRuo from a weak province</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://goseqh.tk/"/>
  <updated>2017-12-12T10:32:48.013Z</updated>
  <id>https://goseqh.tk/</id>
  
  <author>
    <name>Goseqh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【置顶】黑科技汇总</title>
    <link href="https://goseqh.tk/2018/09/09/%E3%80%90%E7%BD%AE%E9%A1%B6%E3%80%91%E9%BB%91%E7%A7%91%E6%8A%80%E6%B1%87%E6%80%BB/"/>
    <id>https://goseqh.tk/2018/09/09/【置顶】黑科技汇总/</id>
    <published>2018-09-09T08:01:20.000Z</published>
    <updated>2017-12-12T10:32:48.013Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>在这神秘的光芒背后，有着怎样的奥秘？（纯胡扯<br><a id="more"></a><br>黑科技大概指的就是我们编程中的一些技巧，无法单独开一篇文章进行记录，于是汇总到这里</p>
<p>这篇文章很早以前就开了，只是一直没有内容，下面我就来填充一下</p>
<h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><h3 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h3><p>下面的黑科技先只写描述，代码留坑待补</p>
<h4 id="质因数分解法"><a href="#质因数分解法" class="headerlink" title="质因数分解法"></a>质因数分解法</h4><h5 id="Pollard-Rho-因数分解法"><a href="#Pollard-Rho-因数分解法" class="headerlink" title="Pollard-Rho 因数分解法"></a>Pollard-Rho 因数分解法</h5><p>我们使用一个随机函数$F(x)$生成随机数列$a_1, a_2, \cdots, a_n$，其中，$F(x) = (ax^2 + c) \bmod n$</p>
<p>然后，我们使用两个对于这个数列而言的指针（由于数列项的数量过大无法保存），其中一个的迭代速度是另一个的二倍，即$a = F(a), b = F(F(b))$</p>
<p>然后，我们求出$d = gcd(\mid a - b \mid, n)$，如果$d &gt; 1$，那么我们就找到了一个$n$的因子$d$</p>
<p>如果发现$b == a$，这说明数列出现循环，而我们此时发现了这一点，我们重新随机随机函数的那两个系数，然后重新随机进行分解</p>
<p>这样，我们可以在$O(n^{\frac{1}{4}})$实现对大数的质因数分解</p>
<h5 id="线性筛质因数分解法"><a href="#线性筛质因数分解法" class="headerlink" title="线性筛质因数分解法"></a>线性筛质因数分解法</h5><p>首先我们先跑一遍线性筛，以$son[i]$记录把$i$筛掉的最小的质数</p>
<p>分解质因数的时候，不停地$n=n/son[n]$来分解</p>
<p>可以证明复杂度是单次$O(logn)$：每迭代一次，$n$被除以$son[n]$，而$son[n]$最小为$2$，故时间复杂度不超过$O(logn)$</p>
<h5 id="变上界质因数分解法"><a href="#变上界质因数分解法" class="headerlink" title="变上界质因数分解法"></a>变上界质因数分解法</h5><p>众所周知，我们正常人在因数分解的时候，我们都是采用$O(\sqrt{n})$的算法进行暴力分解的，我们从小到大枚举质因数，判断能否整除$n$，然后再进行相应分解即可，直到枚举的质因数大于了$\sqrt{n}$，就停止，如果此时$n$不为$1$，那么它一定是一个质数（这应该很显然）</p>
<p>但是，我们发现，随着分解的进行，$n$在不断地减小，这就是说，$\sqrt{n}$这个上界也是不断地减小的，我们每次做完一个质因数的分解，直接更新上界，用当前的$\sqrt{n}$作为上界，然后继续上面的操作即可</p>
<p>经实测这个方法优化的效果<strong>十分明显</strong>，具体证明则是玄学</p>
<h4 id="素数判定法"><a href="#素数判定法" class="headerlink" title="素数判定法"></a>素数判定法</h4><h5 id="Miller-Robin判素法"><a href="#Miller-Robin判素法" class="headerlink" title="Miller-Robin判素法"></a>Miller-Robin判素法</h5><p>具体操作方法的讲解网上应该已经很多了，本处暂略，时间复杂度：$O( \log n)$，适合大数判素或多组询问</p>
<h3 id="黑科技公式"><a href="#黑科技公式" class="headerlink" title="黑科技公式"></a>黑科技公式</h3><h4 id="下取整累积公式"><a href="#下取整累积公式" class="headerlink" title="下取整累积公式"></a>下取整累积公式</h4><script type="math/tex; mode=display">\frac{\left\lfloor\frac{x}{n}\right\rfloor}{k} = \left\lfloor\frac{x}{nk}\right\rfloor</script><p>可以用下文的下取整不等式证明</p>
<h4 id="取模公式"><a href="#取模公式" class="headerlink" title="取模公式"></a>取模公式</h4><script type="math/tex; mode=display">k \bmod n = k - n * \left\lfloor\frac{k}{n}\right\rfloor</script><p>这个公式很重要，在许多只有取模存在的式子中，这个公式往往是解题的关键</p>
<h4 id="调和级数定理"><a href="#调和级数定理" class="headerlink" title="调和级数定理"></a>调和级数定理</h4><script type="math/tex; mode=display">\sum_{d=1}^{N}\frac{N}{d}=N\log N</script><script type="math/tex; mode=display">\sum_{d=1}^{N}\sqrt{\frac{N}{d}}=N</script><p>可以用微积分证明</p>
<h4 id="异或不等式"><a href="#异或不等式" class="headerlink" title="异或不等式"></a>异或不等式</h4><script type="math/tex; mode=display">\left | a - b \right | \leq a \oplus b  \leq a + b</script><p>把异或运算转化为代数表达</p>
<h4 id="分块公式"><a href="#分块公式" class="headerlink" title="分块公式"></a>分块公式</h4><p>我们现在已知$x$和$n$，要求最大的$y$满足</p>
<script type="math/tex; mode=display">\left\lfloor\frac{n}{x}\right\rfloor = \left\lfloor\frac{n}{y}\right\rfloor</script><p>那么</p>
<script type="math/tex; mode=display">y = \left\lfloor\frac{n}{ \left\lfloor\frac{n}{x}\right\rfloor }\right\rfloor</script><h4 id="上-下取整不等式"><a href="#上-下取整不等式" class="headerlink" title="上/下取整不等式"></a>上/下取整不等式</h4><script type="math/tex; mode=display">\left\lfloor\frac{n}{x}\right\rfloor = t \Leftrightarrow t * x \leq n < (t + 1) * x</script><script type="math/tex; mode=display">\left\lceil\frac{n}{x}\right\rceil = t \Leftrightarrow (t - 1) * x < n \leq t * x</script><p>还有什么呢？到时候再说吧。。。</p>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="ST表"><a href="#ST表" class="headerlink" title="ST表"></a>ST表</h3><h4 id="计算极值覆盖区"><a href="#计算极值覆盖区" class="headerlink" title="计算极值覆盖区"></a>计算极值覆盖区</h4><p>极值覆盖区，就是一个元素作为一个区间里的极值时，这个满足条件的区间的范围，或者是对于一个元素来说，如果它是作为最大值出现的，那么我们需要找到它左端第一个大于它的元素的位置以及右端第一个大于它的元素的位置</p>
<p>我们可以这样表示这个范围，对于第$i$个元素，我们用$l[i]$表示$i$能覆盖的最左端，$r[i]$表示$i$能覆盖的最右端</p>
<p>那么，对于所有满足$l[i] \leq l \leq i$并且$i \leq r \leq r[i]$的区间$[l, r]$来说，第$i$个元素的值都是这个区间里的极值</p>
<p>我们对于这个问题，可以使用二分+线段树在$O(log^2n)$的时间内处理每一个元素的覆盖区间，但是这显然太弱了是不是？</p>
<p>我们可以考虑使用ST表来优化这个问题的复杂度，我们可以用$O(n \log n)$的复杂度预处理ST表，然后对于每个元素使用$O(\log n)$的复杂度求出边界，这样总共的复杂度就是$O(n \log n)$的，编程复杂度远低于上面的那个方法</p>
<p>其实这个问题还有一个$O(n)$的方法，然而我刚想到。。。所以就在下面说吧</p>
<p>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> le[maxn][bit];</div><div class="line"><span class="keyword">int</span> ri[maxn][bit];</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    rep(i, <span class="number">1</span>, n) le[i][<span class="number">0</span>] = line[i], ri[i][<span class="number">0</span>] = line[i];</div><div class="line">    rep(i, <span class="number">1</span>, n) rep(j, <span class="number">1</span>, bit - <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (i - two[j - <span class="number">1</span>] &gt;= <span class="number">1</span>) le[i][j] = min(le[i - two[j - <span class="number">1</span>]][j - <span class="number">1</span>], le[i][j - <span class="number">1</span>]);</div><div class="line">        <span class="keyword">else</span> le[i][j] = -INF;</div><div class="line">        <span class="keyword">if</span> (i + two[j - <span class="number">1</span>] &lt;= n) ri[i][j] = min(ri[i + two[j - <span class="number">1</span>]][j - <span class="number">1</span>], ri[i][j - <span class="number">1</span>]);</div><div class="line">        <span class="keyword">else</span> ri[i][j] = -INF;</div><div class="line">    &#125;<span class="comment">//初始化ST表</span></div><div class="line">    rep(i, <span class="number">1</span>, n)&#123;</div><div class="line">        <span class="keyword">int</span> x = i;</div><div class="line">        <span class="keyword">int</span> y = i;</div><div class="line">        <span class="keyword">int</span> op = line[i];</div><div class="line">        per(j, bit - <span class="number">1</span>, <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (le[x][j] &gt;= op) x -= two[j];</div><div class="line">            <span class="keyword">if</span> (ri[y][j] &gt;= op) y += two[j];</div><div class="line">        &#125;</div><div class="line">        l[i] = x + <span class="number">1</span>, r[i] = y - <span class="number">1</span>;</div><div class="line">    &#125;<span class="comment">//通过ST表不断跳跃寻找边界</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码还是十分简单的</p>
<h3 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h3><h4 id="计算极值覆盖区-1"><a href="#计算极值覆盖区-1" class="headerlink" title="计算极值覆盖区"></a>计算极值覆盖区</h4><p>接着ST表那里的讲解，这里有一个利用单调栈进行$O(n)$处理的玩法</p>
<p>假设每个元素是作为最大值出现的，我们先考虑求出每个位置的$i$的$r[i]$，我们维护一个单调递减的单调栈，从左扫到右，每次扫到一个元素，把所有小于这个元素的元素弹出，并把它们的$r[i]$记录为当前扫到的位置减一，然后我们把扫到的这个元素加入栈中，继续上述扫描，然后就可以求出所有的$r[i]$啦</p>
<p>关于正确性的证明，显然是对的啊。。。于是复杂度就都是$O(n)$了，又明显优于ST表的做法，而且达到了理论下界</p>
<p><del>不要和我说可以用一些已经推出的元素推导未知的来达到更优的复杂度，那样没什么意义。。。至少对于这个问题来说是这样，因为这个问题本身往往只是一个子问题，不值得使用过于复杂的处理</del></p>
<p><del>果然还是这样探究问题的未知的更优答案，能使人有更大的成就感啊</del></p>
<p>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    rep(i, <span class="number">1</span>, n)&#123;</div><div class="line">        <span class="keyword">int</span> op = line[i];</div><div class="line">        <span class="keyword">while</span> (!s.empty() &amp;&amp; line[s.top()] &gt; op) r[s.top()] = i - <span class="number">1</span>, s.pop(); </div><div class="line">        s.push(i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (!s.empty()) r[s.top()] = n, s.pop(); </div><div class="line">    per(i, n, <span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">int</span> op = line[i];</div><div class="line">        <span class="keyword">while</span> (!s.empty() &amp;&amp; line[s.top()] &gt; op) l[s.top()] = i + <span class="number">1</span>, s.pop(); </div><div class="line">        s.push(i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (!s.empty()) l[s.top()] = <span class="number">1</span>, s.pop(); </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码又简单了一些。。。</p>
<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h3 id="枚举子集"><a href="#枚举子集" class="headerlink" title="枚举子集"></a>枚举子集</h3><p>这里有一个十分简洁高上的写法:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = S; x; x = (x - <span class="number">1</span>) &amp; S)&#123;</div><div class="line">    <span class="comment">//do something...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>感觉证明非常简单，首先，我们可以考虑$S$的二进制没有零的特殊情况，这样我们就相当于从$S$不断地减一，一直减到零，那么中间经过的这些数值很显然肯定是$S$的子集，如果$S$的二进制表示中有零存在，那么我们每次进行一个与操作，相当于是直接跳过了$S$的某一位为零，而$x$的那一位却为$1$的不合法情况，由于跳过的这些情况都是比剩下的所有合法情况数值要大的（看成十进制的数值），所以我们不会跳过合法情况</p>
<p>这样，就相当于我们的$x$经过且仅经过了所有合法的情况，这样就是对$S$的子集枚举啦</p>
<h2 id="编程相关"><a href="#编程相关" class="headerlink" title="编程相关"></a>编程相关</h2><h3 id="常数优化"><a href="#常数优化" class="headerlink" title="常数优化"></a>常数优化</h3><h4 id="适当运用register关键字"><a href="#适当运用register关键字" class="headerlink" title="适当运用register关键字"></a>适当运用register关键字</h4><p><code>register</code>关键字的作用是将后面声明的变量放入系统CPU的寄存器中，使得变量的操作速度快得飞起，但是我们<strong>只能将<code>int</code>类型的单个变量</strong>用这种方法声明，由于系统寄存器很小，所以建议不要同时对超过三个<code>int</code>变量进行<code>register</code>声明，否则反而会降低运行速度</p>
<p>所以，我们采取用完回收的原则，可以宏定义一种优化的<code>for</code>循环语句：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++)</span></div></pre></td></tr></table></figure></p>
<p>然后以后用<code>rep(i, l, r)</code>代替<code>for</code>循环就行了，实测可以大幅提高程序运行速度</p>
<h3 id="内存优化"><a href="#内存优化" class="headerlink" title="内存优化"></a>内存优化</h3><h4 id="减少额外占用"><a href="#减少额外占用" class="headerlink" title="减少额外占用"></a>减少额外占用</h4><p>实测发现，在使用较多的<code>#include</code>语句以及使用这个语句<code>using namespace std;</code>时，我们的程序会产生许多的额外内存开销，这对于卡内存的题目而言是非常不利的</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;在这神秘的光芒背后，有着怎样的奥秘？（纯胡扯&lt;br&gt;
    
    </summary>
    
    
      <category term="黑科技" scheme="https://goseqh.tk/tags/%E9%BB%91%E7%A7%91%E6%8A%80/"/>
    
  </entry>
  
  <entry>
    <title>【置顶】编程错误汇总</title>
    <link href="https://goseqh.tk/2018/09/09/%E3%80%90%E7%BD%AE%E9%A1%B6%E3%80%91%E7%BC%96%E7%A8%8B%E9%94%99%E8%AF%AF%E6%B1%87%E6%80%BB/"/>
    <id>https://goseqh.tk/2018/09/09/【置顶】编程错误汇总/</id>
    <published>2018-09-09T07:17:39.000Z</published>
    <updated>2017-12-12T08:53:58.409Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>妙妙妙妙不可言&lt;（￣︶￣）/<br><a id="more"></a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大概就是许多常见错误的汇总，每次考试前仔细的看一看，认真地记一记，应该会有很大的好处</p>
<p>注意，下面的每个错误都很重要，时间允许的话一定要一字一字地看！</p>
<h1 id="语法类"><a href="#语法类" class="headerlink" title="语法类"></a>语法类</h1><h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h2><ul>
<li><p><strong>随时都要注意是否应该使用更大的数据类型以防止溢出</strong>，这一点至关重要</p>
<ul>
<li>常见的需要用到<code>long long int</code>的地方<ul>
<li>算术表达式里面的计算中间结果</li>
<li>与取模有关的几乎所有题目</li>
<li>对程序计算答案的累计（即最终结果）</li>
<li>对于满足条件的n元组个数的统计</li>
<li>组合数学相关题目</li>
<li>一些数据范围很大的数论题以及需要用到杜教筛的数论题</li>
<li>总之每次都仔细的判断一下，程序完成后特别考虑一下这个问题，应该就没问题了</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>随时都要注意是否由于使用了较大的数据类型导致内存超限</strong></p>
</li>
<li><p><strong>注意输入输出是否使用了正确的类型表标识符</strong></p>
</li>
</ul>
<h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><ul>
<li><strong>注意内外层循环变量的冲突</strong></li>
<li>注意内部语句循环变量的正确使用</li>
<li>注意循环变量与全局变量（循环外部变量）的冲突</li>
</ul>
<h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><ul>
<li>注意if…else的对应性，不要把内层的if对应到外层的else上，为避免这一错误可多使用’{}’</li>
<li>注意<gqh style="font-family:Goseqh;color:red">运算符的优先级</gqh></li>
</ul>
<h2 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h2><ul>
<li>保险起见，在每个分支后面加上break;</li>
</ul>
<h2 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h2><ul>
<li><gqh style="font-family:Goseqh;color:red">严重问题:注意宏定义的不安全性</gqh>，代码示例如下：</li>
</ul>
<p>我们想计算$(a + b) * c$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> A a + b</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a, b, c;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;c);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, A * c);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但这样做的结果是$a + b * c$<br>要想得到正确结果，多使用’()’：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> A (a + b)</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a, b, c;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;c);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, A * c);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h2><ul>
<li><p style="font-family:verdana;color:orange">尽可能避免在任何STL中存放比较方法定义与外部数组存在关联的元素，否则会导致排序紊乱产生错误</p>

</li>
</ul>
<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><ul>
<li><p style="font-family:verdana;color:red">严重问题：绝对不要使用STL的二分查找功能来查找set中的元素，只能使用set自带的二分查找成员函数，否则会导致严重的TLE问题</p>

</li>
</ul>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><ul>
<li>不要在未对要访问的map键值赋值的情况下访问它，否则会RE</li>
</ul>
<h3 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h3><ul>
<li>注意cmp的定义方法：当$a$比$b$优先级小的时候返回true</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span>&#123;</span></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> a &lt; b;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, cmp&gt; p;</div></pre></td></tr></table></figure>
<p>$p$是一个大根堆</p>
<h3 id="lower-bound-upper-bound"><a href="#lower-bound-upper-bound" class="headerlink" title="lower_bound/upper_bound"></a>lower_bound/upper_bound</h3><ul>
<li><p><gqh style="font-family:verdana;color:red">严重问题：绝对不要使用这两个函数来查找set中的元素，只能使用set自带的二分查找成员函数，否则会导致严重的TLE问题</gqh>，本处再强调一遍</p>
</li>
<li><gqh style="font-family:verdana;color:orange">注意这两个二分查找函数只能作用于一个有序数组，即已经排好序的数组，而不能是任意数组（二分算法本身也要求有序...）</gqh>

</li>
</ul>
<h1 id="算法类"><a href="#算法类" class="headerlink" title="算法类"></a>算法类</h1><h2 id="前缀和-积"><a href="#前缀和-积" class="headerlink" title="前缀和/积"></a>前缀和/积</h2><ul>
<li>不要使最开头累加/乘的操作访问不该访问的内存</li>
<li>如果是求前缀积，一定不要忘记第一个元素应该手动设为$1$</li>
</ul>
<h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><ul>
<li>注意不要忘记每次对幂数进行的右移操作，否则会TLE（当然，这个本地也是很容易测试出来的，但可能会不知道问题出在哪里）</li>
<li><gqh style="font-family:verdana;color:red">严重问题：注意绝对不要使幂数为一个负数</gqh>，如果容易出现此错误，最好提前判断一下</li>
<li>在取模的题目中，不要忘记每次乘法都是需要取模的</li>
</ul>
<h2 id="动态规划（DP）"><a href="#动态规划（DP）" class="headerlink" title="动态规划（DP）"></a>动态规划（DP）</h2><ul>
<li><p>在边界值问题上要特别注意，边界值需要经过计算与论证方可确定</p>
</li>
<li><p>注意情况讨论的不充分或是相互重叠的问题</p>
</li>
<li><p>在取模的问题中时刻记住对结果及时进行取模处理</p>
</li>
</ul>
<ul>
<li><gqh style="font-family:verdana;color:red">严重问题：在记忆化搜索时，时刻记住在跳出当前计算层之前把vis数组设置为$true$，否则会导致严重的TLE问题</gqh>
</li>
<li><p>DP的状态转移不能存在环，否则需要使用最短路式更新法</p>
</li>
</ul>
<ul>
<li><gqh style="font-family:verdana;color:orange">注意：在题目卡常时，要将递归形式的DP改造为迭代形式，以大幅提高运行速度</gqh>

</li>
</ul>
<h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><ul>
<li>注意有些时候边与点数目的差异会很大，不要直接对存储点与边的数组直接使用相同大小的宏定义进行声明</li>
</ul>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="字典树-Trie"><a href="#字典树-Trie" class="headerlink" title="字典树(Trie)"></a>字典树(Trie)</h3><ul>
<li><gqh style="font-family:verdana;color:red">严重问题：时刻注意Trie的空间占用大小并非$O(n)$而是$O(n\log n)$</gqh>，要计算后声明足够的内存空间，同时<gqh style="font-family:verdana;color:orange">防止内存超过限制</gqh>


</li>
</ul>
<h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h3><ul>
<li><gqh style="font-family:verdana;color:red">严重问题：注意不要让查询的区间为不合法区间</gqh>，否则会RE，这种错误往往比较隐蔽，所以可能出现此情况时最好提前判断一下</li>
<li><p>注意线段树的基本架构不要写错：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Operate</span> <span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="comment">//pushdown(l, r, o);</span></div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        <span class="comment">//do something</span></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) Operate(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) Operate(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><gqh style="font-family:verdana;color:orange">有的时候，当题目卡常数时，我们需要把线段树改写为迭代形式，以加快运行速度</gqh>

</li>
</ul>
<h3 id="可持久化线段树-主席树"><a href="#可持久化线段树-主席树" class="headerlink" title="可持久化线段树/主席树"></a>可持久化线段树/主席树</h3><ul>
<li><gqh style="font-family:verdana;color:red">严重问题：时刻注意可持久化线段树/主席树的空间占用大小并非$O(n)$而是$O(n\log n)$</gqh>，要计算后声明足够的内存空间，同时<gqh style="font-family:verdana;color:orange">防止内存超过限制</gqh>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;妙妙妙妙不可言&amp;lt;（￣︶￣）/&lt;br&gt;
    
    </summary>
    
    
      <category term="编程错误" scheme="https://goseqh.tk/tags/%E7%BC%96%E7%A8%8B%E9%94%99%E8%AF%AF/"/>
    
  </entry>
  
  <entry>
    <title>北方的冬天，真的很冷</title>
    <link href="https://goseqh.tk/2017/12/12/%E5%8C%97%E6%96%B9%E7%9A%84%E5%86%AC%E5%A4%A9%EF%BC%8C%E7%9C%9F%E7%9A%84%E5%BE%88%E5%86%B7/"/>
    <id>https://goseqh.tk/2017/12/12/北方的冬天，真的很冷/</id>
    <published>2017-12-12T05:57:56.000Z</published>
    <updated>2017-12-12T07:07:24.442Z</updated>
    
    <content type="html"><![CDATA[<link href="/style.css" rel="stylesheet" type="text/css"><script src="/crypto-js.js"></script><script src="/mcommon.js"></script><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" The password is utilized to forbid any unadmitted accesses. "/> <label for="pass"> The password is utilized to forbid any unadmitted accesses. </label> <div class="bottom-line"></div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      Coldest Winter in North.
    
    </summary>
    
    
      <category term="感悟" scheme="https://goseqh.tk/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>Renatus的模板库</title>
    <link href="https://goseqh.tk/2017/12/10/Renatus%E7%9A%84%E6%A8%A1%E6%9D%BF%E5%BA%93/"/>
    <id>https://goseqh.tk/2017/12/10/Renatus的模板库/</id>
    <published>2017-12-10T12:11:29.000Z</published>
    <updated>2017-12-12T10:39:28.914Z</updated>
    
    <content type="html"><![CDATA[<link href="/style.css" rel="stylesheet" type="text/css"><script src="/crypto-js.js"></script><script src="/mcommon.js"></script><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" Welcome to my blog, enter password to read. "/> <label for="pass"> Welcome to my blog, enter password to read. </label> <div class="bottom-line"></div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      Renatus&#39;s Template Storage.
    
    </summary>
    
    
      <category term="模板" scheme="https://goseqh.tk/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>概率与期望类问题总结</title>
    <link href="https://goseqh.tk/2017/12/10/%E6%A6%82%E7%8E%87%E4%B8%8E%E6%9C%9F%E6%9C%9B%E7%B1%BB%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>https://goseqh.tk/2017/12/10/概率与期望类问题总结/</id>
    <published>2017-12-10T12:10:51.000Z</published>
    <updated>2017-12-12T10:43:55.065Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p><del>最近研究了一下概率论</del>，感觉比较有感想，于是又做了几道题练习了一下，于此文记之<br><a id="more"></a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在概率与期望问题中，我们大概有如下几种方法，分别用于不同的问题：</p>
<ul>
<li>贡献法（绝对是最常用的）&amp; 隔离法</li>
<li>高斯消元解方程组（特定题目）</li>
<li>概率/期望DP</li>
</ul>
<p>相关内容：</p>
<ul>
<li>期望的线性可加性（较难的题目，不只限于贡献法）</li>
<li>期望的独立可乘性（还没遇到…)</li>
<li>概率论基本理论（也是一种思想，做题时回归理论本身）</li>
</ul>
<h2 id="概率论基础知识"><a href="#概率论基础知识" class="headerlink" title="概率论基础知识"></a>概率论基础知识</h2><p>个人认为，做概率方面的问题，我们需要回归基本概念，思考问题的本质，所以下面先讲解一下概率论的基础内容</p>
<p><strong>注意：下面的定义或含义纯属口胡，应该不是标准定义，只是为了便于理解，请体会精神</strong></p>
<h3 id="试验"><a href="#试验" class="headerlink" title="试验"></a>试验</h3><ul>
<li><p>我们常常在生活中做“试验”，一个试验是针对一个随机体系而言的，我们每次抛出一枚硬币，观察其正反面情况，这个是一种试验；我们买彩票，最后开奖时观察结果，是中了还是没中，这也是一种试验</p>
</li>
<li><p>试验，就是我们对一个随机现象进行实践，然后得到一个随机结果的过程</p>
</li>
</ul>
<h3 id="样本空间与样本点"><a href="#样本空间与样本点" class="headerlink" title="样本空间与样本点"></a>样本空间与样本点</h3><ul>
<li><p>样本空间就是我们在一个特定试验中我们能得到的所有可能随机结果的集合，这个集合里面可以是任何东西，而不仅仅一定是数</p>
</li>
<li><p>样本点就是样本空间内的单个元素</p>
</li>
</ul>
<h3 id="事件与基本事件"><a href="#事件与基本事件" class="headerlink" title="事件与基本事件"></a>事件与基本事件</h3><ul>
<li><p>我们常常需要研究带有特定性质的元素集合的规律性，所以一个事件就是一个满足给定条件的样本点的集合，也即样本空间的子集（可以为空）</p>
</li>
<li><p>基本事件则是由单个样本点构成的集合，即大小为$1$的集合</p>
</li>
<li><p>事件$A$的发生概率可以表示为$P[A]$</p>
</li>
</ul>
<h3 id="事件的运算"><a href="#事件的运算" class="headerlink" title="事件的运算"></a>事件的运算</h3><p>其实就是直接考虑集合的运算就可以惹…</p>
<ul>
<li><p>我们把$A = \bigcup_{i \in S}A_i$中的$A$称为$A_i$们的<strong>和事件</strong>，它表示只要事件$A_i$中有至少一个发生，那么事件$A$发生</p>
</li>
<li><p>我们把$A = \bigcap_{i \in S}A_i$中的$A$称为$A_i$们的<strong>积事件</strong>，它表示只有事件$A_i$全部同时发生，事件$A$才发生</p>
</li>
<li><p>我们把$A = S - T$中的$A$称为$S$与$T$的<strong>差事件</strong>，它表示只有事件$S$发生且$T$不发生，事件$A$才发生</p>
</li>
</ul>
<h3 id="概率"><a href="#概率" class="headerlink" title="概率"></a>概率</h3><ul>
<li>我们在随机试验背后发现的统计规律性，即一个结果出现次数在试验次数趋于正无穷时的稳定值除以试验次数得到的$[0, 1]$之间的实数，简单点理解就是一个结果出现的量化可能性</li>
</ul>
<h3 id="随机变量和分布列（律）"><a href="#随机变量和分布列（律）" class="headerlink" title="随机变量和分布列（律）"></a>随机变量和分布列（律）</h3><ul>
<li><p>它其实不是变量，而更像是一个映射（函数）</p>
</li>
<li><p>我们把样本空间内的每个元素对应到<strong>一个</strong>实数上，这个对应关系就是随机变量，随机变量的取值只能为实数，而不是任意的什么东西，这是为了方便问题的研究而引入的</p>
</li>
<li><p>显然，由于样本空间中的每个元素有一定概率出现，所以随机变量的每个值也都是有一定概率出现的，我们把随机变量的每种不同取值与其出现概率放在一起，就构成了这个随机变量的分布列（律）</p>
</li>
<li><p>我们常用$X$,$Y$等大写字母代表一个随机事件</p>
</li>
<li><p>我们可以直接用$X = x$（$x$为一个确定数值）表示一个事件，这个事件里面包含所有使得$X = x$的样本点</p>
</li>
<li><p>类比事件的发生概率表示方法，我们用$P[X = x]$代表随机变量$X$取值为$x$的概率</p>
</li>
</ul>
<h3 id="随机变量的离散性"><a href="#随机变量的离散性" class="headerlink" title="随机变量的离散性"></a>随机变量的离散性</h3><ul>
<li><p>比如，我们有一个随机变量$X$，它的取值为${1, 2, 3.2, 4.1, 5}$，是有限个数值，我们称之为<strong>有限离散</strong>，$X$满足离散性</p>
</li>
<li><p>又比如，我们有一个随机变量$X$，它的取值为${1, 2, 3, \cdots}$，虽然是无限个数值，但它们可以被我们一一列举（只要你想），那么我们称之为<strong>无限可数离散</strong>，$X$满足离散性</p>
</li>
<li><p>而如果，我们有一个随机变量$X$，它的取值为$[0, 1]$，是无限个数值，而且其中的数值你无法列举出来，那么$X$不满足离散性</p>
</li>
</ul>
<h3 id="随机变量的期望"><a href="#随机变量的期望" class="headerlink" title="随机变量的期望"></a>随机变量的期望</h3><ul>
<li><p><strong>随机变量的期望</strong>说明，期望只有定义在一个确切的随机变量上才有意义，但是我们常常简称为期望</p>
</li>
<li><p>期望表明了随机变量在平均状态下的取值是什么，即有这个公式:</p>
</li>
<li><script type="math/tex; mode=display">E[X] = \sum_{x \in X} P[X = x] * x</script></li>
<li><p>其中$E[x]$即为随机变量$X$的期望</p>
</li>
</ul>
<p>大概的基础知识就是这么多，下面进入其他问题的讲解</p>
<h2 id="期望的性质"><a href="#期望的性质" class="headerlink" title="期望的性质"></a>期望的性质</h2><p>首先讲一下期望的两个性质：线性可加性， 独立可乘性</p>
<h3 id="期望的线性可加性"><a href="#期望的线性可加性" class="headerlink" title="期望的线性可加性"></a>期望的线性可加性</h3><p>我们在知道了随机变量$A$与$B$的期望以后，我们如果想知道$A + B$的期望，那么有：</p>
<script type="math/tex; mode=display">E[A + B] = E[A] + E[B]</script><p>而且，我们允许$A$与$B$不独立</p>
<p>什么是互不独立呢？直接解释可能不是很容易，那么我们看一看不独立时是什么样子的，比如有两枚硬币$A$和$B$，$A$正反面概率相同，我们先把$A$抛出，如果$A$是正面，那么我们再抛出$B$，此时$B$的正反面概率也相同，而如果$A$是反面，那么$B$会由于某种奥妙重重的原因而一定是正面，这个时候，我们就会发现$B$在某些情况下是会受到$A$的结果的干扰的</p>
<p>但是期望的线性可加性允许我们直接计算$A$与$B$两者正面朝上的概率然后加在一起，可以知道，得到的结果是$0.5 + 0.75 = 1.25$</p>
<p>而通过计算每个样本点的随机变量值及其概率，进行累加，我们发现，正确答案正是$1.25$</p>
<p>说明随机变量不独立的时候也可以使用期望的线性可加性</p>
<h3 id="期望的独立可乘性"><a href="#期望的独立可乘性" class="headerlink" title="期望的独立可乘性"></a>期望的独立可乘性</h3><p>我们在知道了随机变量$A$与$B$的期望以后，我们如果想知道$A * B$的期望，那么有：</p>
<script type="math/tex; mode=display">E[A * B] = E[A] * E[B]</script><p>此时，我们要求$A$与$B$必须互不独立</p>
<p>这是为什么呢？我们还是用上面的那个例子来研究这个问题</p>
<p>我们要求的$A * B$，其实就是只有$A$与$B$都是正面时才为$1$，否则就是$0$</p>
<p>那么我们可以通过$E[A] * E[B]$得到答案为$0.5 * 0.75 = 0.375$</p>
<p>但事实上呢？我们再次直接计算所有样本点得到绝对的正确答案，这个答案是$0.25$</p>
<p>这说明独立可乘性要求<strong>随机变量的互相独立</strong></p>
<p>关于这一点的证明，我们需要继续理解条件概率的有关内容以及随机变量独立的含义，简单说就是我们可以把每个随机变量用随机变量的期望公式进行展开，然后$A*B$的每个项都是包含分别属于两个随机变量的取值概率乘积的，相当于两个事件的概率乘积，而这个乘积等于这两个事件同时发生的概率当且仅当这两个事件独立（此处需关联条件概率的有关内容），所以如果事件不独立就会出现问题</p>
<p>如果我们把例子换成两个普通的互不干扰的硬币，可以发现，这个公式是成立的</p>
<h2 id="一些小模型"><a href="#一些小模型" class="headerlink" title="一些小模型"></a>一些小模型</h2><p>突然想起来了一些常用的小模型，这些小模型会广泛应用于之后的题目中</p>
<h3 id="排列先后模型"><a href="#排列先后模型" class="headerlink" title="排列先后模型"></a>排列先后模型</h3><p>如果我们现在有$n$个不同元素，这$n$个元素会形成一个排列，而且结果为每个排列的概率是相同的</p>
<p>那么我们知道，对于两个元素来说，其中一个元素在另一个前面的概率为$0.5$</p>
<p>这个可以通过组合计数统计各自占有的样本点数量来证明</p>
<h3 id="最先删除模型"><a href="#最先删除模型" class="headerlink" title="最先删除模型"></a>最先删除模型</h3><p>一条链，有$n$个点，我们每次在上面等概率删除一个点，然后把这条链分成两个链，那么对于一条连续的长度为$l$的子链来说，其中一个点最先被删除的概率为$\frac{1}{l}$</p>
<p>这应该显然。。。</p>
<h3 id="概率论的容斥原理"><a href="#概率论的容斥原理" class="headerlink" title="概率论的容斥原理"></a>概率论的容斥原理</h3><p>由于事件的本质是样本点的集合，所以我们可以对事件应用容斥原理(其中$A_1, A_2, \cdots $是事件)：</p>
<script type="math/tex; mode=display">\bigcup_{i \in S}A_i = \sum_{T \subset S} (-1)^{|T| + 1}\bigcap_{i \in T} A_i</script><p>由此我们可以进一步得到：</p>
<script type="math/tex; mode=display">P[\bigcup_{i \in S}A_i] = \sum_{T \subset S} (-1)^{|T| + 1}P[\bigcap_{i \in T} A_i]</script><p>这说明<strong>我们在计算一些事件的概率的时候，可以把它拆成若干个子事件的和事件，然后运用容斥原理来解决它</strong></p>
<p>又由于使随机变量等于某个值的样本点也构成了集合，所以我们也可以对随机变量应用容斥原理：</p>
<script type="math/tex; mode=display">\bigcup_{i \in S}(X_i \geq x) = \sum_{T \subset S} (-1)^{|T| + 1}\bigcap_{i \in T} (X_i \geq x)</script><p>而如果我们定义$MAX[X_1, X_2, \cdots]$为随机变量$X_1, X_2, \cdots$中的最大值，$MIN[X_1, X_2, \cdots]$为随机变量$X_1, X_2, \cdots$中的最小值，那么我们有：</p>
<script type="math/tex; mode=display">(MAX_{i \in S} [X_i] \geq x)= \sum_{T \subset S} (-1)^{|T| + 1}(MIN_{i \in T}[X_i] \geq x)</script><p>想一想，为什么？（可以根据<strong>事件的运算</strong>相关知识来进行思考）</p>
<p>那么，当所有的随机变量都离散的时候，我们不妨把它们能取到的值都离散到自然数集上，即$[0, 1, 2, \cdots]$，那么我们每次令$y = x$，$y’ = x + 1$，然后用$y$和$y’$带入上面的公式，再对这两个得到的式子作差，则有：</p>
<script type="math/tex; mode=display">(MAX_{i \in S} [X_i] = x)= \sum_{T \subset S} (-1)^{|T| + 1}(MIN_{i \in T}[X_i] = x)</script><p>不失一般性，可以得到：</p>
<script type="math/tex; mode=display">MAX_{i \in S} [X_i]= \sum_{T \subset S} (-1)^{|T| + 1}MIN_{i \in T}[X_i]</script><p>这就是我们最后想要的结果</p>
<p>注意，上面的公式只能应用于<strong>随机变量全都离散</strong>的时候，如果不离散…好像也没有那样的OI题是吧…</p>
<p>这个公式在CLJ (Orz! Orz!)的讲课中提到过，但是当时我一脸懵逼…上面就相当于证明了一遍那个式子吧</p>
<p>（上面的那个式子两侧都是随机变量，相当于一种随机变量的等价运算，不关乎每个随机变量的特殊值，不明白可以好好的理解一下）</p>
<h2 id="贡献法-amp-隔离法"><a href="#贡献法-amp-隔离法" class="headerlink" title="贡献法 &amp; 隔离法"></a>贡献法 &amp; 隔离法</h2><h3 id="贡献法"><a href="#贡献法" class="headerlink" title="贡献法"></a>贡献法</h3><p>这个方法应该是比较简单的，需要注意的是<strong>贡献法这个思想本身十分重要</strong>，它还可以用于其他的一些问题上</p>
<p>我们在一些问题中，发现问题所要求的答案并不容易求出来，而单个元素在与答案一致的层面上的贡献我们比较容易求出，那么我们可以根据期望的线性可加性来对单个元素的贡献进行累加，最后就是答案了</p>
<p>这个过程中，我们需要注意，根据上面的对期望性质的分析，一个元素的贡献<strong>不必与其他贡献独立</strong>，即当前这个随机变量的分布律可以与其他的随机变量的分布律不独立</p>
<p>我们可以这样运用贡献法：我们把一个元素做出的贡献定义为一个随机变量，那么我们就需要知道这个随机变量在做出不同贡献时<strong>需要满足的条件是什么</strong>，然后进一步分析<strong>得到此时的概率</strong>，像这样求出该变量的分布律，最后再使用随机变量期望公式计算即可</p>
<p>贡献法的考察单位<strong>可以包含多个元素</strong>，然后累加所有这样的多元组的贡献，也能得到最后的答案</p>
<h3 id="隔离法"><a href="#隔离法" class="headerlink" title="隔离法"></a>隔离法</h3><p>隔离法，可以类比高中物理的相关题目分析方法，我们把无关的变量/条件/元素舍去，只考虑有关元素之间的联系以便于计算</p>
<p>我们在使用贡献法的时候，经常需要屏蔽掉没有用的元素，比如考虑多元组的贡献的时候</p>
<p>即便是在计算单个元素贡献的时候，我们常常也只需要保留那些会影响当前元素贡献的元素，然后在它们之间进行进一步计算</p>
<p>我们下面来看几道题目体会一下：</p>
<h2 id="概率-期望DP"><a href="#概率-期望DP" class="headerlink" title="概率/期望DP"></a>概率/期望DP</h2><p>我们也可以使用DP来进行问题的解决，基本思想方法可以参见DP的常用思想、处理方法，我们使用这个方法时需要注意思考如何定义便于转移的随机变量，然后使用DP进行推导</p>
<p>其实，<strong>概率问题本身就是计数问题</strong>，只不过我们人为地给每个方案增加了一个权值，然后我们去计算这个权值的有关信息</p>
<p><strong>更重要的是：我们需要确保在概率相乘的地方这两个概率背后的事件是独立的</strong>，这一点其实大多数时候都很难进行判定，我们只有回归到事件在样本空间中的涵盖情况才能真正准确地判断它们是否独立，所以一定要认真谨慎地思考问题！</p>
<p>下面举几个例子：</p>
<h2 id="高斯消元法"><a href="#高斯消元法" class="headerlink" title="高斯消元法"></a>高斯消元法</h2><p>有一些题目，我们可以发现状态的转移存在环，而题目中的相关状态数并不多，那么我们可以考虑列出所有可能的转移，把它们看成方程组，然后使用高斯消元方法进行解决，得到每一项的值，经过处理得到最终答案</p>
<p><strong>注意高斯消元的正确写法</strong>，建议采用高斯-约当消元法</p>
<p>这种题大部分比较套路，只要知道大致处理方法即可，在数据范围较大时需考虑优化状态表示或者是更换算法</p>
<p>下面有两道题：</p>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;&lt;del&gt;最近研究了一下概率论&lt;/del&gt;，感觉比较有感想，于是又做了几道题练习了一下，于此文记之&lt;br&gt;
    
    </summary>
    
    
      <category term="概率与期望" scheme="https://goseqh.tk/tags/%E6%A6%82%E7%8E%87%E4%B8%8E%E6%9C%9F%E6%9C%9B/"/>
    
  </entry>
  
  <entry>
    <title>子集和问题详解</title>
    <link href="https://goseqh.tk/2017/11/06/%E5%AD%90%E9%9B%86%E5%92%8C%E9%97%AE%E9%A2%98%E8%AF%A6%E8%A7%A3/"/>
    <id>https://goseqh.tk/2017/11/06/子集和问题详解/</id>
    <published>2017-11-06T01:15:11.000Z</published>
    <updated>2017-12-12T10:42:40.580Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>最近学习了一下CF上某大神写的SOS DP，感觉这不就是FWT吗，然后水了几道题<br><a id="more"></a></p>
<h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1><p>首先，保留作者姓名转载：</p>
<p><img src="http://218.106.205.134/uploads/MATH.png" height="px" width="px"></p>
<p>其实我觉得就是把FWT的过程跑了一遍。。。还只考虑了其中的一个子问题<script type="math/tex">b_i = \sum_{j \& i = i} a_j</script></p>
<p>但是感觉这种DP的思想还是非常好的，就是我们在FWT的合并过程中定义所求数值的含义然后相应地进行转移，使我们更加明确操作的方向</p>
<p>这种方法的缺陷就是<strong>局限性较大</strong>，在FWT理论中，我们不仅会使用FWT，还会使用IFWT进行解码问题的解决，除此以外还有结合起来使用求<strong>位运算卷积</strong>这样的高(S)级(B)玩法，而上面的DP只涉及到了FWT中的一个子问题，理论知识方面有所欠缺</p>
<h1 id="例题详解"><a href="#例题详解" class="headerlink" title="例题详解"></a>例题详解</h1><p>下面是对于上文添加的一些相关题目的详解，最后会对于问题中的常用技巧进行一个总结</p>
<h2 id="Special-Pairs"><a href="#Special-Pairs" class="headerlink" title="Special Pairs"></a>Special Pairs</h2><p><img src="http://218.106.205.134/uploads/SP2.png" height="px" width="px"></p>
<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p><del>首先，我们刚学完了所谓的SOS DP，那么肯定是要用了是吧</del></p>
<p>首先，我们观察这道题目，我们发现熟悉的式子$x \&amp; y = x$不在下标上，而是在元素上，那么我们第一步处理就是元素与下标的互换，把$A_i$当做下标，并相应地把$a[A_i]$增加一（对每个$A_i$都这样做）</p>
<p>然后，我们发现，$i \&amp; j = 0$这个东西本身好像与子集和没有什么关系，于是我们考虑把其中一个操作数取反，那么就变成了$i \&amp;j’ = i$（想一想，为什么？）</p>
<p>这样，我们熟悉的结构就出现了，然后我们直接套用FWT即可解决问题</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1048576</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() ((p1 == p2 &amp;&amp; (p2 = (p1 = buffer) + fread(buffer, 1, maxn, stdin), p1 == p2)) ? EOF : *p1++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">char</span> *p1, *p2;</div><div class="line"><span class="keyword">char</span> buffer[maxn];</div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = gc(); x = <span class="number">0</span>; <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!(<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) &amp;&amp; ch != <span class="string">'-'</span>) ch = gc();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = gc();</div><div class="line">    <span class="keyword">while</span> (<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>, ch = gc();</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> a[maxn];</div><div class="line"><span class="keyword">int</span> two[<span class="number">20</span>];</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//freopen("spe.in", "r", stdin);</span></div><div class="line">    two[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    rep(i, <span class="number">1</span>, <span class="number">19</span>) two[i] = two[i - <span class="number">1</span>] &lt;&lt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> T, x;</div><div class="line">    read(T);</div><div class="line">    <span class="keyword">while</span> (T--)&#123;</div><div class="line">        read(n);</div><div class="line">        rep(i, <span class="number">1</span>, n) read(line[i]), a[maxn - <span class="number">1</span> - line[i]]++;</div><div class="line">        rep(i, <span class="number">0</span>, <span class="number">19</span>) rep(j, <span class="number">0</span>, maxn - <span class="number">1</span>) <span class="keyword">if</span> (!(j &amp; two[i])) a[j] += a[j ^ two[i]]; <span class="comment">//FWT,只有短短的一行...</span></div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        rep(i, <span class="number">1</span>, n) sum += a[line[i]];</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, sum);</div><div class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果上面<strong>那一行</strong>FWT不理解的话，请先进行FWT知识的补充（或者看上文的博客用DP的方法搞也行，本质相同）</p>
<h2 id="Compatible-Numbers"><a href="#Compatible-Numbers" class="headerlink" title="Compatible Numbers"></a>Compatible Numbers</h2><p><img src="http://218.106.205.134/uploads/CN2.png" height="px" width="px"></p>
<h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>我们发现，这个题的意思与上一题完全相同，不同的地方就是答案的统计方法上，我们在这一题中只需要求出任意一个可行解即可</p>
<p>那么，大体思路还是相同的，不同的就是我们每次FWT更新时，不再累加答案，而是判断如果当前这一位置需要累加另一个位置的答案，而且当前这一位置答案为空并且另一位置答案不空的时候，直接把另一位的那个答案copy过来即可</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 4194304</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n; </div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> ans[maxn];</div><div class="line"><span class="keyword">int</span> two[<span class="number">22</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    two[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    rep(i, <span class="number">1</span>, <span class="number">21</span>) two[i] = two[i - <span class="number">1</span>] &lt;&lt; <span class="number">1</span>;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    rep(i, <span class="number">1</span>, n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]), ans[maxn - <span class="number">1</span> - line[i]] = line[i];</div><div class="line">    rep(i, <span class="number">0</span>, <span class="number">21</span>) rep(j, <span class="number">0</span>, maxn - <span class="number">1</span>) <span class="keyword">if</span> (!(j &amp; two[i]) &amp;&amp; !ans[j] &amp;&amp; ans[j ^ two[i]]) ans[j] = ans[j ^ two[i]];</div><div class="line">    rep(i, <span class="number">1</span>, n) &#123;</div><div class="line">        <span class="keyword">if</span> (ans[line[i]]) <span class="built_in">printf</span>(<span class="string">"%d "</span>, ans[line[i]]);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"-1 "</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：所有位运算的操作均作用于下标，同时后面需要添加上一位，而不是继续进行判断性位运算</p>
<h2 id="Vowels"><a href="#Vowels" class="headerlink" title="Vowels"></a>Vowels</h2><p><img src="http://218.106.205.134/uploads/Vowels.png" height="px" width="px"></p>
<h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>这道题让我们求出在所有可能的的讯问中的一些情况，大概就是有多少个单词里面包含询问到的字母，然后对于每个询问，把总答案平方然后异或在一起输出</p>
<p>我第一眼看的时候还挺虚，这时限能过吗。。。然而还是跑得飞快，这告诉我们，$1.6 * 10 ^ 7$的数据也是可以跑$O(n\log n)$的算法的。。。</p>
<p>本题还是采用上面的套路，由于我们的答案基于每个询问，所以询问应该是FWT之后的数组，我们应该把单词的相关信息事先添加进初始数组中</p>
<p>我们发现，如果我们把每个单词在二进制意义下取反，那么一个询问不包含这个单词等价于这个询问是取反后单词的子集，这应该很显然</p>
<p>然后，我们可以得到这样的结构:$x \&amp; y = x$,其中$x$代表询问，这样我们继续套用FWT计算即可</p>
<p>注意我们答案的计算方式，是反向处理的，最后还要先变成$n  - Ans$这种东西，然后再平方异或和即可</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 16777216</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++) </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> a[maxn];</div><div class="line"><span class="keyword">int</span> two[<span class="number">24</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//freopen("vowels.in", "r", stdin);</span></div><div class="line">    <span class="keyword">char</span> s[<span class="number">5</span>];</div><div class="line">    two[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    rep(i, <span class="number">1</span>, <span class="number">23</span>) two[i] = two[i - <span class="number">1</span>] &lt;&lt; <span class="number">1</span>;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="comment">/*rep(i, 1, n) &#123;</span></div><div class="line">        LL now = 0;</div><div class="line">        scanf("%s", s);</div><div class="line">        rep(j, 0, 2) now |= two[(s[j] - 'a')];</div><div class="line">        a[maxn - 1 - now]++;</div><div class="line">    &#125;</div><div class="line">    rep(i, 0, 23) rep(j, 0, maxn - 1) if (!(j &amp; two[i])) a[j] += a[j ^ two[i]];</div><div class="line">    LL ans = 0;</div><div class="line">    //rep(j, 0, maxn - 1) ans += (n - a[j]);</div><div class="line">    rep(j, 0, maxn - 1) ans ^= ((LL)n - a[j]) * (n - a[j]);</div><div class="line">    printf("%I64d", ans);*/</div><div class="line"></div><div class="line">    rep(i, <span class="number">1</span>, n) &#123;</div><div class="line">        LL now = <span class="number">0</span>;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">        rep(j, <span class="number">0</span>, <span class="number">2</span>) now |= two[(s[j] - <span class="string">'a'</span>)];</div><div class="line">        a[now]++;</div><div class="line">    &#125;</div><div class="line">    rep(i, <span class="number">0</span>, <span class="number">23</span>) rep(j, <span class="number">0</span>, maxn - <span class="number">1</span>) <span class="keyword">if</span> (j &amp; two[i]) a[j] += a[j ^ two[i]];</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="comment">//rep(j, 0, maxn - 1) ans += (n - a[j]);</span></div><div class="line">    rep(j, <span class="number">0</span>, maxn - <span class="number">1</span>) ans ^= ((LL)n - a[j]) * (n - a[j]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%I64d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Vim-War"><a href="#Vim-War" class="headerlink" title="Vim War"></a>Vim War</h2><p><img src="http://218.106.205.134/uploads/VimWar.png" height="px" width="px"></p>
<h3 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h3><p>跳着做的哈，感觉有些题没地方交，然后套路也都差不多。。。</p>
<p>一开始我还想了半天，Vim是什么呢，怎么这么熟悉？？然后突然看到题面里的gedit，立刻就懂了。。。</p>
<p>这个题还是稍微有点意思的，我们开始使用IFWT了</p>
<p>首先，这道题要求对于一个询问来说合法的子集个数，我们很难把这样的东西对应上初始模型，因为此时这个式子是这样的（把$a_i$看做集合）：</p>
<script type="math/tex; mode=display">Ans_i = \left|\bigcup_{\bigcup_{a_i \in T_i} = query} \{T_i\}\right|</script><p>所以，我们肯定不能每次枚举一个$T_i$，再判断是否可行，我们必须有一些批量处理信息的方法</p>
<p>于是，我们类比FWT的思路发现，如果对于每个数字，都有一个集合，里面的任何子集都是合法方案，而且这些子集就是这个数字对应的全部答案减一（空集），这样，我们就可以很快地得到答案，即</p>
<script type="math/tex; mode=display">A_i = 2 ^ {\left|S_i\right|} - 1</script><p>那么这个子集是什么呢？我们可以得知，这个子集里面就是这个数字的全部子集，即</p>
<script type="math/tex; mode=display">S_i = \bigcup_{j \& i = j} \{a_j\}</script><p>但是，这样做，我们发现每个数字也把自己子集里的答案统计了进来，就是这个样子:</p>
<script type="math/tex; mode=display">A_i = \sum_{j \& i = j} B_j</script><p>我们发现，这个就是我们所求的经典问题的逆问题，我们现在知道$A_i$而不知道$B_i$，那么我们就需要IFWT来进行这一操作，我们直接反着把值减下去，就是最终的答案了</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1048576</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() ((p1 == p2 &amp;&amp; (p2 = (p1 = buffer) + fread(buffer, 1, maxn, stdin), p1 == p2)) ? EOF : *p1++)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">char</span> *p1, *p2;</div><div class="line"><span class="keyword">char</span> buffer[maxn];</div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read2</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = gc(); x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (!(<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>)) ch = gc();</div><div class="line">    <span class="keyword">while</span> (<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>, ch = gc();</div><div class="line">&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read10</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = gc(); x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (!(<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>)) ch = gc();</div><div class="line">    <span class="keyword">while</span> (<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + ch - <span class="string">'0'</span>, ch = gc();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, op;</div><div class="line"><span class="keyword">int</span> a[maxn];</div><div class="line"><span class="keyword">int</span> two[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//freopen("vim.in", "r", stdin);</span></div><div class="line">    <span class="comment">//freopen("vim.out", "w", stdout);</span></div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    read10(n), read10(m);</div><div class="line">    rep(i, <span class="number">1</span>, n) read2(x), a[x]++;</div><div class="line">    two[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    rep(i, <span class="number">1</span>, maxn - <span class="number">1</span>) two[i] = (two[i - <span class="number">1</span>] &lt;&lt; <span class="number">1</span>) % M;</div><div class="line">    read2(op);</div><div class="line">    rep(i, <span class="number">0</span>, <span class="number">19</span>) rep(j, <span class="number">0</span>, maxn - <span class="number">1</span>) <span class="keyword">if</span> (j &amp; two[i]) a[j] += a[j ^ two[i]];</div><div class="line">    rep(j, <span class="number">0</span>, maxn - <span class="number">1</span>) a[j] = two[a[j]] - <span class="number">1</span>;</div><div class="line">    rep(i, <span class="number">0</span>, <span class="number">19</span>) rep(j, <span class="number">0</span>, maxn - <span class="number">1</span>) <span class="keyword">if</span> (j &amp; two[i]) a[j] = (M + a[j] - a[j ^ two[i]]) % M;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, a[op]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Jzzhu-and-Numbers"><a href="#Jzzhu-and-Numbers" class="headerlink" title="Jzzhu and Numbers"></a>Jzzhu and Numbers</h2><p><img src="http://218.106.205.134/uploads/jzz.png" height="px" width="px"></p>
<h3 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h3><p>这题与上一题的套路又基本一致了</p>
<p>我们发现，本题中的集合取得十分随意，对个数并没有什么限制，于是，我们考虑继续去寻找一种能够帮助我们快速统计答案的集合，使信息合并，快速地统计出答案来</p>
<p>首先，我们把这样的与运算和为$i$的所有取法的集合定义为$S_i$，那么，对于这个集合来说的答案数就是$Ans_i = 2 ^ \left|S_i\right| - 1$，和上一题很相似</p>
<p>其次我们发现，题中所问的那个东西其实并不好求，但如果最后的结果是$i$，那么就能简单许多，因为这样你能发现，每个集合中的元素个数变得很好计算，因为里面每个元素，一定都有$i$这个子集，这样它们任意做与运算和，才能保证$i$的存在，这样就是经典模型了，即$i \&amp; a_j = i$</p>
<p>所以如果我们把最终好几个数做与运算的最终结果看成是数组中的某一项（把题目的答案看作是对一个固定项的询问），那么我们就又可以通过上一题的套路来解决本题了</p>
<p>但是这样又面临一个问题，这样的答案里面包含了它的所有超集，即:</p>
<script type="math/tex; mode=display">Ans_i = \sum_{i \& j = i} Ans_j</script><p>但是，这不还是经典模型吗，我们只需要一次IFWT搞回去就可以了</p>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1048576</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++) </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> a[maxn];</div><div class="line"><span class="keyword">int</span> two[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//freopen("jzz.in", "r", stdin);</span></div><div class="line">    <span class="comment">//freopen("jzz.out", "w", stdout);</span></div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    two[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    rep(i, <span class="number">1</span>, maxn - <span class="number">1</span>) two[i] = (two[i - <span class="number">1</span>] &lt;&lt; <span class="number">1</span>) % M;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    rep(i, <span class="number">1</span>, n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x), a[x]++;</div><div class="line">    rep(i, <span class="number">0</span>, <span class="number">19</span>) rep(j, <span class="number">0</span>, maxn - <span class="number">1</span>) <span class="keyword">if</span> (!(j &amp; two[i])) a[j] += a[j ^ two[i]];</div><div class="line">    rep(j, <span class="number">0</span>, maxn - <span class="number">1</span>) a[j] = (M + two[a[j]] - <span class="number">1</span>) % M;</div><div class="line">    rep(i, <span class="number">0</span>, <span class="number">19</span>) rep(j, <span class="number">0</span>, maxn - <span class="number">1</span>) <span class="keyword">if</span> (!(j &amp; two[i])) a[j] = (M + a[j] - a[j ^ two[i]]) % M;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, a[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;最近学习了一下CF上某大神写的SOS DP，感觉这不就是FWT吗，然后水了几道题&lt;br&gt;
    
    </summary>
    
    
      <category term="动态规划" scheme="https://goseqh.tk/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="快速沃尔什变换(FWT)" scheme="https://goseqh.tk/tags/%E5%BF%AB%E9%80%9F%E6%B2%83%E5%B0%94%E4%BB%80%E5%8F%98%E6%8D%A2-FWT/"/>
    
      <category term="位运算" scheme="https://goseqh.tk/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ阶段性汇总IX</title>
    <link href="https://goseqh.tk/2017/11/03/BZOJ%E9%98%B6%E6%AE%B5%E6%80%A7%E6%B1%87%E6%80%BBIX/"/>
    <id>https://goseqh.tk/2017/11/03/BZOJ阶段性汇总IX/</id>
    <published>2017-11-03T01:34:02.000Z</published>
    <updated>2017-11-03T03:41:56.441Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>I’ll keep fighting, just wait for my triumph….<br><a id="more"></a></p>
<p><title>Problem 3100. -- 排列</title><center><h2>3100: 排列</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>16 MB<br><span class="green">Submit: </span>723&nbsp;&nbsp;<span class="green">Solved: </span>208<br>[<a href="submitpage.php?id=3100">Submit</a>][<a href="problemstatus.php?id=3100">Status</a>][<a href="bbs.php?id=3100">Discuss</a>]</center></p><h2>Description</h2><div class="content"><div><p></p>
<div>给定一个长度为n的序列a，选取连续的一段使其为1~k的一个排列。</div>
<div>求k的最大值。</div>
</div></div><h2>Input</h2><div class="content"><div>
<div>输入的第一行包含一个整数n。接下来n个数描述序列a</div>
<div>1&lt;=N&lt;=1000000，1 &lt;= ai &lt;=n</div>
</div></div><h2>Output</h2><div class="content"><p>输出一个整数表示k的最大值。</p></div><h2>Sample Input</h2>
            <div class="content"><span class="sampledata">5<br>
1 2 3 4 5<br>
</span></div><h2>Sample Output</h2>
            <div class="content"><span class="sampledata">5</span></div><h2>HINT</h2>
            <div class="content"><p><div>2017.522新加数据2组By 150137</div></p></div>

<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>刚才水完的一道题，感觉细节很多于是赶紧滚过来写Blog了…</p>
<p>首先说一下我的辣鸡思路，我的方(bao)法(li)是用ST表倍增预处理mex值以及max值，（mex是当前区间中未出现的最小正整数）然后可以做到$O(1)$查询子区间内的这两个信息，然后枚举左端点，向右不断地跳，同时判断合法性，如果合法更新答案</p>
<p>但是这显然有一种数据可以卡，比如前半部分都是$1$，后半部分是$2, 3, 4, \cdots$这样的，这样肯定就是$O(n ^ n)$的了，于是我又想维护每个数的相同数的前驱后继，然后每跳一个区间，就把里面的前驱的最大值更新一下，如果最大值大于等于左端点，那么肯定就有重复元素了，于是就可以skip掉了</p>
<p>这样我们需要ST表预处理三个东西，mex, max以及pre的最大值</p>
<p>但是这样的方法复杂度并没有保证，我个人感觉好像可以证明不会很大，可能均摊$O(n\log n)$，但是又不会证。。。也没构造出可以卡的数据。。。</p>
<p>然而后来我发现，，，本题卡内存 《(⊙＿⊙)</p>
<p>所以上面方法肯定不行啦，但是我后来发现一道一样的而且不卡内存的题，就是BZOJ1318，一会写一下那个方法(^o^)/~</p>
<p>这题还是看了下题解。。。发现思路还是很巧妙的，我们以$1$的位置作为分割进行分块，然后我们每次考虑一个$1$的两侧，由于最大值可能在$1$的左右任一侧，所以我们需要都跑一遍，但是由于这两种情况对称，所以我们可以先只考虑最大值在$1$右侧的情况</p>
<p>假设当前考虑的这个$1$位置为$p$, 而且我们当前还枚举了一个右端点$r$，我们需要保证这个$r$与$p$之间只有一个$1$，也即当前的$r$没有越过自己所在的块，然后我们就可以求出$[p, r]$的最大值$mx$，我们显然知道，当前只可能是区间$[r - mx + 1, r]$合法，而且$r - mx + 1 &lt;= p$</p>
<p>这里你可能有疑问，如果$[r - mx + 1, p]$里面的最大值$mx’$大于$mx$了怎么办？我当时也很奇怪这件事，但是我们先不管它，后文会提这件事</p>
<p>此时，我们知道，$[r - mx + 1, r]$合法，需要满足下面几个条件：</p>
<ul>
<li><p>$[r - mx + 1, r]$ 中没有重复元素</p>
</li>
<li><p>$[r - mx + 1, r]$ 中的元素和为$\frac{mx * (mx + 1)}{2}$</p>
</li>
</ul>
<p>反过来，满足这两个一定合法（充分性论证），这其实还是挺显然的。。。（必须是$1, 2, \cdots, mx$，所以上文说的如过左边有更大的值一定不合法，因为这样的话在满足第一个条件时，元素和一定会超）</p>
<p>我们知道第二个条件很好判断，直接维护前缀和减一下就好了，但是第一个条件我们并不能很快地进行判断，于是我们就时刻保证满足第一个条件就行了</p>
<p>这时如何保证呢？我们发现，如果我们只是单调地从$p$开始向右扫描，那么合法区间左端点有时会增大，有时会减小，这样子就十分麻烦， 我们肯定也不能每次都暴力地去乱搞</p>
<p>其实我们可以看到，当我们不断加入右边元素的时候，最远左端点的位置显然是不降的，因为会出现重复元素，为了保证条件必须向右移动最远左端点，但是这件事我自己并没有细想，于是去看了题解</p>
<p>就是在这个时候，我发现网上很多题解都是GG的，他们都是在处理这件事情上采用了错误或是不完全的方法，于是被Hack了（甚至连CA爷的题解都是不正确的。。。）</p>
<p>然而后来我还是找到一篇对的，这是因为我研究了一遍他的代码发现很有道理。。。</p>
<p>是这样处理的，我们每次先把$l$一直向右扩展，但是不能越过自己所在的块，同时$[l, p]$内也不能出现相同的元素，得到了这样的最远的$l$以后，我们就可以顺序从$p$开始向右扫描，然后用当前扫到的元素的前驱更新最远左端点的位置，那么，我们可以知道，我们现在就是保证了$[l, r]$内没有相同元素，而且$[l - 1, r]$内一定有相同元素（其实就是极大无重复子区间），我们还需要确保$l &lt; p$，否则区间中就没有$1$了</p>
<p>于是，我们在处理当前位置$r$的时候，只要满足$r - mx + 1 \geq l$即可，同时再求一下前缀差判断子区间元素和，就可以保证满足条件了</p>
<p>由于本题卡内存，我们直接把原数组求前缀和，同时为了维护元素前驱，我们需要一个$save$数组，在线更新，但是这样我们就不能使用这个数组向左扩展$l$了（因为$l$所在的是前一块，而那块已经被更新完了），于是我们再维护一个bool型的$vis$数组，下标表示元素的值，然后用它扩展$l$即可，当前块扫完以后还要回滚回false的状态（为了保证复杂度）</p>
<p>这样内存占用大概是$13$M,是可以通过本题的</p>
<p>其实本题细节确实很多，网上题解大多不很详细，所以搞这样一篇长题解，如果还是不懂可以参考下面代码</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> eps </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for (register int i = r; i &gt;= l; i--)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sline(i) (<span class="meta-keyword">line</span>[i] - <span class="meta-keyword">line</span>[i - 1])</span></div><div class="line"><span class="comment">//#define gc() ((p1 == p2 &amp;&amp; (p2 = (p1 = buffer) + fread(buffer, 1, maxn, stdin), p1 == p2)) ? EOF : *p1++)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">/*char *p1, *p2;</span></div><div class="line">char buffer[maxn];</div><div class="line">template &lt;class T&gt; void read(T&amp; x)&#123;</div><div class="line">    char ch = gc(); x = 0; bool f = 1;</div><div class="line">    while (!('0' &lt;= ch &amp;&amp; ch &lt;= '9') &amp;&amp; ch != '-') ch = gc();</div><div class="line">    if (ch == '-') f = 0, ch = gc();</div><div class="line">    while ('0' &lt;= ch &amp;&amp; ch &lt;= '9') x = (x &lt;&lt; 1) + (x &lt;&lt; 3) + ch - '0', ch = gc();</div><div class="line">    if (!f) x = -x;</div><div class="line">&#125;*/</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> save[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    rep(i, <span class="number">1</span>, n) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;line[i]), line[i] += line[i - <span class="number">1</span>];</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">    rep(i, <span class="number">1</span>, n)&#123;</div><div class="line">        <span class="keyword">if</span> (sline(i) == <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">int</span> l = i - <span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span> (l &gt; <span class="number">0</span> &amp;&amp; sline(l) != <span class="number">1</span> &amp;&amp; !vis[sline(l)]) vis[sline(l)] = <span class="number">1</span>, l--;</div><div class="line">            <span class="keyword">int</span> tem = ++l;</div><div class="line">            <span class="keyword">int</span> r = i + <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> mx = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span> (r &lt;= n &amp;&amp; sline(r) != <span class="number">1</span>)&#123;</div><div class="line">                mx = max(sline(r), (<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>)mx);</div><div class="line">                l = max(l, save[sline(r)] + <span class="number">1</span>), save[sline(r)] = r;</div><div class="line">                <span class="keyword">if</span> (l &lt;= i &amp;&amp; r - mx + <span class="number">1</span> &gt;= l &amp;&amp; (line[r] - line[r - mx] == ((<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>) mx * (mx + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>))) ans = max(ans, mx);</div><div class="line">                r++;</div><div class="line">            &#125;</div><div class="line">            rep(j, tem, i - <span class="number">1</span>) vis[sline(j)] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> save[sline(i)] = i;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">memset</span>(save, <span class="number">0</span>, <span class="keyword">sizeof</span>(save));</div><div class="line"></div><div class="line">    per(i, n, <span class="number">1</span>) line[i] = sline(i);</div><div class="line">    reverse(line + <span class="number">1</span>, line + <span class="number">1</span> + n);</div><div class="line">    rep(i, <span class="number">1</span>, n) line[i] += line[i - <span class="number">1</span>];</div><div class="line">    rep(i, <span class="number">1</span>, n)&#123;</div><div class="line">        <span class="keyword">if</span> (sline(i) == <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">int</span> l = i - <span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span> (l &gt; <span class="number">0</span> &amp;&amp; sline(l) != <span class="number">1</span> &amp;&amp; !vis[sline(l)]) vis[sline(l)] = <span class="number">1</span>, l--;</div><div class="line">            <span class="keyword">int</span> tem = ++l;</div><div class="line">            <span class="keyword">int</span> r = i + <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> mx = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span> (r &lt;= n &amp;&amp; sline(r) != <span class="number">1</span>)&#123;</div><div class="line">                mx = max(sline(r), (<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>)mx);</div><div class="line">                l = max(l, save[sline(r)] + <span class="number">1</span>), save[sline(r)] = r;</div><div class="line">                <span class="keyword">if</span> (l &lt;= i &amp;&amp; r - mx + <span class="number">1</span> &gt;= l &amp;&amp; (line[r] - line[r - mx] == ((<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>) mx * (mx + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>))) ans = max(ans, mx);</div><div class="line">                r++;</div><div class="line">            &#125;</div><div class="line">            rep(j, tem, i - <span class="number">1</span>) vis[sline(j)] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> save[sline(i)] = i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不要区别对待上下的两个大的$i$循环，因为我其实是直接从上面复制到下面的，没有一点区别。。。</p>
<p>下面我再附上我参考的正确题解代码，<strong>来自 BraketBN</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Footprints In The Blood Soaked Snow */</span>  </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;  </span></span></div><div class="line">    </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line">    </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> uint;  </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;  </div><div class="line">    </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000005</span>, inf = <span class="number">0x3f3f3f3f</span>;  </div><div class="line">    </div><div class="line"><span class="keyword">int</span> n, last[maxn], next[maxn], ans;  </div><div class="line">uint sum[maxn];  </div><div class="line"><span class="keyword">bool</span> vis[maxn];  </div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">iread</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">int</span> f = <span class="number">1</span>, x = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();  </div><div class="line">    <span class="keyword">for</span>(; ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>; ch = getchar()) f = ch == <span class="string">'-'</span> ? <span class="number">-1</span> : <span class="number">1</span>;  </div><div class="line">    <span class="keyword">for</span>(; ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>; ch = getchar()) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>;  </div><div class="line">    <span class="keyword">return</span> f * x;  </div><div class="line">&#125;  </div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;  </div><div class="line">    <span class="keyword">int</span> len = <span class="number">0</span>, r = inf;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = x + <span class="number">1</span>; i &lt;= n &amp;&amp; sum[i] - sum[i - <span class="number">1</span>] != <span class="number">1</span>; i++) &#123;  </div><div class="line">        <span class="keyword">int</span> now = sum[i] - sum[i - <span class="number">1</span>];  </div><div class="line">        <span class="keyword">if</span>(!vis[now]) vis[now] = <span class="number">1</span>;  </div><div class="line">        <span class="keyword">else</span> &#123;  </div><div class="line">            r = i;  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = x; i &gt;= <span class="number">1</span>; i--) &#123;  </div><div class="line">        <span class="keyword">int</span> now = sum[i] - sum[i - <span class="number">1</span>];  </div><div class="line">        <span class="keyword">if</span>(now == <span class="number">1</span> &amp;&amp; i != x) <span class="keyword">break</span>;  </div><div class="line">        len = max(len, now);  </div><div class="line">        r = min(r, next[i]);  </div><div class="line">        <span class="keyword">if</span>(i + len - <span class="number">1</span> &lt; r &amp;&amp; i + len - <span class="number">1</span> &lt;= n)  </div><div class="line">            <span class="keyword">if</span>(sum[i + len - <span class="number">1</span>] - sum[i - <span class="number">1</span>] == (LL)len * (len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>)  </div><div class="line">                ans = max(ans, len);  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = x + <span class="number">1</span>; i &lt;= n &amp;&amp; sum[i] - sum[i - <span class="number">1</span>] != <span class="number">1</span>; i++)  </div><div class="line">        vis[sum[i] - sum[i - <span class="number">1</span>]] = <span class="number">0</span>;  </div><div class="line">&#125;  </div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) last[i] = inf;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;  </div><div class="line">        <span class="keyword">int</span> now = sum[i] - sum[i - <span class="number">1</span>];  </div><div class="line">        next[i] = last[now];  </div><div class="line">        last[now] = i;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span>(sum[i] - sum[i - <span class="number">1</span>] == <span class="number">1</span>)  </div><div class="line">        calc(i);  </div><div class="line">&#125;  </div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </div><div class="line">    n = iread();  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) sum[i] = sum[i - <span class="number">1</span>] + iread();  </div><div class="line">    solve();  </div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) sum[i] = sum[i] - sum[i - <span class="number">1</span>];  </div><div class="line">    reverse(sum + <span class="number">1</span>, sum + <span class="number">1</span> + n);  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) sum[i] += sum[i - <span class="number">1</span>];  </div><div class="line">    solve();  </div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再附上一份我发现的错误题解代码，<strong>来自 WerKeyTom_FT</strong>，这位同学下面的评论里已经有人指出问题，所以我就不评论了</p>
<p>希望这位同学不要因为我引用您的代码作为错误范本而生气，只是为了更加深刻的理解，并无恶意。。。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fo(i,a,b) for(i=a;i&lt;=b;i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fd(i,a,b) for(i=a;i&gt;=b;i--)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000000</span>+<span class="number">2</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line">ll a[maxn];</div><div class="line"><span class="keyword">int</span> last[maxn];</div><div class="line"><span class="keyword">int</span> i,n,ans,mx,wz;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> j,l;</div><div class="line">    ans=max(ans,<span class="number">1</span>);</div><div class="line">    mx=<span class="number">1</span>;</div><div class="line">    l=last[a[i]-a[i<span class="number">-1</span>]];</div><div class="line">    last[a[i]-a[i<span class="number">-1</span>]]=i;</div><div class="line">    wz=l+<span class="number">1</span>;</div><div class="line">    fo(j,i+<span class="number">1</span>,n+<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">if</span> (j&gt;n||a[j]-a[j<span class="number">-1</span>]==<span class="number">1</span>) <span class="keyword">break</span>;</div><div class="line">        l=last[a[j]-a[j<span class="number">-1</span>]];</div><div class="line">        last[a[j]-a[j<span class="number">-1</span>]]=j;</div><div class="line">        wz=max(wz,l);</div><div class="line">        mx=max(mx,<span class="keyword">int</span>(a[j]-a[j<span class="number">-1</span>]));</div><div class="line">        <span class="keyword">if</span> (wz&lt;=j-mx+<span class="number">1</span>)</div><div class="line">            <span class="keyword">if</span> (a[j]-a[j-mx]==(ll)mx*(mx+<span class="number">1</span>)/<span class="number">2</span>) ans=max(ans,mx);</div><div class="line">    &#125;</div><div class="line">    i=j;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    fo(i,<span class="number">1</span>,n)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</div><div class="line">        <span class="comment">//sum[i]=sum[i-1]+(ll)a[i];</span></div><div class="line">        <span class="comment">//left[i]=last[a[i]];</span></div><div class="line">        <span class="comment">//last[a[i]]=i;</span></div><div class="line">    &#125;</div><div class="line">    fo(i,<span class="number">1</span>,n) a[i]+=a[i<span class="number">-1</span>];</div><div class="line">    fo(i,<span class="number">1</span>,n)&#123;</div><div class="line">        <span class="keyword">if</span> (a[i]-a[i<span class="number">-1</span>]==<span class="number">1</span>) <span class="keyword">break</span>;</div><div class="line">        last[a[i]-a[i<span class="number">-1</span>]]=i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (i&lt;=n)&#123;</div><div class="line">        calc();</div><div class="line">    &#125;</div><div class="line">    fd(i,n,<span class="number">1</span>) a[i]-=a[i<span class="number">-1</span>];</div><div class="line">    fo(i,<span class="number">1</span>,n/<span class="number">2</span>) swap(a[i],a[n-i+<span class="number">1</span>]);</div><div class="line">    fo(i,<span class="number">1</span>,n) a[i]+=a[i<span class="number">-1</span>];</div><div class="line">    fo(i,<span class="number">1</span>,n) last[i]=<span class="number">0</span>;</div><div class="line">    fo(i,<span class="number">1</span>,n)&#123;</div><div class="line">        <span class="keyword">if</span> (a[i]-a[i<span class="number">-1</span>]==<span class="number">1</span>) <span class="keyword">break</span>;</div><div class="line">        last[a[i]-a[i<span class="number">-1</span>]]=i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (i&lt;=n)&#123;</div><div class="line">        calc();</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">8  </div><div class="line">4 4 4 4 2 9 1 8 </div><div class="line">Hack数据</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>Hack数据<strong>来自 独立团团长李云龙</strong>，错在哪里就不解释了，根据上文的讲解应该可以自己比划出来</p>
<p><del>尊重版权从我做起</del></p>
<p>希望能对大家有所帮助，写得可真是累啊(<em>′O`</em>) /</p>
<p><title>Problem 1318. -- [Spoj744] Longest Permutation</title><center><h2>1318: [Spoj744] Longest Permutation</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>593&nbsp;&nbsp;<span class="green">Solved: </span>358<br>[<a href="submitpage.php?id=1318">Submit</a>][<a href="problemstatus.php?id=1318">Status</a>][<a href="bbs.php?id=1318">Discuss</a>]</center></p><h2>Description</h2><div class="content">给你一个序列A含有n个正整数(1&lt;=Ai&lt;=n)。A的子集形式类如Au, Au+1 … , Av (1&lt;=u&lt;=v&lt;=n)，即必须是连续的。我们感兴趣的是一种子集，它含有元素包括1,2,…k。（k是子集的大小）。<br>你的任务是找到这种类型的最长的子集。 <p></p>
<p>&lt;/div&gt;</p><h2>Input</h2><div class="content">第一行，一个数n，表示序列A的长度 
第二行，n个数，第I个数表示元素Ai 
</div><h2>Output</h2><div class="content">一个数，表示可选子集的长度 
</div><h2>Sample Input</h2><br>            <div class="content"><span class="sampledata">5<br>
4 1 2 3 2<br>
<br>
</span></div><h2>Sample Output</h2><br>            <div class="content"><span class="sampledata">4<br>
<br>
</span></div><h2>HINT</h2><br>            <div class="content"><p>你可以选得子集从A1开始到A4,这个子集长度为4，包含了1，2，3，4）<br>
1<=n<=100010<br>
</=n<=100010<br></p></div><p></p>
<h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><p>这道题就是和上文那道题完全一样但是不卡内存范围还小的一个弱化版，于是我用这题尝试了一下我上一题一开始的思路</p>
<p>然而我后来发现mex无法快速地区间合并，也就是没法倍增预处理，于是我又想了另一种jump的方法，我们可以预处理上文提到的除了mex以外的那两个东西</p>
<p>首先，我们枚举起始点，从起始点开始不停地jump，然后每次我们跳到$p$时，我们考虑$O(1)$搞出当前所有数前驱的最大值，如果这个最大值大于等于起点位置，那么肯定有重复元素，直接return，因为往后搜不会改变这个事实，所以就没有意义了</p>
<p>但如果没有重复元素呢？我们知道，此时如果有这个子区间($[start, p]$)的最大值与此时子区间长度相同，那么这一定是一个合法区间，我们更新一下答案，否则，肯定有此时的最大值大于子区间长度</p>
<p>这是为什么呢？我们可以考虑抽屉原理，如果最大值小于长度，那么肯定有一种数值重复出现了，那么肯定不行</p>
<p>那这样不就是给了我一个天然的跳的下一个点的方式了吗？我们直接跳到$start + max - 1$这个位置，然后继续上面的玩法即可</p>
<p>但如果当前区间合法，即最大值与长度相同，那么我们只需要把当前位置加一即可</p>
<p>但其实这个方法并没有之前那种维护mex的方法那样玄学，这个方法是可以卡的，我们直接用$1, 2, \cdots, n$这样的数据就可以卡成$O(n ^ 2)$的，但不知为什么还AC了。。。</p>
<p>如果能快速维护当前最小的没出现的是哪个数就好了。。。就能实现那个玄学的方法了</p>
<p>总之当成一个失败的研究吧。。。附上暴力AC代码，跑了960ms。。。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 101005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for (register int i = r; i &gt;= l; i--)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() ((p1 == p2 &amp;&amp; (p2 = (p1 = buffer) + fread(buffer, 1, maxn, stdin), p1 == p2)) ? EOF : *p1++)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> *p1, *p2;</div><div class="line"><span class="keyword">char</span> buffer[maxn];</div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = gc(); x = <span class="number">0</span>; <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!(<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) &amp;&amp; ch != <span class="string">'-'</span>) ch = gc();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = gc();</div><div class="line">    <span class="keyword">while</span> (<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + ch - <span class="string">'0'</span>, ch = gc();</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> mx[maxn][<span class="number">20</span>];</div><div class="line"><span class="keyword">int</span> mxl[maxn][<span class="number">20</span>];</div><div class="line"><span class="keyword">int</span> mi[<span class="number">20</span>];</div><div class="line"><span class="keyword">int</span> lo[maxn];</div><div class="line"><span class="keyword">int</span> left[maxn];</div><div class="line"><span class="keyword">int</span> save[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    rep(i, <span class="number">1</span>, n) left[i] = save[line[i]], save[line[i]] = i;</div><div class="line">    rep(i, <span class="number">1</span>, n) mx[i][<span class="number">0</span>] = line[i], mxl[i][<span class="number">0</span>] = left[i];</div><div class="line">    mi[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    rep(i, <span class="number">1</span>, <span class="number">19</span>) mi[i] = mi[i - <span class="number">1</span>] &lt;&lt; <span class="number">1</span>;</div><div class="line">    rep(i, <span class="number">2</span>, n) lo[i] = lo[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</div><div class="line">    rep(i, <span class="number">1</span>, <span class="number">19</span>)&#123;</div><div class="line">        rep(j, <span class="number">1</span>, n - mi[i] + <span class="number">1</span>)&#123;</div><div class="line">            mx[j][i] = max(mx[j][i - <span class="number">1</span>], mx[j + mi[i - <span class="number">1</span>]][i - <span class="number">1</span>]);</div><div class="line">            mxl[j][i] = max(mxl[j][i - <span class="number">1</span>], mxl[j + mi[i - <span class="number">1</span>]][i - <span class="number">1</span>]);</div><div class="line">        &#125;</div><div class="line">        rep(j, max(<span class="number">1</span>, n - mi[i] + <span class="number">2</span>), n)&#123;</div><div class="line">            mx[j][i] = mx[j][i - <span class="number">1</span>];</div><div class="line">            mxl[j][i] = mxl[j][i - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> op)</span></span>&#123; </div><div class="line">    <span class="keyword">int</span> x = lo[r - l + <span class="number">1</span>];</div><div class="line">    <span class="keyword">if</span> (!op) <span class="keyword">return</span> max(mx[l][x], mx[r - mi[x] + <span class="number">1</span>][x]); </div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">1</span>) <span class="keyword">return</span> max(mxl[l][x], mxl[r - mi[x] + <span class="number">1</span>][x]); </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ans = <span class="number">1</span>, sta;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">jump</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ml = get(sta, x, <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (ml &gt;= sta) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> mxn = get(sta, x, <span class="number">0</span>);</div><div class="line">    <span class="keyword">if</span> (mxn == x - sta + <span class="number">1</span>) ans = max(ans, mxn);</div><div class="line">    <span class="keyword">int</span> _x = sta + mxn - <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (_x == x) _x++;</div><div class="line">    <span class="keyword">if</span> (_x &gt; n) <span class="keyword">return</span>;</div><div class="line">    jump(_x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    read(n);</div><div class="line">    rep(i, <span class="number">1</span>, n) read(line[i]);</div><div class="line">    init();</div><div class="line">    rep(i, <span class="number">1</span>, n) sta = i, jump(i);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</div>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;I’ll keep fighting, just wait for my triumph….&lt;br&gt;
    
    </summary>
    
    
      <category term="BZOJ" scheme="https://goseqh.tk/tags/BZOJ/"/>
    
      <category term="题解" scheme="https://goseqh.tk/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ阶段性汇总VIII</title>
    <link href="https://goseqh.tk/2017/11/02/BZOJ%E9%98%B6%E6%AE%B5%E6%80%A7%E6%B1%87%E6%80%BBVIII/"/>
    <id>https://goseqh.tk/2017/11/02/BZOJ阶段性汇总VIII/</id>
    <published>2017-11-02T10:39:00.000Z</published>
    <updated>2017-11-02T12:54:29.325Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>Some day we’ll meet again….<br><a id="more"></a></p>
<p><title>Problem 4804. -- 欧拉心算</title><center><h2>4804: 欧拉心算</h2><span class="green">Time Limit: </span>15 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>256 MB<br><span class="green">Submit: </span>354&nbsp;&nbsp;<span class="green">Solved: </span>212<br>[<a href="submitpage.php?id=4804">Submit</a>][<a href="problemstatus.php?id=4804">Status</a>][<a href="bbs.php?id=4804">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p>&nbsp;给出一个数字N</p><p></p>
<div><img src="http://218.106.205.134/uploads/1.jpg" height="px" width="px"></div></div><h3>Input</h3><div class="content"><div>第一行为一个正整数T，表示数据组数。</div>
<div>接下来T行为询问，每行包含一个正整数N。</div>
<div>T&lt;=5000,N&lt;=10^7</div>
<p></p></div><h3>Output</h3><div class="content"><div>按读入顺序输出答案。</div>
<p></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">1<br>
10</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">136</span></div><h3>HINT</h3>
            <div class="content"><p></p></div><h3>source</h3>
            <div class="content"><p><a href="problemset.php?search=By FancyCoder">By FancyCoder</a></p></div>

<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>感觉最近做了好多莫比乌斯反演套路题。。。</p>
<p>仍然是老玩法，我们枚举最大公约数，然后发现可以预处理$\varphi$前缀和然后分块搞，本题就这样结束了。。。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++) </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> phi[maxn];</div><div class="line">LL pre[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    rep(i, <span class="number">2</span>, maxn - <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i])&#123;</div><div class="line">            p[++cnt] = i;</div><div class="line">            phi[i] = i - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        rep(j, <span class="number">1</span>, cnt) &#123;</div><div class="line">            <span class="keyword">if</span> (i * p[j] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * p[j]] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) &#123;</div><div class="line">                phi[i * p[j]] = phi[i] * p[j];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            phi[i * p[j]] = phi[i] * (p[j] - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    rep(i, <span class="number">1</span>, maxn - <span class="number">1</span>) pre[i] = pre[i - <span class="number">1</span>] + phi[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    rep(d, <span class="number">1</span>, n)&#123;</div><div class="line">        <span class="keyword">int</span> next = n / (n / d);</div><div class="line">        ans += (LL)pre[n / d] * (pre[next] - pre[d - <span class="number">1</span>]);</div><div class="line">        d = next;</div><div class="line">    &#125;</div><div class="line">    ans &lt;&lt;= <span class="number">1</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans - pre[n]);<span class="comment">//Error!!! 注意输出格式...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> T, n;</div><div class="line">    init();</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        work(n);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 5071. -- [Lydsy十月月赛]小A的数字</title><center><h2>5071: [Lydsy十月月赛]小A的数字</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>256 MB<br><span class="green">Submit: </span>317&nbsp;&nbsp;<span class="green">Solved: </span>152<br>[<a href="submitpage.php?id=5071">Submit</a>][<a href="problemstatus.php?id=5071">Status</a>][<a href="bbs.php?id=5071">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p>&nbsp;<a href="http://www.lydsy.com/JudgeOnline/upload/201710/10.rar" target="_blank" rel="external">www.lydsy.com/JudgeOnline/upload/201710/10.rar</a>注意此题的PDF版题面有问题，请以压缩包中txt文档为准！</p></div><p></p>
<h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><p>既然放在第一题上应该非常水是吧。。。然而我太弱了还是没想到</p>
<p>我们仔细研究一下这个操作，可以发现我们实际上是把前缀和交换了位置，所以我们只需要判断两个序列的前缀和是否完全相同（不考虑顺序）于是我们只要排个序再比较一下就好了。。。</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">LL a[maxn];</div><div class="line">LL b[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n, T, x;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        rep(i, <span class="number">1</span>, n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x), a[i] = a[i - <span class="number">1</span>] + x;</div><div class="line">        rep(i, <span class="number">1</span>, n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x), b[i] = b[i - <span class="number">1</span>] + x;</div><div class="line">        sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n), sort(b + <span class="number">1</span>, b + <span class="number">1</span> + n);</div><div class="line">        rep(i, <span class="number">1</span>, n) <span class="keyword">if</span> (a[i] != b[i]) &#123;<span class="built_in">printf</span>(<span class="string">"NO\n"</span>); <span class="keyword">goto</span> jump;&#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">        jump:;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 5074. -- [Lydsy十月月赛]小B的数字</title><center><h2>5074: [Lydsy十月月赛]小B的数字</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>256 MB<br><span class="green">Submit: </span>201&nbsp;&nbsp;<span class="green">Solved: </span>134<br>[<a href="submitpage.php?id=5074">Submit</a>][<a href="problemstatus.php?id=5074">Status</a>][<a href="bbs.php?id=5074">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p><a href="http://www.lydsy.com/JudgeOnline/upload/201710/10.rar" target="_blank" rel="external">www.lydsy.com/JudgeOnline/upload/201710/10.rar</a>&nbsp;</p></div><p></p>
<h2 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h2><p>这题可以对所需满足的条件列出数学公式，然后直接进行推导，容易发现只要$\sum_{i = 1} ^ n \frac{1}{a_i} &gt;= 1$<br>即可</p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() ((p1 == p2 &amp;&amp; (p2 = (p1 = buffer) + fread(buffer, 1, maxn, stdin), p1 == p2)) ? EOF : *p1++)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> buffer[maxn];</div><div class="line"><span class="keyword">char</span> *p1, *p2;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = gc();x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (!(<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>)) ch = gc();</div><div class="line">    <span class="keyword">while</span> (<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + ch - <span class="string">'0'</span>, ch = gc();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> T, n, x;</div><div class="line">    read(T);</div><div class="line">    <span class="keyword">double</span> now;</div><div class="line">    <span class="keyword">while</span> (T--)&#123;</div><div class="line">        now = <span class="number">0</span>;</div><div class="line">        read(n);</div><div class="line">        rep(i, <span class="number">1</span>, n) read(x), now += <span class="number">1.0</span> / x;</div><div class="line">        <span class="keyword">if</span> (now - <span class="number">1.0</span> &gt; eps) <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 1925. -- [Sdoi2010]地精部落</title><center><h2>1925: [Sdoi2010]地精部落</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>64 MB<br><span class="green">Submit: </span>1613&nbsp;&nbsp;<span class="green">Solved: </span>1004<br>[<a href="submitpage.php?id=1925">Submit</a>][<a href="problemstatus.php?id=1925">Status</a>][<a href="bbs.php?id=1925">Discuss</a>]</center></p><h3>Description</h3><div class="content">传说很久以前，大地上居住着一种神秘的生物：地精。<br>地精喜欢住在连绵不绝的山脉中。具体地说，一座长度为 N 的山脉 H可分<br>为从左到右的 N 段，每段有一个独一无二的高度 Hi，其中Hi是1到N 之间的正<br>整数。<br>如果一段山脉比所有与它相邻的山脉都高，则这段山脉是一个山峰。位于边<br>缘的山脉只有一段相邻的山脉，其他都有两段（即左边和右边）。<br>类似地，如果一段山脉比所有它相邻的山脉都低，则这段山脉是一个山谷。<br>地精们有一个共同的爱好——饮酒，酒馆可以设立在山谷之中。地精的酒馆<br>不论白天黑夜总是人声鼎沸，地精美酒的香味可以飘到方圆数里的地方。<br>地精还是一种非常警觉的生物，他们在每座山峰上都可以设立瞭望台，并轮<br>流担当瞭望工作，以确保在第一时间得知外敌的入侵。<br>地精们希望这N 段山脉每段都可以修建瞭望台或酒馆的其中之一，只有满足<br>这个条件的整座山脉才可能有地精居住。<br>现在你希望知道，长度为N 的可能有地精居住的山脉有多少种。两座山脉A<br>和B不同当且仅当存在一个 i，使得 Ai≠Bi。由于这个数目可能很大，你只对它<br>除以P的余数感兴趣。 <p></p>
<p> &lt;/div&gt;</p><h3>Input</h3><div class="content"> 仅含一行，两个正整数 N, P。 
</div><h3>Output</h3><div class="content">仅含一行，一个非负整数，表示你所求的答案对P取余
之后的结果。 </div><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">4 7</span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">3</span></div><h3>HINT</h3><br>            <div class="content"><p><br>
<img src="http://218.106.205.134/uploads/1925.jpg.gif" height="px" width="px"> <br>
对于 20%的数据，满足 N≤10； <br>
对于 40%的数据，满足 N≤18； <br>
对于 70%的数据，满足 N≤550； <br>
对于 100%的数据，满足 3≤N≤4200，P≤109<br>
</p></div><h3>source</h3><br>            <div class="content"><p><a href="problemset.php?search=第一轮Day2">第一轮Day2</a></p></div><p></p>
<h2 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h2><p>基本一道水题，考虑递归求解，从小到大放入数字，那么我们直接DP一下就好了，大概要求出插入位置前面是山谷/山顶，后面是山谷/山顶的数量，由于插入的数相对于之前的数是最大的，所以我们不用管具体数列中都是什么数，DP只要记录一个数字个数就可以转移了</p>
<h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 4205</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, l, r) for (register int i = r; i &gt;= l; i--)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line">LL ft[maxn], fh[maxn], M;</div><div class="line"><span class="keyword">int</span> C[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>, &amp;n, &amp;M);</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld"</span>, <span class="number">1</span> % M);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    ft[<span class="number">0</span>] = fh[<span class="number">0</span>] = ft[<span class="number">1</span>] = fh[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    C[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    rep(i, <span class="number">2</span>, n)&#123;</div><div class="line">        per(j, <span class="number">1</span>, i) C[j] = (C[j - <span class="number">1</span>] + C[j]) % M;</div><div class="line">        rep(j, <span class="number">0</span>, i)&#123;</div><div class="line">            <span class="keyword">if</span> (j &amp; <span class="number">1</span>) fh[i] += C[j] * ft[j] % M * fh[i - j - <span class="number">1</span>] % M, fh[i] %= M;</div><div class="line">            <span class="keyword">if</span> ((i - j - <span class="number">1</span>) &amp; <span class="number">1</span>) ft[i] += C[j] * ft[j] % M * fh[i - j - <span class="number">1</span>] % M, ft[i] %= M;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, (ft[n] &lt;&lt; <span class="number">1</span>) % M);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 4358. -- permu</title><center><h2>4358: permu</h2><span class="green">Time Limit: </span>30 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>512 MB<br><span class="green">Submit: </span>974&nbsp;&nbsp;<span class="green">Solved: </span>248<br>[<a href="submitpage.php?id=4358">Submit</a>][<a href="problemstatus.php?id=4358">Status</a>][<a href="bbs.php?id=4358">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>给出一个长度为n的排列P(P1,P2,...Pn)，以及m个询问。每次询问某个区间[l,r]中，最长的值域</div><p></p>
<div>连续段长度。</div>
<p></p></div><h3>Input</h3><div class="content"><div>第一行两个整数n,m。</div>
<div>接下来一行n个整数，描述P。</div>
<div>接下来m行，每行两个整数l,r，描述一组询问。</div>
<p></p></div><h3>Output</h3><div class="content"><div>对于每组询问，输出一行一个整数，描述答案。</div>
<p></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">8 3<br>
3 1 7 2 5 8 6 4<br>
1 4<br>
5 8<br>
1 7</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">3<br>
3<br>
4</span></div><h3>HINT</h3>
            <div class="content"><p><div>对于询问[1,4]，P2,P4,P1组成最长的值域连续段[1,3]；</div><br>
<div>对于询问[5,8]，P8,P5,P7组成最长的值域连续段[4,6]；</div><br>
<div>对于询问[1,7]，P5,P7,P3,P6组成最长的值域连续段[5,8]。</div><br>
<div>1&lt;=n,m&lt;=50000</div><br>
<div></div><br>
</p><p></p><p></p></div><h3>source</h3>
            <div class="content"><p><a href="problemset.php?search=By sumix173">By sumix173</a></p></div>

<h2 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h2><p>看到这样的数据范围，应该能想到是序列莫队算法，但是我们发现维护连续段的时候，我们为了保证操作的$O(1)$进行，必须使用并查集维护，然而这样的话我们就不能支持动态删除这样的操作</p>
<p>我们知道，对于左端点在同一个块中的询问，它们的右端点是单调递增的，所以我们考虑维护操作之前的情况，这样每次查询时，我们先更新询问的右端点到这个询问的位置，在查询一个左端点时，我们也先暴力搞到那个位置，但在查询完以后要再将对于左端点的操作复位到初始指针的位置（右端点的更新一直积累，不进行复位）</p>
<p>为了方便处理，我们把此时这个块的初始指针指在末尾，这样更新左右端点时就不会互相影响</p>
<p>这样我们可以维护每次操作前的情况，复位时我们就可以直接恢复连续段之前的样子，就像是撤销操作一样，然后就像普通的莫队一样搞就行了</p>
<p>这听起来像是回滚莫队，但不知道究竟是不是这个。。。</p>
<p>如果没看懂可以结合代码一起食用</p>
<h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, l, r) for (register int i = r; i &gt;= l; i--) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() ((p1 == p2 &amp;&amp; (p2 = (p1 = buffer) + fread(buffer, 1, maxn, stdin), p1 == p2)) ? EOF : *p1++)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> buffer[maxn];</div><div class="line"><span class="keyword">char</span> *p1, *p2;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = gc(); x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (!(<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>)) ch = gc();</div><div class="line">    <span class="keyword">while</span> (<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>, ch = gc();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">int</span> pos[maxn];</div><div class="line"><span class="keyword">int</span> res[maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">query</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> l, r, id;</div><div class="line">    query(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> id) : l(l), r(r), id(id)&#123;&#125;</div><div class="line">    query()&#123;&#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> query b) <span class="keyword">const</span>&#123;</div><div class="line">        <span class="keyword">return</span> (pos[l] == pos[b.l]) ? r &lt; b.r : pos[l] &lt; pos[b.l];</div><div class="line">    &#125;</div><div class="line">&#125;q[maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">record</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> *l, *r;</div><div class="line">    <span class="keyword">int</span> a, b;</div><div class="line">    record(<span class="keyword">int</span>* l, <span class="keyword">int</span>* r, <span class="keyword">int</span> a, <span class="keyword">int</span> b) : l(l), r(r), a(a), b(b)&#123;&#125;</div><div class="line">    record()&#123;&#125;</div><div class="line">&#125;save[maxn];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> rig[maxn];</div><div class="line"><span class="keyword">int</span> lef[maxn];</div><div class="line"><span class="keyword">bool</span> in[maxn];</div><div class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    rep(i, l, r)&#123;</div><div class="line">        <span class="keyword">int</span> x = p[i]; in[x] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> le = (in[x - <span class="number">1</span>]) ? lef[x - <span class="number">1</span>] : x;</div><div class="line">        <span class="keyword">int</span> ri = (in[x + <span class="number">1</span>]) ? rig[x + <span class="number">1</span>] : x;</div><div class="line">        save[++cnt] = record(rig + le, lef + ri, *(rig + le), *(lef + ri));</div><div class="line">        *(rig + le) = ri, *(lef + ri) = le;</div><div class="line">        ans = max(ans, ri - le + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    rep(i, l, r)&#123;</div><div class="line">        in[p[i]] = <span class="number">0</span>;</div><div class="line">        record op = save[cnt--];</div><div class="line">        *op.l = op.a, *op.r = op.b;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> FILE</span></div><div class="line">        freopen(<span class="string">"permu.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">        freopen(<span class="string">"permu.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    read(n), read(m);</div><div class="line">    rep(i, <span class="number">1</span>, n) read(p[i]);</div><div class="line">    rep(i, <span class="number">1</span>, m) &#123;</div><div class="line">        read(x), read(y);</div><div class="line">        q[i] = query(x, y, i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> siz = (<span class="keyword">int</span>) <span class="built_in">sqrt</span>(n) + <span class="number">1</span>;</div><div class="line">    rep(i, <span class="number">1</span>, n) pos[i] = (i - <span class="number">1</span>) / siz;</div><div class="line">    sort(q + <span class="number">1</span>, q + <span class="number">1</span> + m);</div><div class="line">    <span class="keyword">int</span> l, r, nb = <span class="number">-1</span>, tem = <span class="number">0</span>;</div><div class="line">    rep(i, <span class="number">1</span>, m) &#123;</div><div class="line">        <span class="keyword">if</span> (pos[q[i].l] != nb)&#123;</div><div class="line">            <span class="built_in">memset</span>(lef, <span class="number">0</span>, <span class="keyword">sizeof</span>(lef));</div><div class="line">            <span class="built_in">memset</span>(rig, <span class="number">0</span>, <span class="keyword">sizeof</span>(rig));</div><div class="line">            <span class="built_in">memset</span>(in, <span class="number">0</span>, <span class="keyword">sizeof</span>(in));</div><div class="line">            cnt = tem = <span class="number">0</span>;</div><div class="line">            nb = pos[q[i].l];</div><div class="line">            l = r = (nb + <span class="number">1</span>) * siz;</div><div class="line">            r++;</div><div class="line">        &#125;</div><div class="line">        ans = tem;</div><div class="line">        <span class="keyword">if</span> (q[i].r &gt;= r)&#123;</div><div class="line">            add(r, q[i].r);</div><div class="line">            r = q[i].r + <span class="number">1</span>;</div><div class="line">            tem = ans;</div><div class="line">        &#125;</div><div class="line">        add(q[i].l, min(q[i].r, l));</div><div class="line">        res[q[i].id] = ans;</div><div class="line">        del(q[i].l, min(q[i].r, l));</div><div class="line">    &#125;</div><div class="line">    rep(i, <span class="number">1</span>, m) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res[i]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 4198. -- [Noi2015]荷马史诗</title><center><h2>4198: [Noi2015]荷马史诗</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>512 MB<br><span class="green">Submit: </span>1462&nbsp;&nbsp;<span class="green">Solved: </span>775<br>[<a href="submitpage.php?id=4198">Submit</a>][<a href="problemstatus.php?id=4198">Status</a>][<a href="bbs.php?id=4198">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p>追逐影子的人，自己就是影子。 &mdash;&mdash;荷马</p><p></p>
<div>Allison 最近迷上了文学。她喜欢在一个慵懒的午后，细细地品上一杯卡布奇诺，静静地阅读她爱不释手的《荷马史诗》。但是由《奥德赛》和《伊利亚特》组成的鸿篇巨制《荷马史诗》实在是太长了，Allison 想通过一种编码方式使得它变得短一些。</div>
<div>一部《荷马史诗》中有 n 种不同的单词，从 1 到 n 进行编号。其中第 i 种单词出现的总次数为 wi。Allison 想要用 k 进制串 si 来替换第 i 种单词，使得其满足如下要求:</div>
<div>对于任意的 1&le;i,j&le;n，i&ne;j，都有：si 不是 sj 的前缀。</div>
<div>现在 Allison 想要知道，如何选择 si，才能使替换以后得到的新的《荷马史诗》长度最小。在确保总长度最小的情况下，Allison 还想知道最长的 si 的最短长度是多少？</div>
<div>一个字符串被称为 k 进制字符串，当且仅当它的每个字符是 0 到 k&minus;1 之间（包括 0 和 k&minus;1）的整数。</div>
<div>字符串 Str1 被称为字符串 Str2 的前缀，当且仅当：存在 1&le;t&le;m，使得 Str1=Str2[1..t]。其中，m 是字符串 Str2 的长度，Str2[1..t] 表示 Str2 的前 t 个字符组成的字符串。</div>
<div></div></div><h3>Input</h3><div class="content"><p>输入文件的第 1 行包含 2 个正整数 n,k，中间用单个空格隔开，表示共有 n 种单词，需要使用 k 进制字符串进行替换。</p>
<div>接下来 n 行，第 i+1 行包含 1 个非负整数 wi，表示第 i 种单词的出现次数。</div>
<div></div></div><h3>Output</h3><div class="content"><p>输出文件包括 2 行。</p>
<div>第 1 行输出 1 个整数，为《荷马史诗》经过重新编码以后的最短长度。</div>
<div>第 2 行输出 1 个整数，为保证最短总长度的情况下，最长字符串 si 的最短长度。</div>
<div></div></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">4 2<br>
1<br>
1<br>
2<br>
2</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">12<br>
2</span></div><h3>HINT</h3>
            <div class="content"><p><div>用 X(k) 表示 X 是以 k 进制表示的字符串。</div><br>
<div>一种最优方案：令 00(2) 替换第 1 种单词，01(2) 替换第 2 种单词，10(2) 替换第 3 种单词，11(2) 替换第 4 种单词。在这种方案下，编码以后的最短长度为：</div><br>
<div></div><br>
<div>1&times;2+1&times;2+2&times;2+2&times;2=12</div><br>
<div>最长字符串 si 的长度为 2。</div><br>
<div></div><br>
<div>一种非最优方案：令 000(2) 替换第 1 种单词，001(2) 替换第 2 种单词，01(2) 替换第 3 种单词，1(2) 替换第 4 种单词。在这种方案下，编码以后的最短长度为：</div><br>
<div></div><br>
<div>1&times;3+1&times;3+2&times;2+2&times;1=12</div><br>
<div>最长字符串 si 的长度为 3。与最优方案相比，文章的长度相同，但是最长字符串的长度更长一些。</div><br>
<div></div><br>
<div>对于所有数据，保证 2&le;n&le;100000，2&le;k&le;9。</div><br>
<div></div><br>
<div>选手请注意使用 64 位整数进行输入输出、存储和计算。</div>


</p><h2 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h2><p>基本就是一个Huffman树的变式，我们每次还是用小根堆维护，然后每次连着取出$k$个就可以</p>
<p>注意我们为了保证贪心的正确，必须在进行合并操作之前在堆中补零元素，具体需要补零的个数应该很容易计算出来（根据最后Huffman树一定是完全树的性质进行推导）</p>
<h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ele</span>&#123;</span></div><div class="line">    LL val, len;</div><div class="line">    ele(LL val, LL len) : val(val), len(len)&#123;&#125;</div><div class="line">    ele()&#123;&#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> ele b) <span class="keyword">const</span>&#123;</div><div class="line">        <span class="keyword">return</span> (val == b.val) ? len &gt; b.len : val &gt; b.val;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">priority_queue&lt;ele&gt; s;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">register</span> <span class="keyword">int</span> i;</div><div class="line">    LL n, k, x;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;k);</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;x);</div><div class="line">        s.push(ele(x, <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ((n - <span class="number">1</span>) % (k - <span class="number">1</span>)) <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; k - <span class="number">1</span> - (n - <span class="number">1</span>) % (k - <span class="number">1</span>); i++) s.push(ele(<span class="number">0</span>, <span class="number">1</span>));</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (!s.empty())&#123;</div><div class="line">        LL val = <span class="number">0</span>, len = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; k; i++)&#123;</div><div class="line">            ele op = s.top();s.pop();</div><div class="line">            val += op.val, len = max(len, op.len);</div><div class="line">            <span class="keyword">if</span> (s.empty()) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        ans += val;</div><div class="line">        <span class="keyword">if</span> (s.empty())&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n%lld"</span>, ans, len);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> s.push(ele(val, len + <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 1537. -- [POI2005]Aut- The Bus
</title><center><h2>1537: [POI2005]Aut- The Bus
</h2><span class="green">Time Limit: </span>5 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>64 MB<br><span class="green">Submit: </span>401&nbsp;&nbsp;<span class="green">Solved: </span>276<br>[<a href="submitpage.php?id=1537">Submit</a>][<a href="problemstatus.php?id=1537">Status</a>][<a href="bbs.php?id=1537">Discuss</a>]</center></p><h3>Description</h3><div class="content">Byte City 的街道形成了一个标准的棋盘网络 – 他们要么是北南走向要么就是西东走向. 北南走向的路口从 1 到 n编号, 西东走向的路从1 到 m编号. 每个路口用两个数(i, j) 表示(1 <= 1="" i="" <="n," byte="" city里有一条公交线,="" 在某一些路口设置了公交站点.="" 公交车从="" (1,="" 1)="" 发车,="" 在(n,="" m)结束.公交车只能往北或往东走.="" 现在有一些乘客在某些站点等车.="" 公交车司机希望在路线中能接到尽量多的乘客.帮他想想怎么才能接到最多的乘客.="" div=""><h3>Input</h3><div class="content">第一行三个数n, m 和 k – 表示北南走向的路的个数以及西东走向的路和乘客等车的站点的个数. ( 1 <= 1="" n="" <="10^9," 接下来k="" 行每行描述一个公交站的信息.第="" i="" +="" 行三个正整数="" xi,="" yi="" 和="" pi,="" 表示在(xi,="" yi)="" 有="" pi="" 个乘客在等车.="" 每个路口在数据中最多出现一次,乘客总数不会超过1="" 000="" 000.="" div=""><h3>Output</h3><div class="content">一个数表示最多能接到的乘客数量. <p></p>
<p>&lt;/div&gt;</p><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">8 7 11<br>
4 3 4<br>
6 2 4<br>
2 3 2<br>
5 6 1<br>
2 5 2<br>
1 5 5<br>
2 1 1<br>
3 1 1<br>
7 7 1<br>
7 4 2<br>
8 6 2<br>
</span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">11</span></div><p></p>
<h2 id="题目分析-6"><a href="#题目分析-6" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先如果车站数量没那么多那么这题就是一个SB的DP题了对吧，所以对于这题来说，我们要思考如何合并信息加快DP更新速度，我们发现，可以采用类似扫描线的思路，从右往左扫一遍，用树状数组维护DP值信息，然后更新的时候直接取树状数组里面的后缀最大值更新，再把这个DP值搞到树上就好了</p>
<h2 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x &amp; -x</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() ((p1 == p2 &amp;&amp; (p2 = (p1 = buffer) + fread(buffer, 1, maxn, stdin), p1 == p2)) ? EOF : *p1++)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m, k;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sta</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x, y, p;</div><div class="line">    sta(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> p) : x(x), y(y), p(p)&#123;&#125;</div><div class="line">    sta()&#123;&#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> sta b) <span class="keyword">const</span>&#123;</div><div class="line">        <span class="keyword">return</span> (x == b.x) ? y &lt; b.y : x &lt; b.x;</div><div class="line">    &#125;</div><div class="line">&#125;save[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> c[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span> (p &lt;= k)&#123;</div><div class="line">        c[p] = max(c[p], v);</div><div class="line">        p += lowbit(p);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (p)&#123;</div><div class="line">        ans = max(ans, c[p]);</div><div class="line">        p -= lowbit(p);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">char</span> buffer[maxn];</div><div class="line"><span class="keyword">char</span> *p1, *p2;</div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = gc(); x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (!(<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>)) ch = gc();</div><div class="line">    <span class="keyword">while</span> (<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>, ch = gc();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y, z;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n ,&amp;m, &amp;k);</div><div class="line">    <span class="keyword">register</span> <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= k; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;z);</div><div class="line">        save[i] = sta(x, y, z);</div><div class="line">        line[i] = y;</div><div class="line">    &#125;</div><div class="line">    sort(save + <span class="number">1</span>, save + <span class="number">1</span> + k);</div><div class="line">    reverse(save + <span class="number">1</span>, save + <span class="number">1</span> + k);</div><div class="line">    sort(line + <span class="number">1</span>, line + <span class="number">1</span> + k);</div><div class="line">    <span class="keyword">int</span> _k = unique(line + <span class="number">1</span>, line + <span class="number">1</span> + k) - line - <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= k; i++)&#123;</div><div class="line">        save[i].y = lower_bound(line + <span class="number">1</span>, line + <span class="number">1</span> + _k, save[i].y) - line;</div><div class="line">        save[i].y = k - save[i].y + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= k; i++)&#123;</div><div class="line">        <span class="keyword">int</span> dp = get(save[i].y);</div><div class="line">        ans = max(ans, dp + save[i].p);</div><div class="line">        update(save[i].y, dp + save[i].p);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 5060. -- 魔方国</title><center><h2>5060: 魔方国</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>256 MB<br><span class="green">Submit: </span>92&nbsp;&nbsp;<span class="green">Solved: </span>35<br>[<a href="submitpage.php?id=5060">Submit</a>][<a href="problemstatus.php?id=5060">Status</a>][<a href="bbs.php?id=5060">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>小奇和魔法猪打开了战狂的遗迹，穿越到了东元20年。东元元年，战狂率领一千万士兵毁灭了一个又一个文明，并</div><p></p>
<div>建立起了新文明&mdash;&mdash;昌和帝国，招募了八位伟人：大将军、海军上将、大科学家、大预言家、大工程师、大艺术家</div>
<div>、大音乐家、大作家。东元15年，伟大的革命领袖方方方召集仅存的几个文明，组成联盟对抗战狂。方方方设计先</div>
<div>后杀死了大作家和大艺术家，并重创了战狂。东元20年，方方方率军进攻大将军，大将军花重金（1600奥术之尘）</div>
<div>请来了砰砰博士，炸死了方方方。随后，大将军占领了联盟数座城市并包围了联盟首都。这时，小奇和魔法猪从天</div>
<div>而降。它们听说了方方方的英勇事迹，十分感动，决定帮助联盟对抗战狂。在接下来一个月的时间里，小奇和魔法</div>
<div>猪夺回了n-1座城市。为了纪念方方方，小奇把联盟改名为魔方国，并打算修建m条道路。一条道路必须要连接两个</div>
<div>不同的城市（首都也算城市），两个城市之间可以有多条道路。在修建完道路后，小奇会在一些城市中放置魔法守</div>
<div>卫。一个魔法守卫会守护它所在的城市以及与从它所在的城市出发，经过不超过k条边所能到达的城市。在守护所</div>
<div>有城市的基础上，小奇会使魔法守卫的数量尽可能少。显然，每一种修建道路的方案都会对应一个最少守卫数。现</div>
<div>在，小奇想知道最少守卫数可能是多少</div>
<p></p></div><h3>Input</h3><div class="content"><div>输入一行三个数，分别为n,m,k。</div>
<div>n,m&lt;=100000，k&lt;=100</div>
<p></p></div><h3>Output</h3><div class="content"><div>输出两行，第一行一个数表示最少守卫数的数量，第二行从小到大依次输出</div>
<div>所有可能的最少守卫数。</div>
<p></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">3 2 1</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">2<br>
1 2</span></div>

<h2 id="题目分析-7"><a href="#题目分析-7" class="headerlink" title="题目分析"></a>题目分析</h2><p>。。。情况讨论题，我们构造两种情况，一个是两个点之间连上所有边，其他所有点度数为零，这个是最多的情况，另一种最小的情况是一个菊花图，显然之间的答案也都是可行的</p>
<p>但是有各种极端情况。。。</p>
<ul>
<li>m == 0 -&gt; ans = (1, n);</li>
<li>(m &gt; 0) &amp;&amp; (n == 0 || n == 1) -&gt; ans = (0, NULL);</li>
<li>k == 0 -&gt; ans = (1, n);</li>
</ul>
<p>关于这个判断的优先级可以自己判定</p>
<p>其他的情况基本就是比较正常的了，但也要注意n与m的大小关系</p>
<h2 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n, m, k;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k);</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> &amp;&amp; m &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"0"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> minnum = max(n - m, <span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> maxnum = (!m) ? n : n - <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (!k) <span class="built_in">printf</span>(<span class="string">"%d\n%d"</span>, <span class="number">1</span>, n);</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, maxnum - minnum + <span class="number">1</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, minnum);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = minnum + <span class="number">1</span>; i &lt;= maxnum; i++) <span class="built_in">printf</span>(<span class="string">" %d"</span>, i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 4591. -- [Shoi2015]超能粒子炮·改</title><center><h2>4591: [Shoi2015]超能粒子炮·改</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>256 MB<br><span class="green">Submit: </span>952&nbsp;&nbsp;<span class="green">Solved: </span>356<br>[<a href="submitpage.php?id=4591">Submit</a>][<a href="problemstatus.php?id=4591">Status</a>][<a href="bbs.php?id=4591">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>曾经发明了脑洞治疗仪&amp;超能粒子炮的发明家SHTSC又公开了他的新发明：超能粒子炮&middot;改--一种可以发射威力更加</div><p></p>
<div>强大的粒子流的神秘装置。超能粒子炮&middot;改相比超能粒子炮，在威力上有了本质的提升。它有三个参数n，k。它会</div>
<div>向编号为0到k的位置发射威力为C(n,k) mod 2333的粒子流。现在SHTSC给出了他的超能粒子炮&middot;改的参数，让你求</div>
<div>其发射的粒子流的威力之和模2333。</div>
<p></p></div><h3>Input</h3><div class="content"><div>第一行一个整数t。表示数据组数。</div>
<div>之后t行，每行二个整数n，k。含义如题面描述。</div>
<div>k&lt;=n&lt;=10^18，t&lt;=10^5</div>
<p></p></div><h3>Output</h3><div class="content"><div>t行每行一个整数，表示其粒子流的威力之和模2333的值。</div>
<p></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">1<br>
5 5    <br>
</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">32</span></div><h3>HINT</h3>
            <div class="content"><p></p></div><h3>source</h3>
            <div class="content"><p><a href="problemset.php?search=By 佚名上传">By 佚名上传</a></p></div>

<h2 id="题目分析-8"><a href="#题目分析-8" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先我们知道Lucas定理，我们可以把这个东西进行进制分解（2333进制），我们发现分解完的样子是$n$的每个进制上的某个组合数前缀和（形如$\sum_{i = 0}^ {k} C_p^i$）乘在一起的形式</p>
<p>但是这个东西不只是和$n$有关，与$k$也有关系，每个进制上都是一个组合数前缀和的形式，但是最后对应的十进制数不能超过$k$，所以我们考虑数位DP，考虑当前的数是否卡$k$的界，然后再求出当前进制下的前缀和是什么即可</p>
<p>感觉各种乱解释。。。这题真的不太好说。。。具体还是看代码吧</p>
<h2 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2333</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 2333</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> num1[<span class="number">10</span>], num2[<span class="number">10</span>];</div><div class="line"><span class="keyword">int</span> len1, len2;</div><div class="line">LL n, k;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dep</span><span class="params">(LL x, <span class="keyword">int</span>* num, <span class="keyword">int</span>&amp; ct)</span></span>&#123;</div><div class="line">    ct = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x)&#123;</div><div class="line">        num[++ct] = x % M;</div><div class="line">        x /= M;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL fac[maxn];</div><div class="line">LL ifac[maxn];</div><div class="line">LL inv[maxn];</div><div class="line">LL pre[maxn][maxn];</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">cal</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (m &lt; n) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> fac[m] * ifac[n] % M * ifac[m - n] % M;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) fac[i] = fac[i - <span class="number">1</span>] * i % M;</div><div class="line">    inv[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++) inv[i] = (M - M / i * inv[M % i] % M) % M;</div><div class="line">    ifac[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) ifac[i] = ifac[i - <span class="number">1</span>] * inv[i] % M;</div><div class="line"></div><div class="line">    pre[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++)&#123;</div><div class="line">        pre[i][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; maxn; j++)&#123;</div><div class="line">            pre[i][j] = (pre[i - <span class="number">1</span>][j] + pre[i - <span class="number">1</span>][j - <span class="number">1</span>]) % M;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; maxn; j++)&#123;</div><div class="line">            pre[i][j] += pre[i][j - <span class="number">1</span>];</div><div class="line">            pre[i][j] %= M;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">power</span><span class="params">(LL x, LL y)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">1</span>, con = x;</div><div class="line">    <span class="keyword">while</span> (y)&#123;</div><div class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ans = ans * con % M;</div><div class="line">        con = con * con % M;</div><div class="line">        y &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> vis[<span class="number">10</span>][<span class="number">2</span>];</div><div class="line">LL dp[<span class="number">10</span>][<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">DP</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> op)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (!pos) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (vis[pos][op]) <span class="keyword">return</span> dp[pos][op];</div><div class="line">    vis[pos][op] = <span class="number">1</span>;</div><div class="line">    LL&amp; ans = dp[pos][op];</div><div class="line">    <span class="keyword">if</span> (op) &#123;</div><div class="line">        <span class="keyword">if</span> (num2[pos] &gt; <span class="number">0</span>) ans += pre[num1[pos]][min(num1[pos], num2[pos] - <span class="number">1</span>)] * DP(pos - <span class="number">1</span>, <span class="number">0</span>) % M;</div><div class="line">        ans += cal(num1[pos], num2[pos]) * DP(pos - <span class="number">1</span>, <span class="number">1</span>) % M;</div><div class="line">        ans %= M;</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ans = pre[num1[pos]][num1[pos]] * DP(pos - <span class="number">1</span>, <span class="number">0</span>) % M;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--)&#123;</div><div class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">        <span class="built_in">memset</span>(num1, <span class="number">0</span>, <span class="keyword">sizeof</span>(num1));</div><div class="line">        <span class="built_in">memset</span>(num2, <span class="number">0</span>, <span class="keyword">sizeof</span>(num2));</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;k);</div><div class="line">        dep(n, num1, len1);</div><div class="line">        dep(k, num2, len2);</div><div class="line">        <span class="comment">//printf("%lld %lld\n", DP(max(len1, len2), 1), power(2, n % (M - 1)));</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, DP(max(len1, len2), <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实就是一个数位DP……</p>
<p><title>Problem 1004. -- [HNOI2008]Cards</title><center><h2>1004: [HNOI2008]Cards</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>3781&nbsp;&nbsp;<span class="green">Solved: </span>2282<br>[<a href="submitpage.php?id=1004">Submit</a>][<a href="problemstatus.php?id=1004">Status</a>][<a href="bbs.php?id=1004">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p>　　小春现在很清闲,面对书桌上的N张牌,他决定给每张染色,目前小春只有3种颜色:红色,蓝色,绿色.他询问Sun有<br>
多少种染色方案,Sun很快就给出了答案.进一步,小春要求染出Sr张红色,Sb张蓝色,Sg张绝色.他又询问有多少种方<br>
案,Sun想了一下,又给出了正确答案. 最后小春发明了M种不同的洗牌法,这里他又问Sun有多少种不同的染色方案.<br>
两种染色方法相同当且仅当其中一种可以通过任意的洗牌法(即可以使用多种洗牌法,而每种方法可以使用多次)洗<br>
成另一种.Sun发现这个问题有点难度,决定交给你,答案可能很大,只要求出答案除以P的余数(P为质数).</p></div><h3>Input</h3><div class="content"><p>　　第一行输入 5 个整数：Sr,Sb,Sg,m,p(m&lt;=60,m+1&lt;p&lt;100)。n=Sr+Sb+Sg。<br>
接下来 m 行，每行描述一种洗牌法，每行有 n 个用空格隔开的整数 X1X2...Xn，恰为 1 到 n 的一个排列，<br>
表示使用这种洗牌法，第 i位变为原来的 Xi位的牌。输入数据保证任意多次洗牌都可用这 m种洗牌法中的一种代<br>
替，且对每种洗牌法，都存在一种洗牌法使得能回到原状态。<br>
<br>
</p></div><h3>Output</h3><div class="content"><p>　　不同染法除以P的余数</p></div><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">1 1 1 2 7<br>
2 3 1<br>
3 1 2</span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">2</span></div><h3>HINT</h3><br>            <div class="content"><p></p><p>　　有2 种本质上不同的染色法RGB 和RBG，使用洗牌法231 一次可得GBR 和BGR，使用洗牌法312 一次 可得BRG <br><br>
和GRB。<br><br>
100%数据满足 Max{Sr,Sb,Sg}&lt;=20。</p></div><p></p>
<h2 id="题目分析-9"><a href="#题目分析-9" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先题目的每一句描述都在提示你洗牌法集合是一个置换群，那么我们直接使用Polya定理即可，考虑如何求出每种洗牌法的不动点数量</p>
<p>我们先求出每种洗牌法的环的个数和大小（就是不停的做这个置换，许多位置就像环一样循环往复），那么我们相当于每种颜色都是一个背包，而每个环都是物品，我们最后必须把所有环装进背包而无一点剩余空间（废话。。。全装进去了不就没有剩余空间了吗。。。）</p>
<p>所以，我们先求出这个置换的环的相关信息，然后跑背包DP即可，DP结果即为这个置换的不动点数量，把所有这样的不动点数量加在一起除以置换数就是答案，而且这个数一定是个整数（即能整除），否则你一定是算错了。。。</p>
<p>注意，不变也是一种置换，因为是一个置换群，这个不要忘记考虑</p>
<h2 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 70</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">int</span> n, m, sa, sb, sc, p2;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> pre[maxn];</div><div class="line"><span class="keyword">int</span> ct = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    vis[x] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> siz = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> now = p[x];</div><div class="line">    <span class="keyword">while</span> (now != x)&#123;</div><div class="line">        vis[now] = <span class="number">1</span>;</div><div class="line">        siz++;</div><div class="line">        now = p[now];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> siz;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_block</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (!vis[i]) line[++ct] = DFS(i);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ct; i++) pre[i] = pre[i - <span class="number">1</span>] + line[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> vis2[maxn][maxn][maxn];</div><div class="line"><span class="keyword">int</span> dp[maxn][maxn][maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (a &lt; <span class="number">0</span> || b &lt; <span class="number">0</span> || (n - pre[pos - <span class="number">1</span>] - a - b &lt; <span class="number">0</span>)) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (pos == ct + <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (vis2[pos][a][b]) <span class="keyword">return</span> dp[pos][a][b];</div><div class="line">    vis2[pos][a][b] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span>&amp; ans = dp[pos][a][b];</div><div class="line">    <span class="keyword">return</span> ans = ((DP(pos + <span class="number">1</span>, a - line[pos], b) + DP(pos + <span class="number">1</span>, a, b - line[pos])) % p2 + DP(pos + <span class="number">1</span>, a, b)) % p2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">power</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">1</span>, con = x;</div><div class="line">    <span class="keyword">while</span> (y)&#123;</div><div class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ans = ans * con % p2;</div><div class="line">        con = con * con % p2;</div><div class="line">        y &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">get_inv</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> power(x, p2 - <span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d"</span>, &amp;sa, &amp;sb, &amp;sc, &amp;m, &amp;p2);</div><div class="line">    n = sa + sb + sc;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m + <span class="number">1</span>; i++)&#123;</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">        <span class="built_in">memset</span>(vis2, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis2));</div><div class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">        ct = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (i &lt;= m) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p[j]);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) p[j] = j;</div><div class="line">        get_block();</div><div class="line">        ans += DP(<span class="number">1</span>, sa, sb);</div><div class="line">        ans %= p2;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans * get_inv(m + <span class="number">1</span>) % p2);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</div></=></div></=></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;Some day we’ll meet again….&lt;br&gt;
    
    </summary>
    
    
      <category term="BZOJ" scheme="https://goseqh.tk/tags/BZOJ/"/>
    
      <category term="题解" scheme="https://goseqh.tk/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ阶段性汇总VII</title>
    <link href="https://goseqh.tk/2017/11/02/BZOJ%E9%98%B6%E6%AE%B5%E6%80%A7%E6%B1%87%E6%80%BBVII/"/>
    <id>https://goseqh.tk/2017/11/02/BZOJ阶段性汇总VII/</id>
    <published>2017-11-02T07:58:15.000Z</published>
    <updated>2017-11-02T10:52:20.409Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>Can you hear me ? I have arrived at this place, it’s far from where we start, isn’t it?<br><a id="more"></a></p>
<p><title>Problem 4800. -- [Ceoi2015]Ice Hockey World Championship</title><center><h2>4800: [Ceoi2015]Ice Hockey World Championship</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>256 MB<br><span class="green">Submit: </span>486&nbsp;&nbsp;<span class="green">Solved: </span>259<br>[<a href="submitpage.php?id=4800">Submit</a>][<a href="problemstatus.php?id=4800">Status</a>][<a href="bbs.php?id=4800">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>有n个物品，m块钱，给定每个物品的价格，求买物品的方案数。</div><p></p>
<div></div>
<p></p></div><h3>Input</h3><div class="content"><div>第一行两个数n，m代表物品数量及钱数</div>
<div>第二行n个数，代表每个物品的价格</div>
<div>n&lt;=40，m&lt;=10^18</div>
<div></div>
<p></p></div><h3>Output</h3><div class="content"><div>一行一个数表示购买的方案数</div>
<div>（想怎么买就怎么买，当然不买也算一种）</div>
<div></div>
<p></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">5 1000<br>
100 1500 500 500 1000</span></div><h3>Sample Output</h3>
<span class="sampledata">8</span>

<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>你看这个题目说的，“想怎么买就怎么买”，这题一定很随意，所以我们必须搜索出所有的情况，但是如果Naive的做这道题，我们显然会TLE，那么，我们还是考虑如何合并一些信息，加快速度</p>
<p>我们观察题目，物品个数的数据范围虽然在暴力情况下会TLE，但是本身其实也并不大，这时就有一个技巧，那就是Meet in the Middle，即中途相遇法，我们把前后各$20种物品的取用方法分别预处理出来，然后考察其中一部分，枚举里面的情况在另一部分中二分，然后直接更新答案即可，这时就会变得非常稳</p>
<p>然而我这么弱并没有想到QAQ，感觉之前要是不会还是挺难想的。。。。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 45</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 2000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++) </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line">LL m;</div><div class="line">LL c[maxn];</div><div class="line">LL A[maxm];</div><div class="line"><span class="keyword">int</span> ca = <span class="number">0</span>;</div><div class="line">LL B[maxm];</div><div class="line"><span class="keyword">int</span> cb = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> mid;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS1</span><span class="params">(<span class="keyword">int</span> pos, LL sum)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (sum &gt; m) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (pos == mid + <span class="number">1</span>) &#123;</div><div class="line">        A[++ca] = sum;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    DFS1(pos + <span class="number">1</span>, sum);</div><div class="line">    DFS1(pos + <span class="number">1</span>, sum + c[pos]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS2</span><span class="params">(<span class="keyword">int</span> pos, LL sum)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (sum &gt; m) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (pos == n + <span class="number">1</span>) &#123;</div><div class="line">        B[++cb] = sum;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    DFS2(pos + <span class="number">1</span>, sum);</div><div class="line">    DFS2(pos + <span class="number">1</span>, sum + c[pos]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>, &amp;n, &amp;m);</div><div class="line">    mid = n &gt;&gt; <span class="number">1</span>;</div><div class="line">    rep(i, <span class="number">1</span>, n) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;c[i]);</div><div class="line">    DFS1(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">    DFS2(mid + <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">    sort(A + <span class="number">1</span>, A + <span class="number">1</span> + ca);</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    rep(i, <span class="number">1</span>, cb) ans += upper_bound(A + <span class="number">1</span>, A + <span class="number">1</span> + ca, m - B[i]) - A - <span class="number">1</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 4296. -- [PA2015]Mistrzostwa</title><center><h2>4296: [PA2015]Mistrzostwa</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>256 MBSec&nbsp;&nbsp;<span class="red">Special Judge</span><br><span class="green">Submit: </span>222&nbsp;&nbsp;<span class="green">Solved: </span>93<br>[<a href="submitpage.php?id=4296">Submit</a>][<a href="problemstatus.php?id=4296">Status</a>][<a href="bbs.php?id=4296">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p>给定一张n个点m条边的无向图，请找到一个点数最多的点集S，满足：<br>
1.对于点集中任何一个点，它至少与d个点集中的点相邻。<br>
2.仅保留点集中的点后，剩下的图连通。</p></div><h3>Input</h3><div class="content"><p>第一行包含三个正整数n,m,d(2&lt;=n&lt;=200000，1&lt;=m&lt;=200000，1&lt;=d&lt;n)，分别表示点数，边数以及度数限制。<br>
接下来m行，每行包含两个正整数a,b(1&lt;=a,b&lt;=n，a不等于b)，表示a点和b点之间有一条边。</p></div><h3>Output</h3><div class="content"><p>若无解，输出NIE。<br>
否则第一行输出一个正整数k，表示你找到的点数最多的点集S的点数。<br>
第二行输出k个正整数，按升序依次输出点集中的点的编号，若有多组解，输出任意一组。</p></div><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">4 4 2<br>
1 2<br>
2 3<br>
3 4<br>
4 2</span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">3<br>
2 3 4<br>
</span></div><p></p>
<h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先我们知道，度数不超过$d$的点是肯定不行的，所以我们就先把它们删掉，删掉以后又会有一些点度数变小，我们就可以用队列来搞删除这个操作，删到最后，如果还有点剩下，那么这些点的度数一定都是大于等于$d$的，而此时这些点其实本身就可以作为答案来更新了，因为它们满足题目中的条件。。。</p>
<p>所以，我们删完点后，考虑每个连通块，直接求出最大答案即可</p>
<p>本题主要是一种递归处理的思想吧，其实之前POI也考了一道类似的题，忘了是哪年的了。。。</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> erep(i, x) for (register int i = h[x]; i; i = e[i].next)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, d;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>, deg[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[x], y);</div><div class="line">    h[x] = cnt;</div><div class="line">    e[++cnt] = edge(h[y], x);</div><div class="line">    h[y] = cnt;</div><div class="line">    deg[x]++, deg[y]++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> kill[maxn];</div><div class="line"><span class="keyword">int</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> siz[maxn];</div><div class="line"><span class="keyword">int</span> ct = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    vis[x] = ct;</div><div class="line">    erep(i, x)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (vis[op] || kill[op]) <span class="keyword">continue</span>;</div><div class="line">        DFS(op);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; ans;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;d);</div><div class="line">    rep(i, <span class="number">1</span>, m)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        Add_Edge(x, y);</div><div class="line">    &#125;</div><div class="line">    rep(i, <span class="number">1</span>, n) <span class="keyword">if</span> (deg[i] &lt; d) q.push(i);</div><div class="line">    <span class="keyword">while</span> (!q.empty())&#123;</div><div class="line">        <span class="keyword">int</span> op = q.front(); q.pop();</div><div class="line">        kill[op] = <span class="number">1</span>;</div><div class="line">        erep(i, op)&#123;</div><div class="line">            <span class="keyword">int</span> k = e[i].to;</div><div class="line">            <span class="keyword">if</span> (deg[k] &lt; d) <span class="keyword">continue</span>;</div><div class="line">            deg[k]--;</div><div class="line">            <span class="keyword">if</span> (deg[k] &lt; d) q.push(k);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    rep(i, <span class="number">1</span>, n) <span class="keyword">if</span> (!vis[i] &amp;&amp; !kill[i]) ct++, DFS(i); </div><div class="line">    <span class="keyword">if</span> (!ct)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"NIE"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    rep(i, <span class="number">1</span>, n) siz[vis[i]]++;</div><div class="line">    <span class="keyword">int</span> ma = <span class="number">0</span>;</div><div class="line">    rep(i, <span class="number">1</span>, ct) ma = max(ma, siz[i]);</div><div class="line">    rep(i, <span class="number">1</span>, ct)&#123;</div><div class="line">        <span class="keyword">if</span> (siz[i] == ma)&#123;</div><div class="line">            rep(j, <span class="number">1</span>, n) <span class="keyword">if</span> (vis[j] == i) ans.insert(j); </div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ma);</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; :: iterator it = ans.begin(); it != ans.end(); it++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, *it);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 4292. -- [PA2015]Równanie</title><center><h2>4292: [PA2015]Równanie</h2><span class="green">Time Limit: </span>1 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>256 MB<br><span class="green">Submit: </span>481&nbsp;&nbsp;<span class="green">Solved: </span>270<br>[<a href="submitpage.php?id=4292">Submit</a>][<a href="problemstatus.php?id=4292">Status</a>][<a href="bbs.php?id=4292">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>对于一个正整数n，定义f(n)为它十进制下每一位数字的平方的和。现在给定三个正整数k,a,b，请求出满足a&lt;=n&lt;=b且k*f(n)=n的n的个数。</div><p></p>
<div></div>
<p></p></div><h3>Input</h3><div class="content"><div>第一行包含三个正整数k,a,b(1&lt;=k,a,b&lt;=10^18,a&lt;=b)。</div>
<div></div>
<p></p></div><h3>Output</h3><div class="content"><div>输出一个整数，即满足条件的n的个数。</div>
<div></div>
<p></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">51 5000 10000</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">3</span></div><h3>HINT</h3>
            <div class="content"><p></p><p>满足的3个n分别为7293，7854和7905。</p><br>
<p></p><p></p></div><h3>source</h3>
            <div class="content"><p><a href="problemset.php?search=By Claris">By Claris</a></p></div>

<h2 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h2><p>这种题显然是要枚举。。。因为$f$函数就那么几个值，我们就考虑把求值型问题转化为判定性问题，我们枚举$f$函数值然后直接搞就可以了。。。</p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    LL k, a, b;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>, &amp;k, &amp;a, &amp;b);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> LL i = <span class="number">1</span>; i &lt;= <span class="number">81</span> * <span class="number">18</span>; i++)&#123;</div><div class="line">        LL op = i * k;</div><div class="line">        <span class="keyword">if</span> (op &lt; a) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span> (op &gt; b) <span class="keyword">break</span>;</div><div class="line">        LL tem = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (op) tem += (op % <span class="number">10</span>) * (op % <span class="number">10</span>), op /= <span class="number">10</span>;</div><div class="line">        <span class="keyword">if</span> (tem == i) ans++;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 4291. -- [PA2015]Kieszonkowe</title><center><h2>4291: [PA2015]Kieszonkowe</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>256 MB<br><span class="green">Submit: </span>978&nbsp;&nbsp;<span class="green">Solved: </span>570<br>[<a href="submitpage.php?id=4291">Submit</a>][<a href="problemstatus.php?id=4291">Status</a>][<a href="bbs.php?id=4291">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>给定n个数，请从中选出若干个数，使得总和为偶数，请最大化这个总和。</div><p></p>
<div></div>
<p></p></div><h3>Input</h3><div class="content"><div>第一行包含一个正整数n(1&lt;=n&lt;=1000000)。</div>
<div>第二行包含n个正整数a_1,a_2,...,a_n(1&lt;=a_i&lt;=1000)。</div>
<div></div>
<p></p></div><h3>Output</h3><div class="content"><div>输出一个正整数，即最大的总和，若无解则输出NIESTETY。</div>
<div></div>
<p></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">5<br>
2 4 3 3 3</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">12</span></div><h3>HINT</h3>
            <div class="content"><p></p></div><h3>source</h3>
            <div class="content"><p><a href="problemset.php?search=By Claris">By Claris</a></p></div>

<h2 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h2><p>这题可以竞选OJ十大水题。。。不解释，然而我还WA了一次QAQ</p>
<h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n, x;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> mi = <span class="number">1005</span>;</div><div class="line">    <span class="keyword">int</span> f = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">        ans += x;</div><div class="line">        <span class="keyword">if</span> (x &amp; <span class="number">1</span>) mi = min(mi, x), f ^= <span class="number">1</span>;<span class="comment">//Error：别忘了奇数有偶数个的情况......</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (f &amp;&amp; mi &lt; <span class="number">1005</span>) ans -= mi;</div><div class="line">    <span class="keyword">if</span> (!ans) <span class="built_in">printf</span>(<span class="string">"NIESTETY"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 2086. -- [Poi2010]Blocks</title><center><h2>2086: [Poi2010]Blocks</h2><span class="green">Time Limit: </span>20 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>259 MB<br><span class="green">Submit: </span>754&nbsp;&nbsp;<span class="green">Solved: </span>336<br>[<a href="submitpage.php?id=2086">Submit</a>][<a href="problemstatus.php?id=2086">Status</a>][<a href="bbs.php?id=2086">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p>给出N个正整数a[1..N]，再给出一个正整数k，现在可以进行如下操作：每次选择一个大于k的正整数a[i]，将a[i]减去1，选择a[i-1]或a[i+1]中的一个加上1。经过一定次数的操作后，问最大能够选出多长的一个连续子序列，使得这个子序列的每个数都不小于k。<br>
总共给出M次询问，每次询问给出的k不同，你需要分别回答。</p><p></p>
<p></p><p></p></div><h3>Input</h3><div class="content"><p>第一行两个正整数N (N &lt;= 1,000,000)和M (M &lt;= 50)。<br>
第二行N个正整数，第i个正整数表示a[i] (a[i] &lt;= 10^9)。<br>
第三行M个正整数，第i个正整数表示第i次询问的k (k &lt;= 10^9)。</p><p></p>
<p></p><p></p></div><h3>Output</h3><div class="content"><p>共一行，输出M个正整数，第i个数表示第i次询问的答案。</p><p></p>
<p></p><p></p>&lt;/div&gt;<h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">5 6<br>
1 2 1 1 5<br>
1 2 3 4 5 6<br>
<br>
<br>
<br>
 <br>
</span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">5 5 2 1 1 0<br>
</span></div><p></p>
<h2 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先这题我们可以把数字看做海拔，高度小于$k$的那些就是坑喽，并且要搞明白什么时候可以把坑补上然后继续向一侧延伸，我们发现，对于一个区间，如果有里面的数字之和非负，那么这个区间可以通过各种填坑或是移山的操作使之没有坑，这样，我们可以用前缀差表示这件事</p>
<p>我们如果固定顺序扫描前缀的话，我们需要二分查找这样的环节，但是这样显然会炸是吧，（其实$O(nm)$都是挺虚的），所以我们不能这样搞</p>
<p>我们可以发现，当两个前缀和$pre_i$与$pre_j$满足这样的条件时：$pre_i &lt; pre_j \mbox{而且} i &lt; j$的时候，$pre_i$肯定就没有用了，这应该很显然，因为对于$pre_i$来说可行的左端点对于$pre_j$来说也一定可行，然后$j$还在$i$的后面。。。</p>
<p>所以，我们可以用单调栈来维护这些东西，最后，这些可能最优的决策就是一个单调递减的东西，而且它们的最远合法左端点一定也是单调递增的，那么我们就可以直接扫描一遍，求出答案</p>
<h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() ((p1 == p2 &amp;&amp; (p2 = (p1 = buffer) + fread(buffer, 1, maxn, stdin), p1 == p2)) ? EOF : *p1++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, l, r) for (register int i = r; i &gt;= l; i--) </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">char</span> *p1, *p2;</div><div class="line"><span class="keyword">char</span> buffer[maxn];</div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = gc(); x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (!(<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>)) ch = gc();</div><div class="line">    <span class="keyword">while</span> (<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) +  ch - <span class="string">'0'</span>, ch = gc();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> a[maxn];</div><div class="line">LL b[maxn];</div><div class="line"><span class="keyword">int</span> sta[maxn];</div><div class="line"><span class="keyword">int</span> head = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> m, x;</div><div class="line">    read(n); read(m);</div><div class="line">    rep(i, <span class="number">1</span>, n) read(a[i]); </div><div class="line">    rep(i, <span class="number">1</span>, m) &#123;</div><div class="line">        read(x);</div><div class="line">        rep(j, <span class="number">1</span>, n) b[j] = b[j - <span class="number">1</span>] + a[j] - x;  </div><div class="line">        per(j, <span class="number">1</span>, n)&#123;</div><div class="line">            <span class="keyword">while</span> (head &amp;&amp; (b[j - <span class="number">1</span>] &lt;= b[sta[head] - <span class="number">1</span>])) head--;</div><div class="line">            sta[++head] = j;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> now = n, ans = <span class="number">0</span>;</div><div class="line">        rep(j, <span class="number">1</span>, head)&#123;</div><div class="line">            <span class="keyword">while</span> (now &amp;&amp; b[now] &lt; b[sta[j] - <span class="number">1</span>]) now--;</div><div class="line">            ans = max(ans, now - sta[j] + <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">" %d"</span>, ans);</div><div class="line">        head = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 4806. -- 炮</title><center><h2>4806: 炮</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>681&nbsp;&nbsp;<span class="green">Solved: </span>333<br>[<a href="submitpage.php?id=4806">Submit</a>][<a href="problemstatus.php?id=4806">Status</a>][<a href="bbs.php?id=4806">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>众所周知，双炮叠叠将是中国象棋中很厉害的一招必杀技。炮吃子时必须隔一个棋子跳吃，即俗称&quot;炮打隔子&quot;。&nbsp;</div><p></p>
<div>炮跟炮显然不能在一起打起来，于是rly一天借来了许多许多的炮在棋盘上摆了起来&hellip;&hellip;他想知道，在N&times;M的矩形</div>
<div>方格中摆若干炮（可以不摆）使其互不吃到的情况下方案数有几种。</div>
<div>棋子都是相同的。</div>
<p></p></div><h3>Input</h3><div class="content"><div>一行，两个正整数N和M。</div>
<div>N&lt;=100,M&lt;=100</div>
<p></p></div><h3>Output</h3><div class="content"><div>一行，输出方案数mod 999983。</div>
<p></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">1 3</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">7</span></div><h3>HINT</h3>
            <div class="content"><p></p></div><h3>source</h3>
            <div class="content"><p><a href="problemset.php?search=By  FancyCoder">By  FancyCoder</a></p></div>

<h2 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h2><p>这题首先第一点就是任一行和列不能有超过两个棋子，这非常显然，然后，考虑按行DP，我们发现，对于当前的所有列都分别有多少棋子这件事我们是需要知道的，但是我们不需要知道具体某一列的情况，因为我们可以组合计数，所以我们可以多加入三维：当前列上棋子为0, 1, 2的列的个数分别是多少，然后转移时分类讨论一下，结合列信息推一推就好了</p>
<h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 999983</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">bool</span> vis[maxn][maxn][maxn];</div><div class="line"><span class="keyword">int</span> dp[maxn][maxn][maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> n0, <span class="keyword">int</span> n1)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (pos == n + <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (vis[pos][n0][n1]) <span class="keyword">return</span> dp[pos][n0][n1];</div><div class="line">    vis[pos][n0][n1] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span>&amp; ans = dp[pos][n0][n1];</div><div class="line">    ans = DP(pos + <span class="number">1</span>, n0, n1) % M;</div><div class="line">    <span class="keyword">if</span> (n0) ans += (LL)DP(pos + <span class="number">1</span>, n0 - <span class="number">1</span>, n1 + <span class="number">1</span>) * n0 % M, ans %= M;</div><div class="line">    <span class="keyword">if</span> (n0 &gt; <span class="number">1</span>) ans += (LL)DP(pos + <span class="number">1</span>, n0 - <span class="number">2</span>, n1 + <span class="number">2</span>) * (n0 * (n0 - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) % M, ans %= M;</div><div class="line">    <span class="keyword">if</span> (n1) ans += (LL)DP(pos + <span class="number">1</span>, n0, n1 - <span class="number">1</span>) * n1 % M, ans %= M;</div><div class="line">    <span class="keyword">if</span> (n1 &gt; <span class="number">1</span>) ans += (LL)DP(pos + <span class="number">1</span>, n0, n1 - <span class="number">2</span>) * (n1 * (n1 - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) % M, ans %= M;</div><div class="line">    <span class="keyword">if</span> (n0 &amp;&amp; n1) ans += (LL)DP(pos + <span class="number">1</span>, n0 - <span class="number">1</span>, n1) * n0 % M * n1 % M, ans %= M;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, DP(<span class="number">1</span>, m, <span class="number">0</span>));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>正好1000B，真是大吉大利</p>
<p><title>Problem 4414. -- 数量积</title><center><h2>4414: 数量积</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>383&nbsp;&nbsp;<span class="green">Solved: </span>142<br>[<a href="submitpage.php?id=4414">Submit</a>][<a href="problemstatus.php?id=4414">Status</a>][<a href="bbs.php?id=4414">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>神犇heheda最近得到了UOJ抱枕，蒟蒻yts1999想要玩。于是heheda给yts1999出了一道题：</div><p></p>
<div>一个长度为2n+2的整数数列 按照下式定义：</div>
<div>A0=0</div>
<div>A1=C</div>
<div>Ai+2=(Ai+1+Ai) Mod M (0&lt;=i&lt;=2*N)</div>
<div>现有n个平面向量v1&hellip;vn：</div>
<div>V1=(A2,A3),V2=(A4,A5)...Vn=(A2n,A2n+1)</div>
<div>集合S的定义如下：</div>
<div>&nbsp;<img width="380" height="48" alt="" src="/JudgeOnline/upload/201602/111.png"></div>
<div>其中&quot;vi&bull;vj&quot;表示向量vi和vj的数量积。</div>
<div>求S集合中不同元素的个数是多少。答案对M取模。</div>
<div>heheda告诉yts1999，只要他做出了这道题，她就可以把抱枕借给他玩一会。然而yts1999实在是太弱了不会做，于是向你求助。</div>
<p></p></div><h3>Input</h3><div class="content"><div>输入数据包含一行三个整数C,M和n，分别表示a1的值，模数和平面向量的个数，每两个数之间用一个空格隔开。</div>
<p></p></div><h3>Output</h3><div class="content"><div>输出一行一个整数表示答案对M取模后的值。</div>
<p></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">4 5 3</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">2</span></div><h3>HINT</h3>
            <div class="content"><p><div>数列为{0,4,4,3,2,0,2,2}，v1=(4,3),v2=(2,0),v3=(2,2)。</div><br>
<div><span style="font-family: arial, verdana, helvetica, sans-serif; font-size: 18px; line-height: normal; background-color: rgb(228, 240, 248);">v1&bull;v2 mod M=3</span>, v2&bull;v3 mod M=4, v1&bull;v3 mod M=4。</div><br>
<div>对于100%的数据，1&le;C&le;10^9,1&le;M&le;10^9,1&le;n&le;3*10^5</div><br>
<div></div><br>
</p><p></p><p></p></div><h3>source</h3>
            <div class="content"><p><a href="problemset.php?search=By yts1999">By yts1999</a></p></div>

<h2 id="题目分析-6"><a href="#题目分析-6" class="headerlink" title="题目分析"></a>题目分析</h2><p>真是巧，前几天刚集中研(mo)究(bai)了一下Fibonacci数列的相关性质，然后这题就出现了。。。</p>
<p>首先我们手动推(xun)导(zhao)一(gui)下(lv),发现任意两个向量乘完以后是非零首项值为$C^2$的Fibonacci数列中的某一项，更细致的推导可以发现是里面从$[7,4n - 1]$（应该是，要是不对就自己推一遍，反正是$O(n)$的）中的所有<strong>奇数项</strong>，然后就可以直接扫一遍看看余数情况就行了。。。。</p>
<p>其实上面那个规律是有公式的，<a href="http://218.106.205.134:7652/article/32" target="_blank" rel="external">姿势链接</a></p>
<h2 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i += 2) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</div><div class="line">LL c, M;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld%d"</span>, &amp;c, &amp;M, &amp;n);</div><div class="line">    c = c * c % M;</div><div class="line">    LL a = c * <span class="number">3</span> % M, b = c * <span class="number">5</span> % M;</div><div class="line">    rep(i, <span class="number">7</span>, (n &lt;&lt; <span class="number">2</span>) - <span class="number">1</span>)&#123;</div><div class="line">        LL tem = b;</div><div class="line">        b = (a + b) % M;</div><div class="line">        a = tem;</div><div class="line">        tem = b;</div><div class="line">        b = (a + b) % M;</div><div class="line">        a = tem;</div><div class="line">        s.insert(b);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, s.size() % M);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 4802. -- 欧拉函数</title><center><h2>4802: 欧拉函数</h2><span class="green">Time Limit: </span>5 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>256 MB<br><span class="green">Submit: </span>990&nbsp;&nbsp;<span class="green">Solved: </span>367<br>[<a href="submitpage.php?id=4802">Submit</a>][<a href="problemstatus.php?id=4802">Status</a>][<a href="bbs.php?id=4802">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>已知N，求phi(N)</div><p></p>
<p></p><p></p>&lt;/div&gt;<h3>Input</h3><div class="content"><div>正整数N。N&lt;=10^18</div><p></p>
<p></p><p></p>&lt;/div&gt;<h3>Output</h3><div class="content"><div>输出phi(N)</div><p></p>
<p></p><p></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">8</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">4</span></div><h3>HINT</h3>
            <div class="content"><p></p>&lt;/div&gt;<h3>source</h3><br>            <div class="content"><p><a href="problemset.php?search=By FancyCoder">By FancyCoder</a></p></div><p></p>
<h2 id="题目分析-7"><a href="#题目分析-7" class="headerlink" title="题目分析"></a>题目分析</h2><p>借这道题学习了一下Miller-Robin和Pollard-Rho，感觉技能点++</p>
<p>其实非常简单，我们交替着来Miller-Robin和Pollard-Rho，最后合并欧拉函数值，注意，这个不是直接乘在一起，一定要小心，而是采用下面这个公式<script type="math/tex">\frac{\varphi(x) * \varphi(y) }{\varphi(gcd(x, y))} * gcd(x, y)</script></p>
<p>然后本题就结束了，鉴于网上讲解Miller-Robin和Pollard-Rho的文章颇多，<del>而且像我这样的辣鸡都能看着学会</del>，本处不再占用过多篇幅讲解</p>
<p>p.s. BZOJ上的数据太弱了，即使自己过了也不要认为代码完全正确，上面的phi函数合并我都是直接乘在一起的也过了。。。后来才发现这样不对。。。</p>
<h2 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> F(k) ((mul(k, k, x) + c) % x)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> phi[maxn];</div><div class="line"><span class="keyword">int</span> pr[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    rep(i, <span class="number">2</span>, maxn - <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i]) &#123;</div><div class="line">            pr[++cnt] = i;</div><div class="line">            phi[i] = i - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        rep(j, <span class="number">1</span>, cnt)&#123;</div><div class="line">            <span class="keyword">if</span> (i * pr[j] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * pr[j]] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (i % pr[j] == <span class="number">0</span>)&#123;</div><div class="line">                phi[i * pr[j]] = phi[i] * pr[j];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            phi[i * pr[j]] = phi[i] * (pr[j] - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;<span class="comment">//Euler Sieve Algorithm</span></div><div class="line"></div><div class="line"><span class="function">LL <span class="title">mul</span><span class="params">(LL x, LL y, LL M)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>, con = x;</div><div class="line">    <span class="keyword">while</span> (y)&#123;</div><div class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ans = (ans + con) % M;</div><div class="line">        con = (con + con) % M;</div><div class="line">        y &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;<span class="comment">//calculate x * y % M</span></div><div class="line"></div><div class="line"><span class="function">LL <span class="title">power</span><span class="params">(LL x, LL y, LL M)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">1</span>, con = x;</div><div class="line">    <span class="keyword">while</span> (y)&#123;</div><div class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ans = mul(ans, con, M);</div><div class="line">        con = mul(con, con, M);</div><div class="line">        y &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;<span class="comment">//calculate x ^ y % M</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> p[<span class="number">37</span>] = &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>, <span class="number">101</span>, <span class="number">103</span>, <span class="number">107</span>, <span class="number">109</span>, <span class="number">113</span>, <span class="number">127</span>, <span class="number">131</span>, <span class="number">137</span>, <span class="number">139</span>, <span class="number">149</span>, <span class="number">151</span>&#125;;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> ct = <span class="number">36</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Miller_Robin</span><span class="params">(LL x)</span></span>&#123;</div><div class="line">    rep(i, <span class="number">1</span>, ct) &#123;</div><div class="line">        <span class="keyword">if</span> (p[i] == x) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span> (x % p[i] == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> siz = <span class="number">0</span>;</div><div class="line">    LL _x = x - <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!(_x &amp; <span class="number">1</span>))&#123;</div><div class="line">        siz++;</div><div class="line">        _x &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    rep(i, <span class="number">1</span>, ct)&#123;</div><div class="line">        LL now = power(p[i], _x, x);</div><div class="line">        <span class="keyword">if</span> (now == <span class="number">1</span>) <span class="keyword">continue</span>;</div><div class="line">        rep(j, <span class="number">1</span>, siz)&#123;</div><div class="line">            <span class="keyword">if</span> (now == x - <span class="number">1</span>) <span class="keyword">goto</span> jump;</div><div class="line">            <span class="keyword">if</span> (now == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            now = mul(now, now, x);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (now != <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        jump:;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;<span class="comment">//Miller-Robin Algorithm</span></div><div class="line"></div><div class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL x, LL y)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (!y) ? x : gcd(y, x % y);</div><div class="line">&#125;<span class="comment">//GCD Algorithm</span></div><div class="line"></div><div class="line"><span class="function">LL <span class="title">Pollard_Rho</span><span class="params">(LL x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x &lt; maxn) <span class="keyword">return</span> phi[x];</div><div class="line">    <span class="keyword">if</span> (Miller_Robin(x)) <span class="keyword">return</span> x - <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>)&#123;</div><div class="line">        LL c = rand() % x;</div><div class="line">        LL a = rand() % x;</div><div class="line">        LL b = F(a);</div><div class="line">        LL ans = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (a != b)&#123;</div><div class="line">            LL d = gcd(<span class="built_in">abs</span>(a - b), x);</div><div class="line">            <span class="keyword">if</span> (d &gt; <span class="number">1</span>) &#123;</div><div class="line">                <span class="comment">//return Pollard_Rho(d) * Pollard_Rho(x / d);</span></div><div class="line">                <span class="keyword">int</span> _d = gcd(d, x / d);</div><div class="line">                <span class="keyword">return</span> Pollard_Rho(d) * Pollard_Rho(x / d) / Pollard_Rho(_d) * _d;</div><div class="line">            &#125;</div><div class="line">            a = F(a);</div><div class="line">            b = F(b), b = F(b);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;<span class="comment">//Pollard-Robin Algorithm</span></div><div class="line"></div><div class="line">LL n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, Pollard_Rho(n));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">Serious Error,at line 87, 97, 99 we can't calculate phi and merely multiple them together, we should do operations like line 98 shown....</div><div class="line"></div><div class="line">Warning at line 87, 110, we should do initial operation to speed up, otherwise the program will get TLE easily....</div><div class="line"></div><div class="line">Attention, the program is also a template for Miller-Robin Algorithm and Pollard-Rho Algorithm....</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>这份代码应该是正确性很高的一份了，这个程序可以通过一个著名强伪随机数$3215031751$的测试</p>
<p><title>Problem 3872. --  [Poi2014]Ant colony</title><center><h2>3872:  [Poi2014]Ant colony</h2><span class="green">Time Limit: </span>30 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>246&nbsp;&nbsp;<span class="green">Solved: </span>97<br>[<a href="submitpage.php?id=3872">Submit</a>][<a href="problemstatus.php?id=3872">Status</a>][<a href="bbs.php?id=3872">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div></div><p></p>
<div>There is an entrance to the ant hill in every chamber with only one corridor leading into (or out of) it. At each entry, there are g groups of m1,m2,...,mg ants respectively. These groups will enter the ant hill one after another, each successive group entering once there are no ants inside. Inside the hill, the ants explore it in the following way:</div>
<div>Upon entering a chamber with d outgoing corridors yet unexplored by the group, the group divides into d groups of equal size. Each newly created group follows one of the d corridors. If d=0, then the group exits the ant hill.</div>
<div>If the ants cannot divide into equal groups, then the stronger ants eat the weaker until a perfect division is possible. Note that such a division is always possible since eventually the number of ants drops down to zero. Nothing can stop the ants from allowing divisibility - in particular, an ant can eat itself, and the last one remaining will do so if the group is smaller than d.</div>
<div>The following figure depicts m ants upon entering a chamber with three outgoing unexplored corridors, dividing themselves into three (equal) groups of floor(m/3) ants each.</div>
<div>A hungry anteater dug into one of the corridors and can now eat all the ants passing through it. However, just like the ants, the anteater is very picky when it comes to numbers. It will devour a passing group if and only if it consists of exactly k ants. We want to know how many ants the anteater will eat.</div>
<div>
<div>给定一棵有n个节点的树。在每个叶子节点，有g群蚂蚁要从外面进来，其中第i群有m[i]只蚂蚁。这些蚂蚁会相继进入树中，而且要保证每一时刻每个节点最多只有一群蚂蚁。这些蚂蚁会按以下方式前进：</div>
<div>&middot;在即将离开某个度数为d+1的点时，该群蚂蚁有d个方向还没有走过，这群蚂蚁就会分裂成d群，每群数量都相等。如果d=0，那么蚂蚁会离开这棵树。</div>
<div>&middot;如果蚂蚁不能等分，那么蚂蚁之间会互相吞噬，直到可以等分为止，即一群蚂蚁有m只，要分成d组，每组将会有floor(m/d)只，如下图。</div>
</div>
<div></div>
<div>
<div style="font-family: Helvetica, 'Microsoft Yahei', verdana; font-size: 14px; line-height: 23px;"><img src="http://218.106.205.134/uploads/s.png" height="px" width="px"></div>
<div style="font-family: Helvetica, 'Microsoft Yahei', verdana; font-size: 14px; line-height: 23px;">一只饥饿的食蚁兽埋伏在一条边上，如果有一群蚂蚁通过这条边，并且数量恰为k只，它就会吞掉这群蚂蚁。请计算一共有多少只蚂蚁会被吞掉。</div>
<div style="font-family: Helvetica, 'Microsoft Yahei', verdana; font-size: 14px; line-height: 23px;"></div>
</div>
<p></p></div><h3>Input</h3><div class="content"><div>The first line of the standard input contains three integers n, g, k (2&lt;=n,g&lt;=1000000, 1&lt;=k&lt;=10^9), separated by single spaces. These specify the number of chambers, the number of ant groups and the number of ants the anteater devours at once. The chambers are numbered from 1 to n.</div>
<div>The second line contains g integers m[1],m[2],...,m[g](1&lt;=m[i]&lt;=10^9), separated by single spaces, where m[i] gives the number of ants in the i-th group at every entrance to the ant hill. The n-1 lines that follow describe the corridors within the ant hill; the i-th such line contains two integers a[i],b[i] (1&lt;=a[i],b[i]&lt;=n), separated by a single space, that indicate that the chambers no.a[i] and b[i] are linked by a corridor. The anteater has dug into the corridor that appears first on input.</div>
<div>第一行包含三个整数n,g,k,表示点数、蚂蚁群数以及k。</div>
<div>第二行包含g个整数m[1],m[2],...,m[g]，表示每群蚂蚁中蚂蚁的数量。</div>
<div>接下来n-1行每行两个整数，表示一条边，食蚁兽埋伏在输入的第一条边上。</div>
<div></div>
<p></p></div><h3>Output</h3><div class="content"><div>Your program should print to the standard output a single line containing a single integer: the number of ants eaten by the anteater.</div>
<div>一个整数，即食蚁兽能吃掉的蚂蚁的数量。</div>
<div></div>
<p></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">7 5 3<br>
3 4 1 9 11<br>
1 2<br>
1 4<br>
4 3<br>
4 5<br>
4 6<br>
6 7</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">21</span></div>

<h2 id="题目分析-8"><a href="#题目分析-8" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先经常做数学题，就知道已知下取整函数的值能求出自变量取值范围，我们就这样从上到下进行树上DP，然后DP到叶子的时候二分答案并累加进最终答案即可，在这样的做法下，DP的返回值是一个二元组，表示可以被吃一次的蚂蚁群的此时可行的数量范围</p>
<p>我为了处理方便，在第一条边中间加了一个点，作为根向下DP</p>
<p>注意当可行区间左边界大于蚂蚁数量最大值时及时跳出，否则会炸long long int</p>
<h2 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() ((p1 == p2 &amp;&amp; (p2 = (p1 = buffer) + fread(buffer, 1, maxn, stdin), p1 == p2)) ? EOF : *p1++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> erep(i, x) for (register int i = h[x]; i; i = e[i].next)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">char</span> *p1, *p2;</div><div class="line"><span class="keyword">char</span> buffer[maxn];</div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = gc(); x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (!(<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>)) ch = gc();</div><div class="line">    <span class="keyword">while</span> (<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>, ch = gc();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, k;</div><div class="line"><span class="keyword">int</span> g[maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>, deg[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[x], y);</div><div class="line">    h[x] = cnt;</div><div class="line">    e[++cnt] = edge(h[y], x);</div><div class="line">    h[y] = cnt;</div><div class="line">    deg[x]++, deg[y]++;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL ans = <span class="number">0</span>;</div><div class="line">LL dp[maxn][<span class="number">2</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    LL l = dp[x][<span class="number">0</span>], r = dp[x][<span class="number">1</span>];</div><div class="line">    <span class="keyword">if</span> (l &gt; g[m]) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">bool</span> f = <span class="number">0</span>;</div><div class="line">    erep(i, x)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa) <span class="keyword">continue</span>;</div><div class="line">        f = <span class="number">1</span>;</div><div class="line">        deg[op]--;</div><div class="line">        <span class="keyword">if</span> (!deg[op]) dp[op][<span class="number">0</span>] = l, dp[op][<span class="number">1</span>] = r;</div><div class="line">        <span class="keyword">else</span> dp[op][<span class="number">0</span>] = (LL)deg[op] * l, dp[op][<span class="number">1</span>] = (LL)deg[op] * (r + <span class="number">1</span>) - <span class="number">1</span>;</div><div class="line">        DP(op, x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!f) ans += (LL) k * ((upper_bound(g + <span class="number">1</span>, g + <span class="number">1</span> + m, r) - g - <span class="number">1</span>) - </div><div class="line">    (upper_bound(g + <span class="number">1</span>, g + <span class="number">1</span> + m, l - <span class="number">1</span>) - g - <span class="number">1</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    read(n), read(m), read(k);</div><div class="line">    rep(i, <span class="number">1</span>, m) read(g[i]);</div><div class="line">    sort(g + <span class="number">1</span>, g + <span class="number">1</span> + m);</div><div class="line">    read(x), read(y);</div><div class="line">    Add_Edge(n + <span class="number">1</span>, x), Add_Edge(n + <span class="number">1</span>, y);</div><div class="line">    rep(i, <span class="number">2</span>, n - <span class="number">1</span>)&#123;</div><div class="line">        read(x), read(y);</div><div class="line">        Add_Edge(x, y);</div><div class="line">    &#125;</div><div class="line">    dp[n + <span class="number">1</span>][<span class="number">0</span>] = dp[n + <span class="number">1</span>][<span class="number">1</span>] = k;</div><div class="line">    DP(n + <span class="number">1</span>, n + <span class="number">1</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 4805. -- 欧拉函数求和</title><center><h2>4805: 欧拉函数求和</h2><span class="green">Time Limit: </span>15 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>256 MB<br><span class="green">Submit: </span>485&nbsp;&nbsp;<span class="green">Solved: </span>274<br>[<a href="submitpage.php?id=4805">Submit</a>][<a href="problemstatus.php?id=4805">Status</a>][<a href="bbs.php?id=4805">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div><p></p>
<div>给出一个数字N，求sigma(phi(i)),1&lt;=i&lt;=N
</div>
<p></p></div><h3>Input</h3><div class="content"><div>正整数N。N&lt;=2*10^9</div>
<p></p></div><h3>Output</h3><div class="content"><div>输出答案。</div>
<div></div>
<p></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">10</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">32</span></div><h3>HINT</h3>
            <div class="content"><p></p></div><h3>source</h3>
            <div class="content"><p><a href="problemset.php?search=By  FancyCoder">By  FancyCoder</a></p></div>

<h2 id="题目分析-9"><a href="#题目分析-9" class="headerlink" title="题目分析"></a>题目分析</h2><p>显然就是一个简单的杜教筛，我们用这个公式做$Dilechlet$卷积，再用它做杜教筛即可：</p>
<script type="math/tex; mode=display">\varphi * 1 = id</script><p>相信学过莫比乌斯反演的都看得懂。。。</p>
<h2 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++) </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line">LL phi[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    rep(i, <span class="number">2</span>, maxn - <span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i])&#123;</div><div class="line">            phi[i] = i - <span class="number">1</span>;</div><div class="line">            p[++cnt] = i;</div><div class="line">        &#125;</div><div class="line">        rep(j, <span class="number">1</span>, cnt) &#123;</div><div class="line">            <span class="keyword">if</span> (i * p[j] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * p[j]] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>)&#123;</div><div class="line">                phi[i * p[j]] = phi[i] * p[j];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            phi[i * p[j]] = phi[i] * (p[j] - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    rep(i, <span class="number">1</span>, maxn - <span class="number">1</span>) phi[i] += phi[i - <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, LL&gt; save;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">dyh</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x &lt; maxn) <span class="keyword">return</span> phi[x];</div><div class="line">    <span class="keyword">if</span> (save.count(x)) <span class="keyword">return</span> save[x];</div><div class="line">    LL ans = (LL)x * (x + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>; <span class="comment">//Error!!! Don't forget long long int</span></div><div class="line">    rep(i, <span class="number">2</span>, x)&#123;</div><div class="line">        <span class="keyword">int</span> next = (x / (x / i));</div><div class="line">        ans -= ((LL)next - i + <span class="number">1</span>) * dyh(x / i);</div><div class="line">        i = next;</div><div class="line">    &#125;</div><div class="line">    save[x] = ans;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, dyh(n));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>记得开long long int….说了多少遍了….</p>
</div></div></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;Can you hear me ? I have arrived at this place, it’s far from where we start, isn’t it?&lt;br&gt;
    
    </summary>
    
    
      <category term="BZOJ" scheme="https://goseqh.tk/tags/BZOJ/"/>
    
      <category term="题解" scheme="https://goseqh.tk/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>东北育才NOIP校内模拟赛总结</title>
    <link href="https://goseqh.tk/2017/09/09/%E4%B8%9C%E5%8C%97%E8%82%B2%E6%89%8DNOIP%E6%A0%A1%E5%86%85%E6%A8%A1%E6%8B%9F%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
    <id>https://goseqh.tk/2017/09/09/东北育才NOIP校内模拟赛总结/</id>
    <published>2017-09-09T06:57:37.000Z</published>
    <updated>2017-09-09T07:22:52.435Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>NOIP即将到来，又是新的轮回，不知今年会怎么样……<br><a id="more"></a></p>
<h1 id="东北育才2017-9-8校内NOIP模拟赛总结"><a href="#东北育才2017-9-8校内NOIP模拟赛总结" class="headerlink" title="东北育才2017.9.8校内NOIP模拟赛总结"></a>东北育才2017.9.8校内NOIP模拟赛总结</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2>

	<div class="row">
    <embed src="test0908.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="名次"><a href="#名次" class="headerlink" title="名次"></a>名次</h2><p><img src="./2e5ec48b37bc6896.jpg" alt="图片加载失败/(ㄒoㄒ)/~~"></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="A-dist"><a href="#A-dist" class="headerlink" title="A.dist"></a>A.dist</h3><h4 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h4><p>本题应该说是比较基础的题目了，如果没能想到做法，说明那么在基础的知识点上面掌握的并不牢固，如果写挂，说明细节把握不好，不够仔细，需要更加认真</p>
<p>本题的做法有许多，本文只介绍一种：</p>
<p>考虑绝对值的几何意义，我们可以直接把所有点的位置进行排序，然后预处理前缀后缀和，对每个点进行扫描求和，不妨设这个点为第$i$个点，点的位置为$x_i$</p>
<p>那么这个点贡献的答案就是 <script type="math/tex">(i * x_{i} - pre[i]) + (suf[i] - (n - i + 1) * x_{i})</script></p>
<p>这样本题就在$O(n \log n)$内解决了</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line">LL line[maxn];</div><div class="line">LL suf[maxn];</div><div class="line">LL pre[maxn];</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">	<span class="keyword">char</span> ch = getchar();</div><div class="line">	<span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span> (ch != <span class="string">'-'</span> &amp;&amp; !<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">	<span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = getchar();</div><div class="line">	x = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">	<span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">//freopen("dist.in", "r", stdin);</span></div><div class="line">	<span class="comment">//freopen("dist.out", "w", stdout);</span></div><div class="line">	read(n);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(line[i]);</div><div class="line">	sort(line + <span class="number">1</span>, line + <span class="number">1</span> + n);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) suf[i] = suf[i + <span class="number">1</span>] + line[i];</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) pre[i] = pre[i - <span class="number">1</span>] + line[i];</div><div class="line">	LL ans = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">		ans += suf[i] - line[i] * (n - i + <span class="number">1</span>) + line[i] * i - pre[i];</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="B-fight"><a href="#B-fight" class="headerlink" title="B.fight"></a>B.fight</h3><h4 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h4><p>考虑相邻位交换，我们假设当前要打的怪物为$i$，下一个为$i + 1$，那么$i$与$i + 1$（假设这是存在的）交换后的状态对答案的贡献减去交换前的贡献，并且我们要求它小于零，即使答案更优，那么就对应着如下的式子（其中$num_i$表示使怪物死亡需要的攻击次数）:</p>
<script type="math/tex; mode=display">
\begin{align}
\Delta_{ans} &= ((num_i + num_{i + 1}) * A_{i} + num_{i + 1} * A_{i + 1}) - ((num_i + num_{i + 1}) * A_{i + 1} + num_i * A_i) \\
&= A_i * num_{i + 1} - num_i * A_{i + 1}\\
& < 0\\
\end{align}</script><p>由此，我们知道：</p>
<script type="math/tex; mode=display">\frac{A_i}{num_i} < \frac{A_{i + 1}}{num_{i + 1}}</script><p>即，我们将每一个怪物的权值定义为它的攻击力除以使其死亡需要的攻击次数，那么我们应该尽可能地先去攻击权值较大的怪物，所以，我们只需要对此排序，扫描一遍即可出解</p>
<p>那么本题就在$O(n \log n)$内解决了</p>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><p>注意：</p>
<ul>
<li>排序的时候要转换类型为double型<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, ak;</div><div class="line">LL line[maxn];</div><div class="line">LL sline[maxn];</div><div class="line">LL a[maxn];</div><div class="line">LL d[maxn];</div><div class="line">LL h[maxn];</div><div class="line">LL pre[maxn];</div><div class="line">LL num[maxn];</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">	<span class="keyword">char</span> ch = getchar();</div><div class="line">	<span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span> (ch != <span class="string">'-'</span> &amp;&amp; !<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">	<span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = getchar();</div><div class="line">	x = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">	<span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> ((<span class="keyword">double</span>) a[x] / num[x]) &gt; ((<span class="keyword">double</span>) a[y] / num[y]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">//freopen("fight.in", "r", stdin);</span></div><div class="line">	<span class="comment">//freopen("fight.out", "w", stdout);</span></div><div class="line">	read(n), read(ak);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(a[i]), read(d[i]), read(h[i]);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) sline[i] = i;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) num[i] = (h[i] - <span class="number">1</span>) / (ak - d[i]) + <span class="number">1</span>;</div><div class="line">	sort(sline + <span class="number">1</span>, sline + <span class="number">1</span> + n, cmp);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) pre[i] = pre[i - <span class="number">1</span>] + num[sline[i]];</div><div class="line">	LL ans = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </div><div class="line">	ans = ans + pre[i] * a[sline[i]];</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="C-city"><a href="#C-city" class="headerlink" title="C.city"></a>C.city</h3><h4 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h4><p>题目要求修路以及建房，且修路优先，同时，我们可以发现修路并不是独立的，路的修建方法与最优解有很大的关联，那么我们考察代价的计算方法，去掉这样的关联性，即可使用$Kruskal$最小生成树算法解决问题</p>
<p>我们发现，一个房子的建设代价，由两部分构成，一是自己城市的代价，二是周边城市带来的代价，我们发现，这两部分代价是独立的，而且第一部分我们可以很容易地求出，计算公式为：</p>
<script type="math/tex; mode=display">h[i] * \frac{(a[i] + b[i] - 1) * (a[i] - b[i])}{2}</script><p>这应该很容易理解</p>
<p>我们下面探讨第二部分的求法，我们发现，对比两个有边直接相连且都需要建房的城市，我们一定要先在$h$值较大的城市建房，为什么呢？我们可以想上一题一样列出公式，对比两种情况下的权值并作差，即可得出这一结论，方法相同，本处不再赘述<sup><a href="#fn_1" id="reffn_1">1</a></sup></p>
<p>那么我们对于每一条边，都可以求出这条边被连接后整体答案的增加值，我们只要两边的城市互相之间的影响即可，结合上一结论即可推导出公式：</p>
<script type="math/tex; mode=display">r * (b[x] + b[y]) + h[y] * b[x] * (a[y] - b[y]) + h[x] * a[y] * (a[x] - b[x])</script><p>那么，我们对于已经有边的，减去前面的新建费用；所有没有边的两个城市，我们把边的权值按照上述方法定义，即可去掉边代价的关联性，使用$Kruskal$最小生成树算法即可解决本题</p>
<h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><p>注意：</p>
<ul>
<li>边的规模往往远大于点的规模，安全的做法是分别进行宏定义，不要同时使用一个宏</li>
<li>对于已经建好的边，要减掉新建边的费用<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 100005 <span class="comment">//需要注意的地方</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line">LL a[maxn];</div><div class="line">LL b[maxn];</div><div class="line">LL h[maxn];</div><div class="line"><span class="keyword">char</span> geo[maxn][maxn];</div><div class="line">LL n, m, r;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">	<span class="keyword">int</span> x, y;</div><div class="line">	LL len;</div><div class="line">	edge(<span class="keyword">int</span> x, <span class="keyword">int</span> y, LL len) : x(x), y(y), len(len)&#123;&#125;</div><div class="line">	edge()&#123;&#125;</div><div class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> edge b) <span class="keyword">const</span> &#123;</div><div class="line">		<span class="keyword">return</span> len &lt; b.len;</div><div class="line">	&#125;</div><div class="line">&#125;e[maxm &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to, LL len)</span> </span>&#123;</div><div class="line">	e[++cnt] = edge(fr, to, len);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ufs[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> ufs[x] = ((ufs[x] == x) ? x : find_root(ufs[x]));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">get_len</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (h[x] &gt; h[y]) swap(x, y);</div><div class="line">	<span class="keyword">return</span> r * (b[x] + b[y]) + h[y] * b[x] * (a[y] - b[y]) + h[x] * a[y] * (a[x] - b[x]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init1</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ufs[i] = i;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">			<span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</div><div class="line">			<span class="keyword">if</span> (geo[i][j] == <span class="string">'N'</span>) Add_Edge(i, j, get_len(i, j));</div><div class="line">			<span class="keyword">else</span>&#123;</div><div class="line">				<span class="keyword">int</span> x = find_root(i);</div><div class="line">				<span class="keyword">int</span> y = find_root(j);</div><div class="line">				<span class="keyword">if</span> (x == y) <span class="keyword">continue</span>;</div><div class="line">				<span class="keyword">else</span> ufs[x] = y;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL ans1 = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work1</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> ct = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">		<span class="keyword">if</span> (ufs[i] == i) ct++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (ct != <span class="number">1</span>)&#123;</div><div class="line">		sort(e + <span class="number">1</span>, e + cnt + <span class="number">1</span>);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)&#123;</div><div class="line">			<span class="keyword">int</span> x = find_root(e[i].x);</div><div class="line">			<span class="keyword">int</span> y = find_root(e[i].y);</div><div class="line">			<span class="keyword">if</span> (x == y) <span class="keyword">continue</span>;</div><div class="line">			ufs[x] = y;</div><div class="line">			ans1 += e[i].len;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">			<span class="keyword">if</span> (geo[i][j] == <span class="string">'Y'</span>) ans1 += get_len(i, j) - r * (b[i] + b[j]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">		ans1 += h[i] * ((a[i] + b[i] - <span class="number">1</span>) * (a[i] - b[i]) &gt;&gt; <span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">	<span class="keyword">char</span> ch = getchar();</div><div class="line">	<span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span> (ch != <span class="string">'-'</span> &amp;&amp; !<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">	<span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = getchar();</div><div class="line">	x = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10l</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">	<span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">//freopen("city.in", "r", stdin);</span></div><div class="line">	<span class="comment">//freopen("city.out", "w", stdout);</span></div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(b[i]);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(a[i]);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(h[i]);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%s"</span>, geo[i] + <span class="number">1</span>);</div><div class="line">	read(r);</div><div class="line">	init1();</div><div class="line">	work1();</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans1);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本套题目前两题难度较低，考察基础的编程思想与方法，最后一题考察图论的相关算法以及贡献法思维，难度较大，总体难度较为适中，命题难度编排合理，适于作为noip模拟题出现</p>
<p>第三题需要考虑的情况较多，尽管我确实把这些情况都进行了考虑，并且进行了正确的讨论，但最后却卡在了宏定义的问题上，导致边数组过小，程序WA了五个点，感觉还是十分可惜的，这样的问题一定要多加注意</p>
<blockquote id="fn_1">
<sup>1</sup>. 但是标程并未使用这一结论，经实际测试本结论正确<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;NOIP即将到来，又是新的轮回，不知今年会怎么样……&lt;br&gt;
    
    </summary>
    
    
      <category term="NOIP模拟赛" scheme="https://goseqh.tk/tags/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
      <category term="东北育才学校" scheme="https://goseqh.tk/tags/%E4%B8%9C%E5%8C%97%E8%82%B2%E6%89%8D%E5%AD%A6%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>东北师大附中九月集训NOIP模拟赛总结</title>
    <link href="https://goseqh.tk/2017/09/09/%E4%B8%9C%E5%8C%97%E5%B8%88%E5%A4%A7%E9%99%84%E4%B8%AD%E4%B9%9D%E6%9C%88%E9%9B%86%E8%AE%ADNOIP%E6%A8%A1%E6%8B%9F%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
    <id>https://goseqh.tk/2017/09/09/东北师大附中九月集训NOIP模拟赛总结/</id>
    <published>2017-09-09T06:56:23.000Z</published>
    <updated>2017-09-09T08:50:40.847Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>NOIP即将到来，又是新的轮回，不知今年会怎么样……<br><a id="more"></a></p>
<h1 id="东北师大附中2017-9-7-NOIP模拟赛总结"><a href="#东北师大附中2017-9-7-NOIP模拟赛总结" class="headerlink" title="# 东北师大附中2017.9.7 NOIP模拟赛总结"></a># 东北师大附中2017.9.7 NOIP模拟赛总结</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2>

	<div class="row">
    <embed src="0907.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="名次"><a href="#名次" class="headerlink" title="名次"></a>名次</h2><p><img src="./0907.png" alt="图片加载失败/(ㄒoㄒ)/~~"></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a>官方题解</h3>

	<div class="row">
    <embed src="0907sol.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h3 id="A-Cyl"><a href="#A-Cyl" class="headerlink" title="A.Cyl"></a>A.Cyl</h3><h4 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h4><p>我们看到数据范围以后，就知道这题一定不是暴搜了对吧，然后，我们模拟操作几下，就能够发现，本题实际上就是一个情况讨论题，我们对如下三种形式的数分别进行讨论:$3k + 1, 3k + 2, 3k + 3$，得出在$n$和$m$是这三种数两两组合的情况，然后直接讨论即可，应该比较简单</p>
<p>但是，我们又发现，当$n$, $m$过小时，上面的规律不再使用，因为用于平衡掉余数的空间不够大，它需要往回翻，所以，对于较小的$1, 2, 3$我们再分别特殊手算一下即可</p>
<p>吐槽：本题没说立方体不能有一半在外面啊！！！棱不是接触就行吗？？？</p>
<p>不然本题就A了。。。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    LL n, m;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">if</span> (n &gt; m) swap(n, m);</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">if</span> (m % <span class="number">3</span> == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%lld"</span>, (m - <span class="number">1</span>) / <span class="number">3</span> * <span class="number">2</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"-1"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">2</span>)&#123;</div><div class="line">        <span class="keyword">if</span> (m % <span class="number">3</span> == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%lld"</span>, (m - <span class="number">1</span>) / <span class="number">3</span> * <span class="number">2</span> + <span class="number">1</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"-1"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">3</span>)&#123;</div><div class="line">        <span class="keyword">if</span> (m == <span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">"8"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (m % <span class="number">3</span> == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%lld"</span>, (n - <span class="number">1</span>) / <span class="number">3</span> * <span class="number">2</span> + (m - <span class="number">1</span>) / <span class="number">3</span> * <span class="number">2</span> + (n - <span class="number">1</span>) % <span class="number">3</span> + (m - <span class="number">1</span>) % <span class="number">3</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld"</span>, (n - <span class="number">1</span>) / <span class="number">3</span> * <span class="number">2</span> + (m - <span class="number">1</span>) / <span class="number">3</span> * <span class="number">2</span> + (n - <span class="number">1</span>) % <span class="number">3</span> + (m - <span class="number">1</span>) % <span class="number">3</span> + <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld"</span>, (n - <span class="number">1</span>) / <span class="number">3</span> * <span class="number">2</span> + (m - <span class="number">1</span>) / <span class="number">3</span> * <span class="number">2</span> + (n - <span class="number">1</span>) % <span class="number">3</span> + (m - <span class="number">1</span>) % <span class="number">3</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="B-RoundTrip"><a href="#B-RoundTrip" class="headerlink" title="B.RoundTrip"></a>B.RoundTrip</h3><h4 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h4><p>我们发现这道题好像是一个经典问题，我们显然要先用Tarjan缩点，把图变成一个DAG，然后加边</p>
<p>因为时间不够，所以我乱讨论了一番，十分地麻烦，然后就WA了。。。</p>
<p>实际上有一种很简单的统计方法，我们可以发现，直接分别统计出度与入度为零的点的个数就可以，然后取个MAX，这样保证存在加边方案满足题意（想一想为什么？）</p>
<p>这样本题就解决了。。。</p>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) :  next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to);</div><div class="line">    h[fr] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> low[maxn];</div><div class="line"><span class="keyword">int</span> pre[maxn];</div><div class="line"><span class="keyword">int</span> sccno[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> ct = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> t;</div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    pre[x] = low[x] = ++t;</div><div class="line">    vis[x] = <span class="number">1</span>;</div><div class="line">    s.push(x);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span> (!vis[op]) low[x] = min(low[x], Tarjan(op, x));</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!sccno[op]) low[x] = min(low[x], low[op]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (low[x] == pre[x])&#123;</div><div class="line">        ++ct;</div><div class="line">        <span class="keyword">int</span> op = s.top();</div><div class="line">        s.pop();</div><div class="line">        <span class="keyword">while</span> (op != x)&#123;</div><div class="line">            sccno[op] = ct;</div><div class="line">            op = s.top();</div><div class="line">            s.pop();</div><div class="line">        &#125;</div><div class="line">        sccno[x] = ct;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> low[x];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> in[maxn];</div><div class="line"><span class="keyword">int</span> out[maxn];</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    read(n), read(m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        read(x), read(y);</div><div class="line">        Add_Edge(x, y);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (!vis[i]) Tarjan(i, i);</div><div class="line">    <span class="keyword">if</span> (ct == <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"0"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = h[i]; j; j = e[j].next)&#123;</div><div class="line">            <span class="keyword">int</span> op = e[j].to;</div><div class="line">            <span class="keyword">if</span> (sccno[i] == sccno[op]) <span class="keyword">continue</span>;</div><div class="line">            out[sccno[i]]++;</div><div class="line">            in[sccno[op]]++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ans1 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> ans2 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ct; i++)&#123;</div><div class="line">        ans1 += (!out[i]);</div><div class="line">        ans2 += (!in[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, max(ans1, ans2));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="C-Graph"><a href="#C-Graph" class="headerlink" title="C.Graph"></a>C.Graph</h3><h4 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h4><p>本题真的是一个黑科技啊。。。居然还有这样的操作。。。</p>
<p>我们发现，本题如果暴力处理肯定会挂，于是我们采用特殊的方法，先观察答案路径的性质：</p>
<ul>
<li>路径上只有两个关键点，且是路径的两个端点</li>
<li>长度最小</li>
</ul>
<p>于是，我们通过第一条性质，可以对每个点暴力SPFA，搜到一个关键点就停下来，然后更新答案， 用一个栈保存更新过的结点，然后只清空这些栈中的结点距离（其实在下一场的总结中有一种技巧可以避免这样做）</p>
<p>然后就拿了90分。。。后来发现源点忘了入栈了，改过来就A了</p>
<p>—————-上面是我的方(bao)法(li)，不要被它蒙蔽了双眼。。。—————-</p>
<p>正解是二进制分组+多源多汇最短路<del>(你是在跑网络流吗)</del></p>
<p>我第一次知道最短路还可以这样跑。。。其实大家都觉得二进制分组是看点，但是我觉得这种跑最短路的方法才真的应该铭记。。。</p>
<p>二进制分组就是按照点的标号的某一位的数(0或1）进行左右分组，对每一位都这样做，就必然可以找出答案（因为答案的两个点的标号必然不同）</p>
<p>然后我们新建源点与汇点，连长度为1的边，就可以狂跑最短路啦</p>
<p>其实分组怎么分都行。。。zgz随机化分组随手碾标程。。。</p>
<p>那么代码如下：</p>
<h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><p>注意这是我的方(bao)法(li)，不喜勿喷:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) :  next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to);</div><div class="line">    h[fr] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> low[maxn];</div><div class="line"><span class="keyword">int</span> pre[maxn];</div><div class="line"><span class="keyword">int</span> sccno[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> ct = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> t;</div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    pre[x] = low[x] = ++t;</div><div class="line">    vis[x] = <span class="number">1</span>;</div><div class="line">    s.push(x);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span> (!vis[op]) low[x] = min(low[x], Tarjan(op, x));</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!sccno[op]) low[x] = min(low[x], low[op]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (low[x] == pre[x])&#123;</div><div class="line">        ++ct;</div><div class="line">        <span class="keyword">int</span> op = s.top();</div><div class="line">        s.pop();</div><div class="line">        <span class="keyword">while</span> (op != x)&#123;</div><div class="line">            sccno[op] = ct;</div><div class="line">            op = s.top();</div><div class="line">            s.pop();</div><div class="line">        &#125;</div><div class="line">        sccno[x] = ct;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> low[x];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> in[maxn];</div><div class="line"><span class="keyword">int</span> out[maxn];</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    read(n), read(m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        read(x), read(y);</div><div class="line">        Add_Edge(x, y);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (!vis[i]) Tarjan(i, i);</div><div class="line">    <span class="keyword">if</span> (ct == <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"0"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = h[i]; j; j = e[j].next)&#123;</div><div class="line">            <span class="keyword">int</span> op = e[j].to;</div><div class="line">            <span class="keyword">if</span> (sccno[i] == sccno[op]) <span class="keyword">continue</span>;</div><div class="line">            out[sccno[i]]++;</div><div class="line">            in[sccno[op]]++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ans1 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> ans2 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ct; i++)&#123;</div><div class="line">        ans1 += (!out[i]);</div><div class="line">        ans2 += (!in[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, max(ans1, ans2));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是正解:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/****************************************\</span></div><div class="line">* Author : ztx</div><div class="line">* Title  : std-graph</div><div class="line">* ALG    : 最短路</div><div class="line">* CMT    : 按照二进制拆分进行log(n)次最短路</div><div class="line">* Time   : 2016-10-19</div><div class="line">\****************************************/</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Rep(i,l,r) for(i=(l);i&lt;=(r);i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(i=(l);i&lt; (r);i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Rev(i,r,l) for(i=(r);i&gt;=(l);i--)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rev(i,r,l) for(i=(r);i&gt; (l);i--)</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll ;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> lf ;</div><div class="line"><span class="keyword">int</span> CH , NEG ;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TP&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(TP&amp; ret)</span> </span>&#123;</div><div class="line">    ret = NEG = <span class="number">0</span> ; <span class="keyword">while</span> (CH=getchar() , CH&lt;<span class="string">'!'</span>) ;</div><div class="line">    <span class="keyword">if</span> (CH == <span class="string">'-'</span>) NEG = <span class="literal">true</span> , CH = getchar() ;</div><div class="line">    <span class="keyword">while</span> (ret = ret*<span class="number">10</span>+CH-<span class="string">'0'</span> , CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</div><div class="line">    <span class="keyword">if</span> (NEG) ret = -ret ;</div><div class="line">&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TP&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">readc</span><span class="params">(TP&amp; ret)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span> (ret=getchar() , ret&lt;<span class="string">'!'</span>) ;</div><div class="line">    <span class="keyword">while</span> (CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</div><div class="line">&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TP&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reads</span><span class="params">(TP *ret)</span> </span>&#123;</div><div class="line">    ret[<span class="number">0</span>]=<span class="number">0</span>;<span class="keyword">while</span> (CH=getchar() , CH&lt;<span class="string">'!'</span>) ;</div><div class="line">    <span class="keyword">while</span> (ret[++ret[<span class="number">0</span>]]=CH,CH=getchar(),CH&gt;<span class="string">'!'</span>) ;</div><div class="line">    ret[ret[<span class="number">0</span>]+<span class="number">1</span>]=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  maxn  100010LL</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  maxm  500010LL</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  maxk  233330LL</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> e[<span class="number">3</span>][(maxm&lt;&lt;<span class="number">1</span>)+maxn], star[maxn], tote = <span class="number">1</span>;</div><div class="line"><span class="keyword">int</span> rstar[maxn], rtote;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  to(p)  e[0][p]</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  nxt(p) e[1][p]</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  len(p) e[2][p]</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  ft     q.front()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  bk     q.back()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  pf(x)  q.push_front(x)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  pb(x)  q.push_back(x)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  pop    q.pop_front()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  infi   0x3f3f3f3fLL</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>&#123;</div><div class="line">    tote ++ , to(tote) = v, len(tote) = w, nxt(tote) = star[u], star[u] = tote;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, s;</div><div class="line"><span class="keyword">int</span> S[maxk];</div><div class="line"><span class="keyword">int</span> dis[maxn];</div><div class="line"><span class="keyword">bool</span> inq[maxn];</div><div class="line"><span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i, k, u, v, w, p, ans;</div><div class="line">    <span class="comment">/// tote = 1, memset(star,0,sizeof star);</span></div><div class="line">    Rep (i,<span class="number">1</span>,m)</div><div class="line">        read(u), read(v), read(w),</div><div class="line">        AddEdge(u,v,w), AddEdge(v,u,w);</div><div class="line">    <span class="comment">//puts("!!!!!"); </span></div><div class="line">    <span class="built_in">memcpy</span>(rstar,star,<span class="keyword">sizeof</span> star);</div><div class="line">    rtote = tote;</div><div class="line">    Rep (i,<span class="number">1</span>,s)</div><div class="line">        read(S[i]);</div><div class="line">    <span class="comment">//puts("!!!!!"); </span></div><div class="line">    ans = infi;</div><div class="line">    rep (k,<span class="number">0</span>,<span class="number">20</span>) &#123;</div><div class="line">        <span class="comment">/// build the graph</span></div><div class="line">        <span class="built_in">memcpy</span>(star,rstar,<span class="keyword">sizeof</span> rstar);</div><div class="line">        tote = rtote;</div><div class="line">        Rep (i,<span class="number">1</span>,s)</div><div class="line">            <span class="keyword">if</span> (S[i]&amp;(<span class="number">1</span>&lt;&lt;k)) AddEdge(n+<span class="number">1</span>,S[i],<span class="number">0</span>);</div><div class="line">            <span class="keyword">else</span> AddEdge(S[i],n+<span class="number">2</span>,<span class="number">0</span>);</div><div class="line">        <span class="comment">/// spfa</span></div><div class="line">        q.clear();</div><div class="line">        <span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dis);</div><div class="line">        dis[n+<span class="number">1</span>]=<span class="number">0</span>;</div><div class="line">        pb(n+<span class="number">1</span>);</div><div class="line">        <span class="keyword">while</span> (!q.empty())</div><div class="line">            <span class="keyword">for</span> (u=ft,pop,inq[u]=<span class="literal">false</span>,p=star[u];p;p=nxt(p))</div><div class="line">                <span class="keyword">if</span> (v=to(p),dis[u]+len(p)&lt;dis[v])</div><div class="line">                    <span class="keyword">if</span> (dis[v]=dis[u]+len(p),!inq[v])</div><div class="line">                        <span class="keyword">if</span> (inq[v]=<span class="literal">true</span>,!q.empty()&amp;&amp;dis[v]&lt;dis[ft]) pf(v);</div><div class="line">                            <span class="keyword">else</span> pb(v);</div><div class="line">        <span class="keyword">if</span> (dis[n+<span class="number">2</span>] &lt; ans) ans = dis[n+<span class="number">2</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> READ</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span>  READ</span></div><div class="line">        freopen(<span class="string">"graph.in"</span> ,<span class="string">"r"</span>,<span class="built_in">stdin</span> ) ;</div><div class="line">        freopen(<span class="string">"graph.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>) ;</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;s) != EOF &amp;&amp; n+m+s&gt;<span class="number">0</span>) work();</div><div class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span>  READ</span></div><div class="line">        fclose(<span class="built_in">stdin</span>) ; fclose(<span class="built_in">stdout</span>) ;</div><div class="line">    <span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">        getchar() ; getchar() ;</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本次题目较为简单， 但未能取得高分，原因有三点：一是题面叙述不够清楚，二是时间安排不够合理，在思考题目上花费了较多时间，导致检查时间不够，三是知识欠缺，未能用正确的方法通过问题</p>
<hr>
<h1 id="东北师大附中2017-9-9-NOIP模拟赛总结"><a href="#东北师大附中2017-9-9-NOIP模拟赛总结" class="headerlink" title="东北师大附中2017.9.9 NOIP模拟赛总结"></a>东北师大附中2017.9.9 NOIP模拟赛总结</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2>

	<div class="row">
    <embed src="0909.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="名次-1"><a href="#名次-1" class="headerlink" title="名次"></a>名次</h2><p><img src="./0909.png" alt="图片加载失败/(ㄒoㄒ)/~~"></p>
<h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><h3 id="A-公约数"><a href="#A-公约数" class="headerlink" title="A.公约数"></a>A.公约数</h3><h4 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h4><p>自己在做的时候，感觉这题以前好像做过，然后好像是一个不等关系，然后能推出来一堆东西，于是就按照这个思路试了一下，先写了一个找规律的程序，把所有可能的对都打了出来，然后观察了一会，发现数对都是这样的形式（假设$c = gcd(a,b)$）：</p>
<script type="math/tex; mode=display">(a, b) = (a, a + c)</script><p>但是在后面还有一些不太满足这个规律的，然后就想在二进制意义下各种乱搞证明。。。</p>
<p>于是就。。。浪费了大把的时间</p>
<p>后来还是想回到最开始的思路上，直接用不等关系证明，于是瞬间就推了出来。。。如下（不妨设$x \geq y$）：</p>
<script type="math/tex; mode=display">
\begin{align}
gcd(x, y) &= x \oplus y\\
gcd(x, y) \oplus y&=  x\\
x &\leq  gcd(x, y) + y\\
\end{align}</script><p>所以，我们就知道了：$x = y + gcd(x, y)$</p>
<p>上面的规律到此就被证明了，于是我们就此以及调和级数定理设计一个“枚举”算法：先枚举gcd，然后里面扫描每一个数，判断是否有$x \oplus (x + gcd) = gcd$即可</p>
<p>这样本题就在$O(n \log n)$内解决了</p>
<p>同时，我们把上面用到的一个不等式：</p>
<script type="math/tex; mode=display">x \oplus y \leq x + y</script><p>称作异或不等式，便于以后的应用</p>
<p>给我的启示就是，有题快做，一定不要死扣证明，如果实在拿不准就先做别的题，这样才是真正的noip模拟</p>
<h4 id="官方题解-1"><a href="#官方题解-1" class="headerlink" title="官方题解"></a>官方题解</h4>

	<div class="row">
    <embed src="公约数.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><p>居然这么**短。。。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, ans;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//freopen("gcd.in", "r", stdin);</span></div><div class="line">    <span class="comment">//freopen("gcd.out", "w", stdout);</span></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt;= (n &gt;&gt; <span class="number">1</span>); d++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = d; i &lt;= n - d; i += d)&#123;</div><div class="line">            <span class="keyword">if</span> ((i ^ (i + d)) == d) ans++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="B-树上路径"><a href="#B-树上路径" class="headerlink" title="B.树上路径"></a>B.树上路径</h3><h4 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h4><p>本题看上去就是一个点分治，一开始以为二分，然后就反应过来直接点分治就可以，那么具体细节就不说了，还是注意全局变量的可变性，注意清空用完的数组变量等，注意判断点是否已经被访问过，以及注意多重循环嵌套时不要使用重复的循环变量等等。。。</p>
<p>但是，这次这些问题都没有犯，而是犯了STL错误：set决不能使用STL的二分查找，只能使用自己的成员函数，还有一点错误，就是不要考察每个长度，只需要考虑二分后最短的原先存在的长度加上当前正在考虑的这条链的长度是否在范围内就可以，否则复杂度就是$O(n^2\log^2 n)$的了，这种细节都要注意</p>
<h4 id="官方题解-2"><a href="#官方题解-2" class="headerlink" title="官方题解"></a>官方题解</h4>

	<div class="row">
    <embed src="树上路径.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, s, t;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to, len;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to, <span class="keyword">int</span> len) : next(next), to(to), len(len)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> len)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[x], y, len);</div><div class="line">    h[x] = cnt;</div><div class="line">    e[++cnt] = edge(h[y], x, len);</div><div class="line">    h[y] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> siz[maxn];</div><div class="line"><span class="keyword">int</span> g;</div><div class="line"><span class="keyword">int</span> as;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    siz[x] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (vis[op] || op == fa) <span class="keyword">continue</span>;</div><div class="line">        DFS1(op, x);</div><div class="line">        siz[x] += siz[op];</div><div class="line">        <span class="keyword">if</span> (siz[op] &gt; (as &gt;&gt; <span class="number">1</span>)) f = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (as - siz[x] &gt; (as &gt;&gt; <span class="number">1</span>)) f = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (f) g = x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"></div><div class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s1;</div><div class="line"><span class="keyword">int</span> s2[maxn];</div><div class="line"><span class="keyword">int</span> ct2 = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    s2[++ct2] = d[x];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa || vis[op]) <span class="keyword">continue</span>;</div><div class="line">        d[op] = d[x] + e[i].len;</div><div class="line">        DFS2(op, x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ans = INF;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DAC</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ns = as;</div><div class="line">    DFS1(x, x);</div><div class="line">    x = g;</div><div class="line">    s1.insert(<span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (vis[op]) <span class="keyword">continue</span>;</div><div class="line">        d[op] = e[i].len;</div><div class="line">        DFS2(op, x);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= ct2; j++)&#123;</div><div class="line">            <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; :: iterator it1 = s1.lower_bound(s - s2[j]);</div><div class="line">            <span class="keyword">int</span> d = s2[j] + (*it1);</div><div class="line">            <span class="keyword">if</span> (s &lt;= d &amp;&amp; d &lt;= t) ans = min(ans, d);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= ct2; j++) s1.insert(s2[j]);</div><div class="line">        ct2 = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    s1.clear();</div><div class="line">    vis[x] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (vis[op]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span> (siz[op] &gt; siz[x]) as = ns - siz[x];</div><div class="line">        <span class="keyword">else</span> as = siz[op];</div><div class="line">        DAC(op);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch) &amp;&amp; ch != <span class="string">'-'</span>) ch = getchar();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = getchar();</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//freopen("path.in", "r", stdin);</span></div><div class="line">    <span class="comment">//freopen("path.out", "w", stdout);</span></div><div class="line">    <span class="keyword">int</span> x, y, z;</div><div class="line">    read(n), read(s), read(t);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</div><div class="line">        read(x), read(y), read(z);</div><div class="line">        Add_Edge(x, y, z);</div><div class="line">    &#125;</div><div class="line">    as = n;</div><div class="line">    DAC(<span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (ans &lt; INF) <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"-1"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="C-飞扬的小鸟"><a href="#C-飞扬的小鸟" class="headerlink" title="C.飞扬的小鸟"></a>C.飞扬的小鸟</h3><h4 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h4><p>我们一看完题，就可以联想到SCOI的一道修车题，这两道题看上去简直是一毛一样的，于是我也几乎写了一毛一样的代码，然后就华丽的TLE了。。。</p>
<p>后来仔细地看了看，数据范围好像不太一样。。。这道题的范围好像很难承受，于是就水了题解。。。发现这题竟然使用了动态加边的技巧，然而以前从来没写过。。。都不知道怎么动态加边，于是又水了一发标程，于是就学会了</p>
<p>然而调了半天没搞出来，最后发现是点的标号有问题，标的有重复，然后就一直玄学地TLE。。。改完就过了</p>
<p>但是学到了新的东西，还是很开心的，这样动态加边也算是写过了，同时还学到一个东西：在多次SPFA的时候不必重新设定数组，而是新开一个标记数组表示这是第几次SPFA就可以了，可以节约许多的时间</p>
<h4 id="官方题解-3"><a href="#官方题解-3" class="headerlink" title="官方题解"></a>官方题解</h4>

	<div class="row">
    <embed src="飞扬的小鸟.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><p>一开始以为是最大流，顺手就打出来了，然后发现不是，就又写了费用流。。。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn2 105</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm2 205</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 10000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="comment">/*int n, m, s, t;</span></div><div class="line"></div><div class="line">struct edge&#123;</div><div class="line">    int next, to, flow;</div><div class="line">    edge(int next, int to, int flow) : next(next), to(to), flow(flow)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxm &lt;&lt; 1];</div><div class="line"></div><div class="line">int h[maxn], cnt = 1;</div><div class="line">void Add_Edge(int fr, int to, int flow)&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to, flow);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr, 0);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line">bool BFS()&#123;</div><div class="line">    queue&lt;int&gt; bfs;</div><div class="line">    bfs.push(s);</div><div class="line">    memset(d, 0, sizeof(d));</div><div class="line">    while (!bfs.empty())&#123;</div><div class="line">        int op = bfs.front();bfs.pop();</div><div class="line">        for (int i = h[op]; i; i = e[i].next)&#123;</div><div class="line">            if (!e[i].flow) continue;</div><div class="line">            int k = e[i].to;</div><div class="line">            if (k == s || d[k]) continue;</div><div class="line">            d[k] = d[op] + 1;</div><div class="line">            bfs.push(k);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if (!d[t]) return false;</div><div class="line">    return true;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int DFS(int x, int a)&#123;</div><div class="line">    if (x == t) return a;</div><div class="line">    int rest = a;</div><div class="line">    for (int i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        if (!e[i].flow) continue;</div><div class="line">        int op = e[i].to</div><div class="line">        if (d[op] != d[x] + 1) continue;</div><div class="line">        int k = DFS(op, min(rest, e[i].flow));</div><div class="line">        e[i].flow -= k;</div><div class="line">        e[i ^ 1].flow += k;</div><div class="line">        rest -= k;</div><div class="line">        if (!rest) return a;</div><div class="line">    &#125;</div><div class="line">    return a - rest;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void Dinic(int&amp; maxflow)&#123;</div><div class="line">    while (BFS()) maxflow += DFS(s, INF);</div><div class="line">&#125;*/</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, s, t;</div><div class="line"><span class="keyword">int</span> p2[maxn2];</div><div class="line"><span class="keyword">int</span> geo[maxn2][maxm2];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to, flow, cost;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to, <span class="keyword">int</span> flow ,<span class="keyword">int</span> cost) : next(next), to(to), flow(flow), cost(cost)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxm &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to, <span class="keyword">int</span> flow, <span class="keyword">int</span> cost)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to, flow, cost);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr, <span class="number">0</span>, -cost);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> dt[maxn];</div><div class="line"><span class="keyword">int</span> ti = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> spfa[maxn];</div><div class="line"><span class="keyword">int</span> l, r;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">()</span></span>&#123;</div><div class="line">    l = <span class="number">0</span>, r = <span class="number">-1</span>;</div><div class="line">    spfa[++r] = s;</div><div class="line">    vis[s] = <span class="number">1</span>;</div><div class="line">    d[s] = <span class="number">0</span>;</div><div class="line">    dt[s] = ++ti;</div><div class="line">    <span class="keyword">while</span> (l &lt;= r)&#123;</div><div class="line">        <span class="keyword">int</span> op = spfa[l++];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[op]; i; i = e[i].next)&#123;</div><div class="line">            <span class="keyword">if</span> (!e[i].flow) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> k = e[i].to;</div><div class="line">            <span class="keyword">if</span> (dt[k] != ti || d[k] &gt; d[op] + e[i].cost)&#123;</div><div class="line">                p[k] = i;</div><div class="line">                dt[k] = ti;</div><div class="line">                d[k] = d[op] + e[i].cost;</div><div class="line">                <span class="keyword">if</span> (!vis[k]) spfa[++r] = k, vis[k] = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        vis[op] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (dt[t] != ti) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> rec[maxn];</div><div class="line"><span class="keyword">int</span> pos[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Augment</span><span class="params">(<span class="keyword">int</span>&amp; maxflow, <span class="keyword">int</span>&amp; mincost)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> now = t, flow = INF;</div><div class="line">    <span class="keyword">while</span> (now != s)&#123;</div><div class="line">        <span class="keyword">int</span> k = p[now];</div><div class="line">        flow = min(flow, e[k].flow);</div><div class="line">        now = e[k ^ <span class="number">1</span>].to;</div><div class="line">    &#125;</div><div class="line">    now = t;</div><div class="line">    <span class="keyword">while</span> (now != s)&#123;</div><div class="line">        <span class="keyword">int</span> k = p[now];</div><div class="line">        e[k].flow -= flow;</div><div class="line">        e[k ^ <span class="number">1</span>].flow += flow;</div><div class="line">        now = e[k ^ <span class="number">1</span>].to;</div><div class="line">    &#125;</div><div class="line">    maxflow += flow, mincost += flow * (d[t] - d[s]);</div><div class="line">    now = t;</div><div class="line">    <span class="keyword">if</span> (!e[p[now]].flow &amp;&amp; now != t - <span class="number">1</span>)&#123;</div><div class="line">        now = e[p[now] ^ <span class="number">1</span>].to;</div><div class="line">        rec[pos[now + <span class="number">1</span>]]++;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">            Add_Edge(i, now + <span class="number">1</span>, <span class="number">1</span>, rec[pos[now + <span class="number">1</span>]] * geo[i][pos[now + <span class="number">1</span>]]);</div><div class="line">        &#125;</div><div class="line">        Add_Edge(now + <span class="number">1</span>, t, <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MCMF</span><span class="params">(<span class="keyword">int</span>&amp; maxflow, <span class="keyword">int</span>&amp; mincost)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span> (SPFA()) Augment(maxflow, mincost);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch) &amp;&amp; ch != <span class="string">'-'</span>) ch = getchar();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = getchar();</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//freopen("flappy.in", "r" ,stdin);</span></div><div class="line">    <span class="comment">//freopen("flappy.out", "w", stdout);</span></div><div class="line"></div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    read(n), read(m);</div><div class="line"></div><div class="line">    s = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(p2[i]), sum += p2[i], Add_Edge(s, i, p2[i], <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</div><div class="line">            read(geo[i][j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</div><div class="line">            rec[j] = <span class="number">1</span>;</div><div class="line">            Add_Edge(i, (j - <span class="number">1</span>) * sum + <span class="number">1</span> + n, <span class="number">1</span>, geo[i][j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> + n; i &lt;= sum * m + n; i++)&#123;</div><div class="line">        pos[i] = (i - <span class="number">1</span> - n) / sum + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    t = n + sum * m + <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</div><div class="line">        Add_Edge((j - <span class="number">1</span>) * sum + <span class="number">1</span> + n, t, <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">    &#125; </div><div class="line"></div><div class="line">    <span class="keyword">int</span> maxflow = <span class="number">0</span>, mincost = <span class="number">0</span>;</div><div class="line">    MCMF(maxflow, mincost);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, mincost);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>本次题目难度不大，但是技巧性强，没能拿到高分的确是一种失误，注意日后的模拟要严格按照真实考试模式进行，尽可能节约时间，并尽快写完，调试代码</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;NOIP即将到来，又是新的轮回，不知今年会怎么样……&lt;br&gt;
    
    </summary>
    
    
      <category term="NOIP模拟赛" scheme="https://goseqh.tk/tags/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
      <category term="东北师大附中" scheme="https://goseqh.tk/tags/%E4%B8%9C%E5%8C%97%E5%B8%88%E5%A4%A7%E9%99%84%E4%B8%AD/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ阶段性汇总VI</title>
    <link href="https://goseqh.tk/2017/09/07/BZOJ%E9%98%B6%E6%AE%B5%E6%80%A7%E6%B1%87%E6%80%BBVI/"/>
    <id>https://goseqh.tk/2017/09/07/BZOJ阶段性汇总VI/</id>
    <published>2017-09-07T10:04:53.000Z</published>
    <updated>2017-11-02T06:57:07.389Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>I love you, really … don’t forget me …<br><a id="more"></a></p>
<p><title>Problem 3697. -- 采药人的路径</title><center><h2>3697: 采药人的路径</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>1240&nbsp;&nbsp;<span class="green">Solved: </span>428<br>[<a href="submitpage.php?id=3697">Submit</a>][<a href="problemstatus.php?id=3697">Status</a>][<a href="bbs.php?id=3697">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p><span style="font-size: medium">采药人的药田是一个树状结构，每条路径上都种植着同种药材。<br>
采药人以自己对药材独到的见解，对每种药材进行了分类。大致分为两类，一种是阴性的，一种是阳性的。<br>
采药人每天都要进行采药活动。他选择的路径是很有讲究的，他认为阴阳平衡是很重要的，所以他走的一定是两种药材数目相等的路径。采药工作是很辛苦的，所以他希望他选出的路径中有一个可以作为休息站的节点（不包括起点和终点），满足起点到休息站和休息站到终点的路径也是阴阳平衡的。他想知道他一共可以选择多少种不同的路径。</span></p></div><h3>Input</h3><div class="content"><p><span style="font-size: medium">第1行包含一个整数N。<br>
接下来N-1行，每行包含三个整数a_i、b_i和t_i，表示这条路上药材的类型。</span></p></div><h3>Output</h3><div class="content"><p><span style="font-size: medium">输出符合采药人要求的路径数目。</span></p></div><h3>Sample Input</h3><p></p>
<div class="content"><span class="sampledata">7<br>
1 2 0<br>
3 1 1<br>
2 4 0<br>
5 2 0<br>
6 3 1<br>
5 7 1<br>
</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">1</span></div><h3>HINT</h3>
<div class="content"><p></p><p><span style="font-size: medium">对于100%的数据，N &le; 100,000。<br><br>
</span></p><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search="></a></p></div>


<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>树</li>
<li>点分治</li>
</ul>
<hr>
<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>树上链状信息统计问题</strong></p>
<p>本题显然是要使用点分治的，那么主要的问题就是如何表示中间有一个休息站，我们首先定义一下结点的权值：从根到这个点的路径中阳性-阴性的草药的差，则中间有一个休息站就是一个节点的前面有一个与它权值相同的结点，或是另外一条链上有这样的点对，再或者就是两条链上分别有权值互为相反数的点</p>
<p>于是我们分类讨论一下就可以了，另外要特别注意权值为0的点的处理（其实需要特别处理吗？？？好像不需要。。。）</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>注意：注意全局变量的全局性，不要在递归几次以后继续在当前层使用全局变量！！！<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to, len;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to, <span class="keyword">int</span> len) : next(next), to(to), len(len)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to, <span class="keyword">int</span> len)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to, len);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr, len);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> as;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> si[maxn];</div><div class="line"><span class="keyword">int</span> g;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_r</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    si[x] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa || vis[op]) <span class="keyword">continue</span>;</div><div class="line">        find_r(op, x);</div><div class="line">        si[x] += si[op];</div><div class="line">        <span class="keyword">if</span> (si[op] &gt; as &gt;&gt; <span class="number">1</span>) f = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    si[x]++;</div><div class="line">    <span class="keyword">if</span> (as - si[x] &gt; as &gt;&gt; <span class="number">1</span>) f = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (f) g = x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> s[<span class="number">2</span>][maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> t[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line">LL ans = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_ans</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> now)</span></span>&#123;</div><div class="line">    t[now + maxn]++;</div><div class="line">    <span class="keyword">if</span> (t[now + maxn] == <span class="number">1</span>) ans += s[<span class="number">1</span>][maxn - now];</div><div class="line">    <span class="keyword">else</span> ans += s[<span class="number">0</span>][maxn - now] + s[<span class="number">1</span>][maxn - now];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa || vis[op]) <span class="keyword">continue</span>;</div><div class="line">        get_ans(op, x, now + e[i].len);</div><div class="line">    &#125;</div><div class="line">    t[now + maxn]--;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> now, <span class="keyword">int</span> p)</span></span>&#123;</div><div class="line">    t[now + maxn]++;</div><div class="line">    <span class="keyword">if</span> (t[now + maxn] == <span class="number">1</span>) s[<span class="number">0</span>][now + maxn] += p;</div><div class="line">    <span class="keyword">else</span> s[<span class="number">1</span>][now + maxn] += p;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa || vis[op]) <span class="keyword">continue</span>;</div><div class="line">        update(op, x, now + e[i].len, p);</div><div class="line">    &#125;</div><div class="line">    t[now + maxn]--;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> ns)</span></span>&#123;</div><div class="line">    as = ns;</div><div class="line">    find_r(x, x);</div><div class="line">    x = g;</div><div class="line">    s[<span class="number">0</span>][maxn]++;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (vis[op]) <span class="keyword">continue</span>;</div><div class="line">        get_ans(op, x, e[i].len);</div><div class="line">        t[maxn]++;</div><div class="line">        update(op, x, e[i].len, <span class="number">1</span>);</div><div class="line">        t[maxn]--;</div><div class="line">    &#125;</div><div class="line">    update(x, x, <span class="number">0</span>, <span class="number">-1</span>);</div><div class="line">    vis[x] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (vis[op]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span> (si[op] &gt; si[x]) work(op, ns - si[x]);</div><div class="line">        <span class="keyword">else</span> work(op, si[op]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n, x, y, z;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;z);</div><div class="line">        <span class="keyword">if</span> (z == <span class="number">1</span>) Add_Edge(x, y, <span class="number">1</span>);</div><div class="line">        <span class="keyword">else</span> Add_Edge(x, y, <span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">    work(<span class="number">1</span>, n);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><title>Problem 3626. -- [LNOI2014]LCA</title><center><h2>3626: [LNOI2014]LCA</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>2998&nbsp;&nbsp;<span class="green">Solved: </span>1178<br>[<a href="submitpage.php?id=3626">Submit</a>][<a href="problemstatus.php?id=3626">Status</a>][<a href="bbs.php?id=3626">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p><span style="font-size: medium">给出一个n个节点的有根树（编号为0到n-1，根节点为0）。一个点的深度定义为这个节点到根的距离+1。<br>
设dep[i]表示点i的深度，LCA(i,j)表示i与j的最近公共祖先。<br>
有q次询问，每次询问给出l r z，求sigma_{l&lt;=i&lt;=r}dep[LCA(i,z)]。<br>
（即，求在[l,r]区间内的每个节点i与z的最近公共祖先的深度之和）</span></p><p></p>
<p></p></div><h3>Input</h3><div class="content"><p><span style="font-size: medium">第一行2个整数n q。<br>
接下来n-1行，分别表示点1到点n-1的父节点编号。<br>
接下来q行，每行3个整数l r z。</span></p>
<p></p></div><h3>Output</h3><div class="content"><p><span style="font-size: medium">输出q行，每行表示一个询问的答案。<span style="widows: 2; text-transform: none; text-indent: 0px; display: inline !important; font: 14px/23px Arial; white-space: normal; orphans: 2; float: none; letter-spacing: normal; color: rgb(0,0,0); word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">每个答案对201314取模输出</span></span></p>
<p></p></div><h3>Sample Input</h3>
<div class="content"><span class="sampledata">5 2<br>
0<br>
0<br>
1<br>
1<br>
1 4 3<br>
1 4 2<br>
<br>
</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">8<br>
5<br>
<br>
</span></div><h3>HINT</h3>
<div class="content"><p></p><p><span style="font-size: medium">共5组数据，n与q的规模分别为10000,20000,30000,40000,50000。</span></p><br>
<p></p><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search=数据已加强 by saffah">数据已加强 by saffah<br><br></a></p>


<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>树</li>
<li>LCA</li>
<li>LCA理解</li>
<li>询问拆分法</li>
</ul>
<hr>
<h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>批量LCA深度和问题</strong></p>
<p>这题的思路非常好，我们发现一个一个求肯定是不行的对吧， 肯定要把信息记录在树上便于以后的查询，联系LCA的定义，我们可以发现，我们可以把从根到每个在询问区间内的结点的路径上的点的权值都加1，然后直接求当前结点到根的路径权值就可以了</p>
<p>最后为了方便处理，我们使用询问拆分法，把一个询问拆分成两个前缀作差的形式</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 201314</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt = <span class="number">1</span>, h[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"><span class="keyword">int</span> son[maxn];</div><div class="line"><span class="keyword">int</span> si[maxn];</div><div class="line"><span class="keyword">int</span> dfs[maxn];</div><div class="line"><span class="keyword">int</span> idfs[maxn];</div><div class="line"><span class="keyword">int</span> top[maxn];</div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">int</span> t;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == f[x]) <span class="keyword">continue</span>;</div><div class="line">        f[op] = x;</div><div class="line">        d[op] = d[x] + <span class="number">1</span>;</div><div class="line">        DFS1(op);</div><div class="line">        si[x] += si[op];</div><div class="line">        <span class="keyword">if</span> (si[op] &gt; si[son[x]]) son[x] = op;</div><div class="line">    &#125;</div><div class="line">    si[x]++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> tp)</span></span>&#123;</div><div class="line">    dfs[x] = ++t;</div><div class="line">    idfs[t] = x;</div><div class="line">    top[x] = tp;</div><div class="line">    <span class="keyword">if</span> (son[x]) DFS2(son[x], tp);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == f[x] || op == son[x]) <span class="keyword">continue</span>;</div><div class="line">        DFS2(op, op);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> sum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> add[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</div><div class="line">    sum[o] = sum[o &lt;&lt; <span class="number">1</span>] + sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (add[o] &amp;&amp; l != r)&#123;</div><div class="line">        <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">        add[o &lt;&lt; <span class="number">1</span>] += add[o];</div><div class="line">        sum[o &lt;&lt; <span class="number">1</span>] += add[o] * (mid + <span class="number">1</span> - l);</div><div class="line"></div><div class="line">        add[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += add[o];</div><div class="line">        sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += add[o] * (r - mid);</div><div class="line"></div><div class="line">        add[o] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        add[o] += qd;</div><div class="line">        sum[o] += (r - l + <span class="number">1</span>) * qd;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) modify(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) modify(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        <span class="keyword">return</span> sum[o];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) ans += get(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) ans += get(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    DFS1(<span class="number">1</span>);</div><div class="line">    DFS2(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ans[maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">query</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x, z, id, t;</div><div class="line">    query(<span class="keyword">int</span> x, <span class="keyword">int</span> z, <span class="keyword">int</span> id, <span class="keyword">int</span> t) : x(x), z(z), id(id), t(t)&#123;&#125;</div><div class="line">    query()&#123;&#125;</div><div class="line">&#125;q[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(query a, query b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a.x &lt; b.x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify_path_to_root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> f1 = top[x];</div><div class="line">    <span class="keyword">while</span> (f1 != <span class="number">1</span>)&#123;</div><div class="line">        qx = dfs[f1], qy = dfs[x], qd = <span class="number">1</span>;</div><div class="line">        modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        x = f[f1];</div><div class="line">        f1 = top[x];</div><div class="line">    &#125;</div><div class="line">    qx = <span class="number">1</span>, qy = dfs[x], qd = <span class="number">1</span>;</div><div class="line">    modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_path_to_root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> f1 = top[x];</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (f1 != <span class="number">1</span>)&#123;</div><div class="line">        qx = dfs[f1], qy = dfs[x];</div><div class="line">        ans += get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        x = f[f1];</div><div class="line">        f1 = top[x];</div><div class="line">    &#125;</div><div class="line">    qx = <span class="number">1</span>, qy = dfs[x];</div><div class="line">    ans += get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m &lt;&lt; <span class="number">1</span>; i++)&#123;</div><div class="line">        <span class="keyword">while</span> (cur &lt; q[i].x)&#123;</div><div class="line">            modify_path_to_root(++cur);</div><div class="line">        &#125;</div><div class="line">        ans[q[i].id] += q[i].t * get_path_to_root(q[i].z);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">int</span> x, z, l, r;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">        Add_Edge(x + <span class="number">1</span>, i);</div><div class="line">    &#125;</div><div class="line">    init();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;l, &amp;r, &amp;z);</div><div class="line">        q[i &lt;&lt; <span class="number">1</span>] = query(l, z + <span class="number">1</span>, i, <span class="number">-1</span>);</div><div class="line">        q[(i &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>] = query(r + <span class="number">1</span>, z + <span class="number">1</span>, i, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    sort(q, q + (m &lt;&lt; <span class="number">1</span>), cmp1);</div><div class="line">    work();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i] % M);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 3381. -- [Usaco2004 Open]Cave Cows 2 洞穴里的牛之二</title><center><h2>3381: [Usaco2004 Open]Cave Cows 2 洞穴里的牛之二</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>73&nbsp;&nbsp;<span class="green">Solved: </span>58<br>[<a href="submitpage.php?id=3381">Submit</a>][<a href="problemstatus.php?id=3381">Status</a>][<a href="bbs.php?id=3381">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;洞窟里有一道长长的通道．它由N(1&le;N&le;25000)段道尾相连构成，编号分别为1到N．每个通道有一个阈值，其范围在[1，10^9]依次通过i..j的通道，那奶牛的体重指数就不能超过i..j通道中阈值的最小值．贝茜有Q(1&le;Q&le;25000)个问题，想请教你由i到j的通道的阈值的最小值．</span><h3>Input</h3><div class="content"><div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;第1行输入N和Q，接下来N行输入每个通道的阈值，之后Q行每行两个整数，对应问题中的i和j（i&lt;j）．</span><h3>Output</h3><div class="content"><div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;对于每个问题，输出其结果．</span><h3>Sample Input</h3><p></p>
<div class="content"><span class="sampledata">10 4<br>
75<br>
30<br>
100<br>
38<br>
50<br>
51<br>
52<br>
20<br>
81<br>
5<br>
1 10<br>
3 5<br>
6 9<br>
8 10</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">5<br>
38<br>
20<br>
5</span></div><h3>HINT</h3>
<div class="content"><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search=Orange">Orange</a></p></div>


<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>数据结构</li>
<li>ST表</li>
</ul>
<hr>
<h2 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>区间静态最小问题</strong><br>直接RMQ即可。。。</p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> lo[maxn];</div><div class="line"><span class="keyword">int</span> mi[maxn];</div><div class="line"><span class="keyword">int</span> rmq[maxn][<span class="number">30</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    mi[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">30</span>; i++) mi[i] = mi[i - <span class="number">1</span>] &lt;&lt; <span class="number">1</span>;</div><div class="line">    lo[<span class="number">0</span>] = lo[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) lo[i] = lo[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) rmq[i][<span class="number">0</span>] = line[i];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; mi[j] &lt;= n; j++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (i + mi[j - <span class="number">1</span>] &lt;= n)</div><div class="line">                rmq[i][j] = min(rmq[i][j - <span class="number">1</span>], rmq[i + mi[j - <span class="number">1</span>]][j - <span class="number">1</span>]);</div><div class="line">            <span class="keyword">else</span> </div><div class="line">                rmq[i][j] = rmq[i][j - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> now = lo[y - x + <span class="number">1</span>];</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, min(rmq[x][now], rmq[y - mi[now] + <span class="number">1</span>][now]));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y, q;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;q);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">    init();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x ,&amp;y);</div><div class="line">        query(x, y);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 4146. --  [AMPPZ2014]Divisors</title><center><h2>4146:  [AMPPZ2014]Divisors</h2><span class="green">Time Limit: </span>20 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>256 MB<br><span class="green">Submit: </span>675&nbsp;&nbsp;<span class="green">Solved: </span>374<br>[<a href="submitpage.php?id=4146">Submit</a>][<a href="problemstatus.php?id=4146">Status</a>][<a href="bbs.php?id=4146">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>给定一个序列a[1],a[2],...,a[n]。求满足i!=j且a[i]|a[j]的二元组(i,j)的个数。</div><p></p>
<p></p></div><h3>Input</h3><div class="content"><div>第一行包含一个正整数n(1&lt;=n&lt;=2000000)，表示序列长度。</div>
<div>第二行包含n个正整数，依次表示a[1],a[2],...,a[n](1&lt;=a[i]&lt;=2000000)。</div>
<p></p></div><h3>Output</h3><div class="content"><div>一个整数，即满足条件的二元组的个数。</div>
<p></p></div><h3>Sample Input</h3>
<div class="content"><span class="sampledata">5<br>
2 4 5 2 6</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">6</span></div><h3>HINT</h3>
<div class="content"><p><div>满足条件的6组分别为(1,2),(1,4),(1,5),(4,1),(4,2),(4,5)。</div><br>
<div></div><br>
</p><p></p><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search=鸣谢Claris上传">鸣谢Claris上传</a></p>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>数学</li>
<li>整除问题</li>
</ul>
<hr>
<h2 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>多基数整除问题</strong><br>处理这样的问题，我们要联想到一个结论：调和级数上界</p>
<p>我们继续考虑这样的思路，那么我们只需要先保存每种数字有多少个，然后从小到大对倍数进行扫描求和即可</p>
<h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">int</span> tn = n;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">        num[line[i]]++;</div><div class="line">    &#125;</div><div class="line">    sort(line + <span class="number">1</span>, line + <span class="number">1</span> + n);</div><div class="line">    n = unique(line + <span class="number">1</span>, line + <span class="number">1</span> + n) - line - <span class="number">1</span>;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; line[i] * j &lt;= line[n]; j++)&#123;</div><div class="line">            ans += (LL)num[line[i]] * num[j * line[i]];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans - tn);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 4390. -- [Usaco2015 dec]Max Flow</title><center><h2>4390: [Usaco2015 dec]Max Flow</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>270&nbsp;&nbsp;<span class="green">Solved: </span>169<br>[<a href="submitpage.php?id=4390">Submit</a>][<a href="problemstatus.php?id=4390">Status</a>][<a href="bbs.php?id=4390">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p>Farmer John has installed a new system of N&minus;1 pipes to transport milk between the N stalls in his barn (2&le;N&le;50,000), conveniently numbered 1&hellip;N. Each pipe connects a pair of stalls, and all stalls are connected to each-other via paths of pipes.<br>
<br>
FJ is pumping milk between KK pairs of stalls (1&le;K&le;100,000). For the iith such pair, you are told two stalls sisi and titi, endpoints of a path along which milk is being pumped at a unit rate. FJ is concerned that some stalls might end up overwhelmed with all the milk being pumped through them, since a stall can serve as a waypoint along many of the KK paths along which milk is being pumped. Please help him determine the maximum amount of milk being pumped through any stall. If milk is being pumped along a path from sisi to titi, then it counts as being pumped through the endpoint stalls sisi and titi, as well as through every stall along the path between them.</p><p></p>
<p></p>
<p>给定一棵有N个点的树，所有节点的权值都为0。</p>
<p>有K次操作，每次指定两个点s,t，将s到t路径上所有点的权值都加一。</p>
<p>请输出K次操作完毕后权值最大的那个点的权值。</p>
<p></p></div><h3>Input</h3><div class="content"><p>The first line of the input contains NN and KK.<br>
<br>
The next N&minus;1 lines each contain two integers x and y (x&ne;y，x&ne;y) describing a pipe between stalls x and y.<br>
<br>
The next K lines each contain two integers ss and t describing the endpoint stalls of a path through which milk is being pumped.</p><h3>Output</h3><div class="content"><p>An integer specifying the maximum amount of milk pumped through any stall in the barn.</p></div><h3>Sample Input</h3>
<div class="content"><span class="sampledata">5 10<br>
3 4<br>
1 5<br>
4 2<br>
5 4<br>
5 4<br>
5 4<br>
3 5<br>
4 3<br>
4 3<br>
1 3<br>
3 5<br>
5 4<br>
1 5<br>
3 4</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">9</span></div><h3>HINT</h3>
<div class="content"><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search=Platinum鸣谢Claris提供译文">Platinum鸣谢Claris提供译文</a></p>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>树</li>
<li>树上差分</li>
</ul>
<hr>
<h2 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>树上链状信息维护问题</strong></p>
<p>我也不知道这种问题应该称作什么。。。其实树剖即可解决，但为了体现本题的价值，我们使用树上差分，就是LCA与其父亲各减一，两个端点加一，注意LCA为根时的情况</p>
<h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, k; </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">int</span> fa[maxn][<span class="number">30</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">30</span>; i++)&#123;</div><div class="line">        fa[x][i] = fa[fa[x][i - <span class="number">1</span>]][i - <span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x][<span class="number">0</span>]) <span class="keyword">continue</span>;</div><div class="line">        fa[op][<span class="number">0</span>] = x;</div><div class="line">        d[op] = d[x] + <span class="number">1</span>;</div><div class="line">        DFS(op);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> x;</div><div class="line">    <span class="keyword">if</span> (d[x] &lt; d[y]) swap(x, y);</div><div class="line">    <span class="keyword">int</span> k = d[x] - d[y];</div><div class="line">    <span class="keyword">int</span> con = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (k)&#123;</div><div class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) x = fa[x][con];</div><div class="line">        con++;</div><div class="line">        k &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> y;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</div><div class="line">        <span class="keyword">int</span> s = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (fa[x][s] != fa[y][s]) s++;</div><div class="line">        <span class="keyword">if</span> (s == <span class="number">0</span>) <span class="keyword">return</span> fa[x][<span class="number">0</span>];</div><div class="line">        s--;</div><div class="line">        x = fa[x][s];</div><div class="line">        y = fa[y][s];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> val[maxn];</div><div class="line"><span class="keyword">int</span> ans = -INF;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x][<span class="number">0</span>]) <span class="keyword">continue</span>;</div><div class="line">        get(op);</div><div class="line">        val[x] += val[op];</div><div class="line">    &#125;</div><div class="line">    ans = max(ans, val[x]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        Add_Edge(x, y);</div><div class="line">    &#125;</div><div class="line">    fa[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    DFS(<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        <span class="keyword">int</span> lca = get_lca(x, y);</div><div class="line">        val[lca]--, val[fa[lca][<span class="number">0</span>]]--;</div><div class="line">        val[x]++, val[y]++;</div><div class="line">    &#125;</div><div class="line">    get(<span class="number">1</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 4896. -- [Thu Summer Camp2016]补退选</title><center><h2>4896: [Thu Summer Camp2016]补退选</h2><span class="green">Time Limit: </span>20 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>512 MB<br><span class="green">Submit: </span>505&nbsp;&nbsp;<span class="green">Solved: </span>165<br>[<a href="submitpage.php?id=4896">Submit</a>][<a href="problemstatus.php?id=4896">Status</a>][<a href="bbs.php?id=4896">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>X是T大的一名老师，每年他都要教授许多学生基础的C++知识。在T大，每个学生在每学期的开学前都需要选课，每</div><p></p>
<p><div>次选课一共分为三个阶段：预选，正选，补退选；其中&quot;补退选&quot;阶段最忙碌。在补退选阶段，学生即可以选课，也</div></p>
<p><div>可以退课。对于X老师来说，在补退选阶段可能发生以下两种事件：</div></p>
<p><div>1:一个姓名为S的学生选了他的课（姓名S将出现在X的已选课学生名单中）</div></p>
<p><div>2:一个姓名为S的学生退了他的课（姓名S将从X的已选课学生名单中移除）</div></p>
<p><div>同时，X老师对于有哪些学生选了他的课非常关心，所以他会不定时的查询已选课学生名单，每次查询的格式如下</div></p>
<p><div>：最早在哪个事件之后，姓名以S为前缀的学生数量超过了vX老师看你骨骼惊奇，所以想用这个问题考考你，你当</div></p>
<p><div>然不会畏惧，所以勇敢的接下了这个任务。</div></p>
<p><div>注意1：学生的姓名可能相同，如果有p个姓名相同的学生都选了X老师的课，则他们的姓名将出现在X老师的名单上p次。</div></p>
<p><div>注意2：只有已经选了课的学生才会退课，如果姓名为S的学生退课，则在他退课之前X老师的名单上一定有姓名S。</div></p>
<p><div>注意3：选课，退课和查询都被定义为&quot;事件&quot;，&quot;事件&quot;的编号从1开始</div></p><h3>Input</h3><div class="content"><div><p></p>
<p><div>第一行包含一个正整数n，表示一共发生了n个事件。</div></p>
<p><div>接下来n行，每行描述一个事件；每行第一个正整数k表示事件类型：</div></p>
<p><div>1.如果k=1，表示选课事件，接下来一个字符串S，表示一个姓名为S的学生选了X老师的课</div></p>
<p><div>2.如果k=2，表示退课事件，接下来一个字符串S，表示一个姓名为S的学生退了X老师的课</div></p>
<p><div>3.如果k=3，表示查询事件，接下来一个字符串S以及三个非负整数a,b,c，表示X老师想知道最早在第几个事件之后</div></p>
<p><div>，姓名以S为前缀的学生数量超过了(a*|ANS|+b)%c，|ANS|表示上次查询事件的答案的绝对值，如果当前是第一次</div></p>
<p><div>查询，则|ANS|=0；如果任何时刻都没有超过该值，则答案为-1。注：输入中的所有字符串均只包含小写字母。</div></p>
<p><div></div></p></div><h3>Output</h3><div class="content"><div><p></p>
<p><div>对于每个查询事件，输出一行表示该查询答案。</div></p>
<p></p><h3>Sample Input</h3><p></p>
<p><div class="content"><span class="sampledata">6<br>
1 lcaq<br>
3 lca 0 0 5<br>
1 lcq<br>
3 lc 0 1 5<br>
2 lcaq<br>
3 lc 0 1 5</span></div></p><h3>Sample Output</h3><p></p>
<p><div class="content"><span class="sampledata">1<br>
3<br>
3</span></div></p><h3>HINT</h3><p></p>
<p><div class="content"><p></p><p>n&lt;=100000，字符串长度 &lt;= 60，输入中的所有字符串只会包含前 10 个小写字母</p></div></p></div><h3>Source</h3><p></p>
<p><div class="content"><p><a href="problemset.php?search=鸣谢Sengxian上传">鸣谢Sengxian上传</a></p></div></p>
<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>二分答案</li>
<li>字符串</li>
<li>可持久化Trie</li>
</ul>
<hr>
<h2 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>多版本信息维护问题</strong><br>清华夏令营好题，我们首先肯定能想到可持久化Trie对吧，实际上确实可以这样写，我们多维护一个maxval成员变量，表示这个节点的历史最大值是多少，然后直接二分查找即可</p>
<p>但是还有人好像是用vector直接暴力存储的，个人感觉不是很好。。。</p>
<h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 5000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sigma 12</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> ch[maxn][sigma];</div><div class="line"><span class="keyword">int</span> maxnum[maxn];</div><div class="line"><span class="keyword">int</span> h[maxn];</div><div class="line"><span class="keyword">int</span> val[maxn];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"><span class="keyword">int</span> len;</div><div class="line"><span class="keyword">int</span> k;</div><div class="line"><span class="keyword">int</span> ord[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> now = ++cnt; h[k] = cnt;</div><div class="line">    <span class="keyword">int</span> pre = h[k - <span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len; i++)&#123;</div><div class="line">        <span class="built_in">memcpy</span>(ch[now], ch[pre], <span class="keyword">sizeof</span>(ch[pre]));</div><div class="line">        maxnum[now] = maxnum[pre];</div><div class="line">        val[now] = val[pre];</div><div class="line"></div><div class="line">        val[now] += v;</div><div class="line">        <span class="keyword">if</span> (val[now] &gt; maxnum[now]) maxnum[now] = val[now];</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (i &lt; len)&#123;</div><div class="line">            ch[now][s[i] - <span class="string">'a'</span>] = ++cnt;</div><div class="line">            pre = ch[pre][s[i] - <span class="string">'a'</span>];</div><div class="line">            now = ch[now][s[i] - <span class="string">'a'</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">char</span> qs[maxn];</div><div class="line"><span class="keyword">int</span> lenq;</div><div class="line"><span class="keyword">int</span> qd;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> now = h[pos];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lenq; i++)&#123;</div><div class="line">        now = ch[now][qs[i] - <span class="string">'a'</span>];</div><div class="line">        <span class="keyword">if</span> (!now) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (maxnum[now] &gt; qd) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary_search</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (query(mid)) <span class="keyword">return</span> binary_search(l, mid);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> binary_search(mid + <span class="number">1</span>, r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n, a, b, c, op;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;op);</div><div class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>)&#123;</div><div class="line">            ord[++k] = i;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">            len = <span class="built_in">strlen</span>(s);</div><div class="line">            insert(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>)&#123;</div><div class="line">            ord[++k] = i;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">            len = <span class="built_in">strlen</span>(s);</div><div class="line">            insert(<span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s%d%d%d"</span>, qs, &amp;a, &amp;b, &amp;c);</div><div class="line">            lenq = <span class="built_in">strlen</span>(qs);</div><div class="line">            qd = ((<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>)a * <span class="built_in">abs</span>(ans) + b) % (<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>)c;</div><div class="line">            ans = binary_search(<span class="number">1</span>, k + <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (ans == k + <span class="number">1</span>) ans = <span class="number">-1</span>;</div><div class="line">            <span class="keyword">else</span> ans = ord[ans];</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 4757. -- [Usaco2017 Jan]Building a Tall Barn</title><center><h2>4757: [Usaco2017 Jan]Building a Tall Barn</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>129&nbsp;&nbsp;<span class="green">Solved: </span>38<br>[<a href="submitpage.php?id=4757">Submit</a>][<a href="problemstatus.php?id=4757">Status</a>][<a href="bbs.php?id=4757">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>Farmer John is building a brand new, N-story barn, with the help of his KK cows (1≤N≤K≤1012 and N</div><p></p>
<p><div>≤10^5). To build it as quickly as possible, he needs your help to figure out how to allocate work a</div></p>
<p><div>mong the cows.Each cow must be assigned to work on exactly one specific floor out of the N total flo</div></p>
<p><div>ors in the barn, and each floor must have at least one cow assigned to it. The iith floor requires a</div></p>
<p><div>iai units of total work, and each cow completes one unit of work per hour, so if cc cows work on flo</div></p>
<p><div>or i, it will be completed in ai/c units of time. For safety reasons, floor ii must be completed bef</div></p>
<p><div>ore construction can begin on floor i+1Please compute the minimum total time in which the barn can b</div></p>
<p><div>e completed, if the cows are allocated to work on floors in an optimal fashion. Output this number r</div></p>
<p><div>ounded to the nearest integer; it is guaranteed that the solution will be more than 0.1 from the bou</div></p>
<p><div>ndary between two integers.</div></p>
<p><div>给定长度为N的序列ai，对每个ai分配ci使得ci&gt;0(ci为整数)且ci之和等于K，求出最小的ai/ci之和</div></p>
<p><div></div></p>
<p></p></div><h3>Input</h3><div class="content"><div>The first line of input contains N and K.</div>
<div>
<div>The next N lines contain a1…aN, each a positive integer of size at most 1012</div>
</div>
<p></p></div><h3>Output</h3><div class="content"><p>Please output the minimum time required to build the barn, rounded to the nearest integer.</p>
<p></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">2 5<br>
10<br>
4</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">5</span></div><h3>HINT</h3>
            <div class="content"><p></p></div><h3>source</h3>
            <div class="content"><p><a href="problemset.php?search=Platinum">Platinum</a></p>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>二分答案</li>
<li>调整思想</li>
<li>单调性</li>
</ul>
<hr>
<h2 id="题目分析-6"><a href="#题目分析-6" class="headerlink" title="题目分析"></a>题目分析</h2><p>我们发现，题目中固定的东西只有所有$a_i$以及所有$c_i$的和，所以我们肯定是要在这两个已知条件的基础上进行推导，我们可以尝试进行调整，即只对其中两个$a_i$进行分析，假设这两个变量分别为$a_i$与$a_j$ 并且分配给这两个变量的$c$的值分别为$c_i$与$c_j$，那么我们把第一个$c$加一，第二个$c$减一会发生什么呢？由于我们要求的是最小的和，那么如果交换以后，这个和变小了，那么我们就可以接受它</p>
<p>所以，我们现在的想法就是，如何进行这样的调动使得最后的总和最小</p>
<p>我们定义每一个$a_i$的<strong>调动价值</strong>为$F(i) = \frac{a_i}{c_i}- \frac{a_i}{c_i + 1}$，可以发现，从这个调动价值小的$a_i$那里分配一个$c$给该值较大的$a_j$是划算的，这是因为，有$F(i) - F(j) &lt; 0$，而且，这样做完以后，我们可以发现$F(i)$增大而$F(j)$减小，这说明当所有$a_i$的调动价值都十分接近的时候达到最优，于是，我们可以反复进行这样的交换，直到所有的$a_i$之间的调动价值都趋于相等</p>
<p>除此以外，我们还发现，当调动价值增加的时候，$c$是减小的，但是为了使答案最优，我们应该让每个$c$都尽可能大才行，所以我们就可以根据这个单调性二分答案</p>
<p>那么，我们就可以考虑二分最小的调动价值，并由此解出所有的$c _ i$，计算看它们的和是否超过$k$，再由此二分，最后我们就能得到一个相对正确的值</p>
<p>那么这个值的意义是什么呢？我们得到这个值以后，按照这个值求出的$c _ i$就是最优的分配方案，直接按这个方案计算答案就可以了</p>
<h2 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-13</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line">LL k;</div><div class="line"><span class="keyword">double</span> a[maxn];</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">cal</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;<span class="keyword">return</span> (LL)((<span class="built_in">sqrt</span>(<span class="number">1</span>+<span class="number">4</span>*x)<span class="number">-1</span>)/<span class="number">2</span>);&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        ans += cal(a[i]/x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (ans &lt;= k - n) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">work</span><span class="params">(<span class="keyword">double</span> l, <span class="keyword">double</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (r - l &lt; eps) <span class="keyword">return</span> l;</div><div class="line">    <span class="keyword">double</span> mid = ((r - l) / <span class="number">2</span>) + l;</div><div class="line">    <span class="keyword">if</span> (judge(mid)) <span class="keyword">return</span> work(l, mid);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> work(mid, r);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>, &amp;n, &amp;k);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;a[i]);</div><div class="line">    <span class="keyword">double</span> l=eps,r=<span class="number">1e12</span>,mid;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">200</span>;i++)  </div><div class="line">    &#123;</div><div class="line">        mid=(l+r)/<span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(judge(mid)) r=mid;</div><div class="line">        <span class="keyword">else</span> l=mid;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>,l=<span class="number">0</span>;i&lt;=n;++i)l+=a[i]/(<span class="keyword">double</span>)(cal(a[i]/r) + <span class="number">1</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, (LL)(l + <span class="number">0.5</span>));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然而本题好像特别玄学，细节许多，很不容易过。。。</p>
<p><title>Problem 3211. -- 花神游历各国</title><center><h2>3211: 花神游历各国</h2><span class="green">Time Limit: </span>5 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>4036&nbsp;&nbsp;<span class="green">Solved: </span>1476<br>[<a href="submitpage.php?id=3211">Submit</a>][<a href="problemstatus.php?id=3211">Status</a>][<a href="bbs.php?id=3211">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p><img src="http://218.106.205.134/uploads/1(16).jpg.gif" height="px" width="px"></p><p></p>
<p></p></div><h3>Input</h3><div class="content"><p><img src="http://218.106.205.134/uploads/2(5).jpg.gif" height="px" width="px"></p></div><h3>Output</h3><div class="content"><p class="MsoNormal" style="margin: 0cm 0cm 0pt"><font size="3"><span style="font-family: 宋体; mso-ascii-font-family: 'Bookman Old Style'; mso-hansi-font-family: 'Bookman Old Style'">每次</span><span style="font-family: &quot;Bookman Old Style&quot;" lang="EN-US">x=1</span><span style="font-family: 宋体; mso-ascii-font-family: 'Bookman Old Style'; mso-hansi-font-family: 'Bookman Old Style'">时，每行一个整数，表示这次旅行的开心度</span><span style="font-family: &quot;Bookman Old Style&quot;" lang="EN-US"><o:p></o:p></span></font></p>
<p></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">4<br>
<br>
1 100 5 5<br>
<br>
5<br>
<br>
1 1 2<br>
<br>
2 1 2<br>
<br>
1 1 2<br>
<br>
2 2 3<br>
<br>
1 1 4<br>
<br>
</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">101<br>
<br>
11<br>
<br>
11<br>
<br>
</span></div><h3>HINT</h3>
            <div class="content"><p></p><p>对于100%的数据， n ≤ 100000，m≤200000 ,data[i]非负且小于10^9</p>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>数据结构</li>
<li>平摊分析</li>
<li>线段树</li>
</ul>
<hr>
<h2 id="题目分析-7"><a href="#题目分析-7" class="headerlink" title="题目分析"></a>题目分析</h2><p>这种带特殊操作还搞不了几次就不能再搞或是时常搞不了的题目应该非常显然就是平摊分析线段树了吧。。。我们暴力进行操作，多维护一个最大值，递归进子区间且里面的最大值小于等于$1$的时候就不用再搞了，复杂度基本上就是$O(n\log (\log n) * \log n)$的吧。。。</p>
<h2 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line">LL line[maxn];</div><div class="line"></div><div class="line">LL maxnum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line">LL sum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</div><div class="line">    maxnum[o] = max(maxnum[o &lt;&lt; <span class="number">1</span>], maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">    sum[o] = sum[o &lt;&lt; <span class="number">1</span>] + sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        maxnum[o] = sum[o] = line[l];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    init(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    init(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        maxnum[o] = sum[o] = (LL) <span class="built_in">sqrt</span>(maxnum[o]);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        <span class="comment">//if (maxnum[o] == 1) return; //Error：明显就是往TLE写的节奏</span></div><div class="line">        <span class="keyword">if</span> (maxnum[o] &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">            modify(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">            modify(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">            pushup(l, r, o);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) modify(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) modify(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy) <span class="keyword">return</span> sum[o];</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) ans += get(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) ans += get(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;line[i]);</div><div class="line">    init(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;qx, &amp;qy);</div><div class="line">        <span class="keyword">if</span> (x == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, get(<span class="number">1</span>, n, <span class="number">1</span>));</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">2</span>) modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>基本就是不要出现个上面代码里的那个SB错误，同时也别忘了开long long </p>
<p><title>Problem 1856. -- [Scoi2010]字符串
</title><center><h2>1856: [Scoi2010]字符串
</h2><span class="green">Time Limit: </span>5 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>64 MB<br><span class="green">Submit: </span>1792&nbsp;&nbsp;<span class="green">Solved: </span>1020<br>[<a href="submitpage.php?id=1856">Submit</a>][<a href="problemstatus.php?id=1856">Status</a>][<a href="bbs.php?id=1856">Discuss</a>]</center></p><h3>Description</h3><div class="content">lxhgww最近接到了一个生成字符串的任务，任务需要他把n个1和m个0组成字符串，但是任务还要求在组成的字符串中，在任意的前k个字符中，1的个数不能少于0的个数。现在lxhgww想要知道满足要求的字符串共有多少个，聪明的程序员们，你们能帮助他吗？
</div><h3>Input</h3><div class="content">输入数据是一行，包括2个数字n和m
</div><h3>Output</h3><div class="content">输出数据是一行，包括1个数字，表示满足要求的字符串数目，这个数可能会很大，只需输出这个数除以20100403的余数
</div><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">2 2<br>
</span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">2<br>
<br>
</span></div><h3>HINT</h3><br>            <div class="content"><p>【数据范围】<br>
对于30%的数据，保证1&lt;=m&lt;=n&lt;=1000<br>
对于100%的数据，保证1&lt;=m&lt;=n&lt;=1000000<br>
</p></div><h3>source</h3><br>            <div class="content"><p><a href="problemset.php?search=Day2">Day2</a></p><p></p>
<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>数学</li>
<li>组合数学</li>
<li>Catalan</li>
<li>数形结合思想</li>
</ul>
<hr>
<h2 id="题目分析-8"><a href="#题目分析-8" class="headerlink" title="题目分析"></a>题目分析</h2><p>这道题并没有能够自己做出来。。。感觉还是很不爽的，说到底，问题还是在于我没有弄清问题的本质。。。当初刚学Catalan的时候，我看到一句 “可以证明通项<script type="math/tex">a_n=C_{2n}^{n}-C_{2n}^{n-1}</script>”， 就没有再去思考它。。。</p>
<p>好了回到本题，这样的题目不由得让我们回想起出栈入栈的问题，如果我们把$1$看做入栈，$0$看做出栈，那么所求的就是合法的栈操作序列方案数，而这个模型大家应该都很熟悉，这就是Catalan问题，本题不同的就在于出入栈次数不等，即最后栈中可能有剩余元素</p>
<p>然后我当时就不会了。。。</p>
<p>实际上，本题的证明思路和Catalan通项的其中一种证明方法十分相像，那就是数形结合法，我们考虑下面这个图：<br><img src="http://218.106.205.134/uploads/262128005064796.png" height="px" width="px"></p>
<p>这个图中的意思就是：每当有一个$1$，我们就向右上走一步，有一个$0$，我们就向右下走一步</p>
<p>我们可以发现，对于普通的Catalan问题，我们最后的终点就是$(2n, 0)$，而在这个问题中，我们则是走到$(n + m, n - m)$，那么我们下面就考虑如何通过这个方法求出答案</p>
<p>首先，我们知道从$(0, 0)$任意走到$(n + m, n - m)$的方案数为$C_{n + m}^{n}$，这个应该还是十分显然的，但是其中肯定有许多不合法情况，什么样的情况不合法呢？那就是走到$x$轴以下的方案，都是不合法的（只要越过一次就不合法）</p>
<p>所以，我们现在就要考虑如何求出不合法方案数。考虑对应法，即我们要把不合法情况与一些容易求出答案的方案对应在一起，下面就是脑洞时间：我们作直线$y = -1$，把起点设为$(0, -2)$，那么，不合法的方案数就是在满足上述条件下任意走的方案数，即$C_{n + m}^{n + 1}$，就相当于多了一个$1$而少了一个$0$</p>
<p>这是为什么呢？我们可以考虑从$(0, 0)$出发的不合法方案，我们把这样的方案在最后一次越过$y = -1$之前的部分对称到下面去，后面的部分与对应后的方案重合（可以参考上面的图理解），这样，显然原来的不合法方案与新图的任意走的方案是一一对应的，问题就转化为了十分简单的形式，结论就得到了证明</p>
<p>那么本题就这样解决了，上面的结论退化一下，就是Catalan通项的数形结合证明法</p>
<h2 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 20100403</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line">LL fac[maxn];</div><div class="line">LL ifac[maxn];</div><div class="line">LL inv[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) fac[i] = fac[i - <span class="number">1</span>] * i % M;</div><div class="line">    inv[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++) inv[i] = (M - M / i * inv[M % i] % M) % M;</div><div class="line">    ifac[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) ifac[i] = ifac[i - <span class="number">1</span>] * inv[i] % M;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n, m;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    init();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, fac[n + m] * ifac[n + <span class="number">1</span>] % M * ifac[m] % M * (n + <span class="number">1</span> - m) % M);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意不要把内存开炸。。。</p>
<p><title>Problem 3993. -- [SDOI2015]星际战争</title><center><h2>3993: [SDOI2015]星际战争</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MBSec&nbsp;&nbsp;<span class="red">Special Judge</span><br><span class="green">Submit: </span>1607&nbsp;&nbsp;<span class="green">Solved: </span>726<br>[<a href="submitpage.php?id=3993">Submit</a>][<a href="problemstatus.php?id=3993">Status</a>][<a href="bbs.php?id=3993">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p>&nbsp;3333年，在银河系的某星球上，X军团和Y军团正在激烈地作战。在战斗的某一阶段，Y军团一共派遣了N个巨型机器人进攻X军团的阵地，其中第i个巨型机器人的装甲值为Ai。当一个巨型机器人的装甲值减少到0或者以下时，这个巨型机器人就被摧毁了。X军团有M个激光武器，其中第i个激光武器每秒可以削减一个巨型机器人Bi的装甲值。激光武器的攻击是连续的。这种激光武器非常奇怪，一个激光武器只能攻击一些特定的敌人。Y军团看到自己的巨型机器人被X军团一个一个消灭，他们急需下达更多的指令。为了这个目标，Y军团需要知道X军团最少需要用多长时间才能将Y军团的所有巨型机器人摧毁。但是他们不会计算这个问题，因此向你求助。</p></div><h3>Input</h3><div class="content"><p>第一行，两个整数，N、M。</p><p></p>
<p><div></div></p>
<p><div>第二行，N个整数，A1、A2…AN。</div></p>
<p><div>第三行，M个整数，B1、B2…BM。</div></p>
<p><div>接下来的M行，每行N个整数，这些整数均为0或者1。这部分中的第i行的第j个整数为0表示第i个激光武器不可以攻击第j个巨型机器人，为1表示第i个激光武器可以攻击第j个巨型机器人。</div><br>&lt;/div&gt;&lt;/div&gt;</p><h3>Output</h3><div class="content"><p>&nbsp;一行，一个实数，表示X军团要摧毁Y军团的所有巨型机器人最少需要的时间。输出结果与标准答案的绝对误差不超过10-3即视为正确。</p></div><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">2 2<br>
3 10<br>
4 6<br>
0 1<br>
1 1</span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">1.300000</span></div><h3>HINT</h3><br>            <div class="content"><p></p><p>&nbsp;【样例说明1】</p><br><p></p>
<p><div>战斗开始后的前0.5秒，激光武器1攻击2号巨型机器人，激光武器2攻击1号巨型机器人。1号巨型机器人被完全摧毁，2号巨型机器人还剩余8的装甲值；</div><br></p>
<p><div>接下来的0.8秒，激光武器1、2同时攻击2号巨型机器人。2号巨型机器人被完全摧毁。</div><br></p>
<p><div>对于全部的数据，1&lt;=N, M&lt;=50，1&lt;=Ai&lt;=105，1&lt;=Bi&lt;=1000，输入数据保证X军团一定能摧毁Y军团的所有巨型机器人</div><br></p>
<p><div></div><br></p>
<p></p><p></p></div><h3>source</h3>
            <div class="content"><p><a href="problemset.php?search=Round 1 感谢yts1999上传">Round 1 感谢yts1999上传</a></p>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>图论</li>
<li>网络流</li>
<li>二分答案</li>
<li>精度误差</li>
</ul>
<hr>
<h2 id="题目分析-9"><a href="#题目分析-9" class="headerlink" title="题目分析"></a>题目分析</h2><p>对于这样的题目，我们从数据范围和题目形式上来看就知道应该是网络流（因为操作比较随意，状态表示很复杂），同时题目要求最小值，我们在建出网络流图以后就知道应该二分答案，然后判断机器人的边是否都被跑满，然后由此继续二分最后得到答案</p>
<h2 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 30005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m, s, t;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">double</span> flow;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to, <span class="keyword">long</span> <span class="keyword">double</span> flow) : next(next), to(to), flow(flow)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxm &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to, <span class="keyword">long</span> <span class="keyword">double</span> flow)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to, flow);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr, <span class="number">0</span>);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; bfs;</div><div class="line">    bfs.push(s);</div><div class="line">    <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span>(d));</div><div class="line">    <span class="keyword">while</span> (!bfs.empty())&#123;</div><div class="line">        <span class="keyword">int</span> op = bfs.front();bfs.pop();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[op]; i; i = e[i].next)&#123;</div><div class="line">            <span class="keyword">if</span> (e[i].flow &lt; eps) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> k = e[i].to;</div><div class="line">            <span class="keyword">if</span> (k == s || d[k]) <span class="keyword">continue</span>;</div><div class="line">            bfs.push(k);</div><div class="line">            d[k] = d[op] + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!d[t]) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">double</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">long</span> <span class="keyword">double</span> a)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == t) <span class="keyword">return</span> a;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">double</span> rest = a;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span> (e[i].flow &lt; eps) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (d[op] != d[x] + <span class="number">1</span>) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">long</span> <span class="keyword">double</span> k = DFS(op, min(e[i].flow, rest));</div><div class="line">        e[i].flow -= k;</div><div class="line">        e[i ^ <span class="number">1</span>].flow += k;</div><div class="line">        rest -= k;</div><div class="line">        <span class="keyword">if</span> (rest &lt; eps) <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a - rest;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dinic</span><span class="params">(<span class="keyword">long</span> <span class="keyword">double</span>&amp; maxflow)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(BFS()) maxflow += DFS(s, INF);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> geo[maxn][maxn];</div><div class="line"><span class="keyword">long</span> <span class="keyword">double</span> a[maxn];</div><div class="line"><span class="keyword">long</span> <span class="keyword">double</span> b[maxn];</div><div class="line"><span class="keyword">long</span> <span class="keyword">double</span> sum = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rebuild</span><span class="params">(<span class="keyword">long</span> <span class="keyword">double</span> x)</span></span>&#123;</div><div class="line">    cnt = <span class="number">1</span>;</div><div class="line">    <span class="built_in">memset</span>(h, <span class="number">0</span>, <span class="keyword">sizeof</span>(h));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) Add_Edge(s, i, x * b[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) Add_Edge(i + m, t, a[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (geo[i][j]) Add_Edge(i, j + m, INF);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">long</span> <span class="keyword">double</span> x)</span></span>&#123;</div><div class="line">    rebuild(x);</div><div class="line">    <span class="keyword">long</span> <span class="keyword">double</span> maxflow = <span class="number">0</span>;</div><div class="line">    Dinic(maxflow);</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(sum - maxflow) &lt; eps) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">double</span> <span class="title">work</span><span class="params">(<span class="keyword">long</span> <span class="keyword">double</span> l, <span class="keyword">long</span> <span class="keyword">double</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (r - l &lt; eps) <span class="keyword">return</span> l;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">double</span> mid = (r + l) / <span class="number">2.0</span>;</div><div class="line">    <span class="keyword">if</span> (judge(mid)) <span class="keyword">return</span> work(l, mid);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> work(mid, r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    s = <span class="number">0</span>, t = n + m + <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%Lf"</span>, &amp;a[i]), sum += a[i];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">scanf</span>(<span class="string">"%Lf"</span>, &amp;b[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;geo[i][j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%Lf"</span>, work(<span class="number">0</span>, INF) );</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意本题的精度误差问题，所有的类型要用long double而不是double，同时也要注意二分时的判定方法，要使用fabs判断误差，不要直接减。。。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本期题型：</p>
<ul>
<li><strong>树上链状信息统计问题</strong></li>
<li><strong>批量LCA深度和问题</strong></li>
<li><strong>区间静态最小问题</strong></li>
<li><strong>多基数整除问题</strong></li>
<li><strong>树上链状信息维护问题</strong></li>
<li><strong>多版本信息维护问题</strong></li>
<li><strong>调整思想</strong></li>
<li><strong>平摊分析线段树</strong></li>
<li><strong>数形结合思想</strong></li>
<li><strong>网络流最大流模型</strong></li>
</ul>
</div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;I love you, really … don’t forget me …&lt;br&gt;
    
    </summary>
    
    
      <category term="BZOJ" scheme="https://goseqh.tk/tags/BZOJ/"/>
    
      <category term="题解" scheme="https://goseqh.tk/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ阶段性汇总V</title>
    <link href="https://goseqh.tk/2017/09/07/BZOJ%E9%98%B6%E6%AE%B5%E6%80%A7%E6%B1%87%E6%80%BBV/"/>
    <id>https://goseqh.tk/2017/09/07/BZOJ阶段性汇总V/</id>
    <published>2017-09-07T10:04:36.000Z</published>
    <updated>2017-11-02T04:50:21.706Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>How can I stay with you … forever ? …<br><a id="more"></a></p>
<p><title>Problem 3400. -- [Usaco2009 Mar]Cow Frisbee Team 奶牛沙盘队</title><center><h2>3400: [Usaco2009 Mar]Cow Frisbee Team 奶牛沙盘队</h2><span class="green">Time Limit: </span>3 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>290&nbsp;&nbsp;<span class="green">Solved: </span>195<br>[<a href="submitpage.php?id=3400">Submit</a>][<a href="problemstatus.php?id=3400">Status</a>][<a href="bbs.php?id=3400">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;农夫顿因开始玩飞盘之后，约翰也打算让奶牛们享受飞盘的乐趣．他要组建一只奶牛飞盘</span></div><p></p>
<div><span style="font-size: medium">队．他的N(1&le;N&le;2000)只奶牛，每只部有一个飞盘水准指数Ri(1&le;Ri&le;100000)．约翰要选出1只或多于1只奶牛来参加他的飞盘队．由于约翰的幸运数字是F(1&le;F&le;1000)，他希望所有奶牛的飞盘水准指数之和是幸运数字的倍数．</span></div>
<div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;帮约翰算算一共有多少种组队方式．</span></div></div><h3>Input</h3><div class="content"><div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;第1行输入N和F，之后N行输入Ri．</span></div></div><h3>Output</h3><div class="content"><div>&nbsp;</div>
<div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;组队方式数模10^8取余的结果．</span></div></div><h3>Sample Input</h3>
<div class="content"><span class="sampledata">4 5<br>
1<br>
2<br>
8<br>
2</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">3</span></div><h3>HINT</h3>
<div class="content"><p></p><p class="MsoNormal" style="margin: 0cm 0cm 0pt"><font size="3"><span lang="EN-US"><font face="Times New Roman">&nbsp;&nbsp;&nbsp;&nbsp;</font></span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">组队方式有</span><span lang="EN-US"><font face="Times New Roman">(2</font></span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">，</span><span lang="EN-US"><font face="Times New Roman">3)</font></span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">，</span><span lang="EN-US"><font face="Times New Roman">(3</font></span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">，</span><span lang="EN-US"><font face="Times New Roman">4)</font></span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">，</span><span lang="EN-US"><font face="Times New Roman">(1</font></span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">，</span><span lang="EN-US"><font face="Times New Roman">2</font></span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">，</span><span lang="EN-US"><font face="Times New Roman">4)</font></span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">共三种</span></font></p><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search=Silver">Silver</a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>动态规划</li>
<li>数位DP</li>
</ul>
<hr>
<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>模数数位DP问题</strong></p>
<p>记录两维：当前考虑的奶牛和当前的余数，直接转移即可</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 100000000</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> dp[maxn][maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn][maxn];</div><div class="line"><span class="keyword">int</span> ski[maxn];</div><div class="line"><span class="keyword">int</span> n, f;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> rest)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (pos == n) <span class="keyword">return</span> (!rest) ? <span class="number">1</span> : <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (vis[pos][rest]) <span class="keyword">return</span> dp[pos][rest];</div><div class="line">    vis[pos][rest] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span>&amp; ans = dp[pos][rest];</div><div class="line">    <span class="keyword">return</span> ans = (DP(pos + <span class="number">1</span>, (rest + ski[pos]) % f) + DP(pos + <span class="number">1</span>, rest)) % M;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;f);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;ski[i]), ski[i] %= f;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        ans = (ans + DP(i + <span class="number">1</span>, ski[i])) % M;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 4817. -- [Sdoi2017]树点涂色</title><center><h2>4817: [Sdoi2017]树点涂色</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>481&nbsp;&nbsp;<span class="green">Solved: </span>279<br>[<a href="submitpage.php?id=4817">Submit</a>][<a href="problemstatus.php?id=4817">Status</a>][<a href="bbs.php?id=4817">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>Bob有一棵n个点的有根树，其中1号点是根节点。Bob在每个点上涂了颜色，并且每个点上的颜色不同。定义一条路</div><p></p>
<div>径的权值是：这条路径上的点（包括起点和终点）共有多少种不同的颜色。Bob可能会进行这几种操作：</div>
<div>1 x:</div>
<div>把点x到根节点的路径上所有的点染上一种没有用过的新颜色。</div>
<div>2 x y:</div>
<div>求x到y的路径的权值。</div>
<div>3 x y:</div>
<div>在以x为根的子树中选择一个点，使得这个点到根节点的路径权值最大，求最大权值。</div>
<div>Bob一共会进行m次操作</div>
<div></div></div><h3>Input</h3><div class="content"><div>第一行两个数n,m。</div>
<div>接下来n-1行，每行两个数a,b，表示a与b之间有一条边。</div>
<div>接下来m行，表示操作，格式见题目描述</div>
<div>1&lt;=n,m&lt;=100000</div>
<div></div></div><h3>Output</h3><div class="content"><div>每当出现2,3操作，输出一行。</div>
<div>如果是2操作，输出一个数表示路径的权值</div>
<div>如果是3操作，输出一个数表示权值的最大值</div>
<div></div></div><h3>Sample Input</h3>
<div class="content"><span class="sampledata">5 6<br>
1 2<br>
2 3<br>
3 4<br>
3 5<br>
2 4 5<br>
3 3<br>
1 4<br>
2 4 5<br>
1 5<br>
2 4 5</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">3<br>
4<br>
2<br>
2</span></div><h3>HINT</h3>
<div class="content"><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search=鸣谢infinityedge上传">鸣谢infinityedge上传</a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>数据结构</li>
<li>LCT</li>
<li>LCT思想</li>
</ul>
<hr>
<h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>树上动态维护问题</strong></p>
<p>本题是一个LCT类比的思路，就是用access操作类比题目中的染色操作，为什么这样类比呢？因为这样做，我们可以清楚地知道那些链是同色的，在改变颜色以及统计答案时都会比较方便，如果只是使用树链剖分，我们就不会知道一条链的哪些地方颜色发生了中断，就无法维护信息了</p>
<p>几乎是人生第一次正式的使用LCT，练习了一下，于是就发生了一个大错误，调了我一半夜，凌晨3点才调完。。。那就是每个splay的顶端并非链的顶端，我们要更新的话，要用链的顶端，这样就要在splay上一直向左跑才行。。。然而我很晚才发现这件事情。。。</p>
<p><del>直接扒自己的LOJ题解。。。</del></p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt = <span class="number">1</span>, h[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[x], y);</div><div class="line">    h[x] = cnt;</div><div class="line">    e[++cnt] = edge(h[y], x);</div><div class="line">    h[y] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> fa[maxn];</div><div class="line"><span class="keyword">int</span> son[maxn];</div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">int</span> si[maxn];</div><div class="line"><span class="keyword">int</span> top[maxn];</div><div class="line"><span class="keyword">int</span> dfs[maxn];</div><div class="line"><span class="keyword">int</span> idfs[maxn];</div><div class="line"><span class="keyword">int</span> t;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x]) <span class="keyword">continue</span>;</div><div class="line">        fa[op] = x;</div><div class="line">        d[op] = d[x] + <span class="number">1</span>;</div><div class="line">        DFS1(op);</div><div class="line">        si[x] += si[op];</div><div class="line">        <span class="keyword">if</span> (si[op] &gt; si[son[x]]) son[x] = op;</div><div class="line">    &#125;</div><div class="line">    si[x]++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> tp)</span></span>&#123;</div><div class="line">    top[x] = tp;</div><div class="line">    dfs[x] = ++t;</div><div class="line">    idfs[t] = x;</div><div class="line">    <span class="keyword">if</span> (son[x]) DFS2(son[x], tp);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == son[x] || op == fa[x]) <span class="keyword">continue</span>;</div><div class="line">        DFS2(op, op);</div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="keyword">int</span> maxnum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> add[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (add[o] != <span class="number">0</span> &amp;&amp; l != r)&#123;</div><div class="line"></div><div class="line">        add[o &lt;&lt; <span class="number">1</span>] += add[o];</div><div class="line">        maxnum[o &lt;&lt; <span class="number">1</span>] += add[o];</div><div class="line"></div><div class="line">        add[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += add[o];</div><div class="line">        maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += add[o];</div><div class="line"></div><div class="line">        add[o] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</div><div class="line">    maxnum[o] = max(maxnum[o &lt;&lt; <span class="number">1</span>], maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) &#123;</div><div class="line">        maxnum[o] = d[idfs[l]] + <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    init(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    init(mid + <span class="number">1</span>, r,  o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        maxnum[o] += qd;</div><div class="line">        add[o] += qd;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) modify(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) modify(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy) <span class="keyword">return</span> maxnum[o];</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) ans = max(ans, get(l, mid, o &lt;&lt; <span class="number">1</span>));</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) ans = max(ans, get(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>));</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"><span class="keyword">int</span> ch[maxn][<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) f[i] = fa[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (!f[x] || (ch[f[x]][<span class="number">0</span>] != x &amp;&amp; ch[f[x]][<span class="number">1</span>] != x));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(is_root(t))<span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> k=f[t];</div><div class="line">    <span class="keyword">if</span>(!is_root(k))&#123;</div><div class="line">        ch[f[k]][ch[f[k]][<span class="number">0</span>]==k?<span class="number">0</span>:<span class="number">1</span>]=t;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> d=(ch[k][<span class="number">0</span>]==t)?<span class="number">0</span>:<span class="number">1</span>;</div><div class="line">    f[t]=f[k];</div><div class="line">    ch[k][d]=ch[t][d^<span class="number">1</span>];</div><div class="line">    f[ch[k][d]]=k;</div><div class="line">    ch[t][d^<span class="number">1</span>]=k;</div><div class="line">    f[k]=t;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(!is_root(t))&#123;</div><div class="line">        <span class="keyword">int</span> fa=f[t];</div><div class="line">        <span class="keyword">if</span>(!is_root(fa))&#123;</div><div class="line">            <span class="keyword">int</span> ffa=f[fa];</div><div class="line">            <span class="keyword">int</span> f1=(ch[ffa][<span class="number">0</span>]==fa)?<span class="number">0</span>:<span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> f2=(ch[fa][<span class="number">0</span>]==t)?<span class="number">0</span>:<span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(f1^f2) rotate(t);</div><div class="line">            <span class="keyword">else</span> rotate(fa);</div><div class="line">        &#125;</div><div class="line">        rotate(t);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</div><div class="line">        splay(x);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (ch[x][<span class="number">1</span>])&#123;  </div><div class="line">            <span class="keyword">int</span> _x = ch[x][<span class="number">1</span>];</div><div class="line">            <span class="keyword">while</span> (ch[_x][<span class="number">0</span>])&#123;</div><div class="line">                _x = ch[_x][<span class="number">0</span>];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            qx = dfs[_x], qy = dfs[_x] + si[_x] - <span class="number">1</span>, qd = <span class="number">1</span>;</div><div class="line">            modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ch[x][<span class="number">1</span>] = tmp;</div><div class="line">        tmp = x;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!f[x]) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">int</span> _x = x;</div><div class="line">        <span class="keyword">while</span> (ch[_x][<span class="number">0</span>])&#123;</div><div class="line">            _x = ch[_x][<span class="number">0</span>];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        qx = dfs[_x], qy = dfs[_x] + si[_x] - <span class="number">1</span>, qd = <span class="number">-1</span>;</div><div class="line">        modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        x = f[x];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    access(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">    qx = qy = dfs[x];</div><div class="line">    <span class="keyword">int</span> a = get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    qx = qy = dfs[y];</div><div class="line">    <span class="keyword">int</span> b = get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> f1 = top[x], f2 = top[y];</div><div class="line">    <span class="keyword">while</span> (f1 != f2)&#123;</div><div class="line">        <span class="keyword">if</span> (d[f1] &gt; d[f2])&#123;</div><div class="line">            x = fa[f1];</div><div class="line">            f1 = top[x];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            y = fa[f2];</div><div class="line">            f2 = top[y];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> lca = (d[x] &gt; d[y]) ? y : x;</div><div class="line">    <span class="keyword">int</span> c = fa[lca];</div><div class="line">    </div><div class="line">    qx = qy = dfs[lca];</div><div class="line">    lca = get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line"></div><div class="line"></div><div class="line">    qx = qy = dfs[c];</div><div class="line">    <span class="keyword">if</span> (c) c = get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> c = <span class="number">0</span>; </div><div class="line"></div><div class="line">    <span class="keyword">if</span> (lca == c) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a + b - (c &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a + b - (c &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    qx = dfs[x], qy = dfs[x] + si[x] - <span class="number">1</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, get(<span class="number">1</span>, n, <span class="number">1</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_all</span><span class="params">()</span></span>&#123;</div><div class="line">    DFS1(<span class="number">1</span>);</div><div class="line">    DFS2(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    init(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    init();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">int</span> x, y, op;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        Add_Edge(x, y);</div><div class="line">    &#125;</div><div class="line">    init_all();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;op);</div><div class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            modify(x);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">            query(x, y, i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            query(x);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 3732. -- Network</title><center><h2>3732: Network</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>1900&nbsp;&nbsp;<span class="green">Solved: </span>909<br>[<a href="submitpage.php?id=3732">Submit</a>][<a href="problemstatus.php?id=3732">Status</a>][<a href="bbs.php?id=3732">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p>给你N个点的无向图 (1 &lt;= N &lt;= 15,000)，记为：1&hellip;N。 <br>
图中有M条边 (1 &lt;= M &lt;= 30,000) ，第j条边的长度为： d_j ( 1 &lt; = d_j &lt; = 1,000,000,000).</p><p></p>
<p></p><p>现在有 K个询问 (1 &lt; = K &lt; = 20,000)。 <br>
每个询问的格式是：A B，表示询问从A点走到B点的所有路径中，最长的边最小值是多少？</p>&lt;/div&gt;<h3>Input</h3><div class="content"><p>第一行： N, M, K。 <br>
第2..M+1行: 三个正整数：X, Y, and D (1 &lt;= X &lt;=N; 1 &lt;= Y &lt;= N). 表示X与Y之间有一条长度为D的边。 <br>
第M+2..M+K+1行: 每行两个整数A B,表示询问从A点走到B点的所有路径中，最长的边最小值是多少？</p></div><h3>Output</h3><div class="content"><p>&nbsp;对每个询问，输出最长的边最小值是多少。</p></div><h3>Sample Input</h3><p></p>
<div class="content"><span class="sampledata">6 6 8<br>
1 2 5<br>
2 3 4<br>
3 4 3<br>
1 4 8<br>
2 5 7<br>
4 6 2<br>
1 2<br>
1 3<br>
1 4<br>
2 3<br>
2 4<br>
5 1<br>
6 2<br>
6 1</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">5<br>
5<br>
5<br>
4<br>
4<br>
7<br>
4<br>
5</span></div><h3>HINT</h3>
<div class="content"><p></p><p>1 &lt;= N &lt;= 15,000 <br><br>
1 &lt;= M &lt;= 30,000 <br><br>
1 &lt;= d_j &lt;= 1,000,000,000 <br><br>
1 &lt;= K &lt;= 15,000 </p><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search="></a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>图论</li>
<li>瓶颈路</li>
<li>最小生成树</li>
<li>LCA</li>
</ul>
<hr>
<h2 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>图上两点瓶颈路问题</strong></p>
<p>我们先求一发最小生成树，然后直接在树上进行倍增LCA，本题即可解决</p>
<p>为什么这样是对的呢？我们可以思考Kruskal的思想，从最小的边逐个加入，那么一定满足瓶颈路这个要求</p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m, k;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x, y, len;</div><div class="line">    edge(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> len) : x(x), y(y), len(len)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> edge b) <span class="keyword">const</span>&#123;</div><div class="line">        <span class="keyword">return</span> len &lt; b.len;</div><div class="line">    &#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> len)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(x, y, len);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge2</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to, len;</div><div class="line">    edge2(<span class="keyword">int</span> next, <span class="keyword">int</span> to, <span class="keyword">int</span> len) : next(next), to(to), len(len)&#123;&#125;</div><div class="line">    edge2()&#123;&#125;</div><div class="line">&#125;e2[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt2 = <span class="number">1</span>, h[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> len)</span></span>&#123;</div><div class="line">    e2[++cnt2] = edge2(h[x], y, len);</div><div class="line">    h[x] = cnt2;</div><div class="line">    e2[++cnt2] = edge2(h[y], x, len);</div><div class="line">    h[y] = cnt2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ufs[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> ufs[x] = (ufs[x] == x) ? x : find_root(ufs[x]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">int</span> fa[maxn][<span class="number">30</span>];</div><div class="line"><span class="keyword">int</span> val[maxn][<span class="number">30</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">30</span>; i++) fa[x][i] = fa[fa[x][i - <span class="number">1</span>]][i - <span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">30</span>; i++) val[x][i] = max(val[x][i - <span class="number">1</span>], val[fa[x][i - <span class="number">1</span>]][i - <span class="number">1</span>]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e2[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e2[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x][<span class="number">0</span>]) <span class="keyword">continue</span>;</div><div class="line">        fa[op][<span class="number">0</span>] = x;</div><div class="line">        d[op] = d[x] + <span class="number">1</span>;</div><div class="line">        val[op][<span class="number">0</span>] = e2[i].len;</div><div class="line">        DFS(op);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    val[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    fa[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    DFS(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (d[x] &lt; d[y]) swap(x, y);</div><div class="line">    <span class="keyword">int</span> k = d[x] - d[y];</div><div class="line">    <span class="keyword">int</span> now = <span class="number">0</span>; </div><div class="line">    <span class="keyword">int</span> ans = -INF;</div><div class="line">    <span class="keyword">while</span> (k)&#123;</div><div class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) ans = max(ans, val[x][now]), x = fa[x][now];</div><div class="line">        now++;</div><div class="line">        k &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> ans;</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">int</span> now = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (fa[x][now] != fa[y][now]) now++;</div><div class="line">        <span class="keyword">if</span> (now == <span class="number">0</span>) <span class="keyword">return</span> ans = max(ans, max(val[x][<span class="number">0</span>], val[y][<span class="number">0</span>]));</div><div class="line">        now--;</div><div class="line">        ans = max(ans, max(val[x][now], val[y][now]));</div><div class="line">        x = fa[x][now];</div><div class="line">        y = fa[y][now];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ufs[i] = i;</div><div class="line">    sort(e + <span class="number">1</span>, e + <span class="number">1</span> + cnt);</div><div class="line">    <span class="keyword">int</span> ct = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (ct == n - <span class="number">1</span>) <span class="keyword">break</span>;</div><div class="line">        edge op = e[i];</div><div class="line">        <span class="keyword">int</span> x = find_root(op.x);</div><div class="line">        <span class="keyword">int</span> y = find_root(op.y);</div><div class="line">        <span class="keyword">if</span> (x == y) <span class="keyword">continue</span>;</div><div class="line">        ufs[x] = y;</div><div class="line">        ct++;</div><div class="line">        Add_Edge2(op.x, op.y, op.len);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    init();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, query(x, y));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y, len;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;len);</div><div class="line">        Add_Edge(x, y, len);</div><div class="line">    &#125;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 3702. -- 二叉树</title><center><h2>3702: 二叉树</h2><span class="green">Time Limit: </span>15 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>256 MB<br><span class="green">Submit: </span>561&nbsp;&nbsp;<span class="green">Solved: </span>251<br>[<a href="submitpage.php?id=3702">Submit</a>][<a href="problemstatus.php?id=3702">Status</a>][<a href="bbs.php?id=3702">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p><span style="font-size: medium">现在有一棵二叉树，所有非叶子节点都有两个孩子。在每个叶子节点上有一个权值(有n个叶子节点，满足这些权值为1..n的一个排列)。可以任意交换每个非叶子节点的左右孩子。<br>
要求进行一系列交换，使得最终所有叶子节点的权值按照中序遍历写出来，逆序对个数最少。<br>
</span></p></div><h3>Input</h3><div class="content"><p><font size="4">第一行n<br>
下面每行，一个数x<br>
如果x==0，表示这个节点非叶子节点，递归地向下读入其左孩子和右孩子的信息，<br>
如果x!=0，表示这个节点是叶子节点，权值为x。<br>
</font></p></div><h3>Output</h3><div class="content"><p><font size="4">一行，最少逆序对个数。<br>
</font></p></div><h3>Sample Input</h3><p></p>
<div class="content"><span class="sampledata">3<br>
0<br>
0<br>
3<br>
1<br>
2<br>
</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">1</span></div><h3>HINT</h3>
<div class="content"><p></p><p><span style="font-size: medium">对于100%的数据：2&lt;=n&lt;=200000。</span></p><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search="></a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>数据结构</li>
<li>线段树</li>
<li>线段树合并</li>
</ul>
<hr>
<h2 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>线段树合并问题</strong></p>
<p>我们很容易发现，逆序对最少，我们只需要对两侧分别调整，而合并的时候看看两个整体哪个放前面会使逆序对最少即可， 这就是一种<strong>整体局部无关性</strong>的思想</p>
<p>那么，我们只需要使用线段树合并，即可容易地做到这一点</p>
<h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><p>第一次写线段树合并。。。好激动(≧▽≦)/</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> ch[maxn][<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></div><div class="line">    node *l, *r;</div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    node(<span class="keyword">int</span> val) : val(val)&#123;&#125;</div><div class="line">    node()&#123;&#125;</div><div class="line">&#125;;</div><div class="line">node* save[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(node*&amp; x, node* y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (y == <span class="literal">NULL</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (x != <span class="literal">NULL</span>) x -&gt; val += y -&gt; val;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        x = y;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    merge(x -&gt; l, y -&gt; l);</div><div class="line">    merge(x -&gt; r, y -&gt; r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, node*&amp; ans, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (ans == <span class="literal">NULL</span>) ans = <span class="keyword">new</span> node(v);</div><div class="line">    <span class="keyword">else</span> ans -&gt; val += v;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (x &lt;= mid) insert(l, mid, x, ans -&gt; l, v);</div><div class="line">    <span class="keyword">else</span> insert(mid + <span class="number">1</span>, r, x, ans -&gt; r, v);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">find_rank</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, node* now)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (now == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (x &lt;= mid) <span class="keyword">return</span> find_rank(l, mid, x, now -&gt; l);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ((now -&gt; l == <span class="literal">NULL</span>) ? <span class="number">0</span> : now -&gt; l -&gt; val) + find_rank(mid + <span class="number">1</span>, r, x, now -&gt; r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>)&#123;</div><div class="line">        ch[o][<span class="number">0</span>] = ++cnt;</div><div class="line">        build(cnt);</div><div class="line">        ch[o][<span class="number">1</span>] = ++cnt;</div><div class="line">        build(cnt);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> insert(<span class="number">1</span>, n, x, save[o], <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, node* x, node* y, LL&amp; sum)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        sum += find_rank(<span class="number">1</span>, n, l, x);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (y -&gt; l != <span class="literal">NULL</span>) get_sum(l, mid, x, y -&gt; l, sum);</div><div class="line">    <span class="keyword">if</span> (y -&gt; r != <span class="literal">NULL</span>) get_sum(mid + <span class="number">1</span>, r, x, y -&gt; r, sum);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_all</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, node*&amp; x, node* y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        insert(<span class="number">1</span>, n, l, x, y -&gt; val);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (y -&gt; l != <span class="literal">NULL</span>) insert_all(l, mid, x, y -&gt; l);</div><div class="line">    <span class="keyword">if</span> (y -&gt; r != <span class="literal">NULL</span>) insert_all(mid + <span class="number">1</span>, r, x, y -&gt; r);</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL ans = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> l = ch[o][<span class="number">0</span>], r = ch[o][<span class="number">1</span>];</div><div class="line">    <span class="keyword">if</span> (l)&#123;</div><div class="line">        work(l);</div><div class="line">        work(r);</div><div class="line">        LL sl = save[l] -&gt; val, sr = save[r] -&gt; val;</div><div class="line">        LL sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (sl &lt; sr) get_sum(<span class="number">1</span>, n, save[r], save[l], sum);</div><div class="line">        <span class="keyword">else</span> get_sum(<span class="number">1</span>, n, save[l], save[r], sum);</div><div class="line">        ans += min(sum, sl * sr - sum);</div><div class="line">        <span class="keyword">if</span> (sl &lt; sr)&#123;</div><div class="line">            merge(save[r], save[l]);</div><div class="line">            save[o] = save[r];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            merge(save[l], save[r]);</div><div class="line">            save[o] = save[l];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    build(<span class="number">1</span>);</div><div class="line">    work(<span class="number">1</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 3669. -- [Noi2014]魔法森林</title><center><h2>3669: [Noi2014]魔法森林</h2><span class="green">Time Limit: </span>30 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>512 MB<br><span class="green">Submit: </span>2909&nbsp;&nbsp;<span class="green">Solved: </span>1822<br>[<a href="submitpage.php?id=3669">Submit</a>][<a href="problemstatus.php?id=3669">Status</a>][<a href="bbs.php?id=3669">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p class="p18" style="margin-top: 3.1pt; margin-bottom: 3.1pt; text-indent: 24pt"><span style="font-size: medium"><span style="font-family: '宋体'">为了</span><span style="font-family: 'Times New Roman'">得到书法大家的真传，</span><span style="font-family: '宋体'">小</span><span style="font-family: 'Times New Roman'">E<span style="font-family: 宋体">同学</span></span><span style="font-family: '宋体'">下定决心去</span><span style="font-family: 'Times New Roman'">拜访</span><span style="font-family: '宋体'">住在</span><span style="font-family: 'Times New Roman'">魔法森林中的</span><span style="font-family: '宋体'">隐士。</span><span style="font-family: 'Times New Roman'">魔法森林</span><span style="font-family: '宋体'">可以被</span><span style="font-family: 'Times New Roman'">看</span><span style="font-family: '宋体'">成</span><span style="font-family: 'Times New Roman'">一个</span><span style="font-family: '宋体'">包含</span><span style="font-family: 'Times New Roman'">个N节点M条边的无向图</span><span style="font-family: '宋体'">，</span><span style="font-family: 'Times New Roman'">节点标号为1..N</span><span style="font-family: '宋体'">，</span><span style="font-family: 'Times New Roman'">边标号为1..M</span><span style="font-family: '宋体'">。初始时</span><span style="font-family: 'Times New Roman'">小<span style="font-family: 'Times New Roman'">E</span><span style="font-family: 宋体">同学在</span></span><span style="font-family: '宋体'">号节</span><span style="font-family: 'Times New Roman'">点1</span><span style="font-family: '宋体'">，隐士则</span><span style="font-family: 'Times New Roman'">住在号节点N</span><span style="font-family: '宋体'">。小</span><span style="font-family: 'Times New Roman'">E<span style="font-family: 宋体">需要通过这一片魔法森林，才能够拜访到隐士。</span></span></span></p><p></p>
<p></p><p class="p18" style="margin-top: 3.1pt; margin-bottom: 3.1pt; text-indent: 24pt"><span style="font-size: medium"><span style="font-family: '宋体'">魔法森林</span><span style="font-family: 'Times New Roman'">中居住了</span><span style="font-family: '宋体'">一些妖怪。每当有人</span><span style="font-family: 'Times New Roman'">经过一条边</span><span style="font-family: '宋体'">的</span><span style="font-family: 'Times New Roman'">时候，这</span><span style="font-family: '宋体'">条边</span><span style="font-family: 'Times New Roman'">上的妖怪就会</span><span style="font-family: '宋体'">对其发起</span><span style="font-family: 'Times New Roman'">攻击。</span><span style="font-family: '宋体'">幸运</span><span style="font-family: 'Times New Roman'">的是，</span><span style="font-family: '宋体'">在号</span><span style="font-family: 'Times New Roman'">节点住着两种守护精灵</span><span style="font-family: '宋体'">：</span><span style="font-family: 'Times New Roman'">A<span style="font-family: 宋体">型守护精灵与</span><span style="font-family: 'Times New Roman'">B</span><span style="font-family: 宋体">型守护精灵</span></span><span style="font-family: '宋体'">。</span><span style="font-family: 'Times New Roman'">小<span style="font-family: 'Times New Roman'">E</span><span style="font-family: 宋体">可以借助</span></span><span style="font-family: '宋体'">它们</span><span style="font-family: 'Times New Roman'">的力量</span><span style="font-family: '宋体'">，达到</span><span style="font-family: 'Times New Roman'">自己的目的</span><span style="font-family: '宋体'">。</span></span></p><p></p>
<p></p><p class="p18" style="margin-top: 3.1pt; margin-bottom: 3.1pt; text-indent: 24pt"><span style="font-size: medium"><span style="font-family: '宋体'">只要</span><span style="font-family: 'Times New Roman'">小<span style="font-family: 'Times New Roman'">E</span><span style="font-family: 宋体">带上足够多的守护精灵，</span></span><span style="font-family: '宋体'">妖怪</span><span style="font-family: 'Times New Roman'">们就不会发起攻击</span><span style="font-family: '宋体'">了。具体来说</span><span style="font-family: 'Times New Roman'">，</span><span style="font-family: '宋体'">无向图中的</span><span style="font-family: 'Times New Roman'">每一条边</span><span style="font-family: '宋体'">Ei包含</span><span style="font-family: 'Times New Roman'">两个</span><span style="font-family: '宋体'">权值Ai</span><span style="font-family: 'Times New Roman'">与Bi</span><span style="font-family: '宋体'">。</span><span style="font-family: 'Times New Roman'">若</span><span style="font-family: '宋体'">身上</span><span style="font-family: 'Times New Roman'">携带的</span><span style="font-family: '宋体'">A</span><span style="font-family: 'Times New Roman'">型守护精灵</span><span style="font-family: '宋体'">个数</span><span class="15" style="font-weight: bold; font-family: '宋体'; text-decoration: underline">不少于Ai</span><span style="font-family: '宋体'">，</span><span style="font-family: 'Times New Roman'">且<span style="font-family: 'Times New Roman'">B</span><span style="font-family: 宋体">型守护精灵个数</span></span><span class="15" style="font-weight: bold; font-family: '宋体'; text-decoration: underline">不少于Bi</span><span style="font-family: '宋体'">，</span><span style="font-family: 'Times New Roman'">这条边上的妖怪</span><span style="font-family: '宋体'">就</span><span style="font-family: 'Times New Roman'">不会对</span><span style="font-family: '宋体'">通过</span><span style="font-family: 'Times New Roman'">这条边</span><span style="font-family: '宋体'">的</span><span style="font-family: 'Times New Roman'">人发起攻击</span><span style="font-family: '宋体'">。</span><span style="font-weight: bold; font-family: 'Times New Roman'; text-decoration: underline">当且仅当</span><span style="font-weight: bold; font-family: '宋体'; text-decoration: underline">通过</span><span style="font-weight: bold; font-family: 'Times New Roman'; text-decoration: underline">这</span><span style="font-weight: bold; font-family: '宋体'; text-decoration: underline">片</span><span style="font-weight: bold; font-family: 'Times New Roman'; text-decoration: underline">魔法森林</span><span style="font-weight: bold; font-family: '宋体'; text-decoration: underline">的过程中没有</span><span style="font-weight: bold; font-family: 'Times New Roman'; text-decoration: underline">任意一条边</span><span style="font-weight: bold; font-family: '宋体'; text-decoration: underline">的</span><span style="font-weight: bold; font-family: 'Times New Roman'; text-decoration: underline">妖怪</span><span style="font-weight: bold; font-family: '宋体'; text-decoration: underline">向</span><span style="font-weight: bold; font-family: 'Times New Roman'; text-decoration: underline">小<span style="font-family: 'Times New Roman'">E</span><span style="font-family: 宋体">发起攻击</span></span><span style="font-weight: bold; font-family: '宋体'; text-decoration: underline">，</span><span style="font-weight: bold; font-family: 'Times New Roman'; text-decoration: underline">他才能成功</span><span style="font-weight: bold; font-family: '宋体'; text-decoration: underline">找到</span><span style="font-weight: bold; font-family: 'Times New Roman'; text-decoration: underline">隐士。</span></span></p><p></p>
<p></p><p class="p17" style="margin-top: 0pt; margin-bottom: 0pt"><span style="font-size: medium"><span style="font-family: '宋体'">由于</span><span style="font-family: 'Times New Roman'">携带守护精灵是一件非常</span><span style="font-family: '宋体'">麻烦</span><span style="font-family: 'Times New Roman'">的事，小<span style="font-family: 'Times New Roman'">E</span><span style="font-family: 宋体">想要知道，</span></span><span style="font-family: '宋体'">要能够</span><span style="font-family: 'Times New Roman'">成功拜访到隐士，最少</span><span style="font-family: '宋体'">需要</span><span style="font-family: 'Times New Roman'">携带守护精灵</span><span style="font-family: '宋体'">的总个数</span><span style="font-family: 'Times New Roman'">。</span><span style="font-weight: bold; font-family: '宋体'; text-decoration: underline">守护精灵</span><span style="font-weight: bold; font-family: 'Times New Roman'; text-decoration: underline">的</span><span style="font-weight: bold; font-family: '宋体'; text-decoration: underline">总个数</span><span style="font-family: '宋体'">为</span><span style="font-family: 'Times New Roman'">A<span style="font-family: 宋体">型守护精灵的个数与</span><span style="font-family: 'Times New Roman'">B</span><span style="font-family: 宋体">型守护精灵的个数之和。</span></span><span style="font-weight: normal; font-family: '黑体'; mso-spacerun: 'yes'"><br>
</span></span></p>&lt;/div&gt;<h3>Input</h3><div class="content"><p><span style="font-size: medium">第1行包含两个整数N,M，表示无向图共有N个节点，M条边。 接下来M行，第行包含4个正整数Xi,Yi,Ai,Bi，描述第i条无向边。其中Xi与Yi为该边两个端点的标号，Ai与Bi的含义如题所述。 注意数据中可能包含重边与自环。 </span></p><p></p>
<p></p><p></p></div><h3>Output</h3><div class="content"><p><span style="font-size: medium">输出一行一个整数：如果小E可以成功拜访到隐士，输出小E最少需要携带的守护精灵的总个数；如果无论如何小E都无法拜访到隐士，输出&ldquo;-1&rdquo;（不含引号）。</span></p><p></p>
<p></p><p></p><p></p>
<p></p><p></p>&lt;/div&gt;<h3>Sample Input</h3><p></p>
<div class="content"><span class="sampledata">【输入样例1】<br>
4 5<br>
1 2 19 1<br>
2 3 8 12<br>
2 4 12 15<br>
1 3 17 8<br>
3 4 1 17<br>
<br>
 <br>
<br>
 <br>
<br>
【输入样例2】<br>
<br>
 <br>
3 1<br>
1 2 1 1<br>
<br>
 <br>
<br>
</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">【输出样例1】<br>
 <br>
32<br>
【样例说明1】<br>
如果小E走路径1→2→4，需要携带19+15=34个守护精灵；<br>
如果小E走路径1→3→4，需要携带17+17=34个守护精灵；<br>
如果小E走路径1→2→3→4，需要携带19+17=36个守护精灵；<br>
如果小E走路径1→3→2→4，需要携带17+15=32个守护精灵。<br>
综上所述，小E最少需要携带32个守护精灵。<br>
<br>
<br>
<br>
【输出样例2】<br>
<br>
 <br>
-1<br>
【样例说明2】<br>
小E无法从1号节点到达3号节点，故输出-1。 <br>
</span></div><h3>HINT</h3>
<div class="content"><p></p><p><span style="font-size: medium">2&lt;=n&lt;=50,000</span></p><br>
<p><span style="font-size: medium">0&lt;=m&lt;=100,000</span></p><br>
<p><span style="font-size: medium"><br><br>
1&lt;=ai ,bi&lt;=50,000<br><br>
</span></p><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search="></a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>图论</li>
<li>二维属性</li>
<li>瓶颈路</li>
<li>动点SPFA</li>
<li>LCT</li>
</ul>
<hr>
<h2 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>动点SPFA/二维瓶颈路问题</strong></p>
<p>正解显然是LCT，然而还有另一种方法，就是动点SPFA，把边按其中一维排序后逐个加入，然后只对当前存在的边跑SPFA，这样就过了。。。</p>
<h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><p>注意动点SPFA的写法<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">	<span class="keyword">int</span> x, y, a, b;</div><div class="line">	edge(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> a, <span class="keyword">int</span> b) : x(x), y(y), a(a), b(b)&#123;&#125;</div><div class="line">	edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; save[maxn];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a, edge b)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> a.a &lt; b.a;</div><div class="line">&#125;</div><div class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; spfa;</div><div class="line"><span class="keyword">int</span> now;</div><div class="line"><span class="keyword">int</span> ans = INF;</div><div class="line"><span class="keyword">bool</span> in[maxn];</div><div class="line"><span class="keyword">bool</span> have[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">while</span> (!spfa.empty())&#123;</div><div class="line">		<span class="keyword">int</span> op = spfa.front();spfa.pop();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; save[op].size(); i++)&#123;</div><div class="line"><span class="keyword">int</span> t = save[op][i];</div><div class="line"><span class="keyword">if</span> (!have[t]) <span class="keyword">continue</span>;</div><div class="line"><span class="keyword">int</span> k = (e[t].x == op) ? e[t].y : e[t].x;</div><div class="line"><span class="keyword">if</span> (e[t].a &gt; now) <span class="keyword">continue</span>;</div><div class="line"><span class="keyword">if</span> (f[k] &gt; max(f[op], e[t].b))&#123;</div><div class="line">	f[k] = max(f[op], e[t].b);</div><div class="line">	<span class="keyword">if</span> (!in[k])&#123;</div><div class="line">		spfa.push(k);</div><div class="line">		in[k] = <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (k == n) ans = min(ans, now + f[k]);</div><div class="line">&#125;</div><div class="line">		&#125;</div><div class="line">		in[op] = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">		edge op = e[i];</div><div class="line">		have[i] = <span class="number">1</span>;</div><div class="line">		<span class="keyword">int</span> a = op.x, b = op.y;</div><div class="line">		<span class="keyword">if</span> (a == b) <span class="keyword">continue</span>;</div><div class="line">		spfa.push(b);spfa.push(a);</div><div class="line">		now = op.a;</div><div class="line">		SPFA();</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; bfs;</div><div class="line">    bfs.push(<span class="number">1</span>);</div><div class="line">    vis[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!bfs.empty())&#123;</div><div class="line">        <span class="keyword">int</span> op = bfs.front();</div><div class="line">        bfs.pop();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; save[op].size(); i++)&#123;</div><div class="line">            <span class="keyword">int</span> k = save[op][i];</div><div class="line"><span class="keyword">int</span> t = (e[k].x == op) ? e[k].y : e[k].x;</div><div class="line"><span class="keyword">if</span> (vis[t]) <span class="keyword">continue</span>;</div><div class="line">vis[t] = <span class="number">1</span>;</div><div class="line">bfs.push(t);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	<span class="keyword">if</span> (!vis[n]) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) f[i] = INF;</div><div class="line">	f[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> x, y, z, w;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;x, &amp;y, &amp;z, &amp;w);</div><div class="line">		e[i] = edge(x, y, z, w);</div><div class="line">	&#125;</div><div class="line">	sort(e, e + m, cmp);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">		save[e[i].x].push_back(i);</div><div class="line">		save[e[i].y].push_back(i);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (!judge())&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"-1"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	work();</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><title>Problem 3629. -- [JLOI2014]聪明的燕姿</title><center><h2>3629: [JLOI2014]聪明的燕姿</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>1562&nbsp;&nbsp;<span class="green">Solved: </span>580<br>[<a href="submitpage.php?id=3629">Submit</a>][<a href="problemstatus.php?id=3629">Status</a>][<a href="bbs.php?id=3629">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div style="margin: 0cm 0cm 10pt"><span style="font-size: medium">阴天傍晚车窗外</span></div><p></p>
<div style="margin: 0cm 0cm 10pt"><span style="font-size: medium">未来有一个人在等待</span></div>
<div style="margin: 0cm 0cm 10pt"><span style="font-size: medium">向左向右向前看</span></div>
<div style="margin: 0cm 0cm 10pt"><span style="font-size: medium">爱要拐几个弯才来</span></div>
<div style="margin: 0cm 0cm 10pt"><span style="font-size: medium">我遇见谁会有怎样的对白</span></div>
<div style="margin: 0cm 0cm 10pt"><span style="font-size: medium">我等的人他在多远的未来</span></div>
<div style="margin: 0cm 0cm 10pt"><span style="font-size: medium">我听见风来自地铁和人海</span></div>
<div style="margin: 0cm 0cm 10pt"><span style="font-size: medium">我排着队拿着爱的号码牌</span></div>
<div style="margin: 0cm 0cm 10pt"><span style="font-size: medium">城市中人们总是拿着号码牌，不停寻找，不断匹配，可是谁也不知道自己等的那个人是谁。可是燕姿不一样，燕姿知道自己等的人是谁，因为燕姿数学学得好！燕姿发现了一个神奇的算法：假设自己的号码牌上写着数字S，那么自己等的人手上的号码牌数字的所有正约数之和必定等于S。</span></div>
<div style="margin: 0cm 0cm 10pt"><span style="font-size: medium">所以燕姿总是拿着号码牌在地铁和人海找数字（喂！这样真的靠谱吗）可是她忙着唱《绿光》，想拜托你写一个程序能够快速地找到所有自己等的人。</span></div></div><h3>Input</h3><div class="content"><div style="margin: 0cm 0cm 10pt"><span style="font-size: medium">输入包含k组数据（k&lt;=100）</span><span style="font-size: medium">对于每组数据，输入包含一个号码牌S</span></div></div><h3>Output</h3><div class="content"><div style="margin: 0cm 0cm 10pt"><span style="font-size: medium">对于每组数据，输出有两行，第一行包含一个整数m，表示有m个等的人，第二行包含相应的m个数，表示所有等的人的号码牌。注意：你输出的号码牌必须按照升序排列。</span></div></div><h3>Sample Input</h3>
<div class="content"><span class="sampledata">42</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">3<br>
20 26 41</span></div><h3>HINT</h3>
<div class="content"><p></p><p><span style="font-size: medium">对于100%的数据，有S&lt;=2*10*9<br><br>
</span></p><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search="></a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>数学</li>
<li>质因子分析</li>
<li>DFS</li>
</ul>
<hr>
<h2 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>质因子分析DFS问题</strong><br><del>省选题真是谁都能黑啊。。。</del><br><del>世道好轮回，省选绕过谁</del></p>
<p>本题即是传说中的对于质因子进行DFS暴力搜索的题目，然而我太弱，WA了无数次。。。</p>
<p>主要就是注意如何剪枝以及避免错误吧</p>
<h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> p[maxn][<span class="number">32</span>];</div><div class="line"><span class="keyword">int</span> save[maxn][<span class="number">32</span>];</div><div class="line"><span class="keyword">int</span> si[maxn];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i]) p[cnt++][<span class="number">1</span>] = i;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * p[j][<span class="number">1</span>] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * p[j][<span class="number">1</span>]] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (i % p[j][<span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i++)&#123;</div><div class="line">        save[i][<span class="number">0</span>] = p[i][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        save[i][<span class="number">1</span>] = p[i][<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; <span class="number">32</span>; j++)&#123;</div><div class="line">            <span class="keyword">if</span> ((LL)p[i][j - <span class="number">1</span>] * save[i][<span class="number">1</span>] &gt;= INF) &#123;</div><div class="line">                si[i] = j;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            save[i][j] = p[i][j] = p[i][j - <span class="number">1</span>] * save[i][<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; si[i]; j++)&#123;</div><div class="line">            <span class="keyword">if</span> ((LL)p[i][j - <span class="number">1</span>] + p[i][j] &gt;= INF)&#123;</div><div class="line">                si[i] = j;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            p[i][j] += p[i][j - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> con = (<span class="keyword">int</span>) <span class="built_in">sqrt</span>(x);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (save[i][<span class="number">1</span>] &gt; con) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span> (x % save[i][<span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> rest, <span class="keyword">int</span> now)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (rest &lt; p[pos][<span class="number">1</span>])&#123;</div><div class="line">        <span class="keyword">if</span> (rest == <span class="number">1</span>) ans.pb(now);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ((LL)rest &lt; (LL)p[pos][<span class="number">1</span>] * p[pos][<span class="number">1</span>] &amp;&amp; rest &lt; ((p[pos][<span class="number">2</span>] &gt; <span class="number">0</span>) ? p[pos][<span class="number">2</span>] : INF))&#123;</div><div class="line">        <span class="keyword">if</span> (judge(rest - <span class="number">1</span>)) ans.pb(now * (rest - <span class="number">1</span>));</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*if (pos == cnt &amp;&amp; rest - 1 &gt;= maxn)&#123;</span></div><div class="line">        if (judge(rest - 1)) ans.pb(now * (rest - 1));</div><div class="line">        return;</div><div class="line">    &#125;*/</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; si[pos]; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (p[pos][i] &gt; rest) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span> (rest % p[pos][i] == <span class="number">0</span>) DFS(pos + <span class="number">1</span>, rest / p[pos][i], now * save[pos][i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">bool</span> f = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (!f)&#123;</div><div class="line">        DFS(<span class="number">0</span>, x, <span class="number">1</span>);</div><div class="line">        sort(ans.begin(), ans.end());</div><div class="line">        <span class="keyword">if</span> (ans.size() == <span class="number">0</span>)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"0"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans.size());</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[<span class="number">0</span>]);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; ans.size(); i++) <span class="built_in">printf</span>(<span class="string">" %d"</span>, ans[i]);</div><div class="line">            ans.clear();</div><div class="line">        &#125;</div><div class="line">        f = <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    DFS(<span class="number">0</span>, x, <span class="number">1</span>);</div><div class="line">    sort(ans.begin(), ans.end());</div><div class="line">    <span class="keyword">if</span> (ans.size() == <span class="number">0</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n0"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n%d\n"</span>, ans.size());</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; ans.size(); i++) <span class="built_in">printf</span>(<span class="string">" %d"</span>, ans[i]);</div><div class="line">        ans.clear();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) work(n);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 4552. -- [Tjoi2016&Heoi2016]排序</title><center><h2>4552: [Tjoi2016&Heoi2016]排序</h2><span class="green">Time Limit: </span>60 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>256 MB<br><span class="green">Submit: </span>1187&nbsp;&nbsp;<span class="green">Solved: </span>622<br>[<a href="submitpage.php?id=4552">Submit</a>][<a href="problemstatus.php?id=4552">Status</a>][<a href="bbs.php?id=4552">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>在2016年，佳媛姐姐喜欢上了数字序列。因而他经常研究关于序列的一些奇奇怪怪的问题，现在他在研究一个难题</div><p></p>
<div>，需要你来帮助他。这个难题是这样子的：给出一个1到n的全排列，现在对这个全排列序列进行m次局部排序，排</div>
<div>序分为两种：1:(0,l,r)表示将区间[l,r]的数字升序排序2:(1,l,r)表示将区间[l,r]的数字降序排序最后询问第q</div>
<div>位置上的数字。</div></div><h3>Input</h3><div class="content"><div>输入数据的第一行为两个整数n和m。n表示序列的长度，m表示局部排序的次数。1 &lt;= n, m &lt;= 10^5第二行为n个整</div>
<div>数，表示1到n的一个全排列。接下来输入m行，每一行有三个整数op, l, r, op为0代表升序排序，op为1代表降序</div>
<div>排序, l, r 表示排序的区间。最后输入一个整数q，q表示排序完之后询问的位置, 1 &lt;= q &lt;= n。1 &lt;= n &lt;= 10^5</div>
<div>，1 &lt;= m &lt;= 10^5</div>
<div></div></div><h3>Output</h3><div class="content"><p>&nbsp;输出数据仅有一行，一个整数，表示按照顺序将全部的部分排序结束后第q位置上的数字。</p></div><h3>Sample Input</h3>
<div class="content"><span class="sampledata">6 3<br>
1 6 2 5 3 4<br>
0 1 4<br>
1 3 6<br>
0 2 4<br>
3</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">5</span></div><h3>HINT</h3>
<div class="content"><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search="></a></p></div>


<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>二分答案</li>
<li>线段树</li>
<li>线段树特殊操作</li>
</ul>
<hr>
<h2 id="题目分析-6"><a href="#题目分析-6" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>线段树特殊操作问题</strong><br>这题谁能想到是二分答案。。。虽然想到后好像挺合理的样子。。。</p>
<p>我们二分答案，然后即可把所有比它大的数看做1，其余的数看做0，然后升降序排序就变成了区间修改问题，最后根据所求位置上的数是0还是1判断左右二分</p>
<h2 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mod</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> op, l, r;</div><div class="line">    mod(<span class="keyword">int</span> op, <span class="keyword">int</span> l, <span class="keyword">int</span> r) : op(op), l(l), r(r)&#123;&#125;</div><div class="line">    mod()&#123;&#125;</div><div class="line">&#125;save[maxn];</div><div class="line"><span class="keyword">int</span> n, m, q;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> sum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> <span class="built_in">set</span>[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">set</span>[o] != <span class="number">-1</span> &amp;&amp; l != r)&#123;</div><div class="line">        <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line"></div><div class="line">        <span class="built_in">set</span>[o &lt;&lt; <span class="number">1</span>] = <span class="built_in">set</span>[o];</div><div class="line">        sum[o &lt;&lt; <span class="number">1</span>] = <span class="built_in">set</span>[o] * (mid + <span class="number">1</span> - l);</div><div class="line"></div><div class="line">        <span class="built_in">set</span>[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = <span class="built_in">set</span>[o];</div><div class="line">        sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = <span class="built_in">set</span>[o] * (r - mid);</div><div class="line"></div><div class="line">        <span class="built_in">set</span>[o] = <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</div><div class="line">    sum[o] = sum[o &lt;&lt; <span class="number">1</span>] + sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="built_in">set</span>[o] = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        <span class="keyword">if</span> (qd &lt; line[l]) sum[o] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span> sum[o] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    init(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    init(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        <span class="built_in">set</span>[o] = qd;</div><div class="line">        sum[o] = (r - l + <span class="number">1</span>) * <span class="built_in">set</span>[o];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) modify(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) modify(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy) <span class="keyword">return</span> sum[o];</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) ans += get(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) ans += get(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    qd = x;</div><div class="line">    init(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (save[i].op)&#123;</div><div class="line">            qx = save[i].l, qy = save[i].r;</div><div class="line">            <span class="keyword">int</span> num = get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">            qx = save[i].l, qy = qx + num - <span class="number">1</span>, qd = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (qx &lt;= qy) modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">            qx = qy + <span class="number">1</span>, qy = save[i].r, qd = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span> (qx &lt;= qy) modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            qx = save[i].l, qy = save[i].r;</div><div class="line">            <span class="keyword">int</span> num = get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">            qx = qy - num + <span class="number">1</span>, qy = save[i].r, qd = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (qx &lt;= qy) modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">            qx = save[i].l, qy = qy - num, qd = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span> (qx &lt;= qy) modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    qx = qy = q;</div><div class="line">    <span class="keyword">int</span> judgement = get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (judgement == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (judge(mid)) <span class="keyword">return</span> work(l, mid);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> work(mid + <span class="number">1</span>, r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> op, l, r;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;op, &amp;l, &amp;r), save[i] = mod(op, l, r);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, work(<span class="number">1</span>, n));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 4281. -- [ONTAK2015]Związek Harcerstwa Bajtockiego</title><center><h2>4281: [ONTAK2015]Związek Harcerstwa Bajtockiego</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>256 MB<br><span class="green">Submit: </span>207&nbsp;&nbsp;<span class="green">Solved: </span>87<br>[<a href="submitpage.php?id=4281">Submit</a>][<a href="problemstatus.php?id=4281">Status</a>][<a href="bbs.php?id=4281">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>给定一棵有n个点的无根树，相邻的点之间的距离为1，一开始你位于m点。之后你将依次收到k个指令，每个指令包含两个整数d和t，你需要沿着最短路在t步之内（包含t步）走到d点，如果不能走到，则停在最后到达的那个点。请在每个指令之后输出你所在的位置。</div><p></p>
<div></div>
<p></p></div><h3>Input</h3><div class="content"><div>第一行包含三个正整数n,m,k(1&lt;=m&lt;=n&lt;=1000000,1&lt;=k&lt;=1000000)。</div>
<div>接下来n-1行，每行包含两个正整数x,y(1&lt;=x,y&lt;=n)，描述一条树边。</div>
<div>接下来k行，每行两个整数d,t(1&lt;=d&lt;=n,0&lt;=t&lt;=10^9)，描述一条指令。</div>
<div></div>
<p></p></div><h3>Output</h3><div class="content"><div>输出一行，包含k个正整数，即执行每条指令后你所在的位置。</div>
<div></div>
<p></p></div><h3>Sample Input</h3>
<div class="content"><span class="sampledata">3 1 2<br>
1 2<br>
2 3<br>
3 4<br>
1 1</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">3 2</span></div><h3>HINT</h3>
<div class="content"><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search=By Claris">By Claris</a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>树</li>
<li>LCA问题</li>
<li>模拟</li>
</ul>
<hr>
<h2 id="题目分析-7"><a href="#题目分析-7" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>模拟操作问题</strong><br>我们只需要倍增预处理祖先然后直接模拟跑LCA即可。。。</p>
<h2 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m, k;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> fa[maxn][<span class="number">25</span>];</div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">25</span>; i++) fa[x][i] = fa[fa[x][i - <span class="number">1</span>]][i - <span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x][<span class="number">0</span>]) <span class="keyword">continue</span>;</div><div class="line">        fa[op][<span class="number">0</span>] = x;</div><div class="line">        d[op] = d[x] + <span class="number">1</span>;</div><div class="line">        DFS(op);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> lca;</div><div class="line">    <span class="keyword">if</span> (d[x] &lt; d[y]) swap(x, y);</div><div class="line">    <span class="keyword">int</span> k = d[x] - d[y];</div><div class="line">    <span class="keyword">int</span> now = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (k)&#123;</div><div class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) x = fa[x][now];</div><div class="line">        now++;</div><div class="line">        k &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> x;</div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>)&#123;</div><div class="line">        now = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (fa[x][now] != fa[y][now]) now++;</div><div class="line">        <span class="keyword">if</span> (now == <span class="number">0</span>) <span class="keyword">return</span> fa[x][<span class="number">0</span>];</div><div class="line">        now--;</div><div class="line">        x = fa[x][now];</div><div class="line">        y = fa[y][now];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> lca = find_lca(x, y);</div><div class="line">    <span class="keyword">int</span> all = d[x] + d[y] - <span class="number">2</span> * d[lca];</div><div class="line">    <span class="keyword">if</span> (v &gt;= all) <span class="keyword">return</span> y;</div><div class="line">    <span class="keyword">if</span> (v &lt;= d[x] - d[lca])&#123;</div><div class="line">        <span class="keyword">int</span> now = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (v)&#123;</div><div class="line">            <span class="keyword">if</span> (v &amp; <span class="number">1</span>) x = fa[x][now];</div><div class="line">            now++;</div><div class="line">            v &gt;&gt;= <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> now = <span class="number">0</span>;</div><div class="line">    v = all - v;</div><div class="line">    <span class="keyword">while</span> (v)&#123;</div><div class="line">        <span class="keyword">if</span> (v &amp; <span class="number">1</span>) y = fa[y][now];</div><div class="line">        now++;</div><div class="line">        v &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ans;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k);</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        Add_Edge(x, y);</div><div class="line">    &#125;</div><div class="line">    d[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    fa[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    DFS(<span class="number">1</span>);</div><div class="line">    ans = m;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        ans = move(ans, x, y);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 3670. -- [Noi2014]动物园</title><center><h2>3670: [Noi2014]动物园</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>512 MB<br><span class="green">Submit: </span>2935&nbsp;&nbsp;<span class="green">Solved: </span>1587<br>[<a href="submitpage.php?id=3670">Submit</a>][<a href="problemstatus.php?id=3670">Status</a>][<a href="bbs.php?id=3670">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p class="NOI" style="margin: 2.4pt 0cm; text-indent: 24pt"><span style="font-size: medium"><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">近日，园长发现动物园中好吃懒做的动物越来越多了。例如企鹅，只会卖萌向游客要吃的。为了整治动物园的不良风气，让动物们凭自己的真才实学向游客要吃的，园长决定开设算法班，让动物们学习算法。</span></span><span lang="EN-US"><o:p></o:p></span></p><p></p>
<p></p><p class="NOI" style="margin: 2.4pt 0cm; text-indent: 24pt"><span style="font-size: medium"><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">某天，园长给动物们讲解</span><span lang="EN-US">KMP</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">算法。</span></span><span lang="EN-US"><o:p></o:p></span></p><p></p>
<p></p><p class="NOI" style="margin: 2.4pt 0cm; text-indent: 24pt"><span style="font-size: medium"><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">园长：&ldquo;对于一个字符串</span><span lang="EN-US">S</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">，它的长度为</span><span lang="EN-US">L</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">。我们可以在</span><span lang="EN-US">O(L)</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">的时间内，求出一个名为</span><span lang="EN-US">next</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">的数组。有谁预习了</span><span lang="EN-US">next</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">数组的含义吗？&rdquo;</span></span><span lang="EN-US"><o:p></o:p></span></p><p></p>
<p></p><p class="NOI" style="margin: 2.4pt 0cm; text-indent: 24pt"><span style="font-size: medium"><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">熊猫：&ldquo;对于字符串</span><span lang="EN-US">S</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">的前</span><span lang="EN-US">i</span></span><span lang="EN-US" style="font-size: 10.5pt; font-family: &quot;calibri&quot;,&quot;sans-serif&quot;; position: relative; top: 5.5pt; mso-bidi-font-size: 11.0pt; mso-ascii-theme-font: minor-latin; mso-fareast-font-family: 宋体; mso-fareast-theme-font: minor-fareast; mso-hansi-theme-font: minor-latin; mso-bidi-font-family: 'timesnewroman'; mso-bidi-theme-font: minor-bidi; mso-text-raise: -5.5pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA"><v:shapetype id="_x0000_t75" coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f"><v:stroke joinstyle="miter"><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"><v:f eqn="sum @0 1 0"><v:f eqn="sum 0 0 @1"><v:f eqn="prod @2 1 2"><v:f eqn="prod @3 21600 pixelWidth"><v:f eqn="prod @3 21600 pixelHeight"><v:f eqn="sum @0 0 1"><v:f eqn="prod @6 1 2"><v:f eqn="prod @7 21600 pixelWidth"><v:f eqn="sum @8 21600 0"><v:f eqn="prod @7 21600 pixelHeight"><v:f eqn="sum @10 21600 0"></v:f></v:f></v:f></v:f></v:f></v:f></v:f></v:f></v:f></v:f></v:f></v:f></v:formulas><v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"><o:lock v:ext="edit" aspectratio="t"></o:lock></v:path></v:stroke></v:shapetype><v:shape id="_x0000_i1025" type="#_x0000_t75" style="width: 3pt; height: 18.75pt"><v:imagedata src="file:///C:%5CUsers%5C%E6%9C%8B%E9%A3%9E%5CAppData%5CLocal%5CTemp%5Cmsohtmlclip1%5C01%5Cclip_image001.png" o:title="" chromakey="white"></v:imagedata></v:shape></span><span style="font-size: medium"><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">个字符构成的子串，既是它的后缀又是它的前缀的字符串中（它本身除外），最长的长度记作</span><span lang="EN-US"><font face="宋体, MS Song">next[i]</font></span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">。&rdquo;</span></span><font size="3"><span lang="EN-US"><o:p></o:p></span></font></p><p></p>
<p></p><p class="NOI" style="margin: 2.4pt 0cm; text-indent: 24pt"><span style="font-size: medium"><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">园长：&ldquo;非常好！那你能举个例子吗？&rdquo;</span></span><span lang="EN-US"><o:p></o:p></span></p><p></p>
<p></p><p class="NOI" style="margin: 2.4pt 0cm; text-indent: 24pt"><span style="font-size: medium"><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">熊猫：&ldquo;例</span><span lang="EN-US">S</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">为</span><u><span lang="EN-US">abcababc</span></u><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">，则</span><span lang="EN-US">next[5]=2</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">。因为</span><span lang="EN-US">S</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">的前</span><span lang="EN-US">5</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">个字符为</span><u><span lang="EN-US">abcab</span></u><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">，</span><u><span lang="EN-US">ab</span></u><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">既是它的后缀又是它的前缀，并且找不到一个更长的字符串满足这个性质。同理，还可得出</span><span lang="EN-US">next[1] = next[2] = next[3] = 0</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">，</span><span lang="EN-US">next[4] = next[6] = 1</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">，</span><span lang="EN-US">next[7] = 2</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">，</span><span lang="EN-US">next[8] = 3</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">。&rdquo;</span></span><span lang="EN-US"><o:p></o:p></span></p><p></p>
<p></p><p class="NOI" style="margin: 2.4pt 0cm; text-indent: 24pt"><span style="font-size: medium"><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">园长表扬了认真预习的熊猫同学。随后，他详细讲解了如何在</span><span lang="EN-US">O(L)</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">的时间内求出</span><span lang="EN-US">next</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">数组。</span></span><span lang="EN-US"><o:p></o:p></span></p><p></p>
<p></p><p class="NOI" style="margin: 2.4pt 0cm; text-indent: 24pt"><span style="font-size: medium"><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">下课前，园长提出了一个问题：&ldquo;</span><span lang="EN-US">KMP</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">算法只能求出<span lang="EN-US">next</span>数组。我现在希望求出</span><span style="line-height: 1.5; font-family: 宋体">一</span><span style="text-indent: 24pt; line-height: 1.5; font-family: 宋体">个更强大</span><span lang="EN-US" style="text-indent: 24pt; line-height: 1.5">num</span></span><span lang="EN-US" style="font-size: 10.5pt; text-indent: 24pt; font-family: calibri, sans-serif; position: relative; top: 5.5pt"><v:shape id="_x0000_i1025" type="#_x0000_t75" style="width: 3pt; height: 18.75pt"><v:imagedata src="file:///C:%5CUsers%5C%E6%9C%8B%E9%A3%9E%5CAppData%5CLocal%5CTemp%5Cmsohtmlclip1%5C01%5Cclip_image001.png" o:title="" chromakey="white"></v:imagedata></v:shape></span><span style="font-size: medium"><span style="text-indent: 24pt; line-height: 1.5; font-family: 宋体">数组一一对于字符串S的前i个字符构成的子串，既是它的后缀同时又是它的前缀，并且该后缀与该前缀不重叠，将这种字符串的数量记作</span><span lang="EN-US" style="text-indent: 24pt; line-height: 1.5"><font face="宋体, MS Song">num[i]</font></span><span style="text-indent: 24pt; line-height: 1.5; font-family: 宋体">。例如</span><span lang="EN-US" style="text-indent: 24pt; line-height: 1.5"><font face="宋体, MS Song">S</font></span><span style="text-indent: 24pt; line-height: 1.5; font-family: 宋体">为</span><u style="text-indent: 24pt; line-height: 1.5"><span lang="EN-US"><font face="宋体, MS Song">aaaaa</font></span></u><span style="text-indent: 24pt; line-height: 1.5; font-family: 宋体">，则</span><span lang="EN-US" style="text-indent: 24pt; line-height: 1.5"><font face="宋体, MS Song">num[4] = 2</font></span><span style="text-indent: 24pt; line-height: 1.5; font-family: 宋体">。这是因为</span><span lang="EN-US" style="text-indent: 24pt; line-height: 1.5"><font face="宋体, MS Song">S</font></span><span style="text-indent: 24pt; line-height: 1.5; font-family: 宋体">的前</span><span lang="EN-US" style="text-indent: 24pt; line-height: 1.5"><font face="宋体, MS Song">4</font></span><span style="text-indent: 24pt; line-height: 1.5; font-family: 宋体">个字符为</span><u style="text-indent: 24pt; line-height: 1.5"><span lang="EN-US"><font face="宋体, MS Song">aaaa</font></span></u><span style="text-indent: 24pt; line-height: 1.5; font-family: 宋体">，其中</span><u style="text-indent: 24pt; line-height: 1.5"><span lang="EN-US"><font face="宋体, MS Song">a</font></span></u><span style="text-indent: 24pt; line-height: 1.5; font-family: 宋体">和</span><u style="text-indent: 24pt; line-height: 1.5"><span lang="EN-US"><font face="宋体, MS Song">aa</font></span></u><span style="text-indent: 24pt; line-height: 1.5; font-family: 宋体">都满足性质&lsquo;既是后缀又是前缀&rsquo;，同时保证这个后缀与这个前缀不重叠。而</span><u style="text-indent: 24pt; line-height: 1.5"><span lang="EN-US"><font face="宋体, MS Song">aaa</font></span></u><span style="text-indent: 24pt; line-height: 1.5; font-family: 宋体">虽然满足性质&lsquo;既是后缀又是前缀&rsquo;，但遗憾的是这个后缀与这个前缀重叠了，所以不能计算在内。同理，</span><span lang="EN-US" style="text-indent: 24pt; line-height: 1.5"><font face="宋体, MS Song">num[1] = 0,num[2] = num[3] = 1,num[5] = 2</font></span><span style="text-indent: 24pt; line-height: 1.5; font-family: 宋体">。&rdquo;</span></span></p><p></p>
<p></p><p class="NOI" style="margin: 2.4pt 0cm; text-indent: 24pt"><span style="font-size: medium"><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">最后，园长给出了奖励条件，第一个做对的同学奖励巧克力一盒。听了这句话，睡了一节课的企鹅立刻就醒过来了！但企鹅并不会做这道题，于是向参观动物园的你寻求帮助。你能否帮助企鹅写一个程序求出</span><span lang="EN-US">num</span></span><span lang="EN-US" style="font-size: 10.5pt; font-family: &quot;calibri&quot;,&quot;sans-serif&quot;; position: relative; top: 5.5pt; mso-bidi-font-size: 11.0pt; mso-ascii-theme-font: minor-latin; mso-fareast-font-family: 宋体; mso-fareast-theme-font: minor-fareast; mso-hansi-theme-font: minor-latin; mso-bidi-font-family: 'timesnewroman'; mso-bidi-theme-font: minor-bidi; mso-text-raise: -5.5pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA"><v:shape id="_x0000_i1025" type="#_x0000_t75" style="width: 3pt; height: 18.75pt"><v:imagedata src="file:///C:%5CUsers%5C%E6%9C%8B%E9%A3%9E%5CAppData%5CLocal%5CTemp%5Cmsohtmlclip1%5C01%5Cclip_image001.png" o:title="" chromakey="white"></v:imagedata></v:shape></span><span style="font-size: medium"><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">数组呢？</span></span><font size="3"><span lang="EN-US"><o:p></o:p></span></font></p><p></p>
<p></p><p class="NOI" style="margin: 2.4pt 0cm; text-indent: 24pt"><span style="font-size: medium"><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'timesnewroman'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: 'timesnewroman'; mso-ansi-language: en-us; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-font-kerning: 1.0pt">特别地，为了避免大量的输出，你不需要输出</span><span lang="EN-US" style="font-family: &quot;timesnewroman&quot;,&quot;serif&quot;; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: 宋体; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-font-kerning: 1.0pt">num[i]</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'timesnewroman'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: 'timesnewroman'; mso-ansi-language: EN-US; mso-fareast-language: zh-cn; mso-bidi-language: AR-SA; mso-font-kerning: 1.0pt">分别是多少，你只需要输出<img height="36" alt="" width="144" src="/JudgeOnline/upload/201407/11(4).jpg"></span><span style="font-family: 宋体">对</span><span lang="EN-US" style="font-family: 'Times New Roman', serif">1,000,000,007</span></span><span lang="EN-US" style="font-size: 10.5pt; font-family: 'Times New Roman', serif; position: relative; top: 2.5pt"><v:shapetype id="_x0000_t75" coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f"><v:stroke joinstyle="miter"><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"><v:f eqn="sum @0 1 0"><v:f eqn="sum 0 0 @1"><v:f eqn="prod @2 1 2"><v:f eqn="prod @3 21600 pixelWidth"><v:f eqn="prod @3 21600 pixelHeight"><v:f eqn="sum @0 0 1"><v:f eqn="prod @6 1 2"><v:f eqn="prod @7 21600 pixelWidth"><v:f eqn="sum @8 21600 0"><v:f eqn="prod @7 21600 pixelHeight"><v:f eqn="sum @10 21600 0"></v:f></v:f></v:f></v:f></v:f></v:f></v:f></v:f></v:f></v:f></v:f></v:f></v:formulas><v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"><o:lock v:ext="edit" aspectratio="t"></o:lock></v:path></v:stroke></v:shapetype><v:shape id="_x0000_i1025" type="#_x0000_t75" style="width: 2.25pt; height: 12pt"><v:imagedata src="file:///C:%5CUsers%5C%E6%9C%8B%E9%A3%9E%5CAppData%5CLocal%5CTemp%5Cmsohtmlclip1%5C01%5Cclip_image001.png" o:title="" chromakey="white"></v:imagedata></v:shape></span><span style="font-size: medium"><span style="font-family: 宋体">取模的结果即可。</span></span></p><p></p>
<p></p><p class="NOI" style="margin: 2.4pt 0cm; text-indent: 24pt"><span style="font-size: medium"><span style="font-family: 宋体"><img height="36" alt="" width="541" src="/JudgeOnline/upload/201407/22(2).jpg"></span></span></p>&lt;/div&gt;<h3>Input</h3><div class="content"><p><span style="font-size: medium">第1行仅包含一个正整数n ，表示测试数据的组数。随后n行，每行描述一组测试数据。每组测试数据仅含有一个字符串S，S的定义详见题目描述。数据保证S 中仅含小写字母。输入文件中不会包含多余的空行，行末不会存在多余的空格。</span></p></div><h3>Output</h3><div class="content"><p><span style="font-size: medium">包含 n 行，每行描述一组测试数据的答案，答案的顺序应与输入数据的顺序保持一致。对于每组测试数据，仅需要输出一个整数，表示这组测试数据的答案对 1,000,000,007 取模的结果。输出文件中不应包含多余的空行。 </span></p></div><h3>Sample Input</h3><p></p>
<div class="content"><span class="sampledata">3<br>
aaaaa<br>
ab<br>
abcababc</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">36<br>
1<br>
32 </span></div><h3>HINT</h3>
<div class="content"><p></p><p><span lang="EN-US">n</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">&le;</span><span lang="EN-US">5,L</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">&le;</span><span lang="EN-US">1,000,000</span></p><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search="></a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>字符串</li>
<li>KMP变式</li>
</ul>
<hr>
<h2 id="题目分析-8"><a href="#题目分析-8" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>KMP变式问题</strong></p>
<p>这道题其实是一道很好的题目，能加强对KMP的理解</p>
<p>其实fail函数有两种实现，一种是代表包含自己前一个位置但不含自己的最长border长度，另一种是自己也算在内的最长border长度</p>
<p>这两者的处理方式并不相同，所以一定要想清楚KMP的原理</p>
<h2 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">char</span> t[maxn];</div><div class="line"><span class="keyword">int</span> lent;</div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"><span class="keyword">int</span> f1[maxn];</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="keyword">int</span> f2[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    f[<span class="number">0</span>] = <span class="number">-1</span>;</div><div class="line">    f1[<span class="number">0</span>] = <span class="number">-1</span>;</div><div class="line">    num[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; lent; i++)&#123;</div><div class="line">        <span class="keyword">int</span> k = f[i - <span class="number">1</span>];</div><div class="line">        <span class="keyword">while</span> (k &gt; <span class="number">-1</span> &amp;&amp; t[k + <span class="number">1</span>] != t[i]) k = f[k];</div><div class="line">        f[i] = ((t[k + <span class="number">1</span>] == t[i]) ? k + <span class="number">1</span> : <span class="number">-1</span>);</div><div class="line">        num[i] = ((t[k + <span class="number">1</span>] == t[i]) ? num[k + <span class="number">1</span>] + <span class="number">1</span> : <span class="number">0</span>);</div><div class="line"></div><div class="line">        k = f1[i - <span class="number">1</span>];</div><div class="line">        <span class="keyword">while</span> (k &gt; <span class="number">-1</span> &amp;&amp; t[k + <span class="number">1</span>] != t[i]) k = f[k];</div><div class="line">        f1[i] = ((t[k + <span class="number">1</span>] == t[i]) ? k + <span class="number">1</span> : <span class="number">-1</span>);</div><div class="line">        <span class="keyword">while</span> (f1[i] &gt; <span class="number">-1</span> &amp;&amp; ((f1[i] + <span class="number">1</span>) &lt;&lt; <span class="number">1</span>) &gt; i + <span class="number">1</span>) f1[i] = f[f1[i]];</div><div class="line"></div><div class="line">        f2[i] = (f1[i] == <span class="number">-1</span>) ? <span class="number">0</span> : (num[f1[i]] + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    LL ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lent; i++) ans = ans * (f2[i] + <span class="number">1</span>) % M;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, t);</div><div class="line">        lent = <span class="built_in">strlen</span>(t);</div><div class="line">        init();</div><div class="line">        work();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 3530. -- [Sdoi2014]数数</title><center><h2>3530: [Sdoi2014]数数</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>512 MB<br><span class="green">Submit: </span>1082&nbsp;&nbsp;<span class="green">Solved: </span>555<br>[<a href="submitpage.php?id=3530">Submit</a>][<a href="problemstatus.php?id=3530">Status</a>][<a href="bbs.php?id=3530">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p><span style="font-size: medium">我们称一个正整数N是幸运数，当且仅当它的十进制表示中不包含数字串集合S中任意一个元素作为其子串。例如当S=(22，333，0233)时，233是幸运数，2333、20233、3223不是幸运数。<br>
&nbsp;&nbsp;&nbsp; 给定N和S，计算不大于N的幸运数个数。<br>
</span></p></div><h3>Input</h3><div class="content"><p><br></p>
<p><font size="4">&nbsp;&nbsp;&nbsp; 输入的第一行包含整数N。<br><br>&nbsp;&nbsp;&nbsp; 接下来一行一个整数M，表示S中元素的数量。<br><br>&nbsp;&nbsp;&nbsp; 接下来M行，每行一个数字串，表示S中的一个元素。<br>
</font>&lt;/p&gt;&lt;/div&gt;</p><h3>Output</h3><div class="content"><p><font size="4">&nbsp;&nbsp;&nbsp; 输出一行一个整数，表示答案模109+7的值。<br>
</font></p></div><h3>Sample Input</h3><p></p>
<div class="content"><span class="sampledata">    20<br>
    3<br>
    2<br>
    3<br>
    14<br>
</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">    14</span></div><h3>HINT</h3>
<div class="content"><p></p><p><span style="font-size: medium">&nbsp;下表中l表示N的长度，L表示S中所有串长度之和。</span></p><br>
<p><span style="font-size: medium">1 &lt; =l &lt; =1200&nbsp;, 1 &lt; =M &lt; =100&nbsp;,1 &lt; =L &lt; =1500</span></p><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search=Round 1 day 1">Round 1 day 1</a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>动态规划</li>
<li>数位DP</li>
<li>AC自动机</li>
</ul>
<hr>
<h2 id="题目分析-9"><a href="#题目分析-9" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>多串匹配型数位DP问题</strong></p>
<p>本题首先显然是AC自动机，然而情况多，真的很难一遍写对。。。</p>
<p>大概的坑有如下：</p>
<ul>
<li>集合中的数字开头可以为0</li>
<li>AC自动机中可能包含其他串的结点也不能走到</li>
<li>要注意开始标记的作用，为了避免，要循环累计答案</li>
</ul>
<p>另外本题LOJ数据弱，第二点没处理也能过，然而BZOJ上就过不了。。。</p>
<p>好了不说了。。。</p>
<h2 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 4005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">bool</span> val[maxn];</div><div class="line"><span class="keyword">int</span> ch[maxn][<span class="number">12</span>];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"><span class="keyword">int</span> m;</div><div class="line"><span class="keyword">char</span> num[maxn];</div><div class="line"><span class="keyword">int</span> ct = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> len;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> now = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!ch[now][s[i] - <span class="string">'0'</span>]) ch[now][s[i] - <span class="string">'0'</span>] = ++cnt;</div><div class="line">        now = ch[now][s[i] - <span class="string">'0'</span>];</div><div class="line">    &#125;</div><div class="line">    val[now] = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    f[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; bfs;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (ch[<span class="number">0</span>][i]) f[ch[<span class="number">0</span>][i]] = <span class="number">0</span>, bfs.push(ch[<span class="number">0</span>][i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (!bfs.empty())&#123;</div><div class="line">        <span class="keyword">int</span> op = bfs.front(); bfs.pop();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (!ch[op][i]) ch[op][i] = ch[f[op]][i];</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">int</span> k = f[op];</div><div class="line">                <span class="keyword">while</span> (k &amp;&amp; !ch[k][i]) k = f[k];</div><div class="line">                f[ch[op][i]] = (!ch[k][i]) ? <span class="number">0</span> : ch[k][i];</div><div class="line">                <span class="keyword">if</span> (val[f[ch[op][i]]]) val[ch[op][i]] = <span class="number">1</span>;</div><div class="line">                bfs.push(ch[op][i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ct = <span class="built_in">strlen</span>(num);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ct; i++) num[i] -= <span class="string">'0'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> dp[maxn][maxn][<span class="number">2</span>];</div><div class="line"><span class="keyword">bool</span> vis[maxn][maxn][<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> loc, <span class="keyword">int</span> op)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (val[loc]) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (pos == ct) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (vis[pos][loc][op]) <span class="keyword">return</span> dp[pos][loc][op];</div><div class="line">    vis[pos][loc][op] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span>&amp; ans = dp[pos][loc][op];</div><div class="line">    <span class="keyword">if</span> (op)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num[pos]; i++)&#123;</div><div class="line">            ans = (ans + DP(pos + <span class="number">1</span>, ch[loc][i], <span class="number">0</span>)) % M;</div><div class="line">        &#125;</div><div class="line">        ans = (ans + DP(pos + <span class="number">1</span>, ch[loc][num[pos]], <span class="number">1</span>)) % M;</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">        ans = (ans + DP(pos + <span class="number">1</span>, ch[loc][i], <span class="number">0</span>)) % M;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, num, &amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">        len = <span class="built_in">strlen</span>(s);</div><div class="line">        insert();</div><div class="line">    &#125;</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; ct; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++)&#123;</div><div class="line">            ans = (ans + DP(i + <span class="number">1</span>, ch[<span class="number">0</span>][j], <span class="number">0</span>)) % M;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; num[<span class="number">0</span>]; i++) ans = (ans + DP(<span class="number">1</span>, ch[<span class="number">0</span>][i], <span class="number">0</span>)) % M;</div><div class="line">    ans = (ans + DP(<span class="number">1</span>, ch[<span class="number">0</span>][num[<span class="number">0</span>]], <span class="number">1</span>)) % M;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本期的题型有：</p>
<ul>
<li><strong>模数数位DP问题</strong></li>
<li><strong>树上动态维护问题</strong></li>
<li><strong>图上两点瓶颈路问题</strong></li>
<li><strong>线段树合并问题</strong></li>
<li><strong>动点SPFA/二维瓶颈路问题</strong></li>
<li><strong>质因子分析DFS问题</strong></li>
<li><strong>线段树特殊操作问题</strong></li>
<li><strong>模拟操作问题</strong></li>
<li><strong>KMP变式问题</strong></li>
<li><strong>多串匹配型数位DP问题</strong></li>
</ul>
</div></div></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;How can I stay with you … forever ? …&lt;br&gt;
    
    </summary>
    
    
      <category term="BZOJ" scheme="https://goseqh.tk/tags/BZOJ/"/>
    
      <category term="题解" scheme="https://goseqh.tk/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ阶段性汇总IV</title>
    <link href="https://goseqh.tk/2017/09/07/BZOJ%E9%98%B6%E6%AE%B5%E6%80%A7%E6%B1%87%E6%80%BBIV/"/>
    <id>https://goseqh.tk/2017/09/07/BZOJ阶段性汇总IV/</id>
    <published>2017-09-07T10:04:17.000Z</published>
    <updated>2017-11-02T07:27:29.613Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>I’m alone still…<br><a id="more"></a></p>
<p><title>Problem 1339. -- [Baltic2008]Mafia</title><center><h2>1339: [Baltic2008]Mafia</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>419&nbsp;&nbsp;<span class="green">Solved: </span>263<br>[<a href="submitpage.php?id=1339">Submit</a>][<a href="problemstatus.php?id=1339">Status</a>][<a href="bbs.php?id=1339">Discuss</a>]</center></p><h3>Description</h3><div class="content">匪徒准备从一个车站转移毒品到另一个车站,警方准备进行布控. 
对于每个车站进行布控都需要一定的代价,现在警方希望使用最小的代价控制一些车站,使得去掉这些车站后，匪徒无法从原定的初始点到达目标点</div><h3>Input</h3><div class="content">第一行输入N,M代表车站的总个数,及有多少条双向边连接它们.
2<=n<=200 1="" ,="" <="m<=20000." 第二行给出两个数a,b,代表匪徒的出发点及目标点.1<="a,b<=N,a<">b.
再下来有N行,给出对第i个车站进行布控所需要的Money,其不超过10 000 000
再下来M行,用于描述图的结构.</=n<=200></div><h3>Output</h3><div class="content">最少需要多少Money</div><h3>Sample Input</h3><p></p>
<div class="content"><span class="sampledata">5 6<br>
5 3<br>
2<br>
4<br>
8<br>
3<br>
10<br>
1 5<br>
1 2<br>
2 4<br>
4 5<br>
2 3<br>
3 4</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">5</span></div><h3>HINT</h3>
<div class="content"><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search="></a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>图论</li>
<li>网络流</li>
<li>最小割</li>
</ul>
<hr>
<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>最小割基础模型</strong></p>
<p>就是一道结点容量的最小割问题。。。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m, s, t;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to, flow;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to, <span class="keyword">int</span> flow) : next(next), to(to), flow(flow)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to, <span class="keyword">int</span> flow)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to, flow);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr, <span class="number">0</span>);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; bfs;</div><div class="line">    bfs.push(s);</div><div class="line">    <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span>(d));</div><div class="line">    <span class="keyword">while</span>(!bfs.empty())&#123;</div><div class="line">        <span class="keyword">int</span> op = bfs.front(); bfs.pop();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[op]; i; i = e[i].next)&#123;</div><div class="line">            <span class="keyword">if</span> (!e[i].flow) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> k = e[i].to;</div><div class="line">            <span class="keyword">if</span> (k == s || d[k]) <span class="keyword">continue</span>;</div><div class="line">            d[k] = d[op] + <span class="number">1</span>;</div><div class="line">            bfs.push(k);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (d[t]) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> a)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == t) <span class="keyword">return</span> a;</div><div class="line">    <span class="keyword">int</span> rest = a;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span> (!e[i].flow) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (d[op] != d[x] + <span class="number">1</span>) <span class="keyword">continue</span>;</div><div class="line">        LL k = DFS(op, min(rest, e[i].flow));</div><div class="line">        e[i].flow -= k;</div><div class="line">        e[i ^ <span class="number">1</span>].flow += k;</div><div class="line">        rest -= k;</div><div class="line">        <span class="keyword">if</span> (!rest) <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a - rest;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dinic</span><span class="params">(LL&amp; maxflow)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(BFS()) maxflow += DFS(s, INF);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;s, &amp;t);</div><div class="line">    s = s &lt;&lt; <span class="number">1</span>;</div><div class="line">    t = (t &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x), Add_Edge(i &lt;&lt; <span class="number">1</span>, (i &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, x);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        Add_Edge((x &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, y &lt;&lt; <span class="number">1</span>, INF);</div><div class="line">        Add_Edge((y &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, x &lt;&lt; <span class="number">1</span>, INF);</div><div class="line">    &#125;</div><div class="line">    LL maxflow = <span class="number">0</span>;</div><div class="line">    Dinic(maxflow);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, maxflow);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 3944. -- Sum</title><center><h2>3944: Sum</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>4139&nbsp;&nbsp;<span class="green">Solved: </span>1092<br>[<a href="submitpage.php?id=3944">Submit</a>][<a href="problemstatus.php?id=3944">Status</a>][<a href="bbs.php?id=3944">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p><img src="http://218.106.205.134/uploads/aaa.PNG" height="px" width="px"></p><p></p>
<p></p><p></p>&lt;/div&gt;<h3>Input</h3><div class="content"><div>一共T+1行</div><p></p>
<div>第1行为数据组数T(T&lt;=10)</div>
<div>第2~T+1行每行一个<span style="color: rgb(255, 0, 0);">非负</span>整数N，代表一组询问</div>
<div></div>
<p class="MsoNormal"></p>
<p></p></div><h3>Output</h3><div class="content"><div>一共T行，每行两个用空格分隔的数ans1,ans2</div>
<div></div>
<p></p></div><h3>Sample Input</h3>
<div class="content"><span class="sampledata">6<br>
1<br>
2<br>
8<br>
13<br>
30<br>
2333</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">1 1<br>
2 0<br>
22 -2<br>
58 -3<br>
278 -3<br>
1655470 2<br>
<br>
 </span></div><h3>HINT</h3>
<div class="content"><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search="></a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>数学</li>
<li>数论</li>
<li>杜教筛</li>
</ul>
<hr>
<h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>杜教筛基础题目</strong></p>
<p>就是一道杜教筛的基础练习题，然后还卡常。。。</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 5000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">LL mu[maxn];</div><div class="line">LL phi[maxn];</div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    mu[<span class="number">1</span>] = phi[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i])&#123;</div><div class="line">            p[cnt++] = i;</div><div class="line">            mu[i] = <span class="number">-1</span>;</div><div class="line">            phi[i] = i - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * p[j] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * p[j]] = <span class="number">1</span>;</div><div class="line">            mu[i * p[j]] = -mu[i];</div><div class="line">            phi[i * p[j]] = phi[i] * (p[j] - <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>)&#123;</div><div class="line">                mu[i * p[j]] = <span class="number">0</span>;</div><div class="line">                phi[i * p[j]] = phi[i] * p[j];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) mu[i] += mu[i - <span class="number">1</span>], phi[i] += phi[i - <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"><span class="built_in">map</span>&lt;LL, LL&gt; phi2;</div><div class="line"><span class="built_in">map</span>&lt;LL, LL&gt; mu2;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">dyh</span><span class="params">(LL n)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (n &lt; maxn) <span class="keyword">return</span> mu[n];</div><div class="line">    <span class="keyword">if</span> (mu2.count(n)) <span class="keyword">return</span> mu2[n];</div><div class="line">    LL ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        LL next = n / (n / i);</div><div class="line">        ans = ans - dyh(n / i) * (next - i + <span class="number">1</span>);</div><div class="line">        i = next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> mu2[n] = ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">dyh2</span><span class="params">(LL n)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (n &lt; maxn) <span class="keyword">return</span> phi[n];</div><div class="line">    <span class="keyword">if</span> (phi2.count(n)) <span class="keyword">return</span> phi2[n];</div><div class="line">    LL ans = n * (n + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        LL next = n / (n / i);</div><div class="line">        ans = ans - dyh2(n / i) * (next - i + <span class="number">1</span>);</div><div class="line">        i = next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> phi2[n] = ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--)&#123;</div><div class="line">        LL n;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>, dyh2(n), dyh(n));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 5015. -- [Snoi2017]礼物</title><center><h2>5015: [Snoi2017]礼物</h2><span class="green">Time Limit: </span>15 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>512 MB<br><span class="green">Submit: </span>28&nbsp;&nbsp;<span class="green">Solved: </span>21<br>[<a href="submitpage.php?id=5015">Submit</a>][<a href="problemstatus.php?id=5015">Status</a>][<a href="bbs.php?id=5015">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>热情好客的请森林中的朋友们吃饭，他的朋友被编号为 1～N，每个到来的朋友都会带给他一些礼物：。其中，第</div><p></p>
<div>一个朋友会带给他 1 个，之后，每一个朋友到来以后，都会带给他之前所有人带来的礼物个数再加他的编号的 K&nbsp;</div>
<div>次方那么多个。所以，假设 K=2，前几位朋友带来的礼物个数分别是：1,5,15,37,83假设 K=3，前几位朋友带来的</div>
<div>礼物个数分别是：1,9,37,111现在，好奇自己到底能收到第 N 个朋友多少礼物，因此拜托于你了。已知 N,K请输</div>
<div>出第 N 个朋友送的礼物个数 mod1000000007。</div>
<div>PDF题面:<a href="http://www.lydsy.com/JudgeOnline/upload/gift.pdf" target="_blank" rel="external">www.lydsy.com/JudgeOnline/upload/gift.pdf</a></div>
<div></div>
<p></p></div><h3>Input</h3><div class="content"><div>第一行，两个整数 N,K</div>
<div>N&le;10^18,K&le;10</div>
<div></div>
<p></p></div><h3>Output</h3><div class="content"><div>一个整数，表示第 N 个朋友送的礼物个数 mod1000000007。&nbsp;</div>
<div></div>
<p></p></div><h3>Sample Input</h3>
<div class="content"><span class="sampledata"> 4 2</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata"> 37</span></div><h3>HINT</h3>
<div class="content"><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search="></a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>数学</li>
<li>数学归纳法计算题</li>
</ul>
<hr>
<h2 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>数学归纳法计算题</strong></p>
<p>本题可以通过递归+数学归纳法解决，首先观察规律，然后递推进行求解，边界情况手动计算即可</p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line">LL fac[maxn];</div><div class="line">LL ifac[maxn];</div><div class="line">LL inv[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    fac[<span class="number">0</span>] = fac[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++) fac[i] = fac[i - <span class="number">1</span>] * i % M;</div><div class="line">    inv[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++) inv[i] = (M - (M / i) * inv[M % i] % M) % M;</div><div class="line">    ifac[<span class="number">0</span>] = ifac[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++) ifac[i] = inv[i] * ifac[i - <span class="number">1</span>] % M;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">fast_power</span><span class="params">(LL x, LL y)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">1</span>, con = x % M;</div><div class="line">    <span class="keyword">while</span> (y)&#123;</div><div class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ans = ans * con % M;</div><div class="line">        con = con * con % M;</div><div class="line">        y &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">cal</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> fac[m] * ifac[n] % M * ifac[m - n] % M;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function">LL <span class="title">work</span><span class="params">(LL n, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (k == <span class="number">0</span>) <span class="keyword">return</span> (fast_power(<span class="number">2</span>, n) - <span class="number">1</span> + M) % M;</div><div class="line">    LL ans = (fast_power(<span class="number">2</span>, n) - fast_power(n, k) + M) % M;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)&#123;</div><div class="line">        ans = (ans + cal(k, i) * (work(n - <span class="number">1</span>, k - i) * <span class="number">2</span> % M) % M) % M;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    LL n;</div><div class="line">    <span class="keyword">int</span> k;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%d"</span>, &amp;n, &amp;k);</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"1\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, (work(n - <span class="number">1</span>, k) + fast_power(n, k)) % M);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 5029. -- 贴小广告</title><center><h2>5029: 贴小广告</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>256 MB<br><span class="green">Submit: </span>86&nbsp;&nbsp;<span class="green">Solved: </span>57<br>[<a href="submitpage.php?id=5029">Submit</a>][<a href="problemstatus.php?id=5029">Status</a>][<a href="bbs.php?id=5029">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>现在有一堵墙，墙上分为若干个单元。接下来会来n个人在墙上贴小广告。每次每个人选择墙上连续一段的单元贴</div><p></p>
<div>上自己公司与众不同的小广告。因为小广告可能会出现被覆盖的情况，由于公司之间存在竞争，后贴广告的人想让</div>
<div>别人看不见前面公司的广告，所以会将前面的广告完全覆盖。因此对于墙上的某个单元上贴的小广告中只有贴的最</div>
<div>晚的能被看见。现在想要知道n个人依次贴完后，墙上共能看到多少种小广告？</div>
<p></p></div><h3>Input</h3><div class="content"><div>输入文件第一行有一个整数 n。</div>
<div>接下来 n 行每行 2 个整数 li、ri，表示这个人在第li个单元到第ri个单元贴了小广告。</div>
<div>1 &lt;= n,m &lt;= 10^5 , 1&lt;=li&lt;=ri&lt;=10^7</div>
<p></p></div><h3>Output</h3><div class="content"><div>输出所有人贴完后墙上能看到多少种小广告？</div>
<p></p></div><h3>Sample Input</h3>
<div class="content"><span class="sampledata">5<br>
1 4<br>
2 6<br>
8 10<br>
3 4<br>
7 10</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">4</span></div><h3>HINT</h3>
<div class="content"><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search="></a></p></div>


<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>线段树</li>
</ul>
<hr>
<h2 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>线段树基础练习题</strong></p>
<p>我们直接线段树搞搞就可以。。。</p>
<h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 400005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> bound 400005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> sline[maxn];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> <span class="built_in">set</span>[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">set</span>[o] &amp;&amp; l != r)&#123;</div><div class="line">        <span class="built_in">set</span>[o &lt;&lt; <span class="number">1</span>] = <span class="built_in">set</span>[o];</div><div class="line">        </div><div class="line">        <span class="built_in">set</span>[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = <span class="built_in">set</span>[o];</div><div class="line"></div><div class="line">        <span class="built_in">set</span>[o] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> <span class="built_in">set</span>[o];</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) <span class="keyword">return</span> get(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> get(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r ,<span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        <span class="built_in">set</span>[o] = qd;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) modify(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) modify(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> l, r, n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</div><div class="line">        line[cnt++] = l;</div><div class="line">        line[cnt++] = r;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i++) sline[i] = line[i];</div><div class="line">    sort(sline, sline + cnt);</div><div class="line">    <span class="keyword">int</span> _cnt = unique(sline, sline + cnt) - sline;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i++) line[i] = lower_bound(sline, sline + _cnt, line[i]) - sline + <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        qx = line[i &lt;&lt; <span class="number">1</span>];</div><div class="line">        qy = line[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">        qd = i + <span class="number">1</span>;</div><div class="line">        modify(<span class="number">1</span>, _cnt, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> ct = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _cnt; i++)&#123;</div><div class="line">        qx = i;</div><div class="line">        <span class="keyword">int</span> a = get(<span class="number">1</span>, _cnt, <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (!a) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span> (!vis[a]) ct++, vis[a] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ct);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 5018. -- [Snoi2017]英雄联盟</title><center><h2>5018: [Snoi2017]英雄联盟</h2><span class="green">Time Limit: </span>15 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>512 MB<br><span class="green">Submit: </span>81&nbsp;&nbsp;<span class="green">Solved: </span>39<br>[<a href="submitpage.php?id=5018">Submit</a>][<a href="problemstatus.php?id=5018">Status</a>][<a href="bbs.php?id=5018">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>正在上大学的小皮球热爱英雄联盟这款游戏，而且打的很菜，被网友们戏称为「小学生」。现在，小皮球终于受不</div><p></p>
<div>了网友们的嘲讽，决定变强了，他变强的方法就是：买皮肤！小皮球只会玩N个英雄，因此，他也只准备给这N个英</div>
<div>雄买皮肤，并且决定，以后只玩有皮肤的英雄。这N个英雄中，第i个英雄有Ki款皮肤，价格是每款CiQ币（同一个</div>
<div>英雄的皮肤价格相同）。为了让自己看起来高大上一些，小皮球决定给同学们展示一下自己的皮肤，展示的思路是</div>
<div>这样的：对于有皮肤的每一个英雄，随便选一个皮肤给同学看。比如，小皮球共有5个英雄，这5个英雄分别有0,0,</div>
<div>3,2,4款皮肤，那么，小皮球就有3*2&times;4=24种展示的策略。现在，小皮球希望自己的展示策略能够至少达到M种，</div>
<div>请问，小皮球至少要花多少钱呢？</div>
<p></p></div><h3>Input</h3><div class="content"><div>第一行，两个整数N,M</div>
<div>
<div>第二行，N个整数，表示每个英雄的皮肤数量Ki</div>
<div>第三行，N个整数，表示每个英雄皮肤的价格Ci</div>
<div>共 10 组数据，第i组数据满足：N&le;max(5,(log<sub>2</sub>i)^4)&nbsp;M&le;10^17,1&le;Ki&le;10,1&le;Ci&le;199。保证有解</div>
</div>
<p></p></div><h3>Output</h3><div class="content"><div>
<div>一个整数，表示小皮球达到目标最少的花费。</div>
</div>
<p></p></div><h3>Sample Input</h3>
<div class="content"><span class="sampledata">3 24<br>
4 4 4<br>
2 2 2</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">18<br>
</span></div><h3>HINT</h3>
<div class="content"><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search="></a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>二分答案</li>
<li>动态规划</li>
<li>背包DP</li>
</ul>
<hr>
<h2 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>判断可达型背包DP</strong></p>
<p>本题我们发现，用质因子分析的方法好像不是很好做，那么转换一下思路，把本题转为判定性问题，然后直接背包DP</p>
<h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 205</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 40005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line">LL m;</div><div class="line"><span class="keyword">int</span> k[maxn];</div><div class="line"><span class="keyword">int</span> c[maxn];</div><div class="line">LL dp[maxn][maxm];</div><div class="line"><span class="keyword">bool</span> vis[maxn][maxm];</div><div class="line"><span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">DP</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> rest)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span> (pos == n + <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span> (vis[pos][rest]) <span class="keyword">return</span> dp[pos][rest];</div><div class="line">	vis[pos][rest] = <span class="number">1</span>;</div><div class="line">	LL&amp; ans = dp[pos][rest];</div><div class="line">	ans = DP(pos + <span class="number">1</span>, rest);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= k[pos]; i++)&#123;</div><div class="line">		<span class="keyword">if</span> (rest &gt;= i * c[pos]) ans = max(ans, i * DP(pos + <span class="number">1</span>, rest - i * c[pos]));</div><div class="line">		<span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (ans &gt;= m) flag = <span class="number">1</span>;</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">	<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">	flag = <span class="number">0</span>;</div><div class="line">	DP(<span class="number">1</span>, x);</div><div class="line">	<span class="keyword">return</span> flag;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</div><div class="line">	<span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">	<span class="keyword">if</span> (judge(mid)) <span class="keyword">return</span> work(l, mid);</div><div class="line">	<span class="keyword">else</span> <span class="keyword">return</span> work(mid + <span class="number">1</span>, r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>, &amp;n, &amp;m);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k[i]);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c[i]), sum += c[i] * k[i];</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>, work(<span class="number">0</span>, sum));</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 1778. -- [Usaco2010 Hol]Dotp 驱逐猪猡</title><center><h2>1778: [Usaco2010 Hol]Dotp 驱逐猪猡</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>64 MB<br><span class="green">Submit: </span>685&nbsp;&nbsp;<span class="green">Solved: </span>265<br>[<a href="submitpage.php?id=1778">Submit</a>][<a href="problemstatus.php?id=1778">Status</a>][<a href="bbs.php?id=1778">Discuss</a>]</center></p><h3>Description</h3><div class="content">奶牛们建立了一个随机化的臭气炸弹来驱逐猪猡。猪猡的文明包含1到N (2 <= 1="" 2="1/2）并且留在最后一个城市（概率为1/2）。所以在城市1结束的概率可以表示为1/2" n="" <="300)一共N个猪城。这些城市由M" (1="" n;="" 1--2="" 可知下面这些路径是炸弹可能经过的路径（最后一个城市是臭气弹爆炸的城市）：="" 1:="" 2:="" 1-2="" 3:="" 1-2-1="" 4:="" 1-2-1-2="" 5:="" 1-2-1-2-1="" ...="" 要得到炸弹在城市1终止的概率，我们可以把上面的第1，第3，第5……条路径的概率加起来，（也就是上表奇数编号的路径）。上表中第k条路径的概率正好是(1="" 2)^k，也就是必须在前k-1个回合离开所在城市（每次的概率为1="" -="" +="" 2)^3="" 2)^5="" ...。当我们无限地计算把这些项一个个加起来，我们最后会恰好得到2="" 3，也就是我们要求的概率，大约是0.666666667。这意味着最终停留在城市2的概率为1="" 3，大约为0.333333333。="" div=""><h3>Input</h3><div class="content">* 第1行: 四个由空格隔开的整数: N, M, P, 和 Q<p></p>
<ul>
<li>第2到第M+1行: 第i+1行用两个由空格隔开的整数A_j和B_j表示一条道路。<br>&lt;/div&gt;<h3>Output</h3><div class="content">* 第1到第N行: 在第i行，用一个浮点数输出城市i被摧毁的概率。误差不超过10^-6的答桉会
  被接受（注意这就是说你需要至少输出6位有效数字使得答桉有效）。
</div><h3>Sample Input</h3><div class="content"><span class="sampledata">2 1 1 2<br>
1 2<br>
<br>
<br>
</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata"><br>
0.666666667<br>
0.333333333<br>
</span></div><h3>HINT</h3>
<div class="content"><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search=Gold">Gold</a></p></div>

</li>
</ul>
<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>图论</li>
<li>数学</li>
<li>概率与期望</li>
<li>高斯消元</li>
</ul>
<hr>
<h2 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>图论概率/期望高斯消元问题</strong></p>
<p>这类题目，我们一般都需要两个函数：</p>
<ul>
<li>build_matrix()</li>
<li>Gauss()</li>
</ul>
<p>我们把Gauss消元的代码封装好，然后用上面的函数进行矩阵的建立，就可以了</p>
<p>注意，我们要判断好DP中每一项的精确定义，同时明确转移的方向，否则会产生错误</p>
<p>对于本题来说，我们为了方便定义DP为经过某个状态的期望次数（<strong>概率转期望</strong>技巧）， 那么答案就是这个期望次数乘以爆炸的概率，可以证明，最后所有点的答案加起来正好是1，想一想，为什么？（可以把矩阵建出来然后证明）</p>
<p>转移就根据定义设计就好，确定转移方向以明确点的度数用哪一个</p>
<h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-10</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">double</span> p;</div><div class="line"><span class="keyword">double</span> mat[maxn][maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; save[maxn];</div><div class="line"><span class="keyword">int</span> deg[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_matrix</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        mat[i][i] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; save[i].size(); k++)&#123;</div><div class="line">            <span class="keyword">int</span> j = save[i][k];</div><div class="line">            mat[i][j] -= ((<span class="number">1</span> - p) / deg[j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    mat[<span class="number">1</span>][n + <span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Gauss</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> _n = n, _m = n + <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _n; i++)&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">double</span> maxnum = mat[i][i];</div><div class="line">        <span class="keyword">int</span> flag = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= _n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (mat[j][i] - maxnum &gt; eps)&#123;</div><div class="line">                maxnum = mat[j][i];</div><div class="line">                flag = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (flag != <span class="number">-1</span>) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= _m; j++) swap(mat[i][j], mat[flag][j]);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= _n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">double</span> d = mat[j][i] / mat[i][i];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt;= _m; k++)&#123;</div><div class="line">                mat[j][k] -= mat[i][k] * d;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    build_matrix();</div><div class="line">    Gauss();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.9lf\n"</span>, p * mat[i][n + <span class="number">1</span>] / mat[i][i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y, a, b;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;x, &amp;y);</div><div class="line">    p = <span class="number">1.0</span> * x / y;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</div><div class="line">        save[a].pb(b);</div><div class="line">        save[b].pb(a);</div><div class="line">        deg[a]++, deg[b]++;</div><div class="line">    &#125;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 1419. -- Red is good</title><center><h2>1419: Red is good</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>64 MB<br><span class="green">Submit: </span>969&nbsp;&nbsp;<span class="green">Solved: </span>427<br>[<a href="submitpage.php?id=1419">Submit</a>][<a href="problemstatus.php?id=1419">Status</a>][<a href="bbs.php?id=1419">Discuss</a>]</center></p><h3>Description</h3><div class="content">桌面上有R张红牌和B张黑牌，随机打乱顺序后放在桌面上，开始一张一张地翻牌，翻到红牌得到1美元，黑牌则付出1美元。可以随时停止翻牌，在最优策略下平均能得到多少钱。</div><h3>Input</h3><div class="content">一行输入两个数R,B,其值在0到5000之间</div><h3>Output</h3><div class="content">在最优策略下平均能得到多少钱。</div><h3>Sample Input</h3><p></p>
<div class="content"><span class="sampledata">5 1</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">4.166666</span></div><h3>HINT</h3>
<div class="content"><p>输出答案时,小数点后第六位后的全部去掉,不要四舍五入.</p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search="></a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>动态规划</li>
<li>概率与期望DP</li>
</ul>
<hr>
<h2 id="题目分析-6"><a href="#题目分析-6" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>最优型概率/期望DP问题</strong><br>我们直接进行DP，然后对于当前点是否停止进行抉择，而这只需要对后继状态的DP值与0取个MAX即可，这就是最优策略的含义</p>
<h2 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 5005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">double</span> dp[<span class="number">2</span>][maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> d = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt;= m; y++) dp[<span class="number">0</span>][y] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; x++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt;= m; y++)&#123;</div><div class="line">            <span class="keyword">if</span> (y == <span class="number">0</span>) dp[d][y] = x;</div><div class="line">            <span class="keyword">else</span> dp[d][y] = max(<span class="number">0.0</span>, (<span class="number">1.0</span> * x / (x + y) * (dp[d ^ <span class="number">1</span>][y] + <span class="number">1</span>)) + (<span class="number">1.0</span> * y / (x + y) * (dp[d][y - <span class="number">1</span>] - <span class="number">1</span>)));</div><div class="line">        &#125;</div><div class="line">        d ^= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> d ^ <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">int</span> d = DP();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.6lf"</span>, dp[d][m] - <span class="number">5e-7</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 3270. -- 博物馆</title><center><h2>3270: 博物馆</h2><span class="green">Time Limit: </span>30 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>549&nbsp;&nbsp;<span class="green">Solved: </span>301<br>[<a href="submitpage.php?id=3270">Submit</a>][<a href="problemstatus.php?id=3270">Status</a>][<a href="bbs.php?id=3270">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div style="margin: 0cm 0cm 6pt"><p></p>
<div>有一天Petya和他的朋友Vasya在进行他们众多旅行中的一次旅行，他们决定去参观一座城堡博物馆。这座博物馆有着特别的样式。它包含由m条走廊连接的n间房间，并且满足可以从任何一间房间到任何一间别的房间。</div>
<div>两个人在博物馆里逛了一会儿后两人决定分头行动，去看各自感兴趣的艺术品。他们约定在下午六点到一间房间会合。然而他们忘记了一件重要的事：他们并没有选好在哪儿碰面。等时间到六点，他们开始在博物馆里到处乱跑来找到对方（他们没法给对方打电话因为电话漫游费是很贵的）</div>
<div>不过，尽管他们到处乱跑，但他们还没有看完足够的艺术品，因此他们每个人采取如下的行动方法：每一分钟做决定往哪里走，有Pi 的概率在这分钟内不去其他地方（即呆在房间不动），有1-Pi 的概率他会在相邻的房间中等可能的选择一间并沿着走廊过去。这里的i指的是当期所在房间的序号。在古代建造是一件花费非常大的事，因此每条走廊会连接两个不同的房间，并且任意两个房间至多被一条走廊连接。</div>
<div>两个男孩同时行动。由于走廊很暗，两人不可能在走廊碰面，不过他们可以从走廊的两个方向通行。（此外，两个男孩可以同时地穿过同一条走廊却不会相遇）两个男孩按照上述方法行动直到他们碰面为止。更进一步地说，当两个人在某个时刻选择前往同一间房间，那么他们就会在那个房间相遇。</div>
<div>两个男孩现在分别处在a，b两个房间，求两人在每间房间相遇的概率。</div>
</div></div><h3>Input</h3><div class="content"><div>第一行包含四个整数，n表示房间的个数;m表示走廊的数目;a,b (1&thinsp;&le;&thinsp;a,&thinsp;b&thinsp;&le;&thinsp;n),表示两个男孩的初始位置。</div>
<div>之后m行每行包含两个整数，表示走廊所连接的两个房间。</div>
<div>之后n行每行一个至多精确到小数点后四位的实数 表示待在每间房间的概率。</div>
<div>题目保证每个房间都可以由其他任何房间通过走廊走到。</div></div><h3>Output</h3><div class="content"><div>输出一行包含n个由空格分隔的数字，注意最后一个数字后也有空格，第i个数字代表两个人在第i间房间碰面的概率（输出保留6位小数）</div>
<div>注意最后一个数字后面也有一个空格</div></div><h3>Sample Input</h3>
<div class="content"><span class="sampledata">2 1 1 2<br>
1 2<br>
0.5<br>
0.5<br>
</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">0.500000 0.500000<br>
</span></div><h3>HINT</h3>
<div class="content"><p></p><p>对于100%的数据有 n &lt;= 20，n-1 &lt;= m &lt;= n(n-1)/2</p><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search=高斯消元">高斯消元</a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>图论</li>
<li>数学</li>
<li>概率与期望</li>
<li>高斯消元</li>
</ul>
<hr>
<h2 id="题目分析-7"><a href="#题目分析-7" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>图论概率/期望高斯消元问题</strong></p>
<p>几乎和上面那道题一样的套路，直接造DP矩阵然后消元即可，注意我们要表示的是二维状态， 同时为了方便定义DP为经过某个状态的期望次数即可（<strong>概率转期望</strong>技巧）</p>
<h2 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 605</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, a, b;</div><div class="line"><span class="keyword">double</span> p[maxn];</div><div class="line"><span class="keyword">double</span> mat[maxn][maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; save[maxn];</div><div class="line"><span class="keyword">int</span> deg[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_matrix</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line"></div><div class="line">            <span class="keyword">int</span> op = (i - <span class="number">1</span>) * n + j - <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> x = i, y = j;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (x == a &amp;&amp; y == b) &#123;</div><div class="line">                mat[op][op] = <span class="number">1</span> - p[x] * p[y];</div><div class="line">                mat[op][n * n] = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">if</span> (x != y) mat[op][op] = <span class="number">1</span> - p[x] * p[y];</div><div class="line">                <span class="keyword">else</span> mat[op][op] = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; save[x].size(); k++)&#123;</div><div class="line">                </div><div class="line">                <span class="keyword">int</span> _x = save[x][k];</div><div class="line">                <span class="keyword">int</span> _op = (_x - <span class="number">1</span>) * n + y - <span class="number">1</span>;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (_x != y) mat[op][_op] -= (<span class="number">1</span> - p[_x]) * p[y] / deg[_x];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; save[y].size(); k++)&#123;</div><div class="line"></div><div class="line">                <span class="keyword">int</span> _y = save[y][k];</div><div class="line">                <span class="keyword">int</span> _op = (x - <span class="number">1</span>) * n + _y - <span class="number">1</span>;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (x != _y) mat[op][_op] -= (<span class="number">1</span> - p[_y]) * p[x] / deg[_y];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; save[x].size(); s++)&#123;</div><div class="line"></div><div class="line">                <span class="keyword">int</span> _x = save[x][s];</div><div class="line"></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; save[y].size(); t++)&#123;</div><div class="line"></div><div class="line">                    <span class="keyword">int</span> _y = save[y][t];</div><div class="line">                    <span class="keyword">int</span> _op = (_x - <span class="number">1</span>) * n + _y - <span class="number">1</span>;</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (_x != _y) mat[op][_op] -= (<span class="number">1</span> - p[_x]) * (<span class="number">1</span> - p[_y]) / (deg[_x] * deg[_y]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Gauss</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> _n = n * n, _m = n * n + <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _n; i++)&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">double</span> maxnum = mat[i][i];</div><div class="line">        <span class="keyword">int</span> flag = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; _n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (mat[j][i] - maxnum &gt; eps)&#123;</div><div class="line">                maxnum = mat[j][i];</div><div class="line">                flag = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (flag != <span class="number">-1</span>) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; _m; j++) swap(mat[i][j], mat[flag][j]);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; _n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">double</span> d = mat[j][i] / mat[i][i];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt; _m; k++)&#123;</div><div class="line">                mat[j][k] -= mat[i][k] * d;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DP</span><span class="params">()</span></span>&#123;</div><div class="line">    build_matrix();</div><div class="line">    Gauss();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> op = (i - <span class="number">1</span>) * n + i - <span class="number">1</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.6lf "</span>, mat[op][n * n] / mat[op][op]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;a, &amp;b);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        save[x].pb(y);</div><div class="line">        save[y].pb(x);</div><div class="line">        deg[x]++;</div><div class="line">        deg[y]++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;p[i]);</div><div class="line">    &#125;</div><div class="line">    DP();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 4551. -- [Tjoi2016&Heoi2016]树</title><center><h2>4551: [Tjoi2016&Heoi2016]树</h2><span class="green">Time Limit: </span>20 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>1294&nbsp;&nbsp;<span class="green">Solved: </span>643<br>[<a href="submitpage.php?id=4551">Submit</a>][<a href="problemstatus.php?id=4551">Status</a>][<a href="bbs.php?id=4551">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>在2016年，佳媛姐姐刚刚学习了树，非常开心。现在他想解决这样一个问题：给定一颗有根树（根为1），有以下</div><p></p>
<div>两种操作：1. 标记操作：对某个结点打上标记（在最开始，只有结点1有标记，其他结点均无标记，而且对于某个</div>
<div>结点，可以打多次标记。）2. 询问操作：询问某个结点最近的一个打了标记的祖先（这个结点本身也算自己的祖</div>
<div>先）你能帮帮他吗?</div></div><h3>Input</h3><div class="content"><div>
<div>输入第一行两个正整数N和Q分别表示节点个数和操作次数接下来N-1行，每行两个正整数u,v(1&le;u,v&le;n)表示u到v</div>
<div>有一条有向边接下来Q行，形如&ldquo;opernum&rdquo;oper为&ldquo;C&rdquo;时表示这是一个标记操作,oper为&ldquo;Q&rdquo;时表示这是一个询</div>
<div>问操作对于每次询问操作，1 &le; N, Q &le; 100000。</div>
</div></div><h3>Output</h3><div class="content"><p>输出一个正整数，表示结果</p></div><h3>Sample Input</h3>
<div class="content"><span class="sampledata">5 5<br>
1 2<br>
1 3<br>
2 4<br>
2 5<br>
Q 2<br>
C 2<br>
Q 2<br>
Q 5<br>
Q 3</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">1 <br>
2 <br>
2 <br>
1</span></div><h3>HINT</h3>
<div class="content"><p></p><p>&nbsp;新加数据9组(By&nbsp;<span style="font-family: Arial; font-size: 14px; line-height: 15.8666658401489px;">HFLSyzx</span>&nbsp;),未重测--2016.8.2</p><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search="></a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>树链剖分</li>
<li>线段树二分</li>
</ul>
<hr>
<h2 id="题目分析-8"><a href="#题目分析-8" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>树链剖分题目</strong></p>
<p>直接树链剖分，寻找最下端的1，而这可以通过线段树二分解决</p>
<h2 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> fa[maxn];</div><div class="line"><span class="keyword">int</span> dfs[maxn];</div><div class="line"><span class="keyword">int</span> idfs[maxn];</div><div class="line"><span class="keyword">int</span> son[maxn];</div><div class="line"><span class="keyword">int</span> si[maxn];</div><div class="line"><span class="keyword">int</span> top[maxn];</div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x]) <span class="keyword">continue</span>;</div><div class="line">        fa[op] = x;</div><div class="line">        d[op] = d[x] + <span class="number">1</span>;</div><div class="line">        DFS1(op);</div><div class="line">        si[x] += si[op];</div><div class="line">        <span class="keyword">if</span> (si[op] &gt; si[son[x]]) son[x] = op;</div><div class="line">    &#125;</div><div class="line">    si[x]++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> tp)</span></span>&#123;</div><div class="line">    top[x] = tp;</div><div class="line">    dfs[x] = ++t;</div><div class="line">    idfs[t] = x;</div><div class="line">    <span class="keyword">if</span> (son[x]) DFS2(son[x], tp);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x] || op == son[x]) <span class="keyword">continue</span>;</div><div class="line">        DFS2(op, op);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> sum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) &#123;</div><div class="line">        <span class="keyword">if</span> (!sum[o]) sum[o] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) modify(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> modify(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    sum[o] = sum[o &lt;&lt; <span class="number">1</span>] + sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (sum[o] == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        <span class="keyword">if</span> (sum[o]) <span class="keyword">return</span> idfs[l];</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) ans = get(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (ans != <span class="number">-1</span>) <span class="keyword">return</span> ans;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) ans = get(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">int</span> f1 = top[x];</div><div class="line">        qx = dfs[f1], qy = dfs[x];</div><div class="line">        <span class="keyword">int</span> k = get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (k != <span class="number">-1</span>)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, k);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        x = fa[f1];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    qx = dfs[x];</div><div class="line">    modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    DFS1(<span class="number">1</span>);</div><div class="line">    DFS2(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    qx = <span class="number">1</span>;</div><div class="line">    modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="keyword">char</span> op[<span class="number">3</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        Add_Edge(x, y);</div><div class="line">    &#125;</div><div class="line">    init();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, op, &amp;x);</div><div class="line">        <span class="keyword">if</span> (op[<span class="number">0</span>] == <span class="string">'C'</span>) modify(x);</div><div class="line">        <span class="keyword">else</span> query(x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 3300. -- [USACO2011 Feb]Best Parenthesis</title><center><h2>3300: [USACO2011 Feb]Best Parenthesis</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>209&nbsp;&nbsp;<span class="green">Solved: </span>114<br>[<a href="submitpage.php?id=3300">Submit</a>][<a href="problemstatus.php?id=3300">Status</a>][<a href="bbs.php?id=3300">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p><font size="3" face="Times New Roman">Recently, the cows have been competing with strings of balanced <br>
parentheses and comparing them with each other to see who has the <br>
best one. <br>
<br>
Such strings are scored as follows (all strings are balanced): the <br>
string &quot;()&quot; has score 1; if &quot;A&quot; has score s(A) then &quot;(A)&quot; has score <br>
2*s(A); and if &quot;A&quot; and &quot;B&quot; have scores s(A) and s(B), respectively, <br>
then &quot;AB&quot; has score s(A)+s(B). For example, s(&quot;(())()&quot;) = <br>
s(&quot;(())&quot;)+s(&quot;()&quot;) = 2*s(&quot;()&quot;)+1 = 2*1+1 = 3. <br>
<br>
Bessie wants to beat all of her fellow cows, so she needs to calculate <br>
the score of some strings. Given a string of balanced parentheses <br>
of length N (2 &lt;= N &lt;= 100,000), help Bessie compute its score. <br>
<br>
计算&ldquo;平衡字符串&rdquo;的分数，&ldquo;平衡字符串&rdquo;是指由相同数量的&lsquo;（&rsquo;和&lsquo;）&rsquo;组成， <br>
且以&lsquo;（&rsquo;开头，以&lsquo;）&rsquo;结尾的字符串。 <br>
计算规则： <br>
字符串&ldquo;（）&rdquo;的得分是1. <br>
如果，平衡字符串&ldquo;A&rdquo;的得分是是S(A)，那么字符串&ldquo;（A）&rdquo;得分是2*S(A) ； <br>
如果，&ldquo;A&rdquo;，&ldquo;B&rdquo; 得分分别是S(A)和S(B)，那么平衡字符串&ldquo;AB&rdquo;得分为S(A)+S(B) <br>
例如：s(&quot;(())()&quot;) =s(&quot;(())&quot;)+s(&quot;()&quot;) = 2*s(&quot;()&quot;)+1 = 2*1+1 = 3.</font></p></div><h3>Input</h3><div class="content"><p><font size="3" face="Times New Roman">* Line 1: A single integer: N <br><br><br></font></p>
<ul>
<li>Lines 2..N + 1: Line i+1 will contain 1 integer: 0 if the ith <br><br>character of the string is ‘(‘, and 1 if the ith character of <br><br>the string is ‘)’ <br><br>第1行：N，平衡字符串长度 <br><br>第2至N+1行：Linei+1 整数0或1,0代表字符&lsquo;（&rsquo;，1代表&lsquo;）&rsquo;&lt;/font&gt;&lt;/p&gt;&lt;/div&gt;<h3>Output</h3><div class="content"><p><font size="3" face="Times New Roman">* Line 1: The score of the string. Since this number can get quite <br>
large, output the score modulo 12345678910. <br>
计算字符串得分，结果对12345678910取模</font></p></div><h3>Sample Input</h3><div class="content"><span class="sampledata">6<br>
0<br>
0<br>
1<br>
1<br>
0<br>
1<br>
INPUT DETAILS:<br>
<br>
This corresponds to the string "(())()".<br>
<br>
</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata"><br>
3<br>
</span></div><h3>HINT</h3>
<div class="content"><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search=Silver">Silver</a></p></div>

</li>
</ul>
<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>括号序列问题</li>
<li>模拟</li>
</ul>
<hr>
<h2 id="题目分析-9"><a href="#题目分析-9" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>模拟计算问题</strong></p>
<p>直接按照定义来算就好。。。</p>
<h2 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 12345678910</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="function">LL <span class="title">work</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> pre = <span class="number">0</span>, suf = <span class="number">0</span>;</div><div class="line">    LL sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> now = l;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!line[i]) pre++;</div><div class="line">        <span class="keyword">else</span> suf++;</div><div class="line">        <span class="keyword">if</span> (pre == suf)&#123;</div><div class="line">            <span class="keyword">if</span> (now + <span class="number">1</span> &lt; i - <span class="number">1</span>) sum = (sum + work(now + <span class="number">1</span>, i - <span class="number">1</span>) * <span class="number">2</span> % M) % M;</div><div class="line">            <span class="keyword">else</span> sum = (sum + <span class="number">1</span>) % M;</div><div class="line">            now = i + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, work(<span class="number">1</span>, n));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本期有如下题型：</p>
<ul>
<li><strong>最小割基础模型</strong></li>
<li><strong>杜教筛基础题目</strong></li>
<li><strong>数学归纳法计算题</strong> (<strong>重点</strong>）</li>
<li><strong>线段树基础练习题</strong></li>
<li><strong>判断可达型背包DP</strong></li>
<li><strong>图论概率/期望高斯消元问题</strong></li>
<li><strong>最优型概率/期望DP问题</strong></li>
<li><strong>树链剖分题目</strong></li>
<li><strong>模拟计算问题</strong></li>
</ul>
</div></div></=></div></div>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;I’m alone still…&lt;br&gt;
    
    </summary>
    
    
      <category term="BZOJ" scheme="https://goseqh.tk/tags/BZOJ/"/>
    
      <category term="题解" scheme="https://goseqh.tk/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ阶段性汇总III</title>
    <link href="https://goseqh.tk/2017/09/07/BZOJ%E9%98%B6%E6%AE%B5%E6%80%A7%E6%B1%87%E6%80%BBIII/"/>
    <id>https://goseqh.tk/2017/09/07/BZOJ阶段性汇总III/</id>
    <published>2017-09-07T10:03:55.000Z</published>
    <updated>2017-11-02T07:04:53.761Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>Time passes so fast, but…<br><a id="more"></a></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p><title>Problem 4726. -- [POI2017]Sabota?</title><center><h2>4726: [POI2017]Sabota?</h2><span class="green">Time Limit: </span>20 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MBSec&nbsp;&nbsp;<span class="red">Special Judge</span><br><span class="green">Submit: </span>576&nbsp;&nbsp;<span class="green">Solved: </span>241<br>[<a href="submitpage.php?id=4726">Submit</a>][<a href="problemstatus.php?id=4726">Status</a>][<a href="bbs.php?id=4726">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>某个公司有n个人, 上下级关系构成了一个有根树。其中有个人是叛徒(这个人不知道是谁)。对于一个人, 如果他</div><p></p>
<div>下属(直接或者间接, 不包括他自己)中叛徒占的比例超过x，那么这个人也会变成叛徒，并且他的所有下属都会变</div>
<div>成叛徒。你要求出一个最小的x，使得最坏情况下，叛徒的个数不会超过k。</div>
<div></div>
<p></p></div><h3>Input</h3><div class="content"><div>第一行包含两个正整数n,k(1&lt;=k&lt;=n&lt;=500000)。</div>
<div>接下来n-1行，第i行包含一个正整数p[i+1]，表示i+1的父亲是p[i+1](1&lt;=p[i+1]&lt;=i)。</div>
<div></div>
<p></p></div><h3>Output</h3><div class="content"><div>输出一行一个实数x，误差在10^-6以内都被认为是正确的。</div>
<div></div>
<p></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">9 3<br>
1<br>
1<br>
2<br>
2<br>
2<br>
3<br>
7<br>
3</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">0.6666666667</span></div><h3>HINT</h3>
            <div class="content"><p><div>答案中的x实际上是一个无限趋近于2/3但是小于2/3的数</div><br>
<div>因为当x取2/3时，最坏情况下3，7，8，9都是叛徒，超过了k=3。</div><br>
</p><p></p><p></p></div><h3>Source</h3>
            <div class="content"><p><a href="problemset.php?search=鸣谢Claris上传">鸣谢Claris上传</a></p></div>


<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>树型DP</li>
<li>限制性问题</li>
</ul>
<hr>
<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>树型DP问题</strong></p>
<p>比较经典的树型DP，一种比较容易想到的方法就是使用二分法，但是这种方法比较卡常，因为正解不是这个。。。</p>
<p>正解就是直接DP一次，求出当前结点在刚好被占领（即自己成为叛徒）的前提下，它的比例最大是多少，因为我们要考虑最坏情况，然后对所有绝对不能被占领（即子树大小大于k）的结点取一个DP值的MAX即为答案</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line">  </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">   </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">500050</span>;</div><div class="line">   </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> to,nxt;  </div><div class="line">&#125;e[maxn&lt;&lt;<span class="number">1</span>];</div><div class="line">   </div><div class="line"><span class="keyword">int</span> head[maxn],cnt,n,K,size[maxn];</div><div class="line">   </div><div class="line"><span class="keyword">double</span> dp[maxn];</div><div class="line">   </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    e[++cnt].to=y;  </div><div class="line">    e[cnt].nxt=head[x];  </div><div class="line">    head[x]=cnt;  </div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">&#123;</div><div class="line">    size[x]++;  </div><div class="line">    <span class="keyword">bool</span> flag=<span class="literal">false</span>;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt) dfs(e[i].to),size[x]+=size[e[i].to],flag=<span class="literal">true</span>;  </div><div class="line">    <span class="keyword">if</span>(!flag) &#123; dp[x]=<span class="number">1</span>; <span class="keyword">return</span> ; &#125;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">int</span> y=e[i].to;  </div><div class="line">        dp[x]=max(dp[x],min(dp[y],(<span class="keyword">double</span>)size[y]/(<span class="keyword">double</span>)(size[x]<span class="number">-1</span>)));  </div><div class="line">    &#125;  </div><div class="line"><span class="comment">//  printf("%d %.7lf\n",x,dp[x]);</span></div><div class="line">&#125;</div><div class="line">   </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;K);  </div><div class="line">    <span class="keyword">int</span> x;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)  </div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x),addedge(x,i);  </div><div class="line">    dfs(<span class="number">1</span>);  </div><div class="line">    <span class="keyword">double</span> ans=<span class="number">0</span>;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)  </div><div class="line">        <span class="keyword">if</span>(size[i]&gt;K&amp;&amp;ans&lt;dp[i])  </div><div class="line">            ans=dp[i];  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.7lf"</span>,ans);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 500010</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 2147483647</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> llinf 4000000000000000000ll</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> For(i, x, y) for(int i = (x); i &lt; (y); i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, x, y) for(int i = (x); i &lt;= (y); i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, x, y) for(int i = (x); i &gt;= (y); i --)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> ch=getchar();<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">llread</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> ch=getchar();LL x=<span class="number">0</span>,f=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[M];</div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line"><span class="keyword">int</span> Size[M], fa[M], mx[M];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    G[x].push_back(y);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">get_size</span><span class="params">()</span></span>&#123;</div><div class="line">    rep(i, <span class="number">1</span>, n) Size[i] = <span class="number">1</span>;</div><div class="line">    drep(i, n, <span class="number">1</span>) Size[fa[i]] += Size[i];</div><div class="line">    rep(i, <span class="number">1</span>, n) Size[i] --;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</div><div class="line">    rep(i, <span class="number">1</span>, n) mx[i] = <span class="number">0</span>;</div><div class="line">    drep(i, n, <span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(Size[i]) <span class="keyword">if</span>(mx[i] / (<span class="keyword">double</span>)Size[i] - x &gt; eps) mx[i] = Size[i] + <span class="number">1</span>;</div><div class="line">        mx[i] = max(mx[i], <span class="number">1</span>);</div><div class="line">        mx[fa[i]] = max(mx[fa[i]], mx[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(mx[<span class="number">1</span>] &lt;= k) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//freopen("0input.in", "r", stdin);</span></div><div class="line">    n = read(), k = read();</div><div class="line">    rep(i, <span class="number">2</span>, n) add(fa[i] = read(), i);</div><div class="line">    get_size();<span class="comment">// rep(i, 1, n) printf("%d\n", Size[i]);</span></div><div class="line">    <span class="keyword">double</span> l = <span class="number">0.0</span>, r = <span class="number">1.0</span>, ans;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">abs</span>(r - l) &gt; eps)&#123;</div><div class="line">        <span class="keyword">double</span> mid = (l + r) / <span class="number">2.0</span>;</div><div class="line">        <span class="keyword">if</span>(check(mid)) r = (ans = mid);</div><div class="line">        <span class="keyword">else</span> l = mid;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.9lf"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>p.s. 其实上面两个代码都不是我写的。。。我写的二分卡不过去。。。</p>
<p><title>Problem 3004. -- 吊灯</title><center><h2>3004: 吊灯</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>123&nbsp;&nbsp;<span class="green">Solved: </span>64<br>[<a href="submitpage.php?id=3004">Submit</a>][<a href="problemstatus.php?id=3004">Status</a>][<a href="bbs.php?id=3004">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Alice家里有一盏很大的吊灯。所谓吊灯，就是由很多个灯泡组成。只有一个灯泡是挂在天花板上的，剩下的灯泡都是挂在其他的灯泡上的。也就是说，整个吊灯实际上类似于一棵树。其中编号为1的灯泡是挂在天花板上的，剩下的灯泡都是挂在编号小于自己的灯泡上的。</span></div><p></p>
<div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 现在，Alice想要办一场派对，她想改造一下这盏吊灯，将灯泡换成不同的颜色。她希望相同颜色的灯泡都是相连的，并且每一种颜色的灯泡个数都是相同的。</span></div>
<div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Alice希望你能告诉她，总共有哪些方案呢？</span></div>
<div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Alice是一个贪心的孩子，如果她发现方案不够多，或者太多了，就会很不高兴，于是她会尝试调整。对于编号为x(x&ne;1)的灯泡，如果原来是挂在编号为f[x]的灯泡上，那么Alice会把第x个灯泡挂到第 ( f[x] + 19940105 ) mod (x-1) + 1 个灯泡上。</span></div>
<div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 由于九在古汉语中表示极大的数，于是，Alice决定只调整9次。对于原始状态和每一次调整过的状态，Alice希望你依次告诉她每种状态下有哪些方案。</span></div></div><h3>Input</h3><div class="content"><div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 第一行一个整数n，表示灯泡的数量。</span></div>
<div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 接下来一行，有n-1个整数Ui，第i个数字表示第i+1个灯泡挂在了Ui个的下面。保证编号为1的灯泡是挂在天花板上的。数字之间用逗号&lsquo;，&rsquo;隔开且最后一个数字后面没有逗号。</span></div></div><h3>Output</h3><div class="content"><div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 对于10种状态下的方案，需要按照顺序依次输出。</span></div>
<div style="text-indent: 21pt"><span style="font-size: medium">对于每一种状态，需要先输出单独的一行，表示状态编号，如样例所示。</span></div>
<div style="text-indent: 21pt"><span style="font-size: medium">之后若干行，每行1个整数，表示划分方案中每种颜色的灯泡个数。</span></div>
<div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 按升序输出。</span></div>
<div><span style="font-size: medium">&nbsp;</span></div></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">6<br>
1,2,3,4,5<br>
 <br>
</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">Case #1:<br>
1<br>
2<br>
3<br>
6<br>
Case #2:<br>
1<br>
2<br>
6<br>
Case #3:<br>
1<br>
3<br>
6<br>
Case #4:<br>
1<br>
3<br>
6<br>
Case #5:<br>
1<br>
3<br>
6<br>
Case #6:<br>
1<br>
2<br>
6<br>
Case #7:<br>
1<br>
2<br>
3<br>
6<br>
Case #8:<br>
1<br>
6<br>
Case #9:<br>
1<br>
2<br>
6<br>
Case #10:<br>
1<br>
3<br>
6<br>
</span></div><h3>HINT</h3>
            <div class="content"><p></p><p><br><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 对于100%的数据，n&lt;=1.2*106。</p><p></p></div><h3>Source</h3>
            <div class="content"><p><a href="problemset.php?search="></a></p></div>


<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>树</li>
<li>划分问题</li>
<li>思维题</li>
</ul>
<hr>
<h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>树上等大小划分问题</strong></p>
<p>前几天noip模拟赛几乎一毛一样的题。。。</p>
<p>首先可以知道，对于一种大小，如果可行，则只有一种安排的方案</p>
<p>然后，如果存在一个结点的所有儿子结点的子树大小模块大小的和大于这个结点的子树大小模块大小的值，那么无解</p>
<p>进一步观察，我们可以发现，如果一个结点的子树可以被正好地划分为一些大小为块大小的块，那么这个点的子树大小一定是块大小的倍数</p>
<p>所以，我们只要保证这样的结点的数量大于点等于块的数量就行了（其实不能大于），因为每一个块，都对应且仅对应一个这样的结点</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><p>注意不要使用DFS来求siz数组，否则会T。。。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1300005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m, k;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> save[maxn];</div><div class="line"><span class="keyword">int</span> ct = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">preprocess</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> con = (<span class="keyword">int</span>) <span class="built_in">sqrt</span>(n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= con; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) save[ct++] = i, save[ct++] = n / i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (con * con == n) ct--;</div><div class="line">    sort(save, save + ct);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"><span class="keyword">int</span> siz[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    siz[x] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == f[x]) <span class="keyword">continue</span>;</div><div class="line">        DFS(op);</div><div class="line">        siz[x] += siz[op];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(h, <span class="number">0</span>, <span class="keyword">sizeof</span>(h));</div><div class="line">    cnt = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) Add_Edge(i, f[i]);</div><div class="line">    <span class="comment">//DFS(1);</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) siz[i] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">2</span>; i--) siz[f[i]] += siz[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span>(num));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) num[siz[i]]++;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ct; i++)&#123;</div><div class="line">        <span class="keyword">int</span> now = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j += save[i]) now += num[j];</div><div class="line">        <span class="keyword">if</span> (now &gt;= n / save[i]) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, save[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">transform</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) </div><div class="line">        f[i] = (f[i] + <span class="number">19940105</span>) % (i - <span class="number">1</span>) + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    read(n);</div><div class="line">    preprocess();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) read(f[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, k + <span class="number">1</span>);</div><div class="line">        init();</div><div class="line">        work();</div><div class="line">        transform();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 2662. -- [BeiJing wc2012]冻结 </title><center><h2>2662: [BeiJing wc2012]冻结 </h2><span class="green">Time Limit: </span>3 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>1010&nbsp;&nbsp;<span class="green">Solved: </span>544<br>[<a href="submitpage.php?id=2662">Submit</a>][<a href="problemstatus.php?id=2662">Status</a>][<a href="bbs.php?id=2662">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p><span style="font-size: medium">&nbsp; &ldquo;我要成为魔法少女！&rdquo;&nbsp;&nbsp; <br>
&nbsp; &ldquo;那么，以灵魂为代价，你希望得到什么？&rdquo; <br>
&ldquo;我要将有关魔法和奇迹的一切，封印于卡片之中&bdquo;&bdquo;&rdquo;&nbsp;&nbsp; <br>
&nbsp;&nbsp; <br>
&nbsp; 在这个愿望被实现以后的世界里，人们享受着魔法卡片（SpellCard，又名符<br>
卡）带来的便捷。 <br>
&nbsp;<br>
现在，不需要立下契约也可以使用魔法了！你还不来试一试？ <br>
&nbsp; 比如，我们在魔法百科全书（Encyclopedia&nbsp; of&nbsp; Spells）里用&ldquo;freeze&rdquo;作为关<br>
键字来查询，会有很多有趣的结果。 <br>
例如，我们熟知的Cirno，她的冰冻魔法当然会有对应的 SpellCard 了。 当然，<br>
更加令人惊讶的是，居然有冻结时间的魔法，Cirno 的冻青蛙比起这些来真是小<br>
巫见大巫了。 <br>
这说明之前的世界中有很多魔法少女曾许下控制时间的愿望，比如 Akemi <br>
Homura、Sakuya Izayoi、&bdquo;&bdquo; <br>
当然，在本题中我们并不是要来研究历史的，而是研究魔法的应用。 <br>
&nbsp;<br>
我们考虑最简单的旅行问题吧：&nbsp; 现在这个大陆上有 N 个城市，M 条双向的<br>
道路。城市编号为 1~N，我们在 1 号城市，需要到 N 号城市，怎样才能最快地<br>
到达呢？ <br>
&nbsp; 这不就是最短路问题吗？我们都知道可以用 Dijkstra、Bellman-Ford、<br>
Floyd-Warshall等算法来解决。 <br>
&nbsp; 现在，我们一共有 K 张可以使时间变慢 50%的 SpellCard，也就是说，在通<br>
过某条路径时，我们可以选择使用一张卡片，这样，我们通过这一条道路的时间<br>
就可以减少到原先的一半。需要注意的是： <br>
&nbsp; 1. 在一条道路上最多只能使用一张 SpellCard。 <br>
&nbsp; 2. 使用一张SpellCard 只在一条道路上起作用。 <br>
&nbsp; 3. 你不必使用完所有的 SpellCard。 <br>
&nbsp;&nbsp; <br>
&nbsp; 给定以上的信息，你的任务是：求出在可以使用这不超过 K 张时间减速的<br>
SpellCard 之情形下，从城市1 到城市N最少需要多长时间。 </span></p><p></p>
<p></p><p></p></div><h3>Input</h3><div class="content"><p><span style="font-size: medium"><br>
第一行包含三个整数：N、M、K。 <br>
接下来 M 行，每行包含三个整数：Ai、Bi、Timei，表示存在一条 Ai与 Bi之<br>
间的双向道路，在不使用 SpellCard 之前提下，通过它需要 Timei的时间。 </span></p><p></p>
<p></p><p></p></div><h3>Output</h3><div class="content"><p><span style="font-size: medium">输出一个整数，表示从1 号城市到 N号城市的最小用时。 </span></p><p></p>
<p></p><p></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">4 4 1 <br>
1 2 4 <br>
4 2 6 <br>
1 3 8 <br>
3 4 8 <br>
</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">7 <br>
【样例1 解释】 <br>
  在不使用 SpellCard 时，最短路为 1à2à4，总时间为 10。现在我们可<br>
以使用 1 次 SpellCard，那么我们将通过 2à4 这条道路的时间减半，此时总<br>
时间为7。 <br>
</span></div><h3>HINT</h3>
            <div class="content"><p></p><p>对于100%的数据：1&nbsp; &le;&nbsp; K&nbsp; &le;&nbsp; N &le;&nbsp; 50，M&nbsp; &le;&nbsp; 1000。 <br><br>
&nbsp; 1&le;&nbsp; Ai，Bi &le;&nbsp; N，2 &le;&nbsp; Timei&nbsp; &le;&nbsp; 2000。 <br><br>
为保证答案为整数，保证所有的 Timei均为偶数。 <br><br>
所有数据中的无向图保证无自环、重边，且是连通的。&nbsp;&nbsp;&nbsp;<br><br>
&nbsp;</p>&lt;/p&gt;&lt;/div&gt;<h3>Source</h3><br>            <div class="content"><p><a href="problemset.php?search="></a></p></div><p></p>
<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>图论</li>
<li>最短路</li>
<li>拆点法</li>
</ul>
<hr>
<h2 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>拆点/边法问题</strong></p>
<p>这道题一开始SB直接写的最短路，然后把最短路上的边由大到小进行处理，很显然这样是错的对吧。。。</p>
<p>但是不知为什么，刚发现这样是错误的，就想到了正解。。。可能突然发现边减半以后就是那个样子，不受其他条件影响，所以突然想这样搞，看数据范围好像也确实是这样搞的。。。</p>
<p>正解就是我们把点拆开，使点拥有当前经过了多少减半边的信息，这样就会有（$n * ( k + 1)$)个点，然后随便连一下边，本题就搞定了。。。</p>
<p>所以有的时候灵感就在于一瞬间。。。</p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m, k;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to, len;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to, <span class="keyword">int</span> len) : next(next), to(to), len(len)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to, <span class="keyword">int</span> len)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to, len);</div><div class="line">    h[fr] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">add</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x, y, len;</div><div class="line">    add(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> len) : x(x), y(y), len(len)&#123;&#125;</div><div class="line">    add()&#123;&#125;</div><div class="line">&#125;save[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; spfa;</div><div class="line">    spfa.push(<span class="number">0</span>);</div><div class="line">    vis[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    d[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n * (k + <span class="number">1</span>); i++) d[i] = INF;</div><div class="line">    <span class="keyword">while</span> (!spfa.empty())&#123;</div><div class="line">        <span class="keyword">int</span> op = spfa.front(); spfa.pop();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[op]; i; i = e[i].next)&#123;</div><div class="line">            <span class="keyword">int</span> k = e[i].to;</div><div class="line">            <span class="keyword">if</span> (d[k] &gt; d[op] + e[i].len)&#123;</div><div class="line">                d[k] = d[op] + e[i].len;</div><div class="line">                <span class="keyword">if</span> (!vis[k]) spfa.push(k), vis[k] = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        vis[op] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> minnum = INF;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; i++) minnum = min(minnum, d[(n - <span class="number">1</span>) * (k + <span class="number">1</span>) + i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, minnum);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="keyword">int</span> op1 = (save[i].x - <span class="number">1</span>) * (k + <span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> op2 = (save[i].y - <span class="number">1</span>) * (k + <span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num = <span class="number">0</span>; num &lt; k; num++)&#123;</div><div class="line">            Add_Edge(op1 + num, op2 + num + <span class="number">1</span>, save[i].len &gt;&gt; <span class="number">1</span>);</div><div class="line">            Add_Edge(op2 + num, op1 + num + <span class="number">1</span>, save[i].len &gt;&gt; <span class="number">1</span>);</div><div class="line">            Add_Edge(op1 + num, op2 + num, save[i].len);</div><div class="line">            Add_Edge(op2 + num, op1 + num, save[i].len);</div><div class="line">        &#125;</div><div class="line">        Add_Edge(op1 + k, op2 + k, save[i].len);</div><div class="line">        Add_Edge(op2 + k, op1 + k, save[i].len);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y, w;</div><div class="line">    read(n), read(m), read(k);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        read(x), read(y), read(w);</div><div class="line">        save[i] = add(x, y, w);</div><div class="line">    &#125;</div><div class="line">    build();</div><div class="line">    SPFA();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 4723. -- [POI2017]Flappy Bird</title><center><h2>4723: [POI2017]Flappy Bird</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>394&nbsp;&nbsp;<span class="green">Solved: </span>160<br>[<a href="submitpage.php?id=4723">Submit</a>][<a href="problemstatus.php?id=4723">Status</a>][<a href="bbs.php?id=4723">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>《飞扬的小鸟》是一款风靡的小游戏。在游戏中，小鸟一开始位于(0,0)处，它的目标是飞到横坐标为X的某个位置</div><p></p>
<div>上。每一秒，你可以选择点击屏幕，那么小鸟会从(x,y)飞到(x+1,y+1)，或者不点击，那么小鸟会飞到(x+1,y-1)</div>
<div>。在游戏中还有n个障碍物，用三元组(x[i],a[i],b[i])描述，表示在直线x=x[i]上，y&lt;=a[i]或者y&gt;=b[i]的部分</div>
<div>都是障碍物，碰到或者擦边都算游戏失败。请求出小鸟从(0,0)飞到目的地最少需要点击多少次屏幕。</div>
<div></div>
<p></p></div><h3>Input</h3><div class="content"><div>第一行包含两个整数n(0&lt;=n&lt;=500000),X(1&lt;=n&lt;=10^9)。</div>
<div>接下来n行，每行三个整数x[i],a[i],b[i](0&lt;x[i]&lt;X，-10^9&lt;=a[i]&lt;b[i]&lt;=10^9)。</div>
<div>数据保证x[i]&lt;x[i+1]。</div>
<div></div>
<p></p></div><h3>Output</h3><div class="content"><div>如果无论如何都飞不到目的地，输出NIE，否则输出点击屏幕的最少次数。</div>
<div></div>
<p></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">4 11<br>
4 1 4<br>
7 -1 2<br>
8 -1 3<br>
9 0 2</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">5</span></div><h3>HINT</h3>
            <div class="content"><p></p><p><img src="/JudgeOnline/upload/201611/flahint.png" width="314" height="187" alt=""></p><br>
<p></p><p></p></div><h3>Source</h3>
            <div class="content"><p><a href="problemset.php?search=鸣谢Claris上传">鸣谢Claris上传</a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>限制性问题</li>
<li>思维题</li>
</ul>
<hr>
<h2 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>上下界最优问题</strong></p>
<p>首先%%%JCY大佬直接用手机1A  Orz。。。</p>
<p>而我这垃圾最后写不过还去要的数据。。。</p>
<p>主要是想到把问题化成解析几何问题，求出直线方程，这样会方便许多，然后直接求出大于号形的可活动的范围，然后为了使点击次数最少，直接沿着界下面的那条边一直点即可</p>
<p>注意没有障碍物的情况，这是线段树会炸。。。然而本题其实后缀极值就可以。。。</p>
<p>除此以外还有挺多的情况，比如一开始就在界的外面什么的，这些都不成立</p>
<h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><p>注意：线段树不能在$n=0$的时候使用！！！<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, X;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">obj</span>&#123;</span></div><div class="line">    LL pos, up, low;</div><div class="line">    obj(LL pos, LL up, LL low) : pos(pos), up(up) ,low(low)&#123;&#125;</div><div class="line">    obj()&#123;&#125;</div><div class="line">&#125;save[maxn];</div><div class="line"></div><div class="line"></div><div class="line">LL maxnum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line">LL minnum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</div><div class="line">    maxnum[o] = max(maxnum[o &lt;&lt; <span class="number">1</span>], maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">    minnum[o] = min(minnum[o &lt;&lt; <span class="number">1</span>], minnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) &#123;</div><div class="line">        maxnum[o] = save[l].up - save[l].pos + <span class="number">1</span>;</div><div class="line">        minnum[o] = save[l].low + save[l].pos - <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    init(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    init(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">find_min</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy) <span class="keyword">return</span> minnum[o];</div><div class="line">    <span class="keyword">int</span> mid =((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    LL ans = INF;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) ans = min(ans, find_min(l, mid, o &lt;&lt; <span class="number">1</span>));</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) ans = min(ans, find_min(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>));</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">find_max</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy) <span class="keyword">return</span> maxnum[o];</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    LL ans = -INF;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) ans = max(ans, find_max(l, mid, o &lt;&lt; <span class="number">1</span>));</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) ans = max(ans, find_max(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>));</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    LL now = <span class="number">0</span>;</div><div class="line">    LL nowy = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        qx = i, qy = n;</div><div class="line">        <span class="keyword">int</span> mx = find_max(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> mi = find_min(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (now + mx &gt; nowy || nowy &gt; -now + mi) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"NIE"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ((LL)mi - mx &lt; (save[i].pos &lt;&lt; <span class="number">1</span>)) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"NIE"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (mi - mx == (save[i].pos &lt;&lt; <span class="number">1</span>))&#123;</div><div class="line">            <span class="keyword">if</span> ((save[i].pos + save[i].pos + mx) &amp; <span class="number">1</span>) &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"NIE"</span>);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        LL rec = (nowy - (now + mx)) &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (now + rec &gt; save[i].pos)&#123;</div><div class="line">            nowy -= save[i].pos - now;</div><div class="line">            now = save[i].pos;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            now += rec;</div><div class="line">            nowy -= rec;</div><div class="line">            ans += save[i].pos - now;</div><div class="line">            nowy += save[i].pos - now;</div><div class="line">            now = save[i].pos;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch != <span class="string">'-'</span> &amp;&amp; !<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10L</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    read(n), read(X);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">       read(save[i].pos), read(save[i].up), read(save[i].low);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"0"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    init(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><title>Problem 4724. -- [POI2017]Podzielno</title><center><h2>4724: [POI2017]Podzielno</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>293&nbsp;&nbsp;<span class="green">Solved: </span>129<br>[<a href="submitpage.php?id=4724">Submit</a>][<a href="problemstatus.php?id=4724">Status</a>][<a href="bbs.php?id=4724">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>B进制数，每个数字i(i=0,1,...,B-1)有a[i]个。你要用这些数字组成一个最大的B进制数X(不能有前导零，不需要</div><p></p>
<div>用完所有数字)，使得X是B-1的倍数。q次询问，每次询问X在B进制下的第k位数字是什么(最低位是第0位)。</div>
<p></p></div><h3>Input</h3><div class="content"><div>第一行包含两个正整数B(2&lt;=B&lt;=10^6),q(1&lt;=q&lt;=10^5)。</div>
<div>第二行包含B个正整数a[0],a[1],a[2],...,a[B-1](1&lt;=a[i]&lt;=10^6)。</div>
<div>接下来q行，每行一个整数k(0&lt;=k&lt;=10^18)，表示一个询问。</div>
<p></p></div><h3>Output</h3><div class="content"><div>输出q行，每行一个整数，依次回答每个询问，如果那一位不存在，请输出-1。</div>
<p></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">3 3<br>
1 1 1<br>
0<br>
1<br>
2</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">0<br>
2<br>
-1</span></div><h3>HINT</h3>
            <div class="content"><p></p></div><h3>Source</h3>
            <div class="content"><p><a href="problemset.php?search=鸣谢Claris上传">鸣谢Claris上传</a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>进制问题</li>
<li>思维题</li>
</ul>
<hr>
<h2 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>进制问题</strong></p>
<p>初始想法，题目要求即是所有位上的数字之和为$B-1$的倍数，所以我们肯定是要先让位数最多，然后再让大的数字尽可能多，但是这样要考虑的就太多了，不好处理</p>
<p>我们先把每个数都预留一个出去，这样剩下的数就全都可以选了，因为余数可以用预留的数抵消，剩下的数字两两配对</p>
<p>这样，我们就至少可以选$n - 1$个数了，如果所有数字的和是$B-1$的倍数，那么显然全都可以选</p>
<p>所以我们也同时证明了这样选一定是最优的（构法证明），因为所有数字的和不是$B-1$的倍数时，本来就是至多选$n-1$个</p>
<p>所以数字也就随之固定了，直接前缀和处理二分查找即可回答询问</p>
<h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line">LL line[maxn];</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    LL x;</div><div class="line">    read(n), read(k);</div><div class="line">    LL sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) read(line[i]), sum = (sum + line[i] * i % (n - <span class="number">1</span>)) % (n - <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (sum) line[sum]--;</div><div class="line">    <span class="comment">/*for (int i = n - 1; i &gt;= 0; i--)&#123;</span></div><div class="line">        sline[i] = line[i] + sline[i + 1];</div><div class="line">    &#125;</div><div class="line">    reverse(sline, sline + n);</div><div class="line">    for (int i = 1; i &lt;= k; i++)&#123;</div><div class="line">        scanf("%d", &amp;x);</div><div class="line">        printf("%d\n", n - 1 - (lower_bound(sline, sline + n, x) - sline));</div><div class="line">    &#125;*/</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) line[i] += line[i - <span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</div><div class="line">        read(x);</div><div class="line">        x++;</div><div class="line">        <span class="keyword">int</span> pos = lower_bound(line, line + n, x) - line;</div><div class="line">        <span class="keyword">if</span> (pos &gt;= n) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, pos);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 4407. -- 于神之怒加强版</title><center><h2>4407: 于神之怒加强版</h2><span class="green">Time Limit: </span>80 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>512 MB<br><span class="green">Submit: </span>779&nbsp;&nbsp;<span class="green">Solved: </span>368<br>[<a href="submitpage.php?id=4407">Submit</a>][<a href="problemstatus.php?id=4407">Status</a>][<a href="bbs.php?id=4407">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>给下N,M,K.求</div><p></p>
<div><img src="http://218.106.205.134/uploads/aa.png" height="px" width="px"></div>
<div></div>
<div></div>
<p></p></div><h3>Input</h3><div class="content"><div>输入有多组数据，输入数据的第一行两个正整数T,K，代表有T组数据，K的意义如上所示，下面第二行到第T+1行，每行为两个正整数N,M，其意义如上式所示。</div>
<p></p></div><h3>Output</h3><div class="content"><div>如题</div>
<p></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">1 2<br>
3 3 </span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">20<br>
</span></div><h3>HINT</h3>
            <div class="content"><p></p><p>1&lt;=N,M,K&lt;=5000000,1&lt;=T&lt;=2000</p><br>
<p>题解：<a href="/JudgeOnline/upload/201603/4407.rar">JudgeOnline/upload/201603/4407.rar</a></p><br>
<p></p><p></p></div><h3>Source</h3>
            <div class="content"><p><a href="problemset.php?search=命题人：成都七中张耀楠，鸣谢excited上传。">命题人：成都七中张耀楠，鸣谢excited上传。</a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>数学</li>
<li>数论</li>
<li>莫比乌斯反演</li>
</ul>
<hr>
<h2 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>莫比乌斯反演基础题</strong></p>
<p>一道水题，只要直接莫比乌斯反演套路即可解决，如果觉得本题有难度，请移步<a href="https://goseqh.tk/2017/06/30/莫比乌斯反演总结/">《莫比乌斯反演总结》</a></p>
<p>其实只要想到那个大函数可以线性筛就行了，不懂的看一遍上面的总结然后自己推公式</p>
<p>然而忘了线性筛T了一发。。。</p>
<h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 5000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line">LL F[maxn];</div><div class="line">LL mi[maxn];</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">fast_power</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">1</span>, con = x;</div><div class="line">    <span class="keyword">while</span> (y)&#123;</div><div class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ans = ans * con % M;</div><div class="line">        con = con * con % M;</div><div class="line">        y &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    F[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i])&#123;</div><div class="line">            p[cnt++] = i;</div><div class="line">            F[i] = (fast_power(i, k) - <span class="number">1</span> + M) % M;</div><div class="line">            mi[i] = fast_power(i, k);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (p[j] * i &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * p[j]] = <span class="number">1</span>;</div><div class="line">            F[i * p[j]] = F[i] * F[p[j]] % M;</div><div class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) &#123;</div><div class="line">                F[i * p[j]] = F[i] * mi[p[j]] % M;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*for (int i = 1; i &lt; maxn; i++)&#123;</span></div><div class="line">        for (int j = 1; i * j &lt; maxn; j++)&#123;</div><div class="line">            F[i * j] = (F[i * j] + mu[i] * mi[j] % M) % M;</div><div class="line">        &#125;</div><div class="line">    &#125;*/</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) F[i] = (F[i] + F[i - <span class="number">1</span>]) % M;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= min(n, m); i++)&#123;</div><div class="line">        <span class="keyword">int</span> next = min(n / (n / i), m / (m / i));</div><div class="line">        ans = (ans + ((F[next] - F[i - <span class="number">1</span>]) % M + M) % M * (m / i) % M * (n / i) % M) % M;</div><div class="line">        i = next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> T, n, m;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;T, &amp;k);</div><div class="line">    init();</div><div class="line">    <span class="keyword">while</span> (T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        work(n, m);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 1922. -- [Sdoi2010]大陆争霸</title><center><h2>1922: [Sdoi2010]大陆争霸</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>64 MB<br><span class="green">Submit: </span>1965&nbsp;&nbsp;<span class="green">Solved: </span>869<br>[<a href="submitpage.php?id=1922">Submit</a>][<a href="problemstatus.php?id=1922">Status</a>][<a href="bbs.php?id=1922">Discuss</a>]</center></p><h3>Description</h3><div class="content">在一个遥远的世界里有两个国家：位于大陆西端的杰森国和位于大陆东端的
克里斯国。两个国家的人民分别信仰两个对立的神：杰森国信仰象征黑暗和毁灭
的神曾·布拉泽，而克里斯国信仰象征光明和永恒的神斯普林·布拉泽。 
幻想历 8012年 1月，杰森国正式宣布曾·布拉泽是他们唯一信仰的神，同
时开始迫害在杰森国的信仰斯普林·布拉泽的克里斯国教徒。 
幻想历 8012年 3月2日，位于杰森国东部小镇神谕镇的克里斯国教徒发动
起义。 
幻想历 8012年 3月7日，神谕镇的起义被杰森国大军以残酷手段镇压。 
幻想历 8012年 3月8日，克里斯国对杰森国宣战。由数十万大军组成的克
里斯军团开至两国边境，与杰森军团对峙。 
幻想历 8012年 4月，克里斯军团攻破杰森军团防线进入神谕镇，该镇幸存
的克里斯国教徒得到解放。 
战争随后进入胶着状态，旷日持久。战况惨烈，一时间枪林弹雨，硝烟弥漫，
民不聊生。 
幻想历 8012年 5月12日深夜，斯普林·布拉泽降下神谕：“Trust me, earn 
eternal life.”克里斯军团士气大增。作为克里斯军团的主帅，你决定利用这一机
会发动奇袭，一举击败杰森国。具体地说，杰森国有 N 个城市，由 M条单向道
路连接。神谕镇是城市 1而杰森国的首都是城市 N。你只需摧毁位于杰森国首都
的曾·布拉泽大神殿，杰森国的信仰，军队还有一切就都会土崩瓦解，灰飞烟灭。 
为了尽量减小己方的消耗，你决定使用自爆机器人完成这一任务。唯一的困
难是，杰森国的一部分城市有结界保护，不破坏掉结界就无法进入城市。而每个
城市的结界都是由分布在其他城市中的一些结界发生器维持的，如果想进入某个
城市，你就必须破坏掉维持这个城市结界的所有结界发生器。 
现在你有无限多的自爆机器人，一旦进入了某个城市，自爆机器人可以瞬间
引爆，破坏一个目标（结界发生器，或是杰森国大神殿），当然机器人本身也会
一起被破坏。你需要知道：摧毁杰森国所需的最短时间。 
 </div><h3>Input</h3><div class="content">第一行两个正整数 N, M。 
接下来 M行，每行三个正整数 ui, vi, wi，表示有一条从城市ui到城市 vi的单
向道路，自爆机器人通过这条道路需要 wi的时间。 
之后 N 行，每行描述一个城市。首先是一个正整数 li，维持这个城市结界所
使用的结界发生器数目。之后li个1~N 之间的城市编号，表示每个结界发生器的
位置。如果 Li = 0，则说明该城市没有结界保护，保证L1 = 0  。 </div><h3>Output</h3><div class="content">仅包含一个正整数 ，击败杰森国所需的最短时间。 </div><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">6 6 <br>
1 2 1 <br>
1 4 3 <br>
2 3 1 <br>
2 5 2 <br>
4 6 2 <br>
5 3 2 <br>
0 <br>
0 <br>
0 <br>
1 3 <br>
0 <br>
2 3 5 </span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">5<br>
<br>
<img border="0" src="images/1922.jpg"> </span></div><h3>HINT</h3><br>            <div class="content"><p>对于 20%的数据，满足 N≤15，M≤50； <br>
对于 50%的数据，满足 N≤500，M≤6,000； <br>
对于 100%的数据，满足 N≤3,000，M≤70,000，1≤wi≤108<br>
。 <br>
输入数据保证一定有解，且不会存在维持某个城市结界的结界发生器在这个<br>
城市内部。 <br>
连接两个城市的道路可能不止一条， 也可能存在一个城市自己到自己的道路。</p></div><h3>Source</h3><br>            <div class="content"><p><a href="problemset.php?search=第一轮Day1">第一轮Day1</a></p></div><p></p>
<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>图论</li>
<li>最短路</li>
<li>限制性问题</li>
</ul>
<hr>
<h2 id="题目分析-6"><a href="#题目分析-6" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>带限制最短路问题</strong></p>
<p>高二的小伙伴们做的题。。。</p>
<p>本题其实是不错的，可以很好地增进对各种最短路算法的深层理解</p>
<p>本题就是一个最短路，但是绝对不能用SPFA，因为SPFA会重复入队，这样用一个点更新被它搞掉结界的城市的距离的时候就不是它真正的最短距离，就会发生错误（除非每次入队都更新一遍，但是那样不太好是吧，复杂度比较玄学，反正我没写。。。）</p>
<p>所以，我们就要使用堆优化的Dijkstra解决本题，但是我们必须开两个距离数组，一个是它的可进入时间，另一个是抵达时间，这两个取MAX才是进入它的真正时间</p>
<p>如果我就是想开一个呢？为什么不行？</p>
<p>这是因为，一个城市可能它还没有被访问到，但是它的结界已经被干掉了，这时它的距离数组便是最后一个解放了它的城市的距离</p>
<p>但是在最短路更新到它的时候，我们又会把这个距离变小，并且难以维护抵达它的时间，这个问题好像很难解决，所以这样就发生了错误</p>
<p>同时，我们也能明白一个事实，Dijkstra每次更新的最短路的长度不一定是所有待更新的最短路中长度最短的</p>
<p>最后还有一点，用STL代替当作堆的时候，我们不能直接插入数字，而是要维护结构体，因为如果插入数字，那么数字的排序方法一定关联了外部数组，而外部数组又常常是变化的（比如距离数组），所以就会发生STL内部的错误，而且这样的错误很难被发现，所以一定要小心</p>
<p>总结一下，本题的知识点有如下三点：</p>
<ul>
<li>SPFA最短路更新时会重复入队，所以距离数组在算法结束之前并非真正的最短距离</li>
<li>Dijkstra算法每次更新的最短路的长度不一定是所有待更新的最短路中长度最短的</li>
<li>使用STL对数据进行维护时，尽量不要插入排序方法与外部元素关联的元素，否则会发生内部错误</li>
</ul>
<p>还是很不错的O(∩_∩)O~</p>
<h2 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 3005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000000000000005L</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Pii pair<span class="meta-string">&lt;LL, LL&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> deg[maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to, len;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to, <span class="keyword">int</span> len) : next(next), to(to), len(len)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxm &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to, <span class="keyword">int</span> len)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to, len);</div><div class="line">    h[fr] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL d[maxn];</div><div class="line">LL d2[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; save[maxn];</div><div class="line"></div><div class="line">priority_queue&lt;Pii, <span class="built_in">vector</span>&lt;Pii&gt;, greater&lt;Pii&gt; &gt; heap;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) d[i] = INF;</div><div class="line">    heap.push(Pii(<span class="number">0</span>, <span class="number">1</span>));</div><div class="line">    <span class="keyword">while</span> (!heap.empty())&#123;</div><div class="line">        <span class="keyword">int</span> op = heap.top().second;heap.pop();</div><div class="line">        <span class="keyword">if</span> (vis[op]) <span class="keyword">continue</span>;</div><div class="line">        vis[op] = <span class="number">1</span>;</div><div class="line"></div><div class="line">        LL mx = max(d[op], d2[op]);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[op]; i; i = e[i].next)&#123;</div><div class="line">            <span class="keyword">int</span> k = e[i].to;</div><div class="line">            <span class="keyword">if</span> (d[k] &gt; mx + e[i].len)&#123;</div><div class="line">                d[k] = mx + e[i].len;</div><div class="line">                <span class="keyword">if</span> (deg[k]) <span class="keyword">continue</span>;</div><div class="line">                heap.push(Pii(max(d[k], d2[k]), k));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; save[op].size(); j++)&#123;</div><div class="line">            deg[save[op][j]]--;</div><div class="line">            d2[save[op][j]] = max(d2[save[op][j]], mx);</div><div class="line">            <span class="keyword">if</span> (!deg[save[op][j]]) heap.push(Pii(max(d[save[op][j]], d2[save[op][j]]), save[op][j]));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, max(d[n], d2[n]));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y, w, op;</div><div class="line">    read(n), read(m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        read(x), read(y), read(w);</div><div class="line">        <span class="keyword">if</span> (x == y) <span class="keyword">continue</span>;</div><div class="line">        Add_Edge(x, y, w);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        read(deg[i]);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; deg[i]; j++)&#123;</div><div class="line">            read(op);</div><div class="line">            save[op].pb(i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    Dijkstra();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 1168. -- [Baltic2008]Gloves</title><center><h2>1168: [Baltic2008]Gloves</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>413&nbsp;&nbsp;<span class="green">Solved: </span>120<br>[<a href="submitpage.php?id=1168">Submit</a>][<a href="problemstatus.php?id=1168">Status</a>][<a href="bbs.php?id=1168">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p>手套被放在了两个抽屉里, 所有的左手套放在左边的抽屉里, 所有的右手套放在右边的抽屉里．手套一共有N种颜色, 已知两个抽屉每种颜色的手套各有多少只, 如果随便在左边拿一只, 右边拿一只 很可能会造成拿到一只红色的左手套和一只蓝色右手套... 现想知道应该从左边的抽屉取出多少只左手套(设为x) 右边的抽屉取出多少只右手套(设为y), 满足至少可以找到一对匹配的手套(即颜色相同), 并且x + y最小 如果有多个(x, y)满足x + y最小, 你希望满足x尽可能的小不妨设 每个抽屉里每只手套被取出的概率是等价的．输入文件输入文件第一行中有一个正整数N,表示颜色的种数．第二行有N个非负整数, 表示左抽屉中每种颜色的左手套的个数．第三行有N个非负整数, 表示右抽屉中每种颜色的右手套的个数．输出文件你需要输出满足题目条件的(x, y)．</p></div><h3>Input</h3><div class="content"><p>输入文件第一行中有一个正整数N,表示颜色的种数．第二行有N个非负整数, 表示左抽屉中每种颜色的左手套的个数．第三行有N个非负整数, 表示右抽屉中每种颜色的右手套的个数．</p></div><h3>Output</h3><div class="content"><p>输出满足题目条件的(x, y)．</p></div><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">4<br>
0 7 1 6<br>
1 5 0 6</span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">2 8</span></div><h3>HINT</h3><br>            <div class="content"><p></p><p>100%的测试数据, N &lt;= 20, 0 &lt;= ai, bi &lt;= 108．<br><br>
</p><p></p></div><h3>Source</h3><br>            <div class="content"><p><a href="problemset.php?search="></a></p></div><p></p>
<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>凸壳扫描</li>
<li>单调栈</li>
</ul>
<hr>
<h2 id="题目分析-7"><a href="#题目分析-7" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>凸壳扫描问题</strong></p>
<p>看到本题时内心一惊，这。。。这不是抽屉原理吗？？？那应该非常的水吧？？？</p>
<p>然而本题卡了半天，才知道世界上还有这么多变态的题目</p>
<p>本题题解大概就是把各种颜色分成两个集合，然后用单调栈扫描</p>
<p>但其实有着无数的细节。。。内心是崩溃的。。。需要绕好半天才能想明白</p>
<p>把题解挂上吧：<br>

	<div class="row">
    <embed src="booklet.pdf" width="120%" height="660" type="application/pdf">
	</div>


</p>
<h2 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;  </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;  </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span><span class="keyword">int</span> x,y;&#125;p[<span class="number">1</span>&lt;&lt;<span class="number">20</span>|<span class="number">1</span>];  </div><div class="line"><span class="keyword">int</span> n,a[<span class="number">21</span>],b[<span class="number">21</span>],cnt,q[<span class="number">1</span>&lt;&lt;<span class="number">20</span>|<span class="number">1</span>],t=<span class="number">1</span>,x,sa,sb;  </div><div class="line">LL s=<span class="number">1e10</span>;  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">if</span>(x==n+<span class="number">1</span>)&#123;p[++cnt].x=l,p[cnt].y=r;<span class="keyword">return</span>;&#125;  </div><div class="line">    dfs(x+<span class="number">1</span>,l+a[x],r),dfs(x+<span class="number">1</span>,l,r+b[x]);  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(point a,point b)&#123;<span class="keyword">return</span> a.x==b.x?a.y&gt;b.y:a.x&lt;b.x;&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);  </div><div class="line">    <span class="keyword">int</span> tot=n; n=<span class="number">0</span>;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)  </div><div class="line">    <span class="keyword">if</span>(!a[i]||!b[i]) sa+=a[i],sb+=b[i];  </div><div class="line">    <span class="keyword">else</span> a[++n]=a[i],b[n]=b[i];  </div><div class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);  </div><div class="line">    sort(p+<span class="number">1</span>,p+cnt+<span class="number">1</span>);  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">while</span>(t&amp;&amp;p[q[t]].y&lt;=p[i].y)t--;  </div><div class="line">        q[++t]=i;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t;i++)  </div><div class="line">    &#123;  </div><div class="line">        LL tmp=(LL)(p[q[i<span class="number">-1</span>]].x+p[q[i]].y+<span class="number">2</span>);  </div><div class="line">        <span class="keyword">if</span>(tmp&lt;s)s=tmp,x=p[q[i<span class="number">-1</span>]].x+<span class="number">1</span>;  </div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tmp==s&amp;&amp;p[q[i<span class="number">-1</span>]].x+<span class="number">1</span>&lt;x)x=p[q[i<span class="number">-1</span>]].x+<span class="number">1</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %lld\n"</span>,x+sa,s-(LL)x+(LL)sb);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 1340. -- [Baltic2007]Escape逃跑问题</title><center><h2>1340: [Baltic2007]Escape逃跑问题</h2><span class="green">Time Limit: </span>5 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>323&nbsp;&nbsp;<span class="green">Solved: </span>145<br>[<a href="submitpage.php?id=1340">Submit</a>][<a href="problemstatus.php?id=1340">Status</a>][<a href="bbs.php?id=1340">Discuss</a>]</center></p><h3>Description</h3><div class="content">战犯们企图逃离监狱，他们详细地计划了如何逃出监狱本身，逃出监狱之后他们希望在附近的一个村子里找到掩护。村子（下图中的B）和监狱（图中的A）中间有一个峡谷，这个峡谷也是有士兵守卫的。守卫峡谷的士兵们坐在岗哨上很少走动，每个士兵的观察范围是100米。士兵所处位置决定了战犯们能否安全通过峡谷，安全通过的条件就是在任何时刻战犯们距离最近的士兵大于100米。<br>给定峡谷的长、宽和每个士兵在峡谷中的坐标，假定士兵的位置一直保持不变，请你写一个程序计算战犯们能否不被士兵发现，顺利通过峡谷。如果不能，那么战犯们最少需要消灭几个士兵才能安全通过峡谷（无论士兵是否被另一个士兵看到，他都可以被消灭）。<p></p>
<p><img border="0" src="images/1340.jpg"><br>&lt;/div&gt;</p><h3>Input</h3><div class="content">第一行有三个整数L、W和N，分别表示峡谷的长度、宽度和士兵的人数。接下来的N行，每行两个整数Xi和Yi，表示第i个士兵在峡谷的坐标（0 <= 0="" xi="" <="L," 0)，东北角坐标为(l,="" w)，见上图。注意：通过峡谷可以从(0,="" ys)（0="" ye）（0="" ye不一定是整数。="" div=""><h3>Output</h3><div class="content">只有一行，为一个整数，即安全通过峡谷需要消灭的士兵的人数，如果不需要消灭任何士兵，则输出0。
</div><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">130 340 5<br>
10 50<br>
130 130<br>
70 170<br>
0 180<br>
60 260<br>
</span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">1</span></div><h3>HINT</h3><br>            <div class="content"><p>1 <= 1="" w="" <="50,000"></=></p></div><h3>Source</h3><br>            <div class="content"><p><a href="problemset.php?search="></a></p></div><p></p>
<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>图论</li>
<li>网络流</li>
<li>最小割</li>
</ul>
<hr>
<h2 id="题目分析-8"><a href="#题目分析-8" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>二维图上下可达性问题</strong></p>
<p>本题思路与LNOI某年的题目比较相似，就是求二维图的上下可达性问题，直接跑网络流的最小割即可解决</p>
<p>注意：观察范围100米，那么相距200米就会有视野相交部分。。。</p>
<h2 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, s, t;</div><div class="line"><span class="keyword">int</span> x[maxn];</div><div class="line"><span class="keyword">int</span> y[maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to, flow;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to, <span class="keyword">int</span> flow) : next(next), to(to), flow(flow)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxm &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> flow)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[x], y, flow);</div><div class="line">    h[x] = cnt;</div><div class="line">    e[++cnt] = edge(h[y], x, <span class="number">0</span>);</div><div class="line">    h[y] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; bfs;</div><div class="line">    bfs.push(s);</div><div class="line">    <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span>(d));</div><div class="line">    <span class="keyword">while</span> (!bfs.empty())&#123;</div><div class="line">        <span class="keyword">int</span> op = bfs.front();bfs.pop();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[op]; i; i = e[i].next)&#123;</div><div class="line">            <span class="keyword">if</span> (!e[i].flow) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> k = e[i].to;</div><div class="line">            <span class="keyword">if</span> (k == s || d[k]) <span class="keyword">continue</span>;</div><div class="line">            d[k] = d[op] + <span class="number">1</span>;</div><div class="line">            bfs.push(k);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (d[t]) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> a)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == t) <span class="keyword">return</span> a;</div><div class="line">    <span class="keyword">int</span> rest = a;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span> (!e[i].flow) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (d[op] != d[x] + <span class="number">1</span>) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> k = DFS(op, min(e[i].flow, rest));</div><div class="line">        rest -= k;</div><div class="line">        e[i].flow -= k;</div><div class="line">        e[i ^ <span class="number">1</span>].flow += k;</div><div class="line">        <span class="keyword">if</span> (!rest) <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a - rest;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dinic</span><span class="params">(<span class="keyword">int</span>&amp; maxflow)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(BFS()) maxflow += DFS(s, INF);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> L, W;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;L, &amp;W, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x[i], &amp;y[i]);</div><div class="line">        Add_Edge((i &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>, i &lt;&lt; <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    s = <span class="number">0</span>, t = (n &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (((LL)x[i] - x[j]) * ((LL)x[i] - x[j]) + ((LL)y[i] - y[j]) * ((LL)y[i] - y[j]) &lt;= <span class="number">40000L</span>)&#123;</div><div class="line">                Add_Edge(i &lt;&lt; <span class="number">1</span>, (j &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>, INF);</div><div class="line">                Add_Edge(j &lt;&lt; <span class="number">1</span>, (i &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>, INF);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (y[i] &lt;= <span class="number">100</span>) Add_Edge(s, (i &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>, INF);</div><div class="line">        <span class="keyword">if</span> (W - y[i] &lt;= <span class="number">100</span>) Add_Edge(i &lt;&lt; <span class="number">1</span>, t, INF);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> maxflow = <span class="number">0</span>;</div><div class="line">    Dinic(maxflow);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, maxflow);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 1256. -- Baltic2004Rectangles</title><center><h2>1256: Baltic2004Rectangles</h2><span class="green">Time Limit: </span>1 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>87&nbsp;&nbsp;<span class="green">Solved: </span>19<br>[<a href="submitpage.php?id=1256">Submit</a>][<a href="problemstatus.php?id=1256">Status</a>][<a href="bbs.php?id=1256">Discuss</a>]</center></p><h3>Description</h3><div class="content">平面上有N个矩形，矩形的边与坐标轴平行。这些矩形之间可以相交或覆盖。每个矩形的顶点都是非负整数，并且横坐标不超过xmax，纵坐标不超过ymax。现在你要寻找一个点B，点B为整点并在线段[(0, ymax), (xmax, ymax)]或[(xmax, 0), (xmax, ymax)]上，并且它与(0,0)的连线段与尽量多的矩形相交。如果两个几何图形有公共点，我们就认为它们相交。 
</div><h3>Input</h3><div class="content">输入文件第一行是整数xmax,ymax和N。此后N行，每行描述一个矩形，是矩形左下脚与右上角的坐标。
</div><h3>Output</h3><div class="content">输出文件仅有一行，为与矩形相交的最大数目。
</div><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">22 14 8<br>
1 8 7 11<br>
18 10 20 12<br>
17 1 19 7<br>
12 2 16 3<br>
16 7 19 9<br>
8 4 12 11<br>
7 4 9 6<br>
10 5 11 6<br>
</span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">5<br>
<img border="0" src="images/1256.jpg"></span></div><h3>HINT</h3><br>            <div class="content"><p>对于100%的数据，有0< xmax, ymax <10^9，1<=n<=10000。<br>
<br>
<br>
点B必须是整数坐标</10^9，1<=n<=10000。<br></p></div><h3>Source</h3><br>            <div class="content"><p><a href="problemset.php?search="></a></p></div><p></p>
<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>计算几何（伪）</li>
<li>转化法</li>
<li>线段覆盖问题</li>
<li>线段树</li>
</ul>
<hr>
<h2 id="题目分析-9"><a href="#题目分析-9" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>射影转化问题</strong></p>
<p>我们可以把每个矩形射影到那两条线端上，然后求出它所占据的范围，然后离散化+线段覆盖即可解决本题，注意点只在整点上运动</p>
<h2 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x &amp; -x</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-6</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> X, Y, n, m;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inter</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">    inter(<span class="keyword">int</span> l, <span class="keyword">int</span> r) : l(l), r(r)&#123;&#125;</div><div class="line">    inter()&#123;&#125;</div><div class="line">&#125;save[maxn];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">double</span> sline[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">process</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> con = (<span class="keyword">int</span>)x;</div><div class="line">    <span class="keyword">if</span> (x - con &lt;= eps) <span class="keyword">return</span> con;</div><div class="line">    <span class="keyword">return</span> con + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d)</span></span>&#123;</div><div class="line">    <span class="keyword">double</span> _a = (d == <span class="number">0</span>) ? INF : (<span class="keyword">double</span>)Y / d * a;</div><div class="line">    <span class="keyword">double</span> _b = (a == <span class="number">0</span>) ? INF : (<span class="keyword">double</span>)X / a * d;</div><div class="line">    <span class="keyword">double</span> _c = (b == <span class="number">0</span>) ? INF : (<span class="keyword">double</span>)Y / b * c;</div><div class="line">    <span class="keyword">double</span> _d = (c == <span class="number">0</span>) ? INF : (<span class="keyword">double</span>)X / c * b;</div><div class="line">    <span class="keyword">if</span> ((<span class="keyword">double</span>)X - _a &lt; eps) save[++cnt] = inter(process(X + Y - _b), (<span class="keyword">int</span>)(X + Y - _d));</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="keyword">double</span>)Y - _d &lt; eps) save[++cnt] = inter(process(_a), (<span class="keyword">int</span>)(_c));</div><div class="line">    <span class="keyword">else</span> save[++cnt] = inter(process(_a), (<span class="keyword">int</span>)(X + Y - _d));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> c[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(x &lt;= m) &#123;</div><div class="line">        c[x] += v;</div><div class="line">        x += lowbit(x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>; </div><div class="line">    <span class="keyword">while</span> (x)&#123;</div><div class="line">        ans += c[x];</div><div class="line">        x -= lowbit(x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a, b, c, d;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;X, &amp;Y, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;a, &amp;b, &amp;c, &amp;d);</div><div class="line">        init(a, b, c, d);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)&#123;</div><div class="line">        sline[++m] = save[i].l;</div><div class="line">        sline[++m] = save[i].r;</div><div class="line">    &#125;</div><div class="line">    sort(sline + <span class="number">1</span>, sline + <span class="number">1</span> + m);</div><div class="line">    m = unique(sline + <span class="number">1</span>, sline + <span class="number">1</span> + m) - sline - <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)&#123;</div><div class="line">        save[i].l = lower_bound(sline + <span class="number">1</span>, sline + <span class="number">1</span> + m, save[i].l) - sline;</div><div class="line">        save[i].r = lower_bound(sline + <span class="number">1</span>, sline + <span class="number">1</span> + m, save[i].r) - sline;</div><div class="line">        add(save[i].l, <span class="number">1</span>);</div><div class="line">        add(save[i].r + <span class="number">1</span>, <span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> maxnum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        maxnum = max(maxnum, get(i));</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, maxnum);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本期题目涉及面较广，有数论，图论，计算几何等多方面内容，大致题型如下：</p>
<ul>
<li><strong>树型DP问题</strong></li>
<li><strong>树上等大小划分问题</strong></li>
<li><strong>拆点/边法问题</strong></li>
<li><strong>上下界最优问题</strong></li>
<li><strong>进制问题</strong></li>
<li><strong>莫比乌斯反演基础题</strong></li>
<li><strong>带限制最短路问题</strong></li>
<li><strong>凸壳扫描问题</strong></li>
<li><strong>二维图上下可达性问题</strong></li>
<li><strong>射影转化问题</strong></li>
</ul>
</=></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;Time passes so fast, but…&lt;br&gt;
    
    </summary>
    
    
      <category term="BZOJ" scheme="https://goseqh.tk/tags/BZOJ/"/>
    
      <category term="题解" scheme="https://goseqh.tk/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Libre Online Judge阶段性汇总II</title>
    <link href="https://goseqh.tk/2017/09/03/Libre-Online-Judge%E9%98%B6%E6%AE%B5%E6%80%A7%E6%B1%87%E6%80%BBII/"/>
    <id>https://goseqh.tk/2017/09/03/Libre-Online-Judge阶段性汇总II/</id>
    <published>2017-09-03T12:53:29.000Z</published>
    <updated>2017-09-04T00:16:18.711Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>题解第二篇<del>MDZZ写题解太累了555</del><br><a id="more"></a></p>
<h1 id="2036-「SHOI2015」自动刷题机"><a href="#2036-「SHOI2015」自动刷题机" class="headerlink" title="#2036. 「SHOI2015」自动刷题机"></a>#2036. 「SHOI2015」自动刷题机</h1><iframe src="https://loj.ac/problem/2036" width="775" height="1620" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>应该挺容易看出来的，二分答案即可，关于二分为什么正确，请自行思考</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF (LL)4000000000000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">LL n,k;</div><div class="line">LL line[maxn];</div><div class="line">LL rec = <span class="number">-1</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge</span><span class="params">(LL x)</span></span>&#123;</div><div class="line">    LL now = <span class="number">0</span>;</div><div class="line">    LL cnt = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        now += line[i];</div><div class="line">        <span class="keyword">if</span> (now &gt;= x)&#123;</div><div class="line">            now = <span class="number">0</span>;</div><div class="line">            cnt++;</div><div class="line">        &#125;</div><div class="line">        (now &lt; <span class="number">0</span>) ? now = <span class="number">0</span> : now = now;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (k == cnt) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> cnt &lt; k ? <span class="number">-1</span> : <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function">LL <span class="title">getmax</span><span class="params">(LL l, LL r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        <span class="keyword">if</span> (judge(l) == <span class="number">0</span>) <span class="keyword">return</span> l;</div><div class="line">        <span class="keyword">return</span> rec;</div><div class="line">    &#125;</div><div class="line">    LL mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">int</span> d = judge(mid);</div><div class="line">    <span class="keyword">if</span> (d &gt;= <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">if</span> (d == <span class="number">0</span>) rec = mid;</div><div class="line">        <span class="keyword">return</span> getmax(mid + <span class="number">1</span>, r);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> getmax(l, mid);</div><div class="line">&#125;</div><div class="line"><span class="function">LL <span class="title">getmin</span><span class="params">(LL l, LL r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</div><div class="line">    LL mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (judge(mid) &lt;= <span class="number">0</span>) <span class="keyword">return</span> getmin(l, mid);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> getmin(mid + <span class="number">1</span>, r);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;k);</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;line[i]);</div><div class="line">    LL ansmin = getmin(<span class="number">1</span>, INF);</div><div class="line">    LL ansmax = getmax(<span class="number">1</span>, INF);</div><div class="line">    <span class="keyword">if</span> (ansmin == <span class="number">-1</span> || judge(ansmin)!=<span class="number">0</span> || ansmax == <span class="number">-1</span> || judge(ansmax)!=<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"-1"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld %lld"</span>, ansmin, ansmax);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="2194-「SDOI2014」数数"><a href="#2194-「SDOI2014」数数" class="headerlink" title="#2194. 「SDOI2014」数数"></a>#2194. 「SDOI2014」数数</h1><iframe src="https://loj.ac/problem/2194" width="775" height="1230" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><p>本题首先显然是AC自动机，然而情况多，真的很难一遍写对。。。</p>
<p>大概的坑有如下：</p>
<ul>
<li>集合中的数字开头可以为0</li>
<li>AC自动机中可能包含其他串的结点也不能走到</li>
<li>要注意开始标记的作用，为了避免，要循环累计答案</li>
</ul>
<p>另外本题LOJ数据弱，第二点没处理也能过，然而BZOJ上就过不了。。。</p>
<p>好了不说了。。。</p>
<h2 id="真正的AC代码"><a href="#真正的AC代码" class="headerlink" title="真正的AC代码"></a>真正的AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 4005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">bool</span> val[maxn];</div><div class="line"><span class="keyword">int</span> ch[maxn][<span class="number">12</span>];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"><span class="keyword">int</span> m;</div><div class="line"><span class="keyword">char</span> num[maxn];</div><div class="line"><span class="keyword">int</span> ct = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> len;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> now = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!ch[now][s[i] - <span class="string">'0'</span>]) ch[now][s[i] - <span class="string">'0'</span>] = ++cnt;</div><div class="line">        now = ch[now][s[i] - <span class="string">'0'</span>];</div><div class="line">    &#125;</div><div class="line">    val[now] = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    f[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; bfs;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (ch[<span class="number">0</span>][i]) f[ch[<span class="number">0</span>][i]] = <span class="number">0</span>, bfs.push(ch[<span class="number">0</span>][i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (!bfs.empty())&#123;</div><div class="line">        <span class="keyword">int</span> op = bfs.front(); bfs.pop();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (!ch[op][i]) ch[op][i] = ch[f[op]][i];</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">int</span> k = f[op];</div><div class="line">                <span class="keyword">while</span> (k &amp;&amp; !ch[k][i]) k = f[k];</div><div class="line">                f[ch[op][i]] = (!ch[k][i]) ? <span class="number">0</span> : ch[k][i];</div><div class="line">                <span class="keyword">if</span> (val[f[ch[op][i]]]) val[ch[op][i]] = <span class="number">1</span>;<span class="comment">//注意这个地方很重要！！！</span></div><div class="line">                bfs.push(ch[op][i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ct = <span class="built_in">strlen</span>(num);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ct; i++) num[i] -= <span class="string">'0'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> dp[maxn][maxn][<span class="number">2</span>];</div><div class="line"><span class="keyword">bool</span> vis[maxn][maxn][<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> loc, <span class="keyword">int</span> op)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (val[loc]) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (pos == ct) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (vis[pos][loc][op]) <span class="keyword">return</span> dp[pos][loc][op];</div><div class="line">    vis[pos][loc][op] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span>&amp; ans = dp[pos][loc][op];</div><div class="line">    <span class="keyword">if</span> (op)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num[pos]; i++)&#123;</div><div class="line">            ans = (ans + DP(pos + <span class="number">1</span>, ch[loc][i], <span class="number">0</span>)) % M;</div><div class="line">        &#125;</div><div class="line">        ans = (ans + DP(pos + <span class="number">1</span>, ch[loc][num[pos]], <span class="number">1</span>)) % M;</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">        ans = (ans + DP(pos + <span class="number">1</span>, ch[loc][i], <span class="number">0</span>)) % M;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, num, &amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">        len = <span class="built_in">strlen</span>(s);</div><div class="line">        insert();</div><div class="line">    &#125;</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; ct; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++)&#123;</div><div class="line">            ans = (ans + DP(i + <span class="number">1</span>, ch[<span class="number">0</span>][j], <span class="number">0</span>)) % M;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; num[<span class="number">0</span>]; i++) ans = (ans + DP(<span class="number">1</span>, ch[<span class="number">0</span>][i], <span class="number">0</span>)) % M;</div><div class="line">    ans = (ans + DP(<span class="number">1</span>, ch[<span class="number">0</span>][num[<span class="number">0</span>]], <span class="number">1</span>)) % M;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="2234-「JLOI2014」聪明的燕姿"><a href="#2234-「JLOI2014」聪明的燕姿" class="headerlink" title="#2234. 「JLOI2014」聪明的燕姿"></a>#2234. 「JLOI2014」聪明的燕姿</h1><iframe src="https://loj.ac/problem/2234" width="775" height="1440" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h2><p><del>省选题真是谁都能黑啊。。。</del><br><del>世道好轮回，省选绕过谁</del></p>
<p>本题即是传说中的对于质因子进行DFS暴力搜索的题目，然而我太弱，WA了无数次。。。</p>
<p>主要就是注意如何剪枝以及避免错误吧</p>
<h2 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> p[maxn][<span class="number">32</span>];</div><div class="line"><span class="keyword">int</span> save[maxn][<span class="number">32</span>];</div><div class="line"><span class="keyword">int</span> si[maxn];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i]) p[cnt++][<span class="number">1</span>] = i;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * p[j][<span class="number">1</span>] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * p[j][<span class="number">1</span>]] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (i % p[j][<span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i++)&#123;</div><div class="line">        save[i][<span class="number">0</span>] = p[i][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        save[i][<span class="number">1</span>] = p[i][<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; <span class="number">32</span>; j++)&#123;</div><div class="line">            <span class="keyword">if</span> ((LL)p[i][j - <span class="number">1</span>] * save[i][<span class="number">1</span>] &gt;= INF) &#123;</div><div class="line">                si[i] = j;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            save[i][j] = p[i][j] = p[i][j - <span class="number">1</span>] * save[i][<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; si[i]; j++)&#123;</div><div class="line">            <span class="keyword">if</span> ((LL)p[i][j - <span class="number">1</span>] + p[i][j] &gt;= INF)&#123;</div><div class="line">                si[i] = j;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            p[i][j] += p[i][j - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> con = (<span class="keyword">int</span>) <span class="built_in">sqrt</span>(x);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (save[i][<span class="number">1</span>] &gt; con) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span> (x % save[i][<span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> rest, <span class="keyword">int</span> now)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (rest &lt; p[pos][<span class="number">1</span>])&#123;</div><div class="line">        <span class="keyword">if</span> (rest == <span class="number">1</span>) ans.pb(now);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ((LL)rest &lt; (LL)p[pos][<span class="number">1</span>] * p[pos][<span class="number">1</span>] &amp;&amp; rest &lt; ((p[pos][<span class="number">2</span>] &gt; <span class="number">0</span>) ? p[pos][<span class="number">2</span>] : INF))&#123;</div><div class="line">        <span class="keyword">if</span> (judge(rest - <span class="number">1</span>)) ans.pb(now * (rest - <span class="number">1</span>));</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*if (pos == cnt &amp;&amp; rest - 1 &gt;= maxn)&#123;</span></div><div class="line">        if (judge(rest - 1)) ans.pb(now * (rest - 1));</div><div class="line">        return;</div><div class="line">    &#125;*/</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; si[pos]; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (p[pos][i] &gt; rest) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span> (rest % p[pos][i] == <span class="number">0</span>) DFS(pos + <span class="number">1</span>, rest / p[pos][i], now * save[pos][i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">bool</span> f = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (!f)&#123;</div><div class="line">        DFS(<span class="number">0</span>, x, <span class="number">1</span>);</div><div class="line">        sort(ans.begin(), ans.end());</div><div class="line">        <span class="keyword">if</span> (ans.size() == <span class="number">0</span>)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"0"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans.size());</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[<span class="number">0</span>]);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; ans.size(); i++) <span class="built_in">printf</span>(<span class="string">" %d"</span>, ans[i]);</div><div class="line">            ans.clear();</div><div class="line">        &#125;</div><div class="line">        f = <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    DFS(<span class="number">0</span>, x, <span class="number">1</span>);</div><div class="line">    sort(ans.begin(), ans.end());</div><div class="line">    <span class="keyword">if</span> (ans.size() == <span class="number">0</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n0"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n%d\n"</span>, ans.size());</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; ans.size(); i++) <span class="built_in">printf</span>(<span class="string">" %d"</span>, ans[i]);</div><div class="line">        ans.clear();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) work(n);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实细节还是很多的，可能是因为我太弱了。。。</p>
<h1 id="2236-「JLOI2014」松鼠的新家"><a href="#2236-「JLOI2014」松鼠的新家" class="headerlink" title="#2236. 「JLOI2014」松鼠的新家"></a>#2236. 「JLOI2014」松鼠的新家</h1><iframe src="https://loj.ac/problem/2236" width="775" height="1460" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h2><p>树链剖分</p>
<h2 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">int</span> fa[maxn];</div><div class="line"><span class="keyword">int</span> si[maxn];</div><div class="line"><span class="keyword">int</span> top[maxn];</div><div class="line"><span class="keyword">int</span> dfs[maxn];</div><div class="line"><span class="keyword">int</span> idfs[maxn];</div><div class="line"><span class="keyword">int</span> son[maxn];</div><div class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x]) <span class="keyword">continue</span>;</div><div class="line">        d[op] = d[x] + <span class="number">1</span>;</div><div class="line">        fa[op] = x;</div><div class="line">        DFS1(op);</div><div class="line">        si[x] += si[op];</div><div class="line">        <span class="keyword">if</span> (si[op] &gt; si[son[x]]) son[x] = op;</div><div class="line">    &#125;</div><div class="line">    si[x]++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> tp)</span></span>&#123;</div><div class="line">    dfs[x] = ++t;</div><div class="line">    idfs[t] = x;</div><div class="line">    top[x] = tp;</div><div class="line">    <span class="keyword">if</span> (son[x]) DFS2(son[x], tp);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x] || op == son[x]) <span class="keyword">continue</span>;</div><div class="line">        DFS2(op, op);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> sum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> add[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (add[o] != <span class="number">0</span> &amp;&amp; l != r)&#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">        add[o &lt;&lt; <span class="number">1</span>] += add[o];</div><div class="line">        sum[o &lt;&lt; <span class="number">1</span>] += (mid + <span class="number">1</span> - l) * add[o];</div><div class="line"></div><div class="line">        add[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += add[o];</div><div class="line">        sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += (r - mid) * add[o];</div><div class="line"></div><div class="line">        add[o] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</div><div class="line">    sum[o] = sum[o &lt;&lt; <span class="number">1</span>] + sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy) &#123;</div><div class="line">        add[o] += qd;</div><div class="line">        sum[o] += qd * (r - l + <span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) modify(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) modify(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> sum[o];</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) <span class="keyword">return</span> get(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> get(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> f1 = top[x], f2 = top[y];</div><div class="line">    qd = v;</div><div class="line">    <span class="keyword">while</span> (f1 != f2)&#123;</div><div class="line">        <span class="keyword">if</span> (d[f1] &gt; d[f2])&#123;</div><div class="line">            qx = dfs[f1], qy = dfs[x];</div><div class="line">            modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">            x = fa[f1];</div><div class="line">            f1 = top[x];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            qx = dfs[f2], qy = dfs[y];</div><div class="line">            modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">            y = fa[f2];</div><div class="line">            f2 = top[y];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (d[x] &lt; d[y]) swap(x, y);</div><div class="line">    qx = dfs[y], qy = dfs[x];</div><div class="line">    modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    Add(x, y, <span class="number">1</span>);</div><div class="line">    Add(y, y, <span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    DFS1(<span class="number">1</span>);</div><div class="line">    DFS2(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        Add_Edge(x, y);</div><div class="line">    &#125;</div><div class="line">    init();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++)&#123;</div><div class="line">        Add(line[i], line[i + <span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        qx = dfs[i];</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, get(<span class="number">1</span>, n, <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="2245-「NOI2014」魔法森林"><a href="#2245-「NOI2014」魔法森林" class="headerlink" title="#2245. 「NOI2014」魔法森林"></a>#2245. 「NOI2014」魔法森林</h1><iframe src="https://loj.ac/problem/2245" width="775" height="2000" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h2><p>正解显然是LCT，然而还有另一种方法，就是动点SPFA，把边按其中一维排序后逐个加入，然后只对当前存在的边跑SPFA，这样就过了。。。</p>
<h2 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">	<span class="keyword">int</span> x, y, a, b;</div><div class="line">	edge(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> a, <span class="keyword">int</span> b) : x(x), y(y), a(a), b(b)&#123;&#125;</div><div class="line">	edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; save[maxn];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a, edge b)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> a.a &lt; b.a;</div><div class="line">&#125;</div><div class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; spfa;</div><div class="line"><span class="keyword">int</span> now;</div><div class="line"><span class="keyword">int</span> ans = INF;</div><div class="line"><span class="keyword">bool</span> in[maxn];</div><div class="line"><span class="keyword">bool</span> have[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">while</span> (!spfa.empty())&#123;</div><div class="line">		<span class="keyword">int</span> op = spfa.front();spfa.pop();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; save[op].size(); i++)&#123;</div><div class="line">			<span class="keyword">int</span> t = save[op][i];</div><div class="line">			<span class="keyword">if</span> (!have[t]) <span class="keyword">continue</span>;</div><div class="line">			<span class="keyword">int</span> k = (e[t].x == op) ? e[t].y : e[t].x;</div><div class="line">			<span class="keyword">if</span> (e[t].a &gt; now) <span class="keyword">continue</span>;</div><div class="line">			<span class="keyword">if</span> (f[k] &gt; max(f[op], e[t].b))&#123;</div><div class="line">				f[k] = max(f[op], e[t].b);</div><div class="line">				<span class="keyword">if</span> (!in[k])&#123;</div><div class="line">					spfa.push(k);</div><div class="line">					in[k] = <span class="number">1</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> (k == n) ans = min(ans, now + f[k]);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		in[op] = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">		edge op = e[i];</div><div class="line">		have[i] = <span class="number">1</span>;</div><div class="line">		<span class="keyword">int</span> a = op.x, b = op.y;</div><div class="line">		<span class="keyword">if</span> (a == b) <span class="keyword">continue</span>;</div><div class="line">		spfa.push(b);spfa.push(a);</div><div class="line">		now = op.a;</div><div class="line">		SPFA();</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; bfs;</div><div class="line">    bfs.push(<span class="number">1</span>);</div><div class="line">    vis[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!bfs.empty())&#123;</div><div class="line">        <span class="keyword">int</span> op = bfs.front();</div><div class="line">        bfs.pop();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; save[op].size(); i++)&#123;</div><div class="line">            <span class="keyword">int</span> k = save[op][i];</div><div class="line">			<span class="keyword">int</span> t = (e[k].x == op) ? e[k].y : e[k].x;</div><div class="line">			<span class="keyword">if</span> (vis[t]) <span class="keyword">continue</span>;</div><div class="line">			vis[t] = <span class="number">1</span>;</div><div class="line">			bfs.push(t);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	<span class="keyword">if</span> (!vis[n]) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) f[i] = INF;</div><div class="line">	f[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> x, y, z, w;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;x, &amp;y, &amp;z, &amp;w);</div><div class="line">		e[i] = edge(x, y, z, w);</div><div class="line">	&#125;</div><div class="line">	sort(e, e + m, cmp);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">		save[e[i].x].push_back(i);</div><div class="line">		save[e[i].y].push_back(i);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (!judge())&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"-1"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	work();</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>动点SPFA写的。。。</p>
<h1 id="2246-「NOI2014」动物园"><a href="#2246-「NOI2014」动物园" class="headerlink" title="#2246. 「NOI2014」动物园"></a>#2246. 「NOI2014」动物园</h1><iframe src="https://loj.ac/problem/2246" width="775" height="1650" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h2><p>这道题其实是一道很好的题目，能加强对KMP的理解</p>
<p>其实fail函数有两种实现，一种是代表包含自己前一个位置但不含自己的最长border长度，另一种是自己也算在内的最长border长度</p>
<p>这两者的处理方式并不相同，所以一定要想清楚KMP的原理</p>
<h2 id="AC代码-4"><a href="#AC代码-4" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">char</span> t[maxn];</div><div class="line"><span class="keyword">int</span> lent;</div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"><span class="keyword">int</span> f1[maxn];</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="keyword">int</span> f2[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    f[<span class="number">0</span>] = <span class="number">-1</span>;</div><div class="line">    f1[<span class="number">0</span>] = <span class="number">-1</span>;</div><div class="line">    num[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; lent; i++)&#123;</div><div class="line">        <span class="keyword">int</span> k = f[i - <span class="number">1</span>];</div><div class="line">        <span class="keyword">while</span> (k &gt; <span class="number">-1</span> &amp;&amp; t[k + <span class="number">1</span>] != t[i]) k = f[k];</div><div class="line">        f[i] = ((t[k + <span class="number">1</span>] == t[i]) ? k + <span class="number">1</span> : <span class="number">-1</span>);</div><div class="line">        num[i] = ((t[k + <span class="number">1</span>] == t[i]) ? num[k + <span class="number">1</span>] + <span class="number">1</span> : <span class="number">0</span>);</div><div class="line"></div><div class="line">        k = f1[i - <span class="number">1</span>];</div><div class="line">        <span class="keyword">while</span> (k &gt; <span class="number">-1</span> &amp;&amp; t[k + <span class="number">1</span>] != t[i]) k = f[k];</div><div class="line">        f1[i] = ((t[k + <span class="number">1</span>] == t[i]) ? k + <span class="number">1</span> : <span class="number">-1</span>);</div><div class="line">        <span class="keyword">while</span> (f1[i] &gt; <span class="number">-1</span> &amp;&amp; ((f1[i] + <span class="number">1</span>) &lt;&lt; <span class="number">1</span>) &gt; i + <span class="number">1</span>) f1[i] = f[f1[i]];</div><div class="line"></div><div class="line">        f2[i] = (f1[i] == <span class="number">-1</span>) ? <span class="number">0</span> : (num[f1[i]] + <span class="number">1</span>);</div><div class="line">        <span class="comment">/*k = f[i + 1];</span></div><div class="line">        int pre = i + 1;</div><div class="line">        while (k &amp;&amp; (k &lt;&lt; 1) &gt; i + 1) k = f[k], pre = f[pre];</div><div class="line">        f2[i + 1] = num[pre];*/</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    LL ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lent; i++) ans = ans * (f2[i] + <span class="number">1</span>) % M;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, t);</div><div class="line">        lent = <span class="built_in">strlen</span>(t);</div><div class="line">        init();</div><div class="line">        work();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="6030-「雅礼集训-2017-Day1」矩阵"><a href="#6030-「雅礼集训-2017-Day1」矩阵" class="headerlink" title="#6030. 「雅礼集训 2017 Day1」矩阵"></a>#6030. 「雅礼集训 2017 Day1」矩阵</h1><iframe src="https://loj.ac/problem/6030" width="775" height="1522" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-6"><a href="#题目分析-6" class="headerlink" title="题目分析"></a>题目分析</h2><p>题目描述上类似于POI某年的tab那道题，都是一些矩阵上的思维题，本题可以发现，如果我们拥有了一个行，它里面的格子全都是黑色的，那么我们就可以随(wei)便(suo)染(yu)色(wei)了对吧，但是如果我们没有这样的一行，我们就必须要考虑如何让它出现，我们可以知道，把一整行染黑的代价是这一行中白色的个数，但是这一行所对应的列（就是转置矩阵的对应的那个行）必须要有至少一个黑格才行，如果没有就要让它再额外的染一次才行，这样就有一个额外的代价</p>
<p>而当我们把某行全染黑了以后，我们把整个矩阵染黑的代价是多少呢？那就是含有白色的列的个数</p>
<p>我们把这两部分代价合起来考虑，如果我们要让某一行全黑，那么假设一开始它不是全黑的，那么我们一定要使用它这一行里面白色格子的数量这些代价来染（仅考虑可以被全染黑的情况），此外，由于此时除了这一行外，没有全黑的行，那么刚才为了给这一行全染黑，刚才行的每个白格对应的列都会有至少一个白格，这样相当于每个白格需要耗费二的代价（1+1），但是如果原先就是黑色的，那么当且仅当这个黑格对应的列没有白格才不会产生代价，否则还是要加上一的代价（属于后半部分的代价）（0+1）</p>
<p>什么时候无解呢？回到上面提到过的：</p>
<blockquote>
<p>我们可以知道，把一整行染黑的代价是这一行中白色的个数，但是这一行所对应的列（就是转置矩阵的对应的那个行）必须要有至少一个黑格才行，如果没有就要让它再额外的染一次才行，这样就有一个额外的代价</p>
</blockquote>
<p>即，如果没有这样的黑格，我们就要想办法让这行对应的那个列出现至少一个黑格，这样就变成了，只要矩阵中有至少一个黑格，就不是无解的，想一想为什么（我们把这一个黑格对应的行直接染到需要的那个列上，再用那个列去染最开始的那一行即可）</p>
<p>所以，综上所述：</p>
<ul>
<li>当且仅当没有黑格时， 无解</li>
<li>有一行全黑时，答案等于含有白格的列的个数</li>
<li>没有任何一行全黑时，答案等于所有行的代价的最小值，行的代价的计算式是：这一行对应的额外代价（0或1）+刚才提到的黑白格分别产生的代价</li>
</ul>
<p>其实易证这样一定是最少的步数</p>
<h2 id="AC代码-5"><a href="#AC代码-5" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">char</span> geo[maxn][maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> save[maxn];</div><div class="line"><span class="keyword">int</span> if_col_full[maxn];</div><div class="line"><span class="keyword">int</span> if_col_empty[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">bool</span> have = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (geo[i][j] == <span class="string">'#'</span>)&#123;</div><div class="line">                have = <span class="number">1</span>;</div><div class="line">                <span class="keyword">goto</span> jump;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    jump : <span class="keyword">if</span> (!have) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</div><div class="line">        if_col_empty[j] = <span class="number">1</span>;</div><div class="line">        if_col_full[j] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (geo[i][j] == <span class="string">'#'</span>) if_col_empty[j] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span> if_col_full[j] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (geo[i][j] == <span class="string">'.'</span>) save[i] += <span class="number">2</span>;</div><div class="line">            <span class="keyword">else</span> save[i] += (if_col_full[j] ^ <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        save[i] += if_col_empty[i];</div><div class="line">        <span class="keyword">if</span> (save[i] == <span class="number">0</span>)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"0"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ans = INF;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        ans = min(ans, save[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%s"</span>, geo[i]);</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="6062-「2017-山东一轮集训-Day2」Pair"><a href="#6062-「2017-山东一轮集训-Day2」Pair" class="headerlink" title="#6062. 「2017 山东一轮集训 Day2」Pair"></a>#6062. 「2017 山东一轮集训 Day2」Pair</h1><iframe src="https://loj.ac/problem/6062" width="775" height="1794" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-7"><a href="#题目分析-7" class="headerlink" title="题目分析"></a>题目分析</h2><p>这题刚做的时候看错题了。。。以为只能对应位置匹配。。。</p>
<p>如果不是对应位置，本题就比较显然了，我们先把和大于等于$h$的限制转化，化为差的形式，这样就是把${b_i}$变成了${h-b_i}$，设这个新的数列为${c_i}$，我们可以想象把${a_i}$和${c_i}$放在一起排好了序，然后统计所有前缀中属于数列${a_i}$的元素个数与属于数列${c_i}$的元素个数的差（除了最后一个最大的前缀），如果这个差的最大值小于等于零，那么可以匹配（想一想为什么）</p>
<p>而这些可以使用线段树进行维护，那么本题就解决了</p>
<h2 id="AC代码-6"><a href="#AC代码-6" class="headerlink" title="AC代码"></a>AC代码</h2><p>（注意代码实现与题目分析并不一致，但本质相同）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 300005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> sum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> minnum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        sum[o] += qd;</div><div class="line">        minnum[o] += qd;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) insert(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> insert(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    sum[o] = sum[o &lt;&lt; <span class="number">1</span>] + sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">    minnum[o] = min(minnum[o &lt;&lt; <span class="number">1</span>], sum[o &lt;&lt; <span class="number">1</span>] + minnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> a[maxn];</div><div class="line"><span class="keyword">int</span> b[maxn];</div><div class="line"><span class="keyword">int</span> c[maxn];</div><div class="line"><span class="keyword">int</span> n, m, h;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;h);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) b[i] = h - b[i];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) c[i] = b[i];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) c[i + m] = a[i];</div><div class="line">    sort(c + <span class="number">1</span>, c + <span class="number">1</span> + n + m);</div><div class="line">    <span class="keyword">int</span> k = unique(c + <span class="number">1</span>, c + <span class="number">1</span> + n + m) - c;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) b[i] = lower_bound(c + <span class="number">1</span>, c + <span class="number">1</span> + k, b[i]) - c;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = lower_bound(c + <span class="number">1</span>, c + <span class="number">1</span> + k, a[i]) - c;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        qx = b[i], qd = <span class="number">1</span>;</div><div class="line">        insert(<span class="number">1</span>, k, <span class="number">1</span>);</div><div class="line">        qx = a[i], qd = <span class="number">-1</span>;</div><div class="line">        insert(<span class="number">1</span>, k, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    ans += (minnum[<span class="number">1</span>] &gt;= <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = m + <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        qx = a[i - m] , qd = <span class="number">1</span>;</div><div class="line">        insert(<span class="number">1</span>, k, <span class="number">1</span>);</div><div class="line">        qx = a[i], qd = <span class="number">-1</span>;</div><div class="line">        insert(<span class="number">1</span>, k, <span class="number">1</span>);</div><div class="line">        ans += (minnum[<span class="number">1</span>] &gt;= <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="6075-「2017-山东一轮集训-Day6」重建"><a href="#6075-「2017-山东一轮集训-Day6」重建" class="headerlink" title="#6075. 「2017 山东一轮集训 Day6」重建"></a>#6075. 「2017 山东一轮集训 Day6」重建</h1><iframe src="https://loj.ac/problem/6075" width="775" height="1830" frameborder="0" scrolling="no"></iframe>


<h2 id="题目分析-8"><a href="#题目分析-8" class="headerlink" title="题目分析"></a>题目分析</h2><p>根据题意，我们显然是要先求出经过不同边数下，每种边数的对应的最短路（关键点和全部点分别求），我们这样就可以枚举经过的边数，钦定它为真正的最短路，然后求出c的对应范围（在两个点集中）并判断是否有解即可，其实还是很巧妙的</p>
<h2 id="AC代码-7"><a href="#AC代码-7" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LD long double </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    LL cost;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to, LL cost) : next(next), to(to), cost(cost)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to, LL cost)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to, cost);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr, cost);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, s, t, k;</div><div class="line"><span class="keyword">int</span> save[maxn];</div><div class="line"><span class="keyword">int</span> ct;</div><div class="line">LL d1[maxn][<span class="number">2</span>];</div><div class="line">LL d2[maxn][<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> d = <span class="number">0</span>;</div><div class="line">LL INF;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    INF = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">18</span>; i++) INF = <span class="number">10</span> * INF;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) d1[i][<span class="number">0</span>] = d1[i][<span class="number">1</span>] = d2[i][<span class="number">0</span>] = d2[i][<span class="number">1</span>] = INF;</div><div class="line">    d1[s][<span class="number">0</span>] = d1[s][<span class="number">1</span>] = d2[s][<span class="number">0</span>] = d2[s][<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        d1[i][d ^ <span class="number">1</span>] = INF;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ct; i++)</div><div class="line">        d2[save[i]][d ^ <span class="number">1</span>] = INF;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = h[i]; j; j = e[j].next)&#123;</div><div class="line">            <span class="keyword">int</span> op = e[j].to;</div><div class="line">            <span class="keyword">if</span> (d1[op][d ^ <span class="number">1</span>] &gt; d1[i][d] + e[j].cost) d1[op][d ^ <span class="number">1</span>] = d1[i][d] + e[j].cost;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ct; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = h[save[i]]; j; j = e[j].next)&#123;</div><div class="line">            <span class="keyword">int</span> op = e[j].to;</div><div class="line">            <span class="keyword">if</span> (d2[op][d ^ <span class="number">1</span>] &gt; d2[save[i]][d] + e[j].cost) d2[op][d ^ <span class="number">1</span>] = d2[save[i]][d] + e[j].cost;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    d ^= <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL inf[maxn][<span class="number">2</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        update();</div><div class="line">        inf[i][<span class="number">0</span>] = (d1[t][d] &lt; INF) ? d1[t][d] : <span class="number">-1</span>;</div><div class="line">        inf[i][<span class="number">1</span>] = (d2[t][d] &lt; INF) ? d2[t][d] : <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">bool</span> f = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    LD ans = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (inf[i][<span class="number">0</span>] == <span class="number">-1</span>) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span> (!f)&#123;</div><div class="line">            <span class="keyword">if</span> (inf[i][<span class="number">0</span>] == inf[i][<span class="number">1</span>])&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"Infinity\n"</span>);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        f = <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (inf[i][<span class="number">1</span>] == <span class="number">-1</span> || inf[i][<span class="number">0</span>] != inf[i][<span class="number">1</span>]) <span class="keyword">continue</span>;</div><div class="line">        LD minnum = -INF;</div><div class="line">        LD maxnum = INF;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (inf[j][<span class="number">0</span>] == <span class="number">-1</span>) <span class="keyword">continue</span>;</div><div class="line">            maxnum = min(maxnum, (LD)(inf[j][<span class="number">0</span>] - inf[i][<span class="number">1</span>]) / (i - j));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (inf[j][<span class="number">0</span>] == <span class="number">-1</span>) <span class="keyword">continue</span>;</div><div class="line">            minnum = max(minnum, (LD)(inf[j][<span class="number">0</span>] - inf[i][<span class="number">1</span>]) / (i - j));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (minnum - maxnum &gt; eps) <span class="keyword">continue</span>;</div><div class="line">        ans = max(ans, maxnum);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (ans + <span class="number">1</span> &lt; eps) <span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, (LL)ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">recover</span><span class="params">()</span></span>&#123;</div><div class="line">    ct = <span class="number">0</span>;</div><div class="line">    cnt = <span class="number">1</span>;</div><div class="line">    <span class="built_in">memset</span>(h, <span class="number">0</span>, <span class="keyword">sizeof</span>(h));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span>(T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;s, &amp;t);</div><div class="line">        <span class="keyword">int</span> x, y;</div><div class="line">        LL z;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>, &amp;x, &amp;y, &amp;z);</div><div class="line">            Add_Edge(x, y, z);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            save[++ct] = x;</div><div class="line">        &#125;</div><div class="line">        work();</div><div class="line">        recover();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="6136-「2017-山东三轮集训-Day4」Left"><a href="#6136-「2017-山东三轮集训-Day4」Left" class="headerlink" title="#6136. 「2017 山东三轮集训 Day4」Left"></a>#6136. 「2017 山东三轮集训 Day4」Left</h1><iframe src="https://loj.ac/problem/6136" width="775" height="2050" frameborder="0" scrolling="no"></iframe>


<h2 id="题目分析-9"><a href="#题目分析-9" class="headerlink" title="题目分析"></a>题目分析</h2><p>我们考虑对这道题递归和分解，使得我们每次只去分析一个小过程，这样就会简便很多，我们可以观察规律，发现 $n$阶网络最后每两组中的数($k∗ 2,k∗2+1$)一定不在$n-1$阶网络的同一侧 ，这样我们可以对每层$O(2^n)$进行处理，同时使用贪心法 ，如果当前的这个组没被标记（即是否已经决定开或关），就让它关着，然后用自身的状态以及网络特征，尽可能多的更新其他的组，可以证明这样做是完全正确的，把两个排列放在一起（置换），用2-SAT的思路进行连边，同时每两组内的数($k∗2, k∗2+1$)也连边，根据题目性质，只能形成偶环，无论怎么染色都不会矛盾（即无解），所以，我们对每一层都进行这样的处理，同时更新上下的序列，就可以在$O(T∗n∗2^n)$的复杂度内解决本题，而这是完全可以接受的</p>
<h2 id="AC代码-8"><a href="#AC代码-8" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 13</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> up[<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">int</span> low[<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">int</span> ori[<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">int</span> line[<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">int</span> ans[(maxn &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>][<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">bool</span> vis[(maxn &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>][<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">int</span> temp[<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">int</span> judge[<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">int</span> n, x, con, con2;  <span class="comment">//con = n - 1 - (x - 1);</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> side = line[j ^ <span class="number">1</span>];</div><div class="line">    <span class="keyword">int</span> _j = up[side];</div><div class="line">    <span class="keyword">if</span> (vis[con][_j &gt;&gt; <span class="number">1</span>]) <span class="keyword">return</span>;</div><div class="line">    vis[con][_j &gt;&gt; <span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    ans[con][_j &gt;&gt; <span class="number">1</span>] = ans[con][up[line[j]] &gt;&gt; <span class="number">1</span>] ^ ((line[j] &amp; (<span class="number">1</span> &lt;&lt; con)) &gt;&gt; con) ^ ((line[j ^ <span class="number">1</span>] &amp; (<span class="number">1</span> &lt;&lt; con)) &gt;&gt; con) ^ <span class="number">1</span>;<span class="comment">//WA的原因，原先的写法如下：</span></div><div class="line">    <span class="comment">//ans[con][_j &gt;&gt; 1] = ans[con][up[line[j]] &gt;&gt; 1] ^ (line[j] &amp; 1) ^ (line[j ^ 1] &amp; 1) ^ 1;</span></div><div class="line">    <span class="comment">//中间测试时是这样写的：</span></div><div class="line">    <span class="comment">//ans[con][_j &gt;&gt; 1] = ans[con][up[line[j]] &gt;&gt; 1] ^ (line[j] &amp; (1 &lt;&lt; con)) ^ (line[j ^ 1] &amp; (1 &lt;&lt; con)) ^ 1;</span></div><div class="line">    BFS(low[ori[_j ^ <span class="number">1</span>]]);</div><div class="line">&#125;</div><div class="line"><span class="comment">/*void BFS2(int j)&#123;</span></div><div class="line">    int side = ori[j ^ 1];</div><div class="line">    int _j = low[side];</div><div class="line">    if (vis[con2][_j &gt;&gt; 1]) return;</div><div class="line">    vis[con2][_j &gt;&gt; 1] = 1;</div><div class="line">    ans[con2][_j &gt;&gt; 1] = ans[con2][j &gt;&gt; 1] ^ 1;</div><div class="line">    BFS2(j ^ 1);</div><div class="line">&#125;*/</div><div class="line"><span class="comment">/*int shift_left(int n, int x)&#123;</span></div><div class="line">    int a = n &amp; ((1 &lt;&lt; x) - 1);</div><div class="line">    int b = n - a;</div><div class="line">    a = (a &lt;&lt; 1) | (a &gt;&gt; (x - 1)) &amp; ((1 &lt;&lt; x) - 1);</div><div class="line">    return a | b;</div><div class="line">&#125;*/</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">shift_right</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a = n &amp; ((<span class="number">1</span> &lt;&lt; x) - <span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> b = n - a;</div><div class="line">    a = (a &gt;&gt; <span class="number">1</span>) | (a &lt;&lt; (x - <span class="number">1</span>)) &amp; ((<span class="number">1</span> &lt;&lt; x) - <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> a | b;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == <span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i += <span class="number">2</span>)&#123;</div><div class="line">            ans[con][i &gt;&gt; <span class="number">1</span>] = <span class="number">1</span> ^ (line[i] == ori[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i += <span class="number">1</span> &lt;&lt; x)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j++) low[line[j]] = j;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j++) up[ori[j]] = j;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j += <span class="number">2</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (!vis[con][j &gt;&gt; <span class="number">1</span>])&#123;</div><div class="line">                vis[con][j &gt;&gt; <span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">                ans[con][j &gt;&gt; <span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">                BFS(low[ori[j]]), BFS(low[ori[j + <span class="number">1</span>]]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j += <span class="number">2</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (ans[con][j &gt;&gt; <span class="number">1</span>])&#123;</div><div class="line">                temp[shift_right(j, x)] = ori[j ^ <span class="number">1</span>];</div><div class="line">                judge[ori[j ^ <span class="number">1</span>]] = <span class="number">0</span>;</div><div class="line">                temp[shift_right(j ^ <span class="number">1</span>, x)] = ori[j];</div><div class="line">                judge[ori[j]] = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                temp[shift_right(j, x)] = ori[j];</div><div class="line">                judge[ori[j]] = <span class="number">0</span>;</div><div class="line">                temp[shift_right(j ^ <span class="number">1</span>, x)] = ori[j ^ <span class="number">1</span>];</div><div class="line">                judge[ori[j ^ <span class="number">1</span>]] = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j++) ori[j] = temp[j];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j += <span class="number">2</span>)</div><div class="line">            ans[con2][j &gt;&gt; <span class="number">1</span>] = judge[line[j]];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j += <span class="number">2</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (ans[con2][j &gt;&gt; <span class="number">1</span>])&#123;</div><div class="line">                temp[shift_right(j, x)] = line[j ^ <span class="number">1</span>];</div><div class="line">                temp[shift_right(j ^ <span class="number">1</span>, x)] = line[j];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                temp[shift_right(j, x)] = line[j];</div><div class="line">                temp[shift_right(j ^ <span class="number">1</span>, x)] = line[j ^ <span class="number">1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j++) line[j] = temp[j];</div><div class="line">        <span class="comment">/*for (int j = i; j &lt; i + (1 &lt;&lt; x); j += 2)&#123;</span></div><div class="line">            if (!vis[con2][j &gt;&gt; 1])&#123;</div><div class="line">                vis[con2][j &gt;&gt; 1] = 1;</div><div class="line">                ans[con2][j &gt;&gt; 1] = 0;</div><div class="line">                BFS2(up[line[j]]), BFS2(up[line[j + 1]]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        */</div><div class="line">    &#125;</div><div class="line">    x--;</div><div class="line">    con++;</div><div class="line">    con2--;</div><div class="line">    solve();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span> &amp;&amp; n != <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; i++) ori[i] = i;</div><div class="line">        con = <span class="number">0</span>;</div><div class="line">        con2 = (n - <span class="number">1</span>) &lt;&lt; <span class="number">1</span>;</div><div class="line">        x = n;</div><div class="line">        solve();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (n &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>; i++)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span> &lt;&lt; (n - <span class="number">1</span>); j++)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[i][j]);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;题解第二篇&lt;del&gt;MDZZ写题解太累了555&lt;/del&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://goseqh.tk/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LOJ" scheme="https://goseqh.tk/tags/LOJ/"/>
    
  </entry>
  
  <entry>
    <title>常用图表汇总</title>
    <link href="https://goseqh.tk/2017/08/29/%E5%B8%B8%E7%94%A8%E5%9B%BE%E8%A1%A8%E6%B1%87%E6%80%BB/"/>
    <id>https://goseqh.tk/2017/08/29/常用图表汇总/</id>
    <published>2017-08-29T11:41:14.000Z</published>
    <updated>2017-09-04T00:16:43.903Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>存放以前编写的图表汇总，便于查找<br><a id="more"></a></p>
<h1 id="常用图表大全"><a href="#常用图表大全" class="headerlink" title="常用图表大全"></a>常用图表大全</h1><hr>
<p>首先，作为搞OI的一员，我们怎么可能会不知道大名鼎鼎的ASCII码呢？然而我就是有很多都不知道。另外普及一下，ASCII=American Standard Code for Information Interchange</p>
<p>下表中前32个（0~31）为控制字符，第33个（32）为空格，第128个（127）为DEL（delete）</p>
<p><strong>大家不妨在看表前思考两个问题：</strong></p>
<ol>
<li><p>怎么在markdown中打出下表，是手打吗？</p>
</li>
<li><p>怎么在markdown表格中打出‘|’（逻辑或）这个字符</p>
</li>
<li><p>怎么在markdown表格中打空格？</p>
<p>第一个问题显然是要编程序啦。。。</p>
<p>第二个问题如果不明白可以看这个：<a href="https://www.zhihu.com/question/37542455" target="_blank" rel="external">用Markdown写Hexo博客时如何转义竖杠 | ? - 知乎</a></p>
<p>第三个还是要参考知乎啦：<a href="https://www.zhihu.com/question/21420126" target="_blank" rel="external">在Markdown 语言中,如何实现段首空格的显示 ? - 知乎</a></p>
</li>
</ol>
<p>我想会有明白我在说什么的人</p>
<h2 id="ASCII码表（十进制）"><a href="#ASCII码表（十进制）" class="headerlink" title="ASCII码表（十进制）"></a>ASCII码表（十进制）</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">ASCII码</th>
<th style="text-align:center">字符</th>
<th style="text-align:center">ASCII码</th>
<th style="text-align:center">字符</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">^@</td>
<td style="text-align:center">64</td>
<td style="text-align:center">@</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">^A</td>
<td style="text-align:center">65</td>
<td style="text-align:center">A</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">^B</td>
<td style="text-align:center">66</td>
<td style="text-align:center">B</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">^C</td>
<td style="text-align:center">67</td>
<td style="text-align:center">C</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">^D</td>
<td style="text-align:center">68</td>
<td style="text-align:center">D</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">^E</td>
<td style="text-align:center">69</td>
<td style="text-align:center">E</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">^F</td>
<td style="text-align:center">70</td>
<td style="text-align:center">F</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">^G</td>
<td style="text-align:center">71</td>
<td style="text-align:center">G</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">^H</td>
<td style="text-align:center">72</td>
<td style="text-align:center">H</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">^I</td>
<td style="text-align:center">73</td>
<td style="text-align:center">I</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">^J</td>
<td style="text-align:center">74</td>
<td style="text-align:center">J</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">^K</td>
<td style="text-align:center">75</td>
<td style="text-align:center">K</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center">^L</td>
<td style="text-align:center">76</td>
<td style="text-align:center">L</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td style="text-align:center">^M</td>
<td style="text-align:center">77</td>
<td style="text-align:center">M</td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td style="text-align:center">^N</td>
<td style="text-align:center">78</td>
<td style="text-align:center">N</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">^O</td>
<td style="text-align:center">79</td>
<td style="text-align:center">O</td>
</tr>
<tr>
<td style="text-align:center">16</td>
<td style="text-align:center">^P</td>
<td style="text-align:center">80</td>
<td style="text-align:center">P</td>
</tr>
<tr>
<td style="text-align:center">17</td>
<td style="text-align:center">^Q</td>
<td style="text-align:center">81</td>
<td style="text-align:center">Q</td>
</tr>
<tr>
<td style="text-align:center">18</td>
<td style="text-align:center">^R</td>
<td style="text-align:center">82</td>
<td style="text-align:center">R</td>
</tr>
<tr>
<td style="text-align:center">19</td>
<td style="text-align:center">^S</td>
<td style="text-align:center">83</td>
<td style="text-align:center">S</td>
</tr>
<tr>
<td style="text-align:center">20</td>
<td style="text-align:center">^T</td>
<td style="text-align:center">84</td>
<td style="text-align:center">T</td>
</tr>
<tr>
<td style="text-align:center">21</td>
<td style="text-align:center">^U</td>
<td style="text-align:center">85</td>
<td style="text-align:center">U</td>
</tr>
<tr>
<td style="text-align:center">22</td>
<td style="text-align:center">^V</td>
<td style="text-align:center">86</td>
<td style="text-align:center">V</td>
</tr>
<tr>
<td style="text-align:center">23</td>
<td style="text-align:center">^W</td>
<td style="text-align:center">87</td>
<td style="text-align:center">W</td>
</tr>
<tr>
<td style="text-align:center">24</td>
<td style="text-align:center">^X</td>
<td style="text-align:center">88</td>
<td style="text-align:center">X</td>
</tr>
<tr>
<td style="text-align:center">25</td>
<td style="text-align:center">^Y</td>
<td style="text-align:center">89</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:center">26</td>
<td style="text-align:center">^Z</td>
<td style="text-align:center">90</td>
<td style="text-align:center">Z</td>
</tr>
<tr>
<td style="text-align:center">27</td>
<td style="text-align:center">^[</td>
<td style="text-align:center">91</td>
<td style="text-align:center">[</td>
</tr>
<tr>
<td style="text-align:center">28</td>
<td style="text-align:center">^\</td>
<td style="text-align:center">92</td>
<td style="text-align:center">\</td>
</tr>
<tr>
<td style="text-align:center">29</td>
<td style="text-align:center">^]</td>
<td style="text-align:center">93</td>
<td style="text-align:center">]</td>
</tr>
<tr>
<td style="text-align:center">30</td>
<td style="text-align:center">^^</td>
<td style="text-align:center">94</td>
<td style="text-align:center">^</td>
</tr>
<tr>
<td style="text-align:center">31</td>
<td style="text-align:center">^_</td>
<td style="text-align:center">95</td>
<td style="text-align:center">_</td>
</tr>
<tr>
<td style="text-align:center">32</td>
<td style="text-align:center"></td>
<td style="text-align:center">96</td>
<td style="text-align:center">`</td>
</tr>
<tr>
<td style="text-align:center">33</td>
<td style="text-align:center">!</td>
<td style="text-align:center">97</td>
<td style="text-align:center">a</td>
</tr>
<tr>
<td style="text-align:center">34</td>
<td style="text-align:center">“</td>
<td style="text-align:center">98</td>
<td style="text-align:center">b</td>
</tr>
<tr>
<td style="text-align:center">35</td>
<td style="text-align:center">#</td>
<td style="text-align:center">99</td>
<td style="text-align:center">c</td>
</tr>
<tr>
<td style="text-align:center">36</td>
<td style="text-align:center">$</td>
<td style="text-align:center">100</td>
<td style="text-align:center">d</td>
</tr>
<tr>
<td style="text-align:center">37</td>
<td style="text-align:center">%</td>
<td style="text-align:center">101</td>
<td style="text-align:center">e</td>
</tr>
<tr>
<td style="text-align:center">38</td>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">102</td>
<td style="text-align:center">f</td>
</tr>
<tr>
<td style="text-align:center">39</td>
<td style="text-align:center">‘</td>
<td style="text-align:center">103</td>
<td style="text-align:center">g</td>
</tr>
<tr>
<td style="text-align:center">40</td>
<td style="text-align:center">(</td>
<td style="text-align:center">104</td>
<td style="text-align:center">h</td>
</tr>
<tr>
<td style="text-align:center">41</td>
<td style="text-align:center">)</td>
<td style="text-align:center">105</td>
<td style="text-align:center">i</td>
</tr>
<tr>
<td style="text-align:center">42</td>
<td style="text-align:center">*</td>
<td style="text-align:center">106</td>
<td style="text-align:center">j</td>
</tr>
<tr>
<td style="text-align:center">43</td>
<td style="text-align:center">+</td>
<td style="text-align:center">107</td>
<td style="text-align:center">k</td>
</tr>
<tr>
<td style="text-align:center">44</td>
<td style="text-align:center">,</td>
<td style="text-align:center">108</td>
<td style="text-align:center">l</td>
</tr>
<tr>
<td style="text-align:center">45</td>
<td style="text-align:center">-</td>
<td style="text-align:center">109</td>
<td style="text-align:center">m</td>
</tr>
<tr>
<td style="text-align:center">46</td>
<td style="text-align:center">.</td>
<td style="text-align:center">110</td>
<td style="text-align:center">n</td>
</tr>
<tr>
<td style="text-align:center">47</td>
<td style="text-align:center">/</td>
<td style="text-align:center">111</td>
<td style="text-align:center">o</td>
</tr>
<tr>
<td style="text-align:center">48</td>
<td style="text-align:center">0</td>
<td style="text-align:center">112</td>
<td style="text-align:center">p</td>
</tr>
<tr>
<td style="text-align:center">49</td>
<td style="text-align:center">1</td>
<td style="text-align:center">113</td>
<td style="text-align:center">q</td>
</tr>
<tr>
<td style="text-align:center">50</td>
<td style="text-align:center">2</td>
<td style="text-align:center">114</td>
<td style="text-align:center">r</td>
</tr>
<tr>
<td style="text-align:center">51</td>
<td style="text-align:center">3</td>
<td style="text-align:center">115</td>
<td style="text-align:center">s</td>
</tr>
<tr>
<td style="text-align:center">52</td>
<td style="text-align:center">4</td>
<td style="text-align:center">116</td>
<td style="text-align:center">t</td>
</tr>
<tr>
<td style="text-align:center">53</td>
<td style="text-align:center">5</td>
<td style="text-align:center">117</td>
<td style="text-align:center">u</td>
</tr>
<tr>
<td style="text-align:center">54</td>
<td style="text-align:center">6</td>
<td style="text-align:center">118</td>
<td style="text-align:center">v</td>
</tr>
<tr>
<td style="text-align:center">55</td>
<td style="text-align:center">7</td>
<td style="text-align:center">119</td>
<td style="text-align:center">w</td>
</tr>
<tr>
<td style="text-align:center">56</td>
<td style="text-align:center">8</td>
<td style="text-align:center">120</td>
<td style="text-align:center">x</td>
</tr>
<tr>
<td style="text-align:center">57</td>
<td style="text-align:center">9</td>
<td style="text-align:center">121</td>
<td style="text-align:center">y</td>
</tr>
<tr>
<td style="text-align:center">58</td>
<td style="text-align:center">:</td>
<td style="text-align:center">122</td>
<td style="text-align:center">z</td>
</tr>
<tr>
<td style="text-align:center">59</td>
<td style="text-align:center">;</td>
<td style="text-align:center">123</td>
<td style="text-align:center">{</td>
</tr>
<tr>
<td style="text-align:center">60</td>
<td style="text-align:center">&lt;</td>
<td style="text-align:center">124</td>
<td style="text-align:center">\</td>
<td></td>
</tr>
<tr>
<td style="text-align:center">61</td>
<td style="text-align:center">=</td>
<td style="text-align:center">125</td>
<td style="text-align:center">}</td>
</tr>
<tr>
<td style="text-align:center">62</td>
<td style="text-align:center">&gt;</td>
<td style="text-align:center">126</td>
<td style="text-align:center">~</td>
</tr>
<tr>
<td style="text-align:center">63</td>
<td style="text-align:center">?</td>
<td style="text-align:center">127</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>下面就是OI界的常用工具，注意是优先级越高的运算符越先结合，此处越高的含义指的是表中的位置越高（即优先级序号越小）</p>
<h2 id="运算符优先级表"><a href="#运算符优先级表" class="headerlink" title="运算符优先级表"></a>运算符优先级表</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">优先级</th>
<th style="text-align:center">运算符</th>
<th style="text-align:center">结合性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">()&nbsp;&nbsp;[]</td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">! &nbsp;&nbsp;+（正）&nbsp;&nbsp;-（负）&nbsp;&nbsp; ~&nbsp;&nbsp; ++&nbsp;&nbsp; - - &nbsp;&nbsp;</td>
<td style="text-align:center">从右到左</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">*&nbsp;&nbsp; / &nbsp;&nbsp;%</td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">+（加）&nbsp;&nbsp; -（减）</td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">&lt;&lt;&nbsp;&nbsp; &gt;&gt; &nbsp;&nbsp;&gt;&gt;&gt;</td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">&lt; &nbsp;&nbsp;&lt;= &nbsp;&nbsp;&gt;=&nbsp;&nbsp; instanceof</td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">==  &nbsp;&nbsp; !=</td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">^</td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">&#124;</td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">&amp;&amp;</td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center">&#124;&#124;</td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td style="text-align:center">?&nbsp;&nbsp;:</td>
<td style="text-align:center">从右到左</td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td style="text-align:center">=&nbsp;&nbsp; += &nbsp;&nbsp;-= &nbsp;&nbsp;*=&nbsp;&nbsp; /= &nbsp;&nbsp;%= &nbsp;&nbsp;&amp;= &nbsp;&nbsp;&#124;=&nbsp;&nbsp; ^= &nbsp;&nbsp; ~=&nbsp;&nbsp; &lt;&lt;= &nbsp;&nbsp;&gt;&gt;=&nbsp;&nbsp; &gt;&gt;&gt;=</td>
<td style="text-align:center">从右到左</td>
</tr>
</tbody>
</table>
</div>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;存放以前编写的图表汇总，便于查找&lt;br&gt;
    
    </summary>
    
    
      <category term="图表" scheme="https://goseqh.tk/tags/%E5%9B%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Libre Online Judge模板库</title>
    <link href="https://goseqh.tk/2017/08/29/Libre-Online-Judge%E6%A8%A1%E6%9D%BF%E5%BA%93/"/>
    <id>https://goseqh.tk/2017/08/29/Libre-Online-Judge模板库/</id>
    <published>2017-08-29T10:14:06.000Z</published>
    <updated>2017-09-04T00:17:35.511Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>储存一些代码模板<br><a id="more"></a></p>
<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 998244353</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 4000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> ufs[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find_root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> ufs[x] = (ufs[x] == x) ? x : find_root(ufs[x]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">int</span> op, x, y;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ufs[i] = i;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;op, &amp;x, &amp;y);</div><div class="line">        <span class="keyword">if</span> (op == <span class="number">0</span>) ufs[find_root(x)] = find_root(y);</div><div class="line">        <span class="keyword">else</span> ans = ((ans &lt;&lt; <span class="number">1</span>) % M + (find_root(x) == find_root(y))) % M;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="乘法逆元"><a href="#乘法逆元" class="headerlink" title="乘法逆元"></a>乘法逆元</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 3000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">LL inv[maxn];</div><div class="line">LL n, p;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    inv[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"1\n"</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        inv[i] = (p - (p / i) * inv[p % i] % p) % p;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, inv[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;p);</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="最大异或和"><a href="#最大异或和" class="headerlink" title="最大异或和"></a>最大异或和</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 55</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">LL line[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (j == i || line[i] ^ line[j] &gt; line[j]) <span class="keyword">continue</span>;</div><div class="line">            line[j] ^= line[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) ans ^= line[i];</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;line[i]);</div><div class="line">    &#125;</div><div class="line">    sort(line, line + n);</div><div class="line">    reverse(line, line + n);</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="子串查找-KMP"><a href="#子串查找-KMP" class="headerlink" title="子串查找(KMP)"></a>子串查找(KMP)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"><span class="keyword">char</span> t[maxn];</div><div class="line"><span class="keyword">int</span> lent;</div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"><span class="keyword">int</span> lens;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; lent; i++)&#123;</div><div class="line">        <span class="keyword">int</span> k = f[i];</div><div class="line">        <span class="keyword">while</span> (k &amp;&amp; t[k] != t[i]) k = f[k];</div><div class="line">        f[i + <span class="number">1</span>] = (t[k] == t[i]) ? k + <span class="number">1</span> : <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> now = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lens; i++)&#123;</div><div class="line">        <span class="keyword">while</span> (now &amp;&amp; s[i] != t[now]) now = f[now];</div><div class="line">        <span class="keyword">if</span> (s[i] == t[now]) now++;</div><div class="line">        <span class="keyword">if</span> (now == lent) ans++, now = f[now];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, s, t);</div><div class="line">    lent = <span class="built_in">strlen</span>(t);</div><div class="line">    lens = <span class="built_in">strlen</span>(s);</div><div class="line">    init();</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="普通平衡树-Treap"><a href="#普通平衡树-Treap" class="headerlink" title="普通平衡树(Treap)"></a>普通平衡树(Treap)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></div><div class="line">    node* ch[<span class="number">2</span>];</div><div class="line">    <span class="keyword">int</span> val, num, size, p;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span></span>&#123;</div><div class="line">        size = <span class="number">0</span>;</div><div class="line">        size += (ch[<span class="number">0</span>] == <span class="literal">NULL</span>) ? <span class="number">0</span> : ch[<span class="number">0</span>] -&gt; size;</div><div class="line">        size += (ch[<span class="number">1</span>] == <span class="literal">NULL</span>) ? <span class="number">0</span> : ch[<span class="number">1</span>] -&gt; size;</div><div class="line">        size += num;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> _val)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (_val == val) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        <span class="keyword">return</span> val &lt; _val;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find_pre</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> d = cmp(x);</div><div class="line">        <span class="keyword">if</span> (d == <span class="number">0</span> || d == <span class="number">-1</span>) <span class="keyword">return</span> (ch[<span class="number">0</span>] == <span class="literal">NULL</span>) ? -INF : ch[<span class="number">0</span>] -&gt; find_pre(x);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> max(val, (ch[<span class="number">1</span>] == <span class="literal">NULL</span>) ? -INF : ch[<span class="number">1</span>] -&gt; find_pre(x));</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find_suf</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> d = cmp(x);</div><div class="line">        <span class="keyword">if</span> (d == <span class="number">1</span> || d == <span class="number">-1</span>) <span class="keyword">return</span> (ch[<span class="number">1</span>] == <span class="literal">NULL</span>) ? INF : ch[<span class="number">1</span>] -&gt; find_suf(x);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> min(val, (ch[<span class="number">0</span>] == <span class="literal">NULL</span>) ? INF : ch[<span class="number">0</span>] -&gt; find_suf(x));</div><div class="line">    &#125;</div><div class="line">    node (<span class="keyword">int</span> val, <span class="keyword">int</span> num, <span class="keyword">int</span> p) : val(val), num(num), p(p), size(<span class="number">1</span>)&#123;ch[<span class="number">0</span>] = ch[<span class="number">1</span>] = <span class="literal">NULL</span>;&#125;</div><div class="line">    node()&#123;&#125;</div><div class="line">&#125;;</div><div class="line">node* root;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Rand</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> p = rand() % maxn;</div><div class="line">    <span class="keyword">while</span> (vis[p]) p = rand() % maxn;</div><div class="line">    vis[p] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> p;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(node*&amp; o, <span class="keyword">int</span> d)</span></span>&#123;</div><div class="line">    node* k = o -&gt; ch[d]; o -&gt; ch[d] = k -&gt; ch[d ^ <span class="number">1</span>]; k -&gt; ch[d ^ <span class="number">1</span>] = o;</div><div class="line">    k -&gt; maintain();</div><div class="line">    o -&gt; maintain();</div><div class="line">    o = k;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(node*&amp; now, <span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (now == <span class="literal">NULL</span>) now = <span class="keyword">new</span> node(x, <span class="number">1</span>, Rand());</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (now -&gt; val == x) now -&gt; num++;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> d = now -&gt; cmp(x);</div><div class="line">        insert(now -&gt; ch[d], x);</div><div class="line">        <span class="keyword">if</span> (now -&gt; ch[d] -&gt; p &gt; now -&gt; p) rotate(now, d);</div><div class="line">    &#125;</div><div class="line">    now -&gt; maintain();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(node*&amp; now, <span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (now == <span class="literal">NULL</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (now -&gt; val == x)&#123;</div><div class="line">        <span class="keyword">if</span> (now -&gt; num == <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (now -&gt; ch[<span class="number">0</span>] == <span class="literal">NULL</span> &amp;&amp; now -&gt; ch[<span class="number">1</span>] == <span class="literal">NULL</span>)&#123;</div><div class="line">                now = <span class="literal">NULL</span>;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> d = ((now -&gt; ch[<span class="number">0</span>] == <span class="literal">NULL</span>) ? -INF : now -&gt; ch[<span class="number">0</span>] -&gt; p) &lt; </div><div class="line">            ((now -&gt; ch[<span class="number">1</span>] == <span class="literal">NULL</span>) ? -INF : now -&gt; ch[<span class="number">1</span>] -&gt; p);</div><div class="line">            rotate(now, d); remove(now -&gt; ch[d ^ <span class="number">1</span>], x);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> now -&gt; num--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> remove(now -&gt; ch[now -&gt; cmp(x)], x);</div><div class="line">    now -&gt; maintain();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_rank</span><span class="params">(node* now, <span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans;</div><div class="line">    <span class="keyword">if</span> (now == <span class="literal">NULL</span>) <span class="keyword">return</span> -INF;</div><div class="line">    <span class="keyword">int</span> d = now -&gt; cmp(x);</div><div class="line">    <span class="keyword">if</span> (d == <span class="number">-1</span>) ans = <span class="number">1</span> + ((now -&gt; ch[<span class="number">0</span>] == <span class="literal">NULL</span>) ? <span class="number">0</span> : now -&gt; ch[<span class="number">0</span>] -&gt; size);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (d == <span class="number">0</span>) ans = get_rank(now -&gt; ch[<span class="number">0</span>], x);</div><div class="line">    <span class="keyword">else</span> ans = now -&gt; num + get_rank(now -&gt; ch[<span class="number">1</span>], x) + ((now -&gt; ch[<span class="number">0</span>] == <span class="literal">NULL</span>) ? <span class="number">0</span> : now -&gt; ch[<span class="number">0</span>] -&gt; size);</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_by_rank</span><span class="params">(node* now, <span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (now == <span class="literal">NULL</span>) <span class="keyword">return</span> -INF;</div><div class="line">    <span class="keyword">int</span> l = (now -&gt; ch[<span class="number">0</span>] == <span class="literal">NULL</span>) ? <span class="number">0</span> : now -&gt; ch[<span class="number">0</span>] -&gt; size;</div><div class="line">    <span class="keyword">if</span> (x &gt; l &amp;&amp; x &lt;= l + now -&gt; num) <span class="keyword">return</span> now -&gt; val;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &lt;= l) <span class="keyword">return</span> find_by_rank(now -&gt; ch[<span class="number">0</span>], x);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> find_by_rank(now -&gt; ch[<span class="number">1</span>], x - l - now -&gt; num);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_pre</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> root -&gt; find_pre(x);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_suf</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> root -&gt; find_suf(x);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n, x, op;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;op);</div><div class="line">        <span class="keyword">switch</span>(op)&#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>:&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                insert(root, x);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> <span class="number">2</span>:&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                remove(root, x);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> <span class="number">3</span>:&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, get_rank(root, x));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> <span class="number">4</span>:&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, find_by_rank(root, x));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> <span class="number">5</span>:&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, get_pre(x));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> <span class="number">6</span>:&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, get_suf(x));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="最小费用流-MCMF"><a href="#最小费用流-MCMF" class="headerlink" title="最小费用流(MCMF)"></a>最小费用流(MCMF)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 405</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 15005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to, flow, cost;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to, <span class="keyword">int</span> flow, <span class="keyword">int</span> cost) : next(next), to(to), flow(flow), cost(cost)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxm &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> h[maxn], n, m, cnt = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to, <span class="keyword">int</span> flow, <span class="keyword">int</span> cost)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to, flow, cost);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr, <span class="number">0</span>, -cost);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> d[maxn], p[maxn], s, t;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; spfa;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = s; i &lt;= t; i++) d[i] = INF;</div><div class="line">    d[s] = <span class="number">0</span>;</div><div class="line">    spfa.push(s);</div><div class="line">    vis[s] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!spfa.empty())&#123;</div><div class="line">        <span class="keyword">int</span> op = spfa.front(); spfa.pop();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[op]; i; i = e[i].next)&#123;</div><div class="line">            <span class="keyword">if</span> (!e[i].flow) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> k = e[i].to;</div><div class="line">            <span class="keyword">if</span> (d[k] &gt; d[op] + e[i].cost)&#123;</div><div class="line">                p[k] = i;</div><div class="line">                d[k] = d[op] + e[i].cost;</div><div class="line">                <span class="keyword">if</span> (!vis[k])&#123;</div><div class="line">                    vis[k] = <span class="number">1</span>;</div><div class="line">                    spfa.push(k);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        vis[op] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (d[t] &gt;= INF) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Augment</span><span class="params">(<span class="keyword">int</span>&amp; maxflow, <span class="keyword">int</span>&amp; mincost)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> now = t, flow = INF;</div><div class="line">    <span class="keyword">while</span> (now != s)&#123;</div><div class="line">        <span class="keyword">int</span> k = p[now];</div><div class="line">        flow = min(flow, e[k].flow);</div><div class="line">        now = e[k ^ <span class="number">1</span>]. to;</div><div class="line">    &#125;</div><div class="line">    now = t;</div><div class="line">    <span class="keyword">while</span> (now != s)&#123;</div><div class="line">        <span class="keyword">int</span> k = p[now];</div><div class="line">        e[k].flow -= flow;</div><div class="line">        e[k ^ <span class="number">1</span>].flow += flow;</div><div class="line">        now = e[k ^ <span class="number">1</span>].to;</div><div class="line">    &#125;</div><div class="line">    maxflow += flow, mincost += (d[t] - d[s]) * flow;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MCMF</span><span class="params">(<span class="keyword">int</span>&amp; maxflow, <span class="keyword">int</span>&amp; mincost)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(SPFA()) Augment(maxflow, mincost);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">int</span> x, y, f, c;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;x, &amp;y, &amp;f, &amp;c);</div><div class="line">        Add_Edge(x, y, f, c);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> maxflow = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> mincost = <span class="number">0</span>;</div><div class="line">    s = <span class="number">1</span>, t = n;</div><div class="line">    MCMF(maxflow, mincost);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d"</span>, maxflow, mincost);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="维护全序集-Treap"><a href="#维护全序集-Treap" class="headerlink" title="维护全序集(Treap)"></a>维护全序集(Treap)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 3000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></div><div class="line">    node* ch[<span class="number">2</span>];</div><div class="line">    <span class="keyword">int</span> val, num, p, size;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> _val)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (val == _val) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        <span class="keyword">return</span> _val &gt; val;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span></span>&#123;</div><div class="line">        size = <span class="number">0</span>;</div><div class="line">        size += (ch[<span class="number">0</span>] == <span class="literal">NULL</span>) ? <span class="number">0</span> : ch[<span class="number">0</span>] -&gt; size;</div><div class="line">        size += (ch[<span class="number">1</span>] == <span class="literal">NULL</span>) ? <span class="number">0</span> : ch[<span class="number">1</span>] -&gt; size;</div><div class="line">        size += num;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find_pre</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> d = cmp(x);</div><div class="line">        <span class="keyword">if</span> (d &lt;= <span class="number">0</span>) <span class="keyword">return</span> (ch[<span class="number">0</span>] == <span class="literal">NULL</span>) ? -INF : ch[<span class="number">0</span>] -&gt; find_pre(x);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> max(val, (ch[<span class="number">1</span>] == <span class="literal">NULL</span>) ? -INF : ch[<span class="number">1</span>] -&gt; find_pre(x));</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find_suf</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> d = cmp(x);</div><div class="line">        <span class="keyword">if</span> (d == <span class="number">1</span> || d == <span class="number">-1</span>) <span class="keyword">return</span> (ch[<span class="number">1</span>] == <span class="literal">NULL</span>) ? INF : ch[<span class="number">1</span>] -&gt; find_suf(x);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> min(val, (ch[<span class="number">0</span>] == <span class="literal">NULL</span>) ? INF : ch[<span class="number">0</span>] -&gt; find_suf(x));</div><div class="line">    &#125;</div><div class="line">    node(<span class="keyword">int</span> val, <span class="keyword">int</span> num, <span class="keyword">int</span> p, <span class="keyword">int</span> size) : val(val), num(num), p(p), size(size)&#123;ch[<span class="number">0</span>] = ch[<span class="number">1</span>] = <span class="literal">NULL</span>;&#125;</div><div class="line">    node()&#123;&#125;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(node*&amp; now, <span class="keyword">int</span> d)</span></span>&#123;</div><div class="line">    node* k = now -&gt; ch[d]; now -&gt; ch[d] = k -&gt; ch[d ^ <span class="number">1</span>]; k -&gt; ch[d ^ <span class="number">1</span>] = now;</div><div class="line">    k -&gt; maintain();</div><div class="line">    now -&gt; maintain();</div><div class="line">    now = k;</div><div class="line">&#125;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Rand</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> p = rand() % maxn;</div><div class="line">    <span class="keyword">while</span> (vis[p]) p = rand() % maxn;</div><div class="line">    vis[p] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> p;</div><div class="line">&#125;</div><div class="line">node* root;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(node*&amp; now, <span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (now == <span class="literal">NULL</span>) now = <span class="keyword">new</span> node (x, <span class="number">1</span>, Rand(), <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (now -&gt; val == x) now -&gt; num++;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> d = now -&gt; cmp(x);</div><div class="line">        insert(now -&gt; ch[d], x);</div><div class="line">        <span class="keyword">if</span> (now -&gt; ch[d] -&gt; p &gt; now -&gt; p) rotate(now, d);</div><div class="line">    &#125;</div><div class="line">    now -&gt; maintain();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(node*&amp; now, <span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (now == <span class="literal">NULL</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (now -&gt; val == x)&#123;</div><div class="line">        <span class="keyword">if</span> (now -&gt; num == <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (now -&gt; ch[<span class="number">0</span>] == <span class="literal">NULL</span>) now = now -&gt; ch[<span class="number">1</span>];</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(now -&gt; ch[<span class="number">1</span>] == <span class="literal">NULL</span>) now = now -&gt; ch[<span class="number">0</span>];</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">int</span> d = now -&gt; ch[<span class="number">0</span>] -&gt; p &lt; now -&gt; ch[<span class="number">1</span>] -&gt; p;</div><div class="line">                rotate(now, d);</div><div class="line">                remove(now -&gt; ch[d ^ <span class="number">1</span>], x);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> now -&gt; num--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> remove(now -&gt; ch[now -&gt; cmp(x)], x);</div><div class="line">    <span class="keyword">if</span> (now != <span class="literal">NULL</span>) now -&gt; maintain();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_by_rank</span><span class="params">(node*&amp; now, <span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (now == <span class="literal">NULL</span>) <span class="keyword">return</span> -INF;</div><div class="line">    <span class="keyword">int</span> l = (now -&gt; ch[<span class="number">0</span>] == <span class="literal">NULL</span>) ? <span class="number">0</span> : now -&gt; ch[<span class="number">0</span>] -&gt; size;</div><div class="line">    <span class="keyword">if</span> (x &gt; l &amp;&amp; x &lt;= l + now -&gt; num) <span class="keyword">return</span> now -&gt; val;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &lt;= l) <span class="keyword">return</span> find_by_rank(now -&gt; ch[<span class="number">0</span>], x);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> find_by_rank(now -&gt; ch[<span class="number">1</span>], x - l - now -&gt; num);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_rank</span><span class="params">(node*&amp; now, <span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (now == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> d = now -&gt; cmp(x);</div><div class="line">    <span class="keyword">int</span> l = (now -&gt; ch[<span class="number">0</span>] == <span class="literal">NULL</span>) ? <span class="number">0</span> : now -&gt; ch[<span class="number">0</span>] -&gt; size;</div><div class="line">    <span class="keyword">if</span> (d == <span class="number">-1</span>) <span class="keyword">return</span> l;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (d == <span class="number">1</span>) <span class="keyword">return</span> now -&gt; num + l + get_rank(now -&gt; ch[<span class="number">1</span>], x);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> get_rank(now -&gt; ch[<span class="number">0</span>], x);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_pre</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> k = root -&gt; find_pre(x);</div><div class="line">    <span class="keyword">if</span> (k == -INF) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">return</span> k;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_suf</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> k = root -&gt; find_suf(x);</div><div class="line">    <span class="keyword">if</span> (k == INF) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">return</span> k;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n, x, op;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;op);</div><div class="line">        <span class="keyword">switch</span>(op)&#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">0</span>:&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                insert(root, x);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>:&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                remove(root, x);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> <span class="number">2</span>:&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, find_by_rank(root, x));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> <span class="number">3</span>:&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, get_rank(root, x));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> <span class="number">4</span>:&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, get_pre(x));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> <span class="number">5</span>:&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, get_suf(x));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="最大流-ISAP"><a href="#最大流-ISAP" class="headerlink" title="最大流(ISAP)"></a>最大流(ISAP)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 4000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn2 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    LL flow;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to, LL flow) : next(next), to(to), flow(flow)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> h[maxn2], cnt = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, LL z)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[x], y, z);</div><div class="line">    h[x] = cnt;</div><div class="line">    e[++cnt] = edge(h[y], x, <span class="number">0</span>);</div><div class="line">    h[y] = cnt;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> d[maxn2], p[maxn2], cur[maxn2], num[maxn2];</div><div class="line"><span class="keyword">int</span> n, m, s, t;</div><div class="line"><span class="keyword">bool</span> vis[maxn2]; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Augment</span><span class="params">(LL&amp; maxflow)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> now = t;</div><div class="line">    LL flow = (LL)INF * INF;</div><div class="line">    <span class="keyword">while</span> (now != s)&#123;</div><div class="line">        <span class="keyword">int</span> k = p[now];</div><div class="line">        flow = min(flow, e[k].flow);</div><div class="line">        now = e[k ^ <span class="number">1</span>].to;</div><div class="line">    &#125;</div><div class="line">    now = t;</div><div class="line">    <span class="keyword">while</span> (now != s)&#123;</div><div class="line">        <span class="keyword">int</span> k = p[now];</div><div class="line">        e[k].flow -= flow;</div><div class="line">        e[k ^ <span class="number">1</span>].flow += flow;</div><div class="line">        now = e[k ^ <span class="number">1</span>].to;</div><div class="line">    &#125;</div><div class="line">    maxflow += flow;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) d[i] = INF;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; bfs;</div><div class="line">    bfs.push(t);</div><div class="line">    vis[t] = <span class="number">1</span>;</div><div class="line">    d[t] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (!bfs.empty())&#123;</div><div class="line">        <span class="keyword">int</span> op = bfs.front();bfs.pop();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[op]; i; i = e[i].next)&#123;</div><div class="line">            <span class="keyword">if</span> (e[i].flow) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> k = e[i].to;</div><div class="line">            <span class="keyword">if</span> (vis[k]) <span class="keyword">continue</span>;</div><div class="line">            vis[k] = <span class="number">1</span>;</div><div class="line">            d[k] = d[op] + <span class="number">1</span>;</div><div class="line">            bfs.push(k);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (d[s] &gt;= INF) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ISAP</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!BFS())&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"0"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </div><div class="line">        <span class="keyword">if</span>(d[i] &gt;= INF) <span class="keyword">continue</span>; </div><div class="line">        <span class="keyword">else</span> num[d[i]]++, cur[i] = h[i];</div><div class="line">    LL maxflow = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> u = s;</div><div class="line">    <span class="keyword">while</span> (d[s] &lt; n)&#123;</div><div class="line">        <span class="keyword">bool</span> if_work = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (u == t)&#123;</div><div class="line">            Augment(maxflow);</div><div class="line">            u = s;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = cur[u]; i; i = e[i].next)&#123;</div><div class="line">            <span class="keyword">if</span>(!e[i].flow) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> k = e[i].to;</div><div class="line">            <span class="keyword">if</span> (d[u] - <span class="number">1</span> == d[k])&#123;</div><div class="line">                cur[u] = i;</div><div class="line">                u = k;</div><div class="line">                if_work = <span class="number">1</span>;</div><div class="line">                p[u] = i;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!if_work)&#123;</div><div class="line">            <span class="keyword">int</span> minnum = n - <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = h[u]; i; i = e[i].next)&#123;</div><div class="line">                <span class="keyword">if</span> (!e[i].flow) <span class="keyword">continue</span>;</div><div class="line">                minnum = min(minnum, d[e[i].to]);</div><div class="line">            &#125;</div><div class="line">            num[d[u]]--;</div><div class="line">            <span class="keyword">if</span> (num[d[u]] == <span class="number">0</span>)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%lld"</span>, maxflow);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            d[u] = minnum + <span class="number">1</span>;</div><div class="line">            cur[u] = h[u];</div><div class="line">            num[d[u]]++;</div><div class="line">            <span class="keyword">if</span> (u != s) u = e[p[u] ^ <span class="number">1</span>].to;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, maxflow);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    LL z;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;s, &amp;t);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>, &amp;x, &amp;y, &amp;z);</div><div class="line">        Add_Edge(x, y, z);</div><div class="line">    &#125;</div><div class="line">    ISAP();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="多项式乘法"><a href="#多项式乘法" class="headerlink" title="多项式乘法"></a>多项式乘法</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pi 3.141592653589793</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">complex</span>&#123;</span></div><div class="line">    <span class="keyword">double</span> r, i;</div><div class="line">    <span class="keyword">complex</span>(<span class="keyword">double</span> r, <span class="keyword">double</span> i) : r(r), i(i)&#123;&#125;</div><div class="line">    <span class="keyword">complex</span>()&#123;&#125;</div><div class="line">&#125;com;</div><div class="line">com <span class="keyword">operator</span> + (com a, com b)&#123;</div><div class="line">    <span class="keyword">return</span> com(a.r + b.r, a.i + b.i);</div><div class="line">&#125;</div><div class="line">com <span class="keyword">operator</span> - (com a, com b)&#123;</div><div class="line">    <span class="keyword">return</span> com(a.r - b.r, a.i - b.i);</div><div class="line">&#125;</div><div class="line">com <span class="keyword">operator</span> * (com a, com b)&#123;</div><div class="line">    <span class="keyword">return</span> com(a.r * b.r - a.i * b.i, a.r * b.i + a.i * b.r);</div><div class="line">&#125;</div><div class="line">com <span class="keyword">operator</span> / (com a, <span class="keyword">int</span> k)&#123;</div><div class="line">    <span class="keyword">return</span> com(a.r / k, a.i / k);</div><div class="line">&#125;</div><div class="line"><span class="function">com <span class="title">ex</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> com(<span class="built_in">cos</span>(x), <span class="built_in">sin</span>(x));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> rev[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> bit)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; bit); i++)&#123;</div><div class="line">        rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span> | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(com* a, <span class="keyword">int</span> n, <span class="keyword">int</span> dft)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span> (rev[i] &gt; i) swap(a[rev[i]], a[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> step = <span class="number">1</span>; step &lt; n; step &lt;&lt;= <span class="number">1</span>)&#123;</div><div class="line">        com wn = ex(pi * dft / step);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j += (step &lt;&lt; <span class="number">1</span>))&#123;</div><div class="line">            com wnk = com(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = j; i &lt; j + step; i++)&#123;</div><div class="line">                com x = a[i];</div><div class="line">                com y = a[i + step] * wnk;</div><div class="line">                a[i] = x + y;</div><div class="line">                a[i + step] = x - y;</div><div class="line">                wnk = wnk * wn;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (dft == <span class="number">-1</span>) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) a[i] = a[i] / n;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> s[maxn];</div><div class="line"><span class="keyword">int</span> t[maxn];</div><div class="line">com a[maxn];</div><div class="line">com b[maxn];</div><div class="line"><span class="keyword">int</span> ans[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"mul.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"mul.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;s[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) a[i] = com(s[i], <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) b[i] = com(t[i], <span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span> len = n + m + <span class="number">2</span>;</div><div class="line">    <span class="keyword">int</span> si = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (len)&#123;</div><div class="line">        len &gt;&gt;= <span class="number">1</span>;</div><div class="line">        si++;</div><div class="line">    &#125;</div><div class="line">    init(si);</div><div class="line">    len = (<span class="number">1</span> &lt;&lt; si);</div><div class="line">    FFT(a, len, <span class="number">1</span>);</div><div class="line">    FFT(b, len, <span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) a[i] = a[i] * b[i];</div><div class="line">    FFT(a, len, <span class="number">-1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) ans[i] = (<span class="keyword">int</span>) (a[i].r + <span class="number">0.5</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + m + <span class="number">1</span>; i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, ans[i]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="后缀排序"><a href="#后缀排序" class="headerlink" title="后缀排序"></a>后缀排序</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"><span class="keyword">int</span> t1[maxn];</div><div class="line"><span class="keyword">int</span> t2[maxn];</div><div class="line"><span class="keyword">int</span> sa[maxn];</div><div class="line"><span class="keyword">int</span> cnt[maxn];</div><div class="line"><span class="keyword">int</span> rank[maxn];</div><div class="line"><span class="keyword">int</span> height[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> *x = t1, *y = t2;</div><div class="line">    m = <span class="number">62</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) cnt[x[i] = s[i]]++;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) cnt[i] += cnt[i - <span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) sa[--cnt[x[i]]] = i;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k &lt;&lt;= <span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= n - k; i--) y[p++] = i;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span> (sa[i] &gt;= k) y[p++] = sa[i] - k;</div><div class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span>(cnt));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; i++) cnt[x[y[i]]]++;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) cnt[i] += cnt[i - <span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = p - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) sa[--cnt[x[y[i]]]] = y[i];</div><div class="line">        p = <span class="number">0</span>;</div><div class="line">        swap(x, y);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">            x[sa[i]] = (!i || y[sa[i]] != y[sa[i - <span class="number">1</span>]] || y[sa[i] + k] != y[sa[i - <span class="number">1</span>] + k]) ? p++ : p - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        m = p;</div><div class="line">        <span class="keyword">if</span> (m &gt;= n) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) rank[sa[i]] = i;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> h = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (h) h--;</div><div class="line">        <span class="keyword">if</span> (rank[i] == <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> j = sa[rank[i] - <span class="number">1</span>];</div><div class="line">        <span class="keyword">while</span> (s[i + h] == s[j + h]) h++;</div><div class="line">        height[rank[i]] = h;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"Suffix.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"Suffix.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">    n = <span class="built_in">strlen</span>(s);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">isdigit</span>(s[i])) s[i] = s[i] - <span class="string">'0'</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isupper</span>(s[i])) s[i] = s[i] - <span class="string">'A'</span> + <span class="number">10</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">islower</span>(s[i])) s[i] = s[i] - <span class="string">'a'</span> + <span class="number">36</span>;</div><div class="line">    &#125;</div><div class="line">    build();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, sa[i] + <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 505</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">LL a[maxn][maxn];</div><div class="line">LL b[maxn][maxn];</div><div class="line">LL c[maxn][maxn];</div><div class="line"><span class="keyword">int</span> n, m, p;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;p, &amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; p; j++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i][j]), a[i][j] = (a[i][j] + M) % M;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; i++)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;b[i][j]), b[i][j] = (b[i][j] + M) % M;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; p; k++)</div><div class="line">                c[i][j] = (c[i][j] + a[i][k] * b[k][j] % M) % M;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%lld "</span>, c[i][j]);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;储存一些代码模板&lt;br&gt;
    
    </summary>
    
    
      <category term="网络流" scheme="https://goseqh.tk/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="zkw费用流" scheme="https://goseqh.tk/tags/zkw%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>Libre Online Judge阶段性汇总I</title>
    <link href="https://goseqh.tk/2017/08/29/Libre-Online-Judge%E9%98%B6%E6%AE%B5%E6%80%A7%E6%B1%87%E6%80%BBI/"/>
    <id>https://goseqh.tk/2017/08/29/Libre-Online-Judge阶段性汇总I/</id>
    <published>2017-08-29T10:07:44.000Z</published>
    <updated>2017-09-04T00:16:23.163Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>最近也开始总结LOJ的题目啦，以前一道题一篇题解<strong>太傻了</strong>，但是以前的就那样吧，现在开始每十题一篇题解<br><a id="more"></a></p>
<h2 id="首篇说明"><a href="#首篇说明" class="headerlink" title="首篇说明"></a>首篇说明</h2><p>为了方便，以后的题目显示采用iframe框架</p>
<h1 id="507-「LibreOJ-NOI-Round-1」接竹竿"><a href="#507-「LibreOJ-NOI-Round-1」接竹竿" class="headerlink" title="#507. 「LibreOJ NOI Round #1」接竹竿"></a>#507. 「LibreOJ NOI Round #1」接竹竿</h1><iframe src="https://loj.ac/problem/507" width="775" height="2180" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>其实我们可以发现，对于这种序列DP的问题，大部分其实都是可以单调队列优化的，我们考虑对比两种可行的方案，然后进行一些数学推导，往往可以得到一些单调队列形式的公式，这样就可以使用单调队列完美地解决这样的问题了</p>
<p>本题也不例外，但是前提是本题需要抽象思考一下，那就是这题的牌的取出顺序不会造成什么影响，我们可以发现，如果我们先取出了一些，后来又取了一些，那么后面取的要么可以完全包含前面取的那些牌，要么与上次不相交，所以本题就可以使用单调队列进行优化然后解决了，单调队列层面上，就是列一列公式，对每种花色开一个单调队列，然后套用单调队列模板化代码即可（详见BZOJ题解）</p>
<p>然而实际上，经过分析以后，本题可以不使用单调队列这种方法，因为DP计算公式中与决策有关的项是与当前要求的状态没有任何关联的，这样我们只要采用打擂台的方法，维护一个最大值即可</p>
<p>这也就说明，单调队列优化的DP的出现，是为了解决与决策与当前状态有关联时的DP问题，而如果没有关联则不需要这种方法</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> c[maxn];</div><div class="line"><span class="keyword">int</span> v[maxn];</div><div class="line">LL pre[maxn];</div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    LL y;</div><div class="line">    point(<span class="keyword">int</span> x, LL y) : x(x), y(y)&#123;&#125;</div><div class="line">    point()&#123;&#125;</div><div class="line">&#125;;</div><div class="line">point save[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line">LL dp[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v[i]);</div><div class="line">        pre[i] = pre[i - <span class="number">1</span>] + v[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        dp[i] = dp[i - <span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span> (!vis[c[i]])&#123;</div><div class="line">            vis[c[i]] = <span class="number">1</span>;</div><div class="line">            save[c[i]] = point(i - <span class="number">1</span>, dp[i - <span class="number">1</span>]);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        dp[i] = max(dp[i], save[c[i]].y + pre[i] - pre[save[c[i]].x]);</div><div class="line">        <span class="keyword">if</span> (dp[i - <span class="number">1</span>] - save[c[i]].y &gt; pre[i - <span class="number">1</span>] - pre[save[c[i]].x]) save[c[i]] = point(i - <span class="number">1</span>, dp[i - <span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, dp[n]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="514-「LibreOJ-β-Round-2」模拟只会猜题意"><a href="#514-「LibreOJ-β-Round-2」模拟只会猜题意" class="headerlink" title="#514. 「LibreOJ β Round #2」模拟只会猜题意"></a>#514. 「LibreOJ β Round #2」模拟只会猜题意</h1><iframe src="https://loj.ac/problem/514" width="775" height="1680" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><p>本题只是暴力。。。好了就这样过了吧<del>本题只是用来证明LOJ评测机速度的</del></p>
<h2 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> pre[maxn];</div><div class="line"><span class="keyword">int</span> ans[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">        pre[i] = pre[i - <span class="number">1</span>] + line[i];</div><div class="line">    &#125;</div><div class="line">    ans[n + <span class="number">1</span>] = -INF;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)&#123;</div><div class="line">        ans[i] = ans[i + <span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n - i + <span class="number">1</span>; j++)&#123;</div><div class="line">            ans[i] = max(ans[i], pre[j + i - <span class="number">1</span>] - pre[j - <span class="number">1</span>]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[x]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="516-「LibreOJ-β-Round-2」DP-一般看规律"><a href="#516-「LibreOJ-β-Round-2」DP-一般看规律" class="headerlink" title="#516. 「LibreOJ β Round #2」DP 一般看规律"></a>#516. 「LibreOJ β Round #2」DP 一般看规律</h1><iframe src="https://loj.ac/problem/516" width="775" height="2300" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先这种不可逆染色问题，基本都能上来就想到是并查集，然后题目要求的就是任一两个相同的颜色间的最小距离，那么我们只需要用set维护，然后启发式合并即可</p>
<h2 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 300005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483647</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qu</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    qu(<span class="keyword">int</span> x, <span class="keyword">int</span> y) : x(x), y(y)&#123;&#125;</div><div class="line">    qu()&#123;&#125;</div><div class="line">&#125;q[maxn];</div><div class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; save[maxn];</div><div class="line"><span class="keyword">int</span> a[maxn];</div><div class="line"><span class="keyword">int</span> c[maxn];</div><div class="line"><span class="keyword">int</span> tag[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; x)</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    read(n), read(m);</div><div class="line">    <span class="keyword">int</span> ct = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(a[i]), c[ct++] = a[i];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        read(q[i].x), read(q[i].y);</div><div class="line">        c[ct++] = q[i].x, c[ct++] = q[i].y;</div><div class="line">    &#125;</div><div class="line">    sort(c, c + ct);</div><div class="line">    ct = unique(c, c + ct) - c;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ct; i++) tag[i] = i;</div><div class="line">    <span class="keyword">int</span> ans = INF;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        a[i] =  lower_bound(c, c + ct, a[i]) - c;</div><div class="line">        save[a[i]].insert(i);</div><div class="line"></div><div class="line">        <span class="keyword">auto</span> it = save[a[i]].lower_bound(i);</div><div class="line">        <span class="comment">//auto it = lower_bound(save[a[i]].begin(), save[a[i]].end(), i);</span></div><div class="line">        <span class="keyword">if</span> (it != save[a[i]].begin()) ans = min(ans, i - *(--it));</div><div class="line">        it = save[a[i]].upper_bound(i);</div><div class="line">        <span class="comment">//it = upper_bound(save[a[i]].begin(), save[a[i]].end(), i);</span></div><div class="line">        <span class="keyword">if</span> (it != save[a[i]].end()) ans = min(ans, *it - i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123; </div><div class="line">        q[i].x = lower_bound(c, c + ct, q[i].x) - c,</div><div class="line">        q[i].y = lower_bound(c, c + ct, q[i].y) - c;</div><div class="line">        <span class="keyword">int</span> x = q[i].x, y = q[i].y;</div><div class="line">        <span class="keyword">if</span> (x == y)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (save[tag[x]].size() &gt; save[tag[y]].size()) swap(tag[x], tag[y]);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = save[tag[x]].begin(); it != save[tag[x]].end(); it++)&#123;</div><div class="line">            save[tag[y]].insert(*it);</div><div class="line"></div><div class="line">            <span class="keyword">auto</span> it2 = save[tag[y]].lower_bound(*it);</div><div class="line">            <span class="comment">//auto it2 = lower_bound(save[tag[y]].begin(), save[tag[y]].end(), *it);</span></div><div class="line">            <span class="keyword">if</span> (it2 != save[tag[y]].begin()) ans = min(ans, *it - *(--it2));</div><div class="line">            it2 = save[tag[y]].upper_bound(*it);</div><div class="line">            <span class="comment">//it2 = upper_bound(save[tag[y]].begin(), save[tag[y]].end(), *it);</span></div><div class="line">            <span class="keyword">if</span> (it2 != save[tag[y]].end()) ans = min(ans, *it2 - *it);</div><div class="line">        &#125;</div><div class="line">        save[tag[x]].clear();</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="524-「LibreOJ-β-Round-4」游戏"><a href="#524-「LibreOJ-β-Round-4」游戏" class="headerlink" title="#524. 「LibreOJ β Round #4」游戏"></a>#524. 「LibreOJ β Round #4」游戏</h1><iframe src="https://loj.ac/problem/524" width="775" height="1770" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先，我们先考虑一下极端情况：</p>
<ul>
<li>n = 1的时候，显然先手会输</li>
<li>没有’X’的时候，显然要计算逆序对数判断输赢</li>
</ul>
<p>然后，对于一般的情况，我们可以发现，谁控制了最后一个’X’，谁就一定会赢，为什么呢？我们不考虑之前他们做了什么，根据题目，所有数两两不同，所以，我们抽象思考，把所有数排序，每次令填的数产生一些微小的变换使之超过正好一个数，这样逆序对数一定会变化且仅变化1，这样奇偶性便改变了</p>
<h2 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x &amp; -x</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, line[maxn];</div><div class="line"><span class="keyword">int</span> sline[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> c[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span> (x &lt;= n)&#123;</div><div class="line">        c[x] += v;</div><div class="line">        x += lowbit(x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x)&#123;</div><div class="line">        ans += c[x];</div><div class="line">        x -= lowbit(x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"L"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">char</span> s[<span class="number">15</span>];</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'X'</span>) &#123;</div><div class="line">            i--;</div><div class="line">            n--;</div><div class="line">            sum++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'-'</span>)&#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="built_in">strlen</span>(s); j++) line[i] = <span class="number">10</span> * line[i] + s[j] - <span class="string">'0'</span>;</div><div class="line">                line[i] = -line[i];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(s); j++) line[i] = <span class="number">10</span> * line[i] + s[j] - <span class="string">'0'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (sum != <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">if</span> (sum &amp; <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"W"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"L"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> sum2 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) sline[i] = line[i];</div><div class="line">        sort(sline + <span class="number">1</span>, sline + n + <span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </div><div class="line">            line[i] = lower_bound(sline + <span class="number">1</span>, sline + <span class="number">1</span> + n, line[i]) - sline;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)&#123;</div><div class="line">            add(line[i], <span class="number">1</span>);</div><div class="line">            sum2 += get(line[i] - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (sum2 &amp; <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"W"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"L"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>忘了考虑负数的读入。。。导致WA了两次</p>
<h1 id="525-「LibreOJ-β-Round-4」多项式"><a href="#525-「LibreOJ-β-Round-4」多项式" class="headerlink" title="#525. 「LibreOJ β Round #4」多项式"></a>#525. 「LibreOJ β Round #4」多项式</h1><iframe src="https://loj.ac/problem/525" width="775" height="1250" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h2><p>本题长知识啊。。。</p>
<p>本题需要先知道一个东西：广义欧拉定理，关于其正确性，同年级数竞神犇zth,llq和wsy正在证明。。。</p>
<p>然后或者想到分治FFT，看了这道题终于明白这个是什么了</p>
<p>直接引用官方题解吧，好像想得都差不多</p>
<p>考虑广义欧拉定理：对于任何整数 $x$ 和 $n \geq \varphi(k)$，均有 $x^n \bmod k = x^{n \bmod \varphi(k)+\varphi(k)} \bmod k$。我们选择 $n=2\varphi(k)+1$,即有多项式 $x^n+(k-1)x^{n-\varphi(k)}$ 满足条件。只需要 $O(\sqrt{n})$ 或 $O(n)$ 或 $O(n\log{n})$ 计算 $\varphi(k)$。</p>
<p>此题还有一种复杂度为 $O(n\log^2(n))$ 的做法，即直接考虑多项式 $x(x−1)(x−2)(x−3)……(x−(k−1))$，明显符合条件。使用分治 + FFT 计算即可。但由于常数较大，且时限只有0.1s, 可能不能通过本题。</p>
<h2 id="AC代码-4"><a href="#AC代码-4" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> phi[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i])&#123;</div><div class="line">            p[cnt++] = i;</div><div class="line">            phi[i] = i - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * p[j] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * p[j]] = <span class="number">1</span>;</div><div class="line">            phi[i * p[j]] = phi[i] * (p[j] - <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>)&#123;</div><div class="line">                phi[i * p[j]] = phi[i] * p[j];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> k;</div><div class="line">    init();</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</div><div class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"-1"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="number">1</span> + (phi[k] &lt;&lt; <span class="number">1</span>));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; phi[k] + <span class="number">1</span>; i++) <span class="built_in">printf</span>(<span class="string">"0 "</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, k - <span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = phi[k] + <span class="number">2</span>; i &lt; (<span class="number">1</span> + (phi[k] &lt;&lt; <span class="number">1</span>)); i++) <span class="built_in">printf</span>(<span class="string">"0 "</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意这个是广义欧拉定理</p>
<h1 id="526-「LibreOJ-β-Round-4」子集"><a href="#526-「LibreOJ-β-Round-4」子集" class="headerlink" title="#526. 「LibreOJ β Round #4」子集"></a>#526. 「LibreOJ β Round #4」子集</h1><iframe src="https://loj.ac/problem/526" width="775" height="2325" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h2><p>本题的思路可以类比SDOI2016的数字配对那道题，我们可以发现本题经过图论连边转化后（不能在一起的数之间连边），可以化为一般图最大独立集问题，但是这样我们依然无法解决，我们必须再寻找性质进行处理才行</p>
<p>我们观察数字，考虑把一般图化为二分图，我们很容易发现，奇偶性相同的数字之间不可能连边，这样即为一个二分图，直接网络流跑二分图最大独立集问题即可</p>
<p>本题主要还是类比了一些成题的思路</p>
<h2 id="AC代码-5"><a href="#AC代码-5" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 300005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, s, t;</div><div class="line">LL line[maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to, flow;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to, <span class="keyword">int</span> flow) : next(next), to(to), flow(flow)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxm &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> cur[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to, <span class="keyword">int</span> flow)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to, flow);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr, <span class="number">0</span>);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; bfs;</div><div class="line">    bfs.push(s);</div><div class="line">    <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span>(d));</div><div class="line">    <span class="keyword">while</span> (!bfs.empty())&#123;</div><div class="line">        <span class="keyword">int</span> op = bfs.front();bfs.pop();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[op]; i; i = e[i].next)&#123;</div><div class="line">            <span class="keyword">if</span> (!e[i].flow) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> k = e[i].to;</div><div class="line">            <span class="keyword">if</span> (k == s || d[k]) <span class="keyword">continue</span>;</div><div class="line">            d[k] = d[op] + <span class="number">1</span>;</div><div class="line">            bfs.push(k);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = s; i &lt;= t; i++) cur[i] = h[i];</div><div class="line">    <span class="keyword">if</span> (d[t]) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> a)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == t) <span class="keyword">return</span> a;</div><div class="line">    <span class="keyword">int</span> rest = a;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>&amp; i = cur[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span> (!e[i].flow) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (d[op] != d[x] + <span class="number">1</span>) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> k = DFS(op, min(rest, e[i].flow));</div><div class="line">        e[i].flow -= k;</div><div class="line">        e[i ^ <span class="number">1</span>].flow += k;</div><div class="line">        rest -= k;</div><div class="line">        <span class="keyword">if</span> (!rest) <span class="keyword">return</span> a; </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a - rest;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dinic</span><span class="params">(<span class="keyword">int</span>&amp; maxflow)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span> (BFS()) maxflow += DFS(s, INF);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL x, LL y)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (y == <span class="number">0</span>) ? x : gcd(y, x % y);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;line[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (gcd(line[i], line[j]) == <span class="number">1</span> &amp;&amp; gcd(line[i] + <span class="number">1</span>, line[j] + <span class="number">1</span>) == <span class="number">1</span>)&#123;</div><div class="line">                <span class="keyword">if</span> (line[i] &amp; <span class="number">1</span>) Add_Edge(i, j, <span class="number">1</span>);</div><div class="line">                <span class="keyword">else</span> Add_Edge(j, i, <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    s = <span class="number">0</span>, t = n + <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (line[i] &amp; <span class="number">1</span>) Add_Edge(s, i, <span class="number">1</span>);</div><div class="line">        <span class="keyword">else</span> Add_Edge(i, t, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> maxflow = <span class="number">0</span>;</div><div class="line">    Dinic(maxflow);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, n - maxflow);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>忘记清空d数组了。。。WA了一次</p>
<h1 id="528-「LibreOJ-β-Round-4」求和"><a href="#528-「LibreOJ-β-Round-4」求和" class="headerlink" title="#528. 「LibreOJ β Round #4」求和"></a>#528. 「LibreOJ β Round #4」求和</h1><iframe src="https://loj.ac/problem/528" width="775" height="1330" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-6"><a href="#题目分析-6" class="headerlink" title="题目分析"></a>题目分析</h2><p>显然是莫比乌斯反演，但是套用了常规的套路（外层枚举gcd的值然后计算）后发现需要计算$\mu^2(x)$的前缀和（不能线性筛），然而这个好像并不能办到，于是就GG了。。。</p>
<p>然而每当我们遇到$\mu^2(x)$这种东西的时候，其实可以使用它的定义，那就是所有质因子次数小于等于一的数的个数，这样，我们外层枚举$x$，内部用$x^2$来计算，公式就是这个样子的了：</p>
<script type="math/tex; mode=display">\sum_{x = 1}^n \mu(x) * \left[\frac{n}{x ^ 2}\right] * \left[\frac{m}{x ^ 2}\right]</script><p>于是我们就可以直接$O(\sqrt{n})$搞掉本题了。。。</p>
<h2 id="AC代码-6"><a href="#AC代码-6" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 998244353</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> mu[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i])&#123;</div><div class="line">            p[cnt++] = i;</div><div class="line">            mu[i] = <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * p[j] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * p[j]] = <span class="number">1</span>;</div><div class="line">            mu[i * p[j]] = mu[i] * (<span class="number">-1</span>);</div><div class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>)&#123;</div><div class="line">                mu[i * p[j]] = <span class="number">0</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(LL n, LL m)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    LL con = min((LL)<span class="built_in">sqrt</span>(n), (LL)<span class="built_in">sqrt</span>(m));</div><div class="line">    <span class="keyword">for</span> (LL x = <span class="number">1</span>; x &lt;= con; x++)&#123;</div><div class="line">        ans = (ans + (((n / (x * x)) % M) * ((m / (x * x)) % M) % M * mu[x] + M) % M) % M;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    LL n, m;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;m);</div><div class="line">    work(n, m);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="2000-「SDOI2017」数字表格"><a href="#2000-「SDOI2017」数字表格" class="headerlink" title="#2000. 「SDOI2017」数字表格"></a>#2000. 「SDOI2017」数字表格</h1><iframe src="https://loj.ac/problem/2000" width="775" height="1450" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-7"><a href="#题目分析-7" class="headerlink" title="题目分析"></a>题目分析</h2><p>其实就是一个普通的莫比乌斯反演题，直接上套路，枚举gcd的值，然后求出有多少个(i, j)的gcd是这个值，那么这个个数就是对应斐波那契数列对应项的指数，然后再采用变量整体化（积性函数提取）方法，即可解决本题，不懂的请移步<a href="https://goseqh.tk/2017/06/30/莫比乌斯反演总结/">《莫比乌斯反演总结》</a></p>
<p>公式就不贴了，上面的总结里面有对应公式（就在积性函数提取那里）</p>
<h2 id="AC代码-7"><a href="#AC代码-7" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">LL mu[maxn];</div><div class="line">LL f[maxn];</div><div class="line">LL s[maxn];</div><div class="line">LL pre[maxn];</div><div class="line">LL prime[maxn], cnt;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">getinv</span><span class="params">(LL x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (x == <span class="number">1</span>) ? <span class="number">1</span> : </div><div class="line">    ((-(M / x) * getinv(M % x)) % M + M) % M;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">power</span><span class="params">(LL x, LL y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (y == <span class="number">-1</span>) <span class="keyword">return</span> getinv(x);</div><div class="line">    LL ans = <span class="number">1</span>, con = x;</div><div class="line">    <span class="keyword">while</span> (y)&#123;</div><div class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ans = ans * con % M;</div><div class="line">        con = con * con % M;</div><div class="line">        y &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i])&#123;</div><div class="line">            prime[cnt++] = i;</div><div class="line">            mu[i] = <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * prime[j] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * prime[j]] = <span class="number">1</span>;</div><div class="line">            mu[i * prime[j]] = mu[i] * (<span class="number">-1</span>);</div><div class="line">            <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>)&#123;</div><div class="line">                mu[i * prime[j]] = <span class="number">0</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    f[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        f[i] = (f[i - <span class="number">1</span>] + f[i - <span class="number">2</span>]) % M;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) s[i] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; i * j &lt; maxn ; j++)&#123;</div><div class="line">                s[i * j] = s[i * j] * power(f[i], mu[j]) % M;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    pre[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    pre[<span class="number">1</span>] = s[<span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        pre[i] = pre[i - <span class="number">1</span>] * s[i] % M;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= min(n, m); i++)&#123;</div><div class="line">        LL next = min(n / (n / i), m / (m / i));</div><div class="line">        ans = ans * power(pre[next] * getinv(pre[i - <span class="number">1</span>]) % M, (n / i) * (m / i)) % M;</div><div class="line">        i = next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL n, m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    LL T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;m);</div><div class="line">        work(n, m);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="2001-「SDOI2017」树点涂色"><a href="#2001-「SDOI2017」树点涂色" class="headerlink" title="#2001. 「SDOI2017」树点涂色"></a>#2001. 「SDOI2017」树点涂色</h1><iframe src="https://loj.ac/problem/2001" width="775" height="1760" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-8"><a href="#题目分析-8" class="headerlink" title="题目分析"></a>题目分析</h2><p>本题是一个LCT类比的思路，就是用access操作类比题目中的染色操作，为什么这样类比呢？因为这样做，我们可以清楚地知道那些链是同色的，在改变颜色以及统计答案时都会比较方便，如果只是使用树链剖分，我们就不会知道一条链的哪些地方颜色发生了中断，就无法维护信息了</p>
<p>几乎是人生第一次正式的使用LCT，练习了一下，于是就发生了一个大错误，调了我一半夜，凌晨3点才调完。。。那就是每个splay的顶端并非链的顶端，我们要更新的话，要用链的顶端，这样就要在splay上一直向左跑才行。。。然而我很晚才发现这件事情。。。</p>
<h2 id="AC代码-8"><a href="#AC代码-8" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt = <span class="number">1</span>, h[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[x], y);</div><div class="line">    h[x] = cnt;</div><div class="line">    e[++cnt] = edge(h[y], x);</div><div class="line">    h[y] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> fa[maxn];</div><div class="line"><span class="keyword">int</span> son[maxn];</div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">int</span> si[maxn];</div><div class="line"><span class="keyword">int</span> top[maxn];</div><div class="line"><span class="keyword">int</span> dfs[maxn];</div><div class="line"><span class="keyword">int</span> idfs[maxn];</div><div class="line"><span class="keyword">int</span> t;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x]) <span class="keyword">continue</span>;</div><div class="line">        fa[op] = x;</div><div class="line">        d[op] = d[x] + <span class="number">1</span>;</div><div class="line">        DFS1(op);</div><div class="line">        si[x] += si[op];</div><div class="line">        <span class="keyword">if</span> (si[op] &gt; si[son[x]]) son[x] = op;</div><div class="line">    &#125;</div><div class="line">    si[x]++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> tp)</span></span>&#123;</div><div class="line">    top[x] = tp;</div><div class="line">    dfs[x] = ++t;</div><div class="line">    idfs[t] = x;</div><div class="line">    <span class="keyword">if</span> (son[x]) DFS2(son[x], tp);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == son[x] || op == fa[x]) <span class="keyword">continue</span>;</div><div class="line">        DFS2(op, op);</div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="keyword">int</span> maxnum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> add[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (add[o] != <span class="number">0</span> &amp;&amp; l != r)&#123;</div><div class="line"></div><div class="line">        add[o &lt;&lt; <span class="number">1</span>] += add[o];</div><div class="line">        maxnum[o &lt;&lt; <span class="number">1</span>] += add[o];</div><div class="line"></div><div class="line">        add[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += add[o];</div><div class="line">        maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += add[o];</div><div class="line"></div><div class="line">        add[o] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</div><div class="line">    maxnum[o] = max(maxnum[o &lt;&lt; <span class="number">1</span>], maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) &#123;</div><div class="line">        maxnum[o] = d[idfs[l]] + <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    init(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    init(mid + <span class="number">1</span>, r,  o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        maxnum[o] += qd;</div><div class="line">        add[o] += qd;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) modify(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) modify(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy) <span class="keyword">return</span> maxnum[o];</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) ans = max(ans, get(l, mid, o &lt;&lt; <span class="number">1</span>));</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) ans = max(ans, get(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>));</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"><span class="keyword">int</span> ch[maxn][<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) f[i] = fa[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (!f[x] || (ch[f[x]][<span class="number">0</span>] != x &amp;&amp; ch[f[x]][<span class="number">1</span>] != x));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(is_root(t))<span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> k=f[t];</div><div class="line">    <span class="keyword">if</span>(!is_root(k))&#123;</div><div class="line">        ch[f[k]][ch[f[k]][<span class="number">0</span>]==k?<span class="number">0</span>:<span class="number">1</span>]=t;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> d=(ch[k][<span class="number">0</span>]==t)?<span class="number">0</span>:<span class="number">1</span>;</div><div class="line">    f[t]=f[k];</div><div class="line">    ch[k][d]=ch[t][d^<span class="number">1</span>];</div><div class="line">    f[ch[k][d]]=k;</div><div class="line">    ch[t][d^<span class="number">1</span>]=k;</div><div class="line">    f[k]=t;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(!is_root(t))&#123;</div><div class="line">        <span class="keyword">int</span> fa=f[t];</div><div class="line">        <span class="keyword">if</span>(!is_root(fa))&#123;</div><div class="line">            <span class="keyword">int</span> ffa=f[fa];</div><div class="line">            <span class="keyword">int</span> f1=(ch[ffa][<span class="number">0</span>]==fa)?<span class="number">0</span>:<span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> f2=(ch[fa][<span class="number">0</span>]==t)?<span class="number">0</span>:<span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(f1^f2) rotate(t);</div><div class="line">            <span class="keyword">else</span> rotate(fa);</div><div class="line">        &#125;</div><div class="line">        rotate(t);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</div><div class="line">        splay(x);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (ch[x][<span class="number">1</span>])&#123;  </div><div class="line">            <span class="keyword">int</span> _x = ch[x][<span class="number">1</span>];</div><div class="line">            <span class="keyword">while</span> (ch[_x][<span class="number">0</span>])&#123;</div><div class="line">                _x = ch[_x][<span class="number">0</span>];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            qx = dfs[_x], qy = dfs[_x] + si[_x] - <span class="number">1</span>, qd = <span class="number">1</span>;</div><div class="line">            modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ch[x][<span class="number">1</span>] = tmp;</div><div class="line">        tmp = x;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!f[x]) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">int</span> _x = x;</div><div class="line">        <span class="keyword">while</span> (ch[_x][<span class="number">0</span>])&#123;</div><div class="line">            _x = ch[_x][<span class="number">0</span>];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        qx = dfs[_x], qy = dfs[_x] + si[_x] - <span class="number">1</span>, qd = <span class="number">-1</span>;</div><div class="line">        modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        x = f[x];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    access(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">    qx = qy = dfs[x];</div><div class="line">    <span class="keyword">int</span> a = get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    qx = qy = dfs[y];</div><div class="line">    <span class="keyword">int</span> b = get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> f1 = top[x], f2 = top[y];</div><div class="line">    <span class="keyword">while</span> (f1 != f2)&#123;</div><div class="line">        <span class="keyword">if</span> (d[f1] &gt; d[f2])&#123;</div><div class="line">            x = fa[f1];</div><div class="line">            f1 = top[x];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            y = fa[f2];</div><div class="line">            f2 = top[y];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> lca = (d[x] &gt; d[y]) ? y : x;</div><div class="line">    <span class="keyword">int</span> c = fa[lca];</div><div class="line">    </div><div class="line">    qx = qy = dfs[lca];</div><div class="line">    lca = get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line"></div><div class="line"></div><div class="line">    qx = qy = dfs[c];</div><div class="line">    <span class="keyword">if</span> (c) c = get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> c = <span class="number">0</span>; </div><div class="line"></div><div class="line">    <span class="keyword">if</span> (lca == c) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a + b - (c &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a + b - (c &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    qx = dfs[x], qy = dfs[x] + si[x] - <span class="number">1</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, get(<span class="number">1</span>, n, <span class="number">1</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_all</span><span class="params">()</span></span>&#123;</div><div class="line">    DFS1(<span class="number">1</span>);</div><div class="line">    DFS2(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    init(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    init();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">int</span> x, y, op;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        Add_Edge(x, y);</div><div class="line">    &#125;</div><div class="line">    init_all();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;op);</div><div class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            modify(x);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">            query(x, y, i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            query(x);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>数组版的splay和LCT，感觉还是非常好的O(∩_∩)O~</p>
<h1 id="2031-「SDOI2016」数字配对"><a href="#2031-「SDOI2016」数字配对" class="headerlink" title="#2031.「SDOI2016」数字配对"></a>#2031.「SDOI2016」数字配对</h1><iframe src="https://loj.ac/problem/2031" width="775" height="1300" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-9"><a href="#题目分析-9" class="headerlink" title="题目分析"></a>题目分析</h2><p>上面好像刚说完这道题。。。这就是用连边然后转化为二分图，然后用费用流解决的那道题，二分图的依据是含有质因子个数的奇偶性，可以想一想为什么</p>
<p>然后。。。本题好像就解决了？？？就是二分图多重最大权匹配问题，直接费用流</p>
<h2 id="AC代码-9"><a href="#AC代码-9" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">LL n, m, s, t;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    LL next, to;</div><div class="line">    LL flow, cost;</div><div class="line">    edge(LL next, LL to, LL flow, LL cost) : next(next), to(to), flow(flow), cost(cost)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line">LL h[maxn], ct = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(LL fr, LL to, LL flow, LL cost)</span></span>&#123;</div><div class="line">    e[++ct] = edge(h[fr], to, flow, cost);</div><div class="line">    h[fr] = ct;</div><div class="line">    e[++ct] = edge(h[to], fr, <span class="number">0</span>, -cost);</div><div class="line">    h[to] = ct;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*bool BFS()&#123;</span></div><div class="line">    queue&lt;LL&gt; bfs;</div><div class="line">    bfs.push(s);</div><div class="line">    memset(d, 0, sizeof(d));</div><div class="line">    while (!bfs.empty())&#123;</div><div class="line">        LL op = bfs.front();bfs.pop();</div><div class="line">        for (LL i = h[op]; i; i = e[i].next)&#123;</div><div class="line">            if (!e[i].flow) continue;</div><div class="line">            LL k = e[i].to;</div><div class="line">            if (d[k] || k == s) continue;</div><div class="line">            d[k] = d[op] + 1;</div><div class="line">            bfs.push(k);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if (!d[t]) return false;</div><div class="line">    return true;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL DFS(LL x, LL a)&#123;</div><div class="line">    if (x == t) return a;</div><div class="line">    LL rest = a;</div><div class="line">    for (LL i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        if (!e[i].flow) continue;</div><div class="line">        LL op = e[i].to;</div><div class="line">        if (d[op] != d[x] + 1) continue;</div><div class="line">        LL k = DFS(op, min(rest, e[i].flow));</div><div class="line">        e[i].flow -= k;</div><div class="line">        e[i ^ 1].flow += k;</div><div class="line">        rest -= k;</div><div class="line">        if (!rest) return a;</div><div class="line">    &#125;</div><div class="line">    return rest - a;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void Dinic(LL&amp; maxflow)&#123;</div><div class="line">    while (BFS()) maxflow += DFS(s, INF);</div><div class="line">&#125;*/</div><div class="line"></div><div class="line"><span class="keyword">bool</span> vis2[maxn];</div><div class="line">LL p2[maxn];</div><div class="line">LL d[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;LL&gt; spfa;</div><div class="line">    spfa.push(s);</div><div class="line">    <span class="keyword">for</span> (LL i = s; i &lt;= t; i++) d[i] = INF;</div><div class="line">    d[s] = <span class="number">0</span>;</div><div class="line">    vis2[s] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!spfa.empty())&#123;</div><div class="line">        LL op = spfa.front();spfa.pop();</div><div class="line">        <span class="keyword">for</span> (LL i = h[op]; i; i = e[i].next)&#123;</div><div class="line">            <span class="keyword">if</span> (!e[i].flow) <span class="keyword">continue</span>;</div><div class="line">            LL k = e[i].to;</div><div class="line">            <span class="keyword">if</span> (d[k] &gt; d[op] + e[i].cost)&#123;</div><div class="line">                d[k] = d[op] + e[i].cost;</div><div class="line">                p2[k] = i;</div><div class="line">                <span class="keyword">if</span> (!vis2[k])&#123;</div><div class="line">                    vis2[k] = <span class="number">1</span>;</div><div class="line">                    spfa.push(k);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        vis2[op] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (d[t] &gt;= INF) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Augment</span><span class="params">(LL&amp; maxflow, LL&amp; mincost)</span></span>&#123;</div><div class="line">    LL now = t, flow = INF;</div><div class="line">    <span class="keyword">while</span> (now != s)&#123;</div><div class="line">        LL k = p2[now];</div><div class="line">        flow = min(flow, e[k].flow);</div><div class="line">        now = e[k ^ <span class="number">1</span>].to;</div><div class="line">    &#125;</div><div class="line">    now = t;</div><div class="line">    <span class="keyword">while</span> (now != s)&#123;</div><div class="line">        LL k = p2[now];</div><div class="line">        e[k].flow -= flow;</div><div class="line">        e[k ^ <span class="number">1</span>].flow += flow;</div><div class="line">        now = e[k ^ <span class="number">1</span>].to;</div><div class="line">    &#125;</div><div class="line">    maxflow += flow, mincost += (d[t] - d[s]) * flow;</div><div class="line">    <span class="keyword">if</span> (mincost &gt; <span class="number">0</span>)&#123;</div><div class="line">        mincost -= (d[t] - d[s]) * flow;</div><div class="line">        maxflow -= flow;</div><div class="line">        maxflow += mincost / (d[s] - d[t]);</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MCMF</span><span class="params">(LL&amp; maxflow, LL&amp; mincost)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span> (SPFA() &amp;&amp; !Augment(maxflow, mincost))&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL p[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line">LL cnt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i]) p[cnt++] = i;</div><div class="line">        <span class="keyword">for</span> (LL j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * p[j] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * p[j]] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> side[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(LL x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">2</span>; i &lt;= (LL) <span class="built_in">sqrt</span>(x); i++)&#123;</div><div class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL a[maxn];</div><div class="line">LL b[maxn];</div><div class="line">LL c[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(LL i)</span></span>&#123;</div><div class="line">    LL x = a[i];</div><div class="line">    LL con = (LL) <span class="built_in">sqrt</span>(x);</div><div class="line">    <span class="keyword">for</span> (LL j = <span class="number">2</span>; j &lt;= con; j++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[j] &amp;&amp; x % j == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">while</span> (x % j == <span class="number">0</span>)&#123;</div><div class="line">                x /= j;</div><div class="line">                side[i] ^= <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            con = (LL) <span class="built_in">sqrt</span>(x);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (x != <span class="number">1</span>) side[i] ^= <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL left[maxn];</div><div class="line">LL cntl;</div><div class="line">LL right[maxn];</div><div class="line">LL cntr;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    s = <span class="number">0</span>, t = n + <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        process(i);</div><div class="line">        <span class="keyword">if</span> (!side[i]) left[++cntl] = i;</div><div class="line">        <span class="keyword">else</span> right[++cntr] = i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (LL j = <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i == j || a[i] % a[j] != <span class="number">0</span> || !judge(a[i] / a[j])) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span> (side[i]) Add_Edge(j, i, INF, -c[i] * c[j]);</div><div class="line">            <span class="keyword">else</span> Add_Edge(i, j, INF, -c[i] * c[j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= cntl; i++)&#123;</div><div class="line">        Add_Edge(s, left[i], b[left[i]], <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= cntr; i++)&#123;</div><div class="line">        Add_Edge(right[i], t, b[right[i]], <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    LL maxflow = <span class="number">0</span>, mincost = <span class="number">0</span>;</div><div class="line">    MCMF(maxflow, mincost);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, maxflow);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i]);</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;b[i]);</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;c[i]);</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;最近也开始总结LOJ的题目啦，以前一道题一篇题解&lt;strong&gt;太傻了&lt;/strong&gt;，但是以前的就那样吧，现在开始每十题一篇题解&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://goseqh.tk/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LOJ" scheme="https://goseqh.tk/tags/LOJ/"/>
    
  </entry>
  
  <entry>
    <title>Libre Online Judge题解目录</title>
    <link href="https://goseqh.tk/2017/08/29/Libre-Online-Judge%E9%A2%98%E8%A7%A3%E7%9B%AE%E5%BD%95/"/>
    <id>https://goseqh.tk/2017/08/29/Libre-Online-Judge题解目录/</id>
    <published>2017-08-29T10:07:12.000Z</published>
    <updated>2017-09-04T00:17:05.503Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>突然发现在Libre Online Judge上也刷了一点题，于是总结一下<br><a id="more"></a></p>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>还是采用老办法，一句话题解采用白色字体，同时每十道题一篇题解</p>
<ul>
<li>LOJ题解目录<ul>
<li>LOJ 阶段性汇总I<ul>
<li><a href="https://loj.ac/problem/507" target="_blank" rel="external">#507. 「LibreOJ NOI Round #1」接竹竿</a> <font color="#FFFFFF">1D/1D优化DP </font></li>
<li><a href="https://loj.ac/problem/514" target="_blank" rel="external">#514. 「LibreOJ β Round #2」模拟只会猜题意</a> <font color="#FFFFFF">暴力 </font></li>
<li><a href="https://loj.ac/problem/516" target="_blank" rel="external">#516. 「LibreOJ β Round #2」DP 一般看规律</a> <font color="#FFFFFF">并查集+启发式合并+stl </font></li>
<li><a href="https://loj.ac/problem/524" target="_blank" rel="external">#524. 「LibreOJ β Round #4」游戏</a> <font color="#FFFFFF">博弈+抽象思考+极端情况判断 </font></li>
<li><a href="https://loj.ac/problem/525" target="_blank" rel="external">#525. 「LibreOJ β Round #4」多项式</a> <font color="#FFFFFF">广义欧拉定理 </font></li>
<li><a href="https://loj.ac/problem/526" target="_blank" rel="external">#526. 「LibreOJ β Round #4」子集</a> <font color="#FFFFFF">网络流+二分图转化 </font></li>
<li><a href="https://loj.ac/problem/528" target="_blank" rel="external">#528. 「LibreOJ β Round #4」求和</a> <font color="#FFFFFF">莫比乌斯反演+$\mu^2(x)$定义法转化 </font></li>
<li><a href="https://loj.ac/problem/2000" target="_blank" rel="external">#2000. 「SDOI2017」数字表格</a> <font color="#FFFFFF">莫比乌斯反演 </font></li>
<li><a href="https://loj.ac/problem/2001" target="_blank" rel="external">#2001. 「SDOI2017」树点涂色</a> <font color="#FFFFFF">LCT+树链剖分 </font></li>
<li><a href="https://loj.ac/problem/2031" target="_blank" rel="external">#2031.「SDOI2016」数字配对</a> <font color="#FFFFFF">网络流+二分图转化 </font></li>
</ul>
</li>
<li>LOJ 阶段性汇总II<ul>
<li><a href="https://loj.ac/problem/2036" target="_blank" rel="external">#2036. 「SHOI2015」自动刷题机</a> <font color="#FFFFFF">二分答案 </font></li>
<li><a href="https://loj.ac/problem/2194" target="_blank" rel="external">#2194. 「SDOI2014」数数</a> <font color="#FFFFFF">AC自动机+情况讨论 </font></li>
<li><a href="https://loj.ac/problem/2234" target="_blank" rel="external">#2234. 「JLOI2014」聪明的燕姿</a> <font color="#FFFFFF"> DFS搜索质因子 </font></li>
<li><a href="https://loj.ac/problem/2236" target="_blank" rel="external">#2236. 「JLOI2014」松鼠的新家</a> <font color="#FFFFFF">树链剖分 </font></li>
<li><a href="https://loj.ac/problem/2245" target="_blank" rel="external">#2245. 「NOI2014」魔法森林</a> <font color="#FFFFFF">LCT/动点SPFA </font></li>
<li><a href="https://loj.ac/problem/2246" target="_blank" rel="external">#2246. 「NOI2014」动物园</a> <font color="#FFFFFF">KMP巧妙应用 </font></li>
<li><a href="https://loj.ac/problem/6030" target="_blank" rel="external">#6030. 「雅礼集训 2017 Day1」矩阵</a> <font color="#FFFFFF">思维题+情况讨论 </font></li>
<li><a href="https://loj.ac/problem/6062" target="_blank" rel="external">#6062. 「2017 山东一轮集训 Day2」Pair</a> <font color="#FFFFFF">转化限制+线段树维护前缀信息 </font></li>
<li><a href="https://loj.ac/problem/6075" target="_blank" rel="external">#6075. 「2017 山东一轮集训 Day6」重建</a> <font color="#FFFFFF">最短路+逐步更新思想 </font></li>
<li><a href="https://loj.ac/problem/6136" target="_blank" rel="external">#6136. 「2017 山东三轮集训 Day4」Left</a> <font color="#FFFFFF">思维题+分治+2-SAT+贪心 </font></li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;突然发现在Libre Online Judge上也刷了一点题，于是总结一下&lt;br&gt;
    
    </summary>
    
    
      <category term="题解目录" scheme="https://goseqh.tk/tags/%E9%A2%98%E8%A7%A3%E7%9B%AE%E5%BD%95/"/>
    
      <category term="LOJ" scheme="https://goseqh.tk/tags/LOJ/"/>
    
  </entry>
  
</feed>
