<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Goseqh&#39;s Blog</title>
  <subtitle>A JuRuo from a weak province</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://goseqh.tk/"/>
  <updated>2017-07-29T15:56:49.043Z</updated>
  <id>https://goseqh.tk/</id>
  
  <author>
    <name>Goseqh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>烤肉？烤肉。</title>
    <link href="https://goseqh.tk/2017/07/29/%E7%83%A4%E8%82%89%EF%BC%9F%E7%83%A4%E8%82%89%E3%80%82/"/>
    <id>https://goseqh.tk/2017/07/29/烤肉？烤肉。/</id>
    <published>2017-07-29T14:52:08.000Z</published>
    <updated>2017-07-29T15:56:49.043Z</updated>
    
    <content type="html"><![CDATA[<link href="/style.css" rel="stylesheet" type="text/css"><script src="/crypto-js.js"></script><script src="/mcommon.js"></script><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" Maybe you cannot access this article, I'm sorry. "/> <label for="pass"> Maybe you cannot access this article, I'm sorry. </label> <div class="bottom-line"></div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      Nice to meet you.
    
    </summary>
    
    
      <category term="感悟" scheme="https://goseqh.tk/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>单调队列&amp;单调栈总结</title>
    <link href="https://goseqh.tk/2017/07/26/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97-%E5%8D%95%E8%B0%83%E6%A0%88%E6%80%BB%E7%BB%93/"/>
    <id>https://goseqh.tk/2017/07/26/单调队列-单调栈总结/</id>
    <published>2017-07-26T07:44:05.000Z</published>
    <updated>2017-07-27T00:48:45.665Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>最近刷了一波JCY大神的课件，打算认真练习一发单调队列/单调栈，于是有了这篇总结，同时作为之后学习单调优化DP的基础<br><a id="more"></a></p>
<h1 id="单调队列-单调栈概念介绍"><a href="#单调队列-单调栈概念介绍" class="headerlink" title="单调队列/单调栈概念介绍"></a>单调队列/单调栈概念介绍</h1><p>由于个人认为这两者基本没什么区别，所以放在一起进行讲解</p>
<p>单调队列就是一个队列，里面的元素具有单调性，所以就可以在里面进行各种操作，比如在里面进行二分啊什么的，但是如果只能二分那其实也没有什么学习的必要性，更加重点的作用就是它能够同时维护多个区间的信息，具体原因下文会有所讲述<br><img src="http://otp08noas.bkt.clouddn.com/3.png" alt=""><br>而单调栈很显然就是一个栈，它里面的元素也是具有单调性的，但是每次只能从一个方向进出<br><img src="http://otp08noas.bkt.clouddn.com/4.png" alt=""></p>
<p>首先说一下个人的理解，单调队列和单调栈其实没有什么本质区别，首先单调栈，看上去它是一个内部元素有序化的这么一个数据结构，但如果深入挖掘栈内各个元素的本质，就会发现，实际上栈内每个元素都代表着一个区间，这个区间中的极值就是这个元素的值（极值可以使最大值或最小值，这个看你如何进行维护）</p>
<p>为什么这么说呢？我们可以看一下这个图：<br><img src="http://otp08noas.bkt.clouddn.com/1.png" alt=""><br>这时我们已经处理了两个大括号之间的所有数据，然后，我们把单调栈里的每一项都用一种颜色进行标记，同时标出它们在原序列上对应的区间，如下图：<br><img src="http://otp08noas.bkt.clouddn.com/2.png" alt=""><br>我们会发现，每个元素在它自己的区间内，都是最大值，这就是单调栈的实质，通过许多单个元素同时维护“许多区间”</p>
<p>为什么这么说呢，大家可以把当前单调栈中维护的区间看作这样子：</p>
<p>首先，我们不是标记出了每个颜色的范围吗，把这个每个颜色中的元素的在原序列中的下标视为左端点，现在更新到的原序列中的位置视为右端点，那么这个栈里面就总共维护着已经更新的原序列中的元素的个数这么多个区间，我们每次都会使右端点向右移动一个单位，这样总共就会维护到 $\frac{n ∗ (n + 1)}{2}$ 个区间，对应原序列的全部子区间，这种理解，我个人称作 <strong>区间化理解</strong></p>
<p>所以，单调栈往往可以解决具有如下特征的问题：</p>
<ul>
<li>涉及最值</li>
<li>询问全部区间的情况（个数为$O(n^2)$)<br>显然，单调栈的特性在于第二点，它能同时维护许多区间，所以就可以把原本暴力$O(n^2)$才能解决问题的算法优化到了$O(n)$，其实这是一个极为优秀的优化</li>
</ul>
<p>我们可以在每次加入元素的同时，直接把答案进行批量累加（即再维护一个当前栈内所有区间的贡献和，每次把答案加上这个总贡献），这样就能够非常高效的维护与所有区间有关的信息，我把这种方法称为<strong>整体化处理</strong>，这种方法有时虽然可以被替代，但更多时候它能简化出栈时更新答案的复杂性，因为<strong>整体化处理</strong>是随时更新答案的</p>
<p>或者是在每次弹出元素的时候，对答案进行更新，这样可以保证相对于单个区间来说的答案最优性（相当于<strong>极大化</strong>区间贡献）</p>
<p>而单调队列就相当于，我们移动了元素的起始位置，像是一个滑动的窗口，在左端点向右移动时，我们永远地舍弃掉了那些掉出窗口的元素，这样做的目的会在下文的讲解中体现</p>
<p>下面举几个例题，来简单介绍一下它的具体用法与应用范围</p>
<h1 id="例题讲解"><a href="#例题讲解" class="headerlink" title="例题讲解"></a>例题讲解</h1><h2 id="51nod-1102-面积最大的矩形"><a href="#51nod-1102-面积最大的矩形" class="headerlink" title="51nod 1102 面积最大的矩形"></a>51nod 1102 面积最大的矩形</h2><p>基准时间限制：1 秒<br>空间限制：131072 KB<br>分值：20<br>难度：3级算法题</p>
<p>有一个正整数的数组，化为直方图，求此直方图包含的最大矩形面积。例如 $2,1,5,6,2,3$，对应的直方图如下：</p>
<p>面积最大的矩形为$5,6$组成的宽度为$2$的矩形，面积为$10$。</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>$第1行：1个数N，表示数组的长度(0 &lt;= N &lt;= 50000)$<br>$第2 - N + 1行：数组元素A[i]。(1 &lt;= A[i] &lt;= 10^9)$</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>输出最大的矩形面积</p>
<h3 id="Input示例"><a href="#Input示例" class="headerlink" title="Input示例"></a>Input示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">6</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">6</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<h3 id="Output示例"><a href="#Output示例" class="headerlink" title="Output示例"></a>Output示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">10</span></div></pre></td></tr></table></figure>
<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>求最大矩形面积，这是单调栈的一个常见应用，考虑到当高度下降的时候，被卡住的那些矩形就永远只能被卡在那里了，所以这时它们就应该出栈，于是我们就知道应该维护一个单调上升的单调栈，细节可见代码</p>
<p>维护方法：我们对于每个进栈的元素定义结构体，里面有两个成员变量，分别代表它入栈的位置和它自己的高度（用于比较的键值），出栈时用当前的位置与它入栈的位置的距离减一作为矩形一边，高度作为另一边计算面积并更新答案</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">LL line[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rec</span>&#123;</span></div><div class="line">    LL val, idx;</div><div class="line">    rec(LL val, LL idx) : val(val), idx(idx)&#123;&#125;</div><div class="line">    rec()&#123;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">stack</span>&lt;rec&gt; save;</div><div class="line">LL ans = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        rec op;</div><div class="line">        <span class="keyword">int</span> l = i;</div><div class="line">        <span class="keyword">while</span>(!save.empty() &amp;&amp; (save.top()).val &gt; line[i])&#123;</div><div class="line">            op = save.top();</div><div class="line">            ans = max(ans, (i - op.idx) * op.val);</div><div class="line">            l = op.idx;</div><div class="line">            save.pop();</div><div class="line">        &#125;</div><div class="line">        save.push(rec(line[i], l));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (!save.empty())&#123;</div><div class="line">        rec op = save.top();</div><div class="line">        ans = max(ans, (n - op.idx + <span class="number">1</span>) * op.val);</div><div class="line">        save.pop();</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("rec.in", "r", stdin);</span></div><div class="line">    freopen("rec.out", "w", stdout);*/</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;line[i]);</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="51nod-1158-全是1的最大子矩阵"><a href="#51nod-1158-全是1的最大子矩阵" class="headerlink" title="51nod 1158 全是1的最大子矩阵"></a>51nod 1158 全是1的最大子矩阵</h2><p>基准时间限制：1 秒<br>空间限制：131072 KB<br>分值：80<br>难度：5级算法题</p>
<p>给出1个$M*N$的矩阵$M_1$，里面的元素只有0或1，找出$M_1$的一个子矩阵$M_2$，$M_2$中的元素只有1，并且$M_2$的面积是最大的。输出$M_2$的面积。</p>
<h3 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h3><p>$第1行:2个数m,n中间用空格分隔(2 &lt;= m,n &lt;= 500)$<br>$第2 - N + 1行：每行m个数，中间用空格分隔，均为0或1。$</p>
<h3 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h3><p>$输出最大全是1的子矩阵的面积。$</p>
<h3 id="Input示例-1"><a href="#Input示例-1" class="headerlink" title="Input示例"></a>Input示例</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">3 </span><span class="number">3</span></div><div class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">0</span></div><div class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">1</span></div><div class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">1</span></div></pre></td></tr></table></figure>
<h3 id="Output示例-1"><a href="#Output示例-1" class="headerlink" title="Output示例"></a>Output示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure>
<h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><p>上一题的二维加强版，直接对每一行套用上一题方法即可</p>
<p>维护方法：同上一题</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 505</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> geo[maxn][maxn];</div><div class="line"><span class="keyword">int</span> low[maxn][maxn];</div><div class="line"><span class="keyword">int</span> up[maxn][maxn];</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</div><div class="line">        low[n - <span class="number">1</span>][j] = (geo[n - <span class="number">1</span>][j]) ? <span class="number">1</span> : <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)&#123;</div><div class="line">            low[i][j] = (geo[i][j]) ? low[i + <span class="number">1</span>][j] + <span class="number">1</span> : <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mat</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> val, idx;</div><div class="line">    mat(<span class="keyword">int</span> val, <span class="keyword">int</span> idx) : val(val), idx(idx)&#123;&#125;</div><div class="line">    mat()&#123;&#125;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> row)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="built_in">stack</span>&lt;mat&gt; save;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) line[i] = low[row][i];</div><div class="line">    save.push(mat(line[<span class="number">0</span>], <span class="number">0</span>));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++)&#123;</div><div class="line">        mat op = save.top();</div><div class="line">        <span class="keyword">int</span> l = i;</div><div class="line">        <span class="keyword">while</span> (!save.empty() &amp;&amp; op.val &gt;= line[i])&#123;</div><div class="line">            l = op.idx;</div><div class="line">            ans = max(ans, (i - l) * op.val);</div><div class="line">            save.pop();</div><div class="line">            <span class="keyword">if</span> (save.empty()) <span class="keyword">break</span>;</div><div class="line">            op = save.top();</div><div class="line">        &#125;</div><div class="line">        save.push(mat(line[i], l));</div><div class="line">        ans = max(ans, (i - l + <span class="number">1</span>) * line[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*--------------------*/</span></div><div class="line">    <span class="keyword">while</span> (!save.empty())&#123;</div><div class="line">        mat op = save.top();</div><div class="line">        ans = max(ans, (m - op.idx) * op.val);</div><div class="line">        save.pop();</div><div class="line">        <span class="keyword">if</span> (save.empty()) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*--------------------*/</span></div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) ans = max(ans, cal(i));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("mat.in", "r", stdin);</span></div><div class="line">    freopen("mat.out", "w" ,stdout);*/</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;geo[i][j]);</div><div class="line">    init();</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="51nod-1215-数组的宽度"><a href="#51nod-1215-数组的宽度" class="headerlink" title="51nod 1215 数组的宽度"></a>51nod 1215 数组的宽度</h2><p>题目来源： Javaman<br>基准时间限制：1 秒<br>空间限制：131072 KB<br>分值： 80<br>难度：5级算法题</p>
<p>N个整数组成的数组，定义子数组$a[i]..a[j]$的宽度为：$max(a[i]..a[j]) - min(a[i]..a[j])$，求所有子数组的宽度和。</p>
<h3 id="Input-2"><a href="#Input-2" class="headerlink" title="Input"></a>Input</h3><p>$第1行：1个数N，表示数组的长度。(1 &lt;= N &lt;= 50000)$<br>$第2 - N + 1行：每行1个数，表示数组中的元素(1 &lt;= A[i] &lt;= 50000)$</p>
<h3 id="Output-2"><a href="#Output-2" class="headerlink" title="Output"></a>Output</h3><p>输出所有子数组的宽度和。</p>
<h3 id="Input示例-2"><a href="#Input示例-2" class="headerlink" title="Input示例"></a>Input示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">5</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">5</span></div></pre></td></tr></table></figure>
<h3 id="Output示例-2"><a href="#Output示例-2" class="headerlink" title="Output示例"></a>Output示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">20</span></div></pre></td></tr></table></figure>
<h2 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h2><p>发现最大值与最小值可以分开维护，这样就简单了许多，我们可以通过单调栈快速求出所有区间的极值之和，具体方法需要我上面的对于单调栈的<strong>区间化理解</strong>，细节见代码</p>
<p>维护方法，由于对称性，仅讲解最大值的求法：对每个入栈的元素定义结构体，内含两个成员变量，其中一个代表在<strong>区间化理解</strong>的意义下，这个元素所代表的区间的左端点，另一个变量代表它本身的值（键值），出栈时，由于它一定小于把它挤出去的那个元素，于是需要把它自己的左端点传给那个新来的元素，然后自己出栈，对于答案，我们采用<strong>整体化处理</strong>，用一个全局变量维护当前栈内元素所代表的所有区间的最大值的和，每次把一个元素入栈以后，我们需要把出栈的那些元素对这个全局变量的贡献减掉，然后加上刚入栈的那个元素的贡献，然后直接加入最终答案即可</p>
<p>p.s. 其实也不一定用到整体化处理，我们考察区间化理解的意义后，可以直接在每个元素出栈时再用它们的贡献更新答案，所以这不算是整体化处理的典型用法</p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">LL line[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inter</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> val, l, r;</div><div class="line">    inter(<span class="keyword">int</span> val, <span class="keyword">int</span> l, <span class="keyword">int</span> r) : val(val), l(l), r(r)&#123;&#125;</div><div class="line">    inter()&#123;&#125;</div><div class="line">&#125;;</div><div class="line"><span class="function">LL <span class="title">get_max</span><span class="params">()</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>, now = <span class="number">0</span>;</div><div class="line">    <span class="built_in">stack</span>&lt;inter&gt; save;</div><div class="line">    save.push(inter(line[<span class="number">1</span>], <span class="number">1</span>, <span class="number">1</span>));</div><div class="line">    ans = now = line[<span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> l = i;</div><div class="line">        inter op = save.top();</div><div class="line">        <span class="keyword">while</span> (!save.empty() &amp;&amp; op.val &lt;= line[i])&#123;</div><div class="line">            now -= (LL)(op.r - op.l + <span class="number">1</span>) * op.val;</div><div class="line">            l = op.l;</div><div class="line">            save.pop();</div><div class="line">            <span class="keyword">if</span> (save.empty()) <span class="keyword">break</span>;</div><div class="line">            op = save.top();</div><div class="line">        &#125;</div><div class="line">        save.push(inter(line[i], l, i));</div><div class="line">        now += (i - l + <span class="number">1</span>) * line[i];</div><div class="line">        ans += now;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function">LL <span class="title">get_min</span><span class="params">()</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>, now = <span class="number">0</span>;</div><div class="line">    <span class="built_in">stack</span>&lt;inter&gt; save;</div><div class="line">    save.push(inter(line[<span class="number">1</span>], <span class="number">1</span>, <span class="number">1</span>));</div><div class="line">    ans = now = line[<span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> l = i;</div><div class="line">        inter op = save.top();</div><div class="line">        <span class="keyword">while</span> (!save.empty() &amp;&amp; op.val &gt;= line[i])&#123;</div><div class="line">            now -= (LL)(op.r - op.l + <span class="number">1</span>) * op.val;</div><div class="line">            l = op.l;</div><div class="line">            save.pop();</div><div class="line">            <span class="keyword">if</span> (save.empty()) <span class="keyword">break</span>;</div><div class="line">            op = save.top();</div><div class="line">        &#125;</div><div class="line">        save.push(inter(line[i], l, i));</div><div class="line">        now += (i - l + <span class="number">1</span>) * line[i];</div><div class="line">        ans += now;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("width.in", "r", stdin);</span></div><div class="line">    freopen("width.out", "w", stdout);*/</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;line[i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, get_max() - get_min());</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="51nod-1272-最大距离"><a href="#51nod-1272-最大距离" class="headerlink" title="51nod 1272 最大距离"></a>51nod 1272 最大距离</h2><p>题目来源： Codility<br>基准时间限制：1 秒<br>空间限制：131072 KB<br>分值： 20<br>难度：3级算法题</p>
<p>给出一个长度为$N$的整数数组$A$，对于每一个数组元素，如果他后面存在大于等于该元素的数，则这两个数可以组成一对。每个元素和自己也可以组成一对。例如：${5, 3, 6, 3, 4, 2}$，可以组成$11$对，如下（数字为下标）：<br>$(0,0), (0, 2), (1, 1), (1, 2), (1, 3), (1, 4), (2, 2), (3, 3), (3, 4), (4, 4), (5, 5)$。其中$(1, 4)$是距离最大的一对，距离为3。</p>
<h3 id="Input-3"><a href="#Input-3" class="headerlink" title="Input"></a>Input</h3><p>$第1行：1个数N，表示数组的长度(2 &lt;= N &lt;= 50000)。$<br>$第2 - N + 1行：每行1个数，对应数组元素A_i(1 &lt;= A_i &lt;= 10^9)。$</p>
<h3 id="Output-3"><a href="#Output-3" class="headerlink" title="Output"></a>Output</h3><p>输出最大距离。</p>
<h3 id="Input示例-3"><a href="#Input示例-3" class="headerlink" title="Input示例"></a>Input示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">6</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">6</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure>
<h3 id="Output示例-3"><a href="#Output示例-3" class="headerlink" title="Output示例"></a>Output示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<h2 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h2><p>这道题算是比较经典的单调栈内二分的题目，这就是单调栈的一种比较简单的操作，其实这题我是搞了一段时间的，主要是想有没有$O(n)$的算法，然而最后还是没能想出来。。。</p>
<p>维护方法：本题采用了一种不同的维护方式，即不保留刚入栈元素的方式，每次对于刚入栈的元素，如果它小于栈顶元素，我们把它直接入栈，否则，我们不将它入栈，而是在原栈中二分寻找答案，并更新最终答案，容易知道这样做是正确的</p>
<h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">num</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> val, idx;</div><div class="line">    num(<span class="keyword">int</span> val, <span class="keyword">int</span> idx) : val(val), idx(idx)&#123;&#125;</div><div class="line">    num()&#123;&#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> num b) <span class="keyword">const</span>&#123;</div><div class="line">        <span class="keyword">return</span> val &gt; b.val;</div><div class="line">    &#125;</div><div class="line">&#125;save[maxn];</div><div class="line"><span class="keyword">int</span> head;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(num x)</span></span>&#123;</div><div class="line">    save[head++] = x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">(num x)</span></span>&#123;</div><div class="line">    head--;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> num <span class="title">top</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> save[head - <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">    push(num(line[<span class="number">1</span>], <span class="number">1</span>));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        num op = top();</div><div class="line">        <span class="keyword">if</span> (line[i] &lt; op.val) push(num(line[i], i));</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            num* op2 = lower_bound(save, save + head, num(line[i], i));</div><div class="line">            ans = max(ans, i - op2 -&gt; idx);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("maxlen.in", "r", stdin);</span></div><div class="line">    freopen("maxlen.out", "w", stdout);*/</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="51nod-1962-区间计数"><a href="#51nod-1962-区间计数" class="headerlink" title="51nod 1962 区间计数"></a>51nod 1962 区间计数</h2><p>基准时间限制：1.5 秒<br>空间限制：262144 KB<br>分值： 80<br>难度：5级算法题</p>
<p>两个数列 ${A_n} ， {B_n}$ ，请求出$Ans$, $Ans$定义如下：</p>
<script type="math/tex; mode=display">Ans=\sum_{i = 1}^{n}\sum_{j = 1}^{n}[j=i][max\{A_i,A_{i+1},...,A_j\}=max\{B_i,B_{i+1},...,B_j\}]</script><p>注：[ ]内表达式为真，则为1，否则为0.</p>
<p>$1≤N≤3.5×10^5$<br>$1≤A_i,B_i≤N $</p>
<h3 id="样例解释："><a href="#样例解释：" class="headerlink" title="样例解释："></a>样例解释：</h3><p>7个区间分别为：$（1,4），（1,5），（2,4），（2,5），（3,3），（3,5），（4,5）$</p>
<h3 id="Input-4"><a href="#Input-4" class="headerlink" title="Input"></a>Input</h3><p>$第一行一个整数N$<br>$第二行N个整数A_i$<br>$第三行N个整数B_i$</p>
<h3 id="Output-4"><a href="#Output-4" class="headerlink" title="Output"></a>Output</h3><p>一行，一个整数$Ans$</p>
<h3 id="Input示例-4"><a href="#Input示例-4" class="headerlink" title="Input示例"></a>Input示例</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">5</span></div><div class="line"><span class="symbol">1 </span><span class="number">4</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></div><div class="line"><span class="symbol">3 </span><span class="number">2</span> <span class="number">2</span> <span class="number">4</span> <span class="number">1</span></div></pre></td></tr></table></figure>
<h3 id="Output示例-4"><a href="#Output示例-4" class="headerlink" title="Output示例"></a>Output示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">7</span></div></pre></td></tr></table></figure>
<h2 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h2><p>其实我是先做的这道题，然后再看的其他题。。。<br>这题就是，我们同样使用区间化理解，先分别为两个序列维护两个栈，然后对栈内每个数记录一个区间，每次我们就是要求两个栈内的相同的数所对应的区间的交，我们每次插入元素，就把所有的交的和累加进答案，这就是我说的整体化处理</p>
<p>维护方法：对每个元素记录一个区间，和它本身的值，对值相同的元素我们求交，并把交的长度加入整体维护的全局变量中，出栈入栈分别删除或增加，每次当前位置更新完毕后，我们直接把答案加入最终答案即可</p>
<h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 400005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inter</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">    inter(<span class="keyword">int</span> l, <span class="keyword">int</span> r) : l(l), r(r)&#123;&#125;</div><div class="line">    inter()&#123;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_insect</span><span class="params">(inter a, inter b)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (a.l &gt; b.l) swap(a, b);</div><div class="line">    <span class="keyword">if</span> (a.r &lt; b.l) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> min(a.r, b.r) - b.l + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; savea, saveb;</div><div class="line"><span class="keyword">int</span> linea[maxn], lineb[maxn];</div><div class="line">inter reca[maxn], recb[maxn];</div><div class="line">LL ans, now;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) reca[i] = recb[i] = inter(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    savea.push(linea[<span class="number">1</span>]);</div><div class="line">    reca[linea[<span class="number">1</span>]] = inter(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    saveb.push(lineb[<span class="number">1</span>]);</div><div class="line">    recb[lineb[<span class="number">1</span>]] = inter(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    now = ans = get_insect(recb[lineb[<span class="number">1</span>]], reca[lineb[<span class="number">1</span>]]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> op;</div><div class="line">        inter ka = inter(i, i);</div><div class="line">        <span class="keyword">while</span> (!savea.empty() &amp;&amp; (op = savea.top()) &lt;= linea[i])&#123;</div><div class="line">            now -= get_insect(reca[op], recb[op]);</div><div class="line">            ka.l = reca[op].l;</div><div class="line">            reca[op] = inter(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">            savea.pop();</div><div class="line">        &#125;</div><div class="line">        savea.push(linea[i]);</div><div class="line"></div><div class="line">        inter kb = inter(i, i);</div><div class="line">        <span class="keyword">while</span> (!saveb.empty() &amp;&amp; (op = saveb.top()) &lt;= lineb[i])&#123;</div><div class="line">            now -= get_insect(reca[op], recb[op]);</div><div class="line">            kb.l = recb[op].l;</div><div class="line">            recb[op] = inter(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">            saveb.pop();</div><div class="line">        &#125;</div><div class="line">        saveb.push(lineb[i]);</div><div class="line"></div><div class="line">        reca[linea[i]] = ka;</div><div class="line">        recb[lineb[i]] = kb;</div><div class="line">        <span class="keyword">if</span>  (linea[i] == lineb[i])&#123;</div><div class="line">            now += get_insect(ka, kb);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            now += get_insect(reca[linea[i]], recb[linea[i]]);</div><div class="line">            now += get_insect(reca[lineb[i]], recb[lineb[i]]);</div><div class="line">        &#125;</div><div class="line">        ans += now;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("inter.in", "r", stdin);</span></div><div class="line">    freopen("inter.out" ,"w", stdout);*/</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;linea[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;lineb[i]);</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="51nod-1153-选择子序列"><a href="#51nod-1153-选择子序列" class="headerlink" title="51nod 1153 选择子序列"></a>51nod 1153 选择子序列</h2><p>题目来源： Codility<br>基准时间限制：1 秒<br>空间限制：131072 KB<br>分值： 40<br>难度：4级算法题</p>
<p>长度为$N的整数数组A$，所有的数均不相同，假设下标从$0$开始。找到一个最长的数组B，B数组的长度为K，数值范围是$0 - N - 1$，记录的是A数组的下标。</p>
<p>满足$A[B[0]] &gt; A[B[1]] &gt; A[B[2]] &gt;…A[B[K]]$，并且对任意连续的两项$B[i]及B[i + 1]$，满足$min(B[i]，B[i + 1]) &lt; j &lt; max(B[i]，B[i + 1])$ 均有$A[j] &lt; A[B[i + 1]] $，求最大的K。</p>
<p>例如：$9, 10, 2, -1, 3, -5, 0, -3, 1, 12, 5, 8, -2, 6, 4$。可以选出：$12, 10, 3, 1, 0, -3。$对应的下标为$：9, 1, 4, 8, 6, 7$（就是B数组），输出$6$。</p>
<h3 id="Input-5"><a href="#Input-5" class="headerlink" title="Input"></a>Input</h3><p>$第1行：一个数N，表示A数组的长度。（1 &lt;= N &lt;= 50000)$<br>$第2 - N + 1行：每行1个数对应A数组的元素Ai（0 &lt; Ai &lt; 10^9)$</p>
<h3 id="Output-5"><a href="#Output-5" class="headerlink" title="Output"></a>Output</h3><p>$输出B数组最长的长度K。$</p>
<h3 id="Input示例-5"><a href="#Input示例-5" class="headerlink" title="Input示例"></a>Input示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="number">15</span></div><div class="line"><span class="number">9</span></div><div class="line"><span class="number">10</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">-1</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">-5</span></div><div class="line"><span class="number">0</span></div><div class="line"><span class="number">-3</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">12</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">8</span></div><div class="line"><span class="number">-2</span></div><div class="line"><span class="number">6</span></div><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure>
<h3 id="Output示例-5"><a href="#Output示例-5" class="headerlink" title="Output示例"></a>Output示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">6</span></div></pre></td></tr></table></figure>
<h2 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h2><p>我们很容易发现本题的贪心策略，每次选当前区间中最大的数，然后在分出的左右两个小区间中重复上述过程，找到最长的那个序列就可以了，正常的想法就是维护线段树，然后$O(n\log n)$解决，但是我觉得，既然是在做单调栈，为什么不在$O(n)$内解决呢？于是我就想到了单调栈的做法</p>
<p>维护方法：对每个元素维护一个结构体，内含两个成员变量，分别为当前求出的DP值和元素本身的值，我们每次在pop出一个元素后，我们用这个元素的最长长度加一，更新新的栈顶元素的最长长度，同时对于每次进栈的那个元素，用所有被它挤出去的那些元素的最长长度加一来更新它的最长长度，最后在每次操作时都用元素的最长长度更新答案，并且把所有元素都出栈检查即可</p>
<h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">num</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> val, ans;</div><div class="line">    num(<span class="keyword">int</span> val, <span class="keyword">int</span> ans) : val(val), ans(ans)&#123;&#125;</div><div class="line">    num()&#123;&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</div><div class="line">    <span class="built_in">stack</span>&lt;num&gt; save;</div><div class="line">    save.push(num(line[<span class="number">1</span>], <span class="number">1</span>));</div><div class="line">    tot = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        num op = save.top();</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (!save.empty() &amp;&amp; op.val &lt;= line[i])&#123;</div><div class="line">            ans = max(ans, op.ans);</div><div class="line">            save.pop();</div><div class="line">            <span class="keyword">if</span> (!save.empty())&#123;</div><div class="line">                num op2 = save.top();</div><div class="line">                save.pop();</div><div class="line">                op2.ans = max(op2.ans, op.ans + <span class="number">1</span>);</div><div class="line">                save.push(op2);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">            op = save.top();</div><div class="line">        &#125;</div><div class="line">        save.push(num(line[i], ans + <span class="number">1</span>));</div><div class="line">        tot = max(tot, ans + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (!save.empty())&#123;</div><div class="line">        num op = save.top();</div><div class="line">        tot = max(tot, op.ans);</div><div class="line">        save.pop();</div><div class="line">        <span class="keyword">if</span> (!save.empty())&#123;</div><div class="line">            num op2 = save.top();</div><div class="line">            save.pop();</div><div class="line">            op2.ans = max(op2.ans, op.ans + <span class="number">1</span>);</div><div class="line">            save.push(op2);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, tot);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("sub.in", "r", stdin);</span></div><div class="line">    freopen("sub.out", "w", stdout);*/</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="51nod-1275-连续子段的差异"><a href="#51nod-1275-连续子段的差异" class="headerlink" title="51nod 1275 连续子段的差异"></a>51nod 1275 连续子段的差异</h2><p>题目来源： Codility<br>基准时间限制：1 秒<br>空间限制：131072 KB<br>分值： 80<br>难度：5级算法题</p>
<p>给出一个包括N个元素的整数数组A，包括A本身在内，共有 $\frac{n * (n + 1)}{2}$个非空子段。例如：1 3 2的子段为{1} {3} {2} {1 3} {3 2} {1 3 2}。在这些子段中，如果最大值同最小值的差异不超过K，则认为这是一个合格的子段。给出数组A和K，求有多少符合条件的子段。例如：3 5 7 6 3，K = 2，符合条件的子段包括：{3} {5} {7} {6} {3} {3 5} {5 7} {7 6} {5 7 6}，共9个。</p>
<h3 id="Input-6"><a href="#Input-6" class="headerlink" title="Input"></a>Input</h3><p>$第1行：2个数N, K（1 &lt;= N &lt;= 50000, 0 &lt;= K &lt;= 10^9)$<br>$第2 - N + 1行：每行1个数，对应数组的元素A_i(0 &lt;= A[i] &lt;= 10^9)$</p>
<h3 id="Output-6"><a href="#Output-6" class="headerlink" title="Output"></a>Output</h3><p>输出符合条件的子段数量。</p>
<h3 id="Input示例-6"><a href="#Input示例-6" class="headerlink" title="Input示例"></a>Input示例</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">5 </span><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">7</span></div><div class="line"><span class="number">6</span></div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure>
<h3 id="Output示例-6"><a href="#Output示例-6" class="headerlink" title="Output示例"></a>Output示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">9</span></div></pre></td></tr></table></figure>
<h2 id="题目分析-6"><a href="#题目分析-6" class="headerlink" title="题目分析"></a>题目分析</h2><p>这就是一个需要用到单调队列的题目了，同时根据本题的特性，本题还需要使用尺取法，我们先维护两个队列，一个维护最大值，另一个维护最小值，我们每次同时向两个队列中加入元素并更新，然后直到两个队列最大和最小的元素之差超过$K$，然后我们统计数量并向右移动队列的左端点（同时移动两个队列的），再重复上述尺取过程，这样就可以解决问题了，这种问题的解决，需要基于同时性处理，即同时入队一个元素，同时出队一个元素</p>
<h2 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; inc;</div><div class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; dec;</div><div class="line"></div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("diff.in", "r", stdin);</span></div><div class="line">    freopen("diff.out", "w", stdout);*/</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</div><div class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="keyword">while</span>(cur &lt; n)&#123;</div><div class="line">            <span class="keyword">while</span> (!dec.empty() &amp;&amp; line[dec.back()] &lt;= line[cur]) dec.pop_back();</div><div class="line">            dec.push_back(cur);</div><div class="line">            <span class="keyword">while</span> (!inc.empty() &amp;&amp; line[inc.back()] &gt;= line[cur]) inc.pop_back();</div><div class="line">            inc.push_back(cur);</div><div class="line">            <span class="keyword">if</span> (line[dec.front()] - line[inc.front()] &lt;= k) cur++;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        ans += (cur - i);</div><div class="line">        <span class="keyword">if</span> (inc.front() == i) inc.pop_front();</div><div class="line">        <span class="keyword">if</span> (dec.front() == i) dec.pop_front();</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><ul>
<li><p>单调栈</p>
<ul>
<li>上升栈<ul>
<li>求最大矩形面积</li>
<li>求最小值的整体和</li>
<li>求包含末元素的最长上升子序列长度</li>
</ul>
</li>
<li>下降栈<ul>
<li>求最大值的整体和</li>
<li>求包含末元素的最长下降子序列长度</li>
</ul>
</li>
<li>栈内二分<ul>
<li>不保留维护，分情况更新</li>
</ul>
</li>
<li>区间化理解<ul>
<li>把元素区间化，用区间交解决问题</li>
</ul>
</li>
<li>整体化处理<ul>
<li>常用于多个栈的相关联信息维护</li>
</ul>
</li>
</ul>
</li>
<li><p>单调队列</p>
<ul>
<li>二分答案</li>
<li>尺取法</li>
<li>滑动窗口式问题</li>
</ul>
</li>
</ul>
<p>感觉题还是做得少。。。没什么内容</p>
<p>所以大致就是这样，单调栈/单调队列其实还是很好理解的，我们熟悉了几种常见的操作以后，就能够感受到单调栈/单调队列这种数据结构的强大之处，也能对它们有更深刻的理解</p>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;最近刷了一波JCY大神的课件，打算认真练习一发单调队列/单调栈，于是有了这篇总结，同时作为之后学习单调优化DP的基础&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://goseqh.tk/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="单调队列" scheme="https://goseqh.tk/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
      <category term="单调栈" scheme="https://goseqh.tk/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>骗分导论</title>
    <link href="https://goseqh.tk/2017/07/25/%E9%AA%97%E5%88%86%E5%AF%BC%E8%AE%BA/"/>
    <id>https://goseqh.tk/2017/07/25/骗分导论/</id>
    <published>2017-07-25T14:07:04.000Z</published>
    <updated>2017-07-25T14:14:26.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>闲时看看，大有裨益<br><a id="more"></a></p>
<h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1>

	<div class="row">
    <embed src="./骗分导论(OI).pdf" width="120%" height="660" type="application/pdf">
	</div>



]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;闲时看看，大有裨益&lt;br&gt;
    
    </summary>
    
    
      <category term="骗分导论" scheme="https://goseqh.tk/tags/%E9%AA%97%E5%88%86%E5%AF%BC%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>2016 LNWC 讲解</title>
    <link href="https://goseqh.tk/2017/07/24/2016-LNWC-%E8%AE%B2%E8%A7%A3/"/>
    <id>https://goseqh.tk/2017/07/24/2016-LNWC-讲解/</id>
    <published>2017-07-24T15:06:33.000Z</published>
    <updated>2017-07-24T15:22:46.591Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>这里存放一下2016 LNWC的讲课课件，用于以后的知识复习<br><a id="more"></a></p>
<h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><p>如下：</p>
<ul>
<li>Day1 树 ryz</li>
<li>Day2 数据结构 eleven</li>
<li>Day3 网络流 ryz</li>
<li>Day4 数据结构 eleven</li>
<li>Day5 1-字符串 &amp; 2-数论 ryz</li>
<li>Day6 动态规划 eleven</li>
</ul>
<p>其中，ryz为茹逸中，eleven为李诗懿</p>
<h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1><h2 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h2>

	<div class="row">
    <embed src="./1.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h2>

	<div class="row">
    <embed src="./2.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h2>

	<div class="row">
    <embed src="./3.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a>Day4</h2>

	<div class="row">
    <embed src="./4.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="Day5-1"><a href="#Day5-1" class="headerlink" title="Day5-1"></a>Day5-1</h2>

	<div class="row">
    <embed src="./5-1.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="Day5-2"><a href="#Day5-2" class="headerlink" title="Day5-2"></a>Day5-2</h2>

	<div class="row">
    <embed src="./5-2.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="Day6"><a href="#Day6" class="headerlink" title="Day6"></a>Day6</h2>

	<div class="row">
    <embed src="./6.pdf" width="120%" height="660" type="application/pdf">
	</div>



]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;这里存放一下2016 LNWC的讲课课件，用于以后的知识复习&lt;br&gt;
    
    </summary>
    
    
      <category term="树" scheme="https://goseqh.tk/tags/%E6%A0%91/"/>
    
      <category term="数据结构" scheme="https://goseqh.tk/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="网络流" scheme="https://goseqh.tk/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="字符串" scheme="https://goseqh.tk/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="数论" scheme="https://goseqh.tk/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="动态规划" scheme="https://goseqh.tk/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>特殊算法详解</title>
    <link href="https://goseqh.tk/2017/07/24/%E7%89%B9%E6%AE%8A%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <id>https://goseqh.tk/2017/07/24/特殊算法详解/</id>
    <published>2017-07-24T14:53:29.000Z</published>
    <updated>2017-07-24T14:57:33.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>这里存放一下JCY大神的讲课课件，用于特殊算法的复习<br><a id="more"></a></p>
<h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1>

	<div class="row">
    <embed src="./day10.pdf" width="120%" height="660" type="application/pdf">
	</div>



]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;这里存放一下JCY大神的讲课课件，用于特殊算法的复习&lt;br&gt;
    
    </summary>
    
    
      <category term="莫队算法" scheme="https://goseqh.tk/tags/%E8%8E%AB%E9%98%9F%E7%AE%97%E6%B3%95/"/>
    
      <category term="CDQ分治" scheme="https://goseqh.tk/tags/CDQ%E5%88%86%E6%B2%BB/"/>
    
      <category term="分块法" scheme="https://goseqh.tk/tags/%E5%88%86%E5%9D%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构详解</title>
    <link href="https://goseqh.tk/2017/07/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%A6%E8%A7%A3/"/>
    <id>https://goseqh.tk/2017/07/24/数据结构详解/</id>
    <published>2017-07-24T10:29:20.000Z</published>
    <updated>2017-07-24T14:26:14.371Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>这里存放一下JCY大神的讲课课件，用于数据结构的复习<br><a id="more"></a></p>
<h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1><!--

	<div class="row">
    <embed src="http://www.slideboom.com/presentations/1826019/day3%E8%AF%BE%E4%BB%B6?pk=1701-4c32-17d6-9435-f3e2-83fd-57bd-33cd" width="120%" height="660" type="application/pdf">
	</div>


-->
<!--

	<div class="row">
    <embed src="http://pptplus.cn/index.php?g=site&amp;m=ppt&amp;a=detail&amp;id=8413#&amp;gid=1&amp;pid=1" width="120%" height="660" type="application/pdf">
	</div>


-->
<!--<iframe class="embed-responsive-item" src="./day3课件.html" height="400px" width="90%" align="center">
</iframe>-->


	<div class="row">
    <embed src="./day3课件.pdf" width="120%" height="660" type="application/pdf">
	</div>



<!-- 
<iframe src="https://github.com/GQH123/GQH123.github.io/blob/master/2017/07/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%A6%E8%A7%A3/day3%E8%AF%BE%E4%BB%B6.ppt" height="400px" width="90%" align="center"></iframe> 
-->
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;这里存放一下JCY大神的讲课课件，用于数据结构的复习&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://goseqh.tk/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>基础算法与技巧</title>
    <link href="https://goseqh.tk/2017/07/24/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E4%B8%8E%E6%8A%80%E5%B7%A7/"/>
    <id>https://goseqh.tk/2017/07/24/基础算法与技巧/</id>
    <published>2017-07-24T10:26:50.000Z</published>
    <updated>2017-07-24T14:41:38.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>这里存放一下FZW大神的讲课课件，用于基础算法的复习<br><a id="more"></a></p>
<h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1>

	<div class="row">
    <embed src="./day2课件.pdf" width="120%" height="660" type="application/pdf">
	</div>



]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;这里存放一下FZW大神的讲课课件，用于基础算法的复习&lt;br&gt;
    
    </summary>
    
    
      <category term="基础算法" scheme="https://goseqh.tk/tags/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>基础数论讲解</title>
    <link href="https://goseqh.tk/2017/07/24/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA%E8%AE%B2%E8%A7%A3/"/>
    <id>https://goseqh.tk/2017/07/24/基础数论讲解/</id>
    <published>2017-07-24T10:06:07.000Z</published>
    <updated>2017-07-24T14:42:10.451Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>这里存放一下FZW大神的讲课课件，用于基础数论的复习<br><a id="more"></a></p>
<h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1><!--<iframe class="render-viewer" src="https://render.githubusercontent.com/view/pdf?commit=369ff49cf889bc57af5ea59f8c06e093b29ecba4&amp;enc_url=68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f4751483132332f4751483132332e6769746875622e696f2f333639666634396366383839626335376166356561353966386330366530393362323965636261342f323031372f30372f32342f2545352539462542412545372541312538302545362539352542302545382541452542412545382541452542322545382541372541332f646179312545382541462542452545342542422542362e706466&amp;nwo=GQH123%2FGQH123.github.io&amp;path=2017%2F07%2F24%2F%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA%E8%AE%B2%E8%A7%A3%2Fday1%E8%AF%BE%E4%BB%B6.pdf&amp;repository_id=96849591&amp;repository_type=Repository#3410e2c3-947e-45a2-aef7-3f220367b592" sandbox="allow-scripts allow-same-origin allow-top-navigation" height="400px" width="90%" align="center">Viewer requires iframe.</iframe>-->


	<div class="row">
    <embed src="./day1课件.pdf" width="120%" height="660" type="application/pdf">
	</div>



]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;这里存放一下FZW大神的讲课课件，用于基础数论的复习&lt;br&gt;
    
    </summary>
    
    
      <category term="数论" scheme="https://goseqh.tk/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="数学" scheme="https://goseqh.tk/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>#6062. 「2017 山东一轮集训 Day2」Pair</title>
    <link href="https://goseqh.tk/2017/07/20/6062-%E3%80%8C2017-%E5%B1%B1%E4%B8%9C%E4%B8%80%E8%BD%AE%E9%9B%86%E8%AE%AD-Day2%E3%80%8DPair/"/>
    <id>https://goseqh.tk/2017/07/20/6062-「2017-山东一轮集训-Day2」Pair/</id>
    <published>2017-07-20T06:17:32.000Z</published>
    <updated>2017-07-20T08:45:40.986Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>题解： $Libre$ $Online$ $Judge$ # $6062$. 「2017 山东一轮集训 Day2」Pair<br><a id="more"></a></p>
<h1 id="LOJ-6062-「2017-山东一轮集训-Day2」Pair"><a href="#LOJ-6062-「2017-山东一轮集训-Day2」Pair" class="headerlink" title="LOJ 6062. 「2017 山东一轮集训 Day2」Pair"></a>LOJ 6062. 「2017 山东一轮集训 Day2」Pair</h1><p>内存限制：256 MiB<br>时间限制：1000 ms<br>标准输入输出<br>题目类型：传统<br>评测方式：文本比较</p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出一个长度为 $n$ 的数列 ${ a_i }$ 和一个长度为 $ m$ 的数列 ${ b_i }$，求 ${ a_i }$ 有多少个长度为 $m$ 的连续子数列能与 ${ b_i }$ 匹配。</p>
<p>两个数列可以匹配，当且仅当存在一种方案，使两个数列中的数可以两两配对，两个数可以配对当且仅当它们的和不小于 $h$。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行三个数字 $n, m, h$。<br>第二行有 $m$ 个数字 $b_1, b_2, \ldots , b_m$。<br>第三行有 $n$ 个数字 $a_1, a_2, \ldots, a_n$。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一个数字，${ a_i }$ 有多少个长度为 $ m $ 的连续子数列能与 ${ b_i }$ 匹配。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 1"></a>样例输入 1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">5 </span><span class="number">2</span> <span class="number">10</span></div><div class="line"><span class="symbol">5 </span><span class="number">3</span></div><div class="line"><span class="symbol">1 </span><span class="number">8</span> <span class="number">5</span> <span class="number">5</span> <span class="number">7</span></div></pre></td></tr></table></figure>
<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 1"></a>样例输出 1</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure>
<h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入 2"></a>样例输入 2</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">2 </span><span class="number">2</span> <span class="number">6</span></div><div class="line"><span class="symbol">2 </span><span class="number">3</span></div><div class="line"><span class="symbol">3 </span><span class="number">4</span></div></pre></td></tr></table></figure>
<h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出 2"></a>样例输出 2</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
<h3 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入 3"></a>样例输入 3</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">4 </span><span class="number">2</span> <span class="number">10</span></div><div class="line"><span class="symbol">5 </span><span class="number">5</span></div><div class="line"><span class="symbol">9 </span><span class="number">3</span> <span class="number">8</span> <span class="number">9</span></div></pre></td></tr></table></figure>
<h3 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出 3"></a>样例输出 3</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="数据范围与提示"><a href="#数据范围与提示" class="headerlink" title="数据范围与提示"></a>数据范围与提示</h2><p>对于 $10\%$ 的数据，$1 \leq m \leq n \leq 10$；<br>对于 $40\%$ 的数据，$1 \leq m \leq n \leq 1000$；<br>对于 $100\%$ 的数据，$1 \leq m \leq n \leq 150000 $；<br>对于 $100\%$ 的数据，$1 \leq a_i, b_i, h \leq 10 ^ 9 $​​。</p>
<h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>首先我们发现条件 $a + b &gt; h$，非常不好看，于是我们把它转化一下，变成 $a &gt; h - b$，这样就会好很多</p>
<p>然后，我们透彻地理解题意，可以知道，如果我们把当前与$b$相对应的$a$中的元素与$b$中的元素拿出来，排好序，那么当且仅当任何一个后缀的元素中属于$a$的元素个数大于等于$b$中的元素个数，那么$b$可以匹配</p>
<p>其实这还是很好理解的，然后，我们就可以使用线段树维护每个后缀中属于$a$和属于$b$的元素个数之差的最小值（包含正负），只要这个值大于等于零，那么可以匹配</p>
<p>细节见代码</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 300005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> sum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> minnum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        sum[o] += qd;</div><div class="line">        minnum[o] += qd;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) insert(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> insert(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    sum[o] = sum[o &lt;&lt; <span class="number">1</span>] + sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">    minnum[o] = min(minnum[o &lt;&lt; <span class="number">1</span>], sum[o &lt;&lt; <span class="number">1</span>] + minnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> a[maxn];</div><div class="line"><span class="keyword">int</span> b[maxn];</div><div class="line"><span class="keyword">int</span> c[maxn];</div><div class="line"><span class="keyword">int</span> n, m, h;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"pair.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"pair.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;h);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) b[i] = h - b[i];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) c[i] = b[i];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) c[i + m] = a[i];</div><div class="line">    sort(c + <span class="number">1</span>, c + <span class="number">1</span> + n + m);</div><div class="line">    <span class="keyword">int</span> k = unique(c + <span class="number">1</span>, c + <span class="number">1</span> + n + m) - c;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) b[i] = lower_bound(c + <span class="number">1</span>, c + <span class="number">1</span> + k, b[i]) - c;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = lower_bound(c + <span class="number">1</span>, c + <span class="number">1</span> + k, a[i]) - c;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        qx = b[i], qd = <span class="number">1</span>;</div><div class="line">        insert(<span class="number">1</span>, k, <span class="number">1</span>);</div><div class="line">        qx = a[i], qd = <span class="number">-1</span>;</div><div class="line">        insert(<span class="number">1</span>, k, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    ans += (minnum[<span class="number">1</span>] &gt;= <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = m + <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        qx = a[i - m] , qd = <span class="number">1</span>;</div><div class="line">        insert(<span class="number">1</span>, k, <span class="number">1</span>);<span class="comment">///////correct: n -&gt; k</span></div><div class="line">        qx = a[i], qd = <span class="number">-1</span>;</div><div class="line">        insert(<span class="number">1</span>, k, <span class="number">1</span>);<span class="comment">///////correct: n -&gt; k</span></div><div class="line">        ans += (minnum[<span class="number">1</span>] &gt;= <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;题解： $Libre$ $Online$ $Judge$ # $6062$. 「2017 山东一轮集训 Day2」Pair&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://goseqh.tk/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="离散化" scheme="https://goseqh.tk/tags/%E7%A6%BB%E6%95%A3%E5%8C%96/"/>
    
      <category term="线段树" scheme="https://goseqh.tk/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>#516. 「LibreOJ β Round #2」DP 一般看规律</title>
    <link href="https://goseqh.tk/2017/07/20/516-%E3%80%8CLibreOJ-%CE%B2-Round-2%E3%80%8DDP-%E4%B8%80%E8%88%AC%E7%9C%8B%E8%A7%84%E5%BE%8B/"/>
    <id>https://goseqh.tk/2017/07/20/516-「LibreOJ-β-Round-2」DP-一般看规律/</id>
    <published>2017-07-20T06:17:19.000Z</published>
    <updated>2017-07-20T08:50:22.135Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>题解：$Libre$ $Online$ $Judge$ # $516$. 「LibreOJ β Round #2」DP 一般看规律<br><a id="more"></a></p>
<h1 id="LOJ-516-「LibreOJ-β-Round-2」DP-一般看规律"><a href="#LOJ-516-「LibreOJ-β-Round-2」DP-一般看规律" class="headerlink" title="LOJ 516. 「LibreOJ β Round #2」DP 一般看规律"></a>LOJ 516. 「LibreOJ β Round #2」DP 一般看规律</h1><p>内存限制：512 MiB<br>时间限制：1000 ms<br>标准输入输出<br>题目类型：传统<br>评测方式：文本比较</p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个长度为 $n$ 的序列 $a$，一共有 $m$ 个操作。<br>每次操作的内容为：给定 $x,y$，序列中所有 $x$ 会变成 $y$。</p>
<p>同时我们有一份代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> ans = <span class="number">2147483647</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</div><div class="line">        <span class="keyword">if</span> (a[i] == a[j])</div><div class="line">            ans = <span class="built_in">std</span>::min(ans, j - i);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div></pre></td></tr></table></figure></p>
<p>请在每次修改后输出代码运行的结果。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行两个数，表示 $n,m$。<br>第二行 $n$ 个数，表示 $a_1,a_2,\cdots, a_n$​​。<br>然后 $m$ 行每行两个数 $x$ 和 $y$，表示序列中所有 $x$ 会变成 $y$。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>对于每次修改，输出答案。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">5 </span><span class="number">10</span></div><div class="line"><span class="symbol">2 </span><span class="number">7</span> <span class="number">6</span> <span class="number">3</span> <span class="number">8</span></div><div class="line"><span class="symbol">6 </span><span class="number">1</span></div><div class="line"><span class="symbol">7 </span><span class="number">1</span></div><div class="line"><span class="symbol">1 </span><span class="number">3</span></div><div class="line"><span class="symbol">5 </span><span class="number">6</span></div><div class="line"><span class="symbol">1 </span><span class="number">7</span></div><div class="line"><span class="symbol">9 </span><span class="number">5</span></div><div class="line"><span class="symbol">1 </span><span class="number">10</span></div><div class="line"><span class="symbol">7 </span><span class="number">6</span></div><div class="line"><span class="symbol">7 </span><span class="number">5</span></div><div class="line"><span class="symbol">3 </span><span class="number">9</span></div></pre></td></tr></table></figure>
<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="number">2147483647</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="数据范围与提示"><a href="#数据范围与提示" class="headerlink" title="数据范围与提示"></a>数据范围与提示</h2><p>$1\le n , m \le 100000$</p>
<p>每个出现的数字绝对值在 int 范围内。</p>
<h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>在这篇文章的开头，我写了一句话：“有层次的思考不可或缺”，什么意思呢，就是在我们思考每一道题的时候，最好不要使用过于跳跃的思维，而是要从最初始的想法一步一步进行思考改进，最终得到正确算法</p>
<p>尽管有的时候，灵感来源于一瞬间，但是，这种比较稳定的思维方法还是要有所接受，多听一听各地的讲课，就会发现，一道难题，大佬们讲它的时候，往往都是先给出最简单的暴力方法，然后观察信息的冗余或浪费，或是进行各种联想，逐渐改进得到最后的正解</p>
<p>上面是对一种思维方法的阐述，与本题无关</p>
<p>下面说一说这道题，我们先透彻地理解一下题意，然后发现操作只有合并，而没有分裂，这启发我们向并查集/启发式合并的方向上思考，然后寻找下标差的最小值，我们可以联想到平衡树里面的前驱与后继，所以本题就是启发式合并的平衡树，同时每次插入时寻找前驱后继即可</p>
<p>最后为了方便处理，我们搞一个离散化，就可以了</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 300005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483647</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qu</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    qu(<span class="keyword">int</span> x, <span class="keyword">int</span> y) : x(x), y(y)&#123;&#125;</div><div class="line">    qu()&#123;&#125;</div><div class="line">&#125;q[maxn];</div><div class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; save[maxn];</div><div class="line"><span class="keyword">int</span> a[maxn];</div><div class="line"><span class="keyword">int</span> c[maxn];</div><div class="line"><span class="keyword">int</span> tag[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; x)</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"dp.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"dp.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    read(n), read(m);</div><div class="line">    <span class="keyword">int</span> ct = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(a[i]), c[ct++] = a[i];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        read(q[i].x), read(q[i].y);</div><div class="line">        c[ct++] = q[i].x, c[ct++] = q[i].y;</div><div class="line">    &#125;</div><div class="line">    sort(c, c + ct);</div><div class="line">    ct = unique(c, c + ct) - c;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ct; i++) tag[i] = i;</div><div class="line">    <span class="keyword">int</span> ans = INF;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        a[i] =  lower_bound(c, c + ct, a[i]) - c;</div><div class="line">        save[a[i]].insert(i);</div><div class="line"></div><div class="line">        <span class="keyword">auto</span> it = save[a[i]].lower_bound(i);</div><div class="line">        <span class="comment">//auto it = lower_bound(save[a[i]].begin(), save[a[i]].end(), i);</span></div><div class="line">        <span class="keyword">if</span> (it != save[a[i]].begin()) ans = min(ans, i - *(--it));</div><div class="line">        it = save[a[i]].upper_bound(i);</div><div class="line">        <span class="comment">//it = upper_bound(save[a[i]].begin(), save[a[i]].end(), i);</span></div><div class="line">        <span class="keyword">if</span> (it != save[a[i]].end()) ans = min(ans, *it - i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        q[i].x = lower_bound(c, c + ct, q[i].x) - c,</div><div class="line">        q[i].y = lower_bound(c, c + ct, q[i].y) - c;</div><div class="line">        <span class="keyword">int</span> x = q[i].x, y = q[i].y;</div><div class="line">        <span class="keyword">if</span> (x == y)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (save[tag[x]].size() &gt; save[tag[y]].size()) swap(tag[x], tag[y]);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = save[tag[x]].begin(); it != save[tag[x]].end(); it++)&#123;</div><div class="line">            save[tag[y]].insert(*it);</div><div class="line"></div><div class="line">            <span class="keyword">auto</span> it2 = save[tag[y]].lower_bound(*it);</div><div class="line">            <span class="comment">//auto it2 = lower_bound(save[tag[y]].begin(), save[tag[y]].end(), *it);</span></div><div class="line">            <span class="keyword">if</span> (it2 != save[tag[y]].begin()) ans = min(ans, *it - *(--it2));</div><div class="line">            it2 = save[tag[y]].upper_bound(*it);</div><div class="line">            <span class="comment">//it2 = upper_bound(save[tag[y]].begin(), save[tag[y]].end(), *it);</span></div><div class="line">            <span class="keyword">if</span> (it2 != save[tag[y]].end()) ans = min(ans, *it2 - *it);</div><div class="line">        &#125;</div><div class="line">        save[tag[x]].clear();</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码细节：不要使用$STL$中的$lower_bound/upper_bound$来操作set容器，否则算法会变得十分缓慢，很容易超时，所以，我们要使用set自带的$lower_bound/upper_bound$，具体都体现在上面的代码中</p>
<p>同时注意$tag$数组的必要性，因为它可以调节合并的顺序，否则会导致因启发式合并而带来的合并方向错误</p>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;题解：$Libre$ $Online$ $Judge$ # $516$. 「LibreOJ β Round #2」DP 一般看规律&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://goseqh.tk/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="平衡树" scheme="https://goseqh.tk/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
      <category term="启发式合并" scheme="https://goseqh.tk/tags/%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/"/>
    
      <category term="离散化" scheme="https://goseqh.tk/tags/%E7%A6%BB%E6%95%A3%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>#6136. 「2017 山东三轮集训 Day4」Left</title>
    <link href="https://goseqh.tk/2017/07/11/6136-%E3%80%8C2017-%E5%B1%B1%E4%B8%9C%E4%B8%89%E8%BD%AE%E9%9B%86%E8%AE%AD-Day4%E3%80%8DLeft/"/>
    <id>https://goseqh.tk/2017/07/11/6136-「2017-山东三轮集训-Day4」Left/</id>
    <published>2017-07-11T12:50:36.000Z</published>
    <updated>2017-07-11T13:19:53.056Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>题解：$Libre$ $Online$ $Judge$ # $6136$. 「2017 山东三轮集训 Day4」Left<br><a id="more"></a></p>
<h1 id="LOJ-6136-「2017-山东三轮集训-Day4」Left"><a href="#LOJ-6136-「2017-山东三轮集训-Day4」Left" class="headerlink" title="LOJ 6136. 「2017 山东三轮集训 Day4」Left"></a>LOJ 6136. 「2017 山东三轮集训 Day4」Left</h1><p>内存限制：512 MiB<br>时间限制：1000 ms<br>标准输入输出<br>题目类型：传统<br>评测方式：文本比较</p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>JOHNKRAM 最近在研究排序网络，但他发现他不会制作比较器，于是他用交换器来代替比较器。</p>
<p>一个交换器有两个输入端 $x, y$ 和两个输出端 $x’, y’$​​。如果交换器处于关闭状态，则 $x $ 收到的信号会从 $x’$ 发出，$y$ 收到的信号会从 $y’$ 发出。如果交换器处于开启状态，则 $x$ 收到的信号会从 $y’$​​ 发出。</p>
<p>JOHNKRAM 设计了这样一个递归定义的网络：</p>
<ul>
<li>$1$ 阶网络就是一个交换器。</li>
<li>$n(n &gt; 1)$ 阶网络的第一排是 $2 ^ {n - 1}$​​ 个交换器，接下来是两个 $n - 1$ 阶网络,最后一排也是 $2 ^ {n - 1}$​​ 个交换器。将第一排的输出端和第二排的输入端分别从左到右标号为 $0 \sim 2 ^ n - 1$，第一排的 $i$ 输出端连接到第二排的 i&gt;&gt;1 输入端，其中 &gt;&gt; 指 $n$ 位二进制数的循环右移。类似，将倒数第一排的输入端和倒数第二排的输出端分别从左到右标号为 $0\sim 2 ^ n - 1$，倒数第二排的 $i$ 输出端连接到倒数第一排的 i&lt;&lt;1 输入端，其中 &lt;&lt; 指 $n$ 位二进制数的循环左移。</li>
</ul>
<p>一个 $3$ 阶的网络如下图所示：<br><img src="https://ooo.0o0.ooo/2017/07/05/595c70f8362a9.png" alt=""></p>
<p>JOHNKRAM 通过开关交换器来调整网络。现在他对一个 $n$ 阶网络的 $2 ^ n$​​ 个输入端分别输入了一个数，第 $i(0 &lt; i &lt; 2 ^ n)$ 个输入端输入的是 $i$。然后他给出了一个长度为 $2 ^ n$​​ 的排列 $p$。他希望你给出一种网络的状态，使得第 $i(0 &lt; i &lt; 2 ^ n)$ 个输出端输出的是 $p_i$​​。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入文件包含不超过 10 组测试数据。<br>每个测试数据包含两行，第一行一个整数 $n$，表示是一个 $n$ 阶网络。<br>第二行 $2 ^ n$​​ 个整数，表示排列 $p$。<br>输入文件以一个 0 结尾。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>对于每组数据，如果没有合法的解，则输出 $-1$，否则输出 $2n - 1$ 行 $2 ^ n$​​ 位二进制数，表示网络状态。如果一个交换器是开启的，则对应的位置上是 $1$，否则是 $0$。如果有多解，输出字典序最小的。</p>
<p>每个答案后打印一个空行。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">2</span></div><div class="line"><span class="symbol">3 </span><span class="number">2</span> <span class="number">1</span> <span class="number">0</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="symbol">3 </span><span class="number">7</span> <span class="number">4</span> <span class="number">0</span> <span class="number">2</span> <span class="number">6</span> <span class="number">1</span> <span class="number">5</span></div><div class="line"><span class="number">0</span></div></pre></td></tr></table></figure>
<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="number">00</span></div><div class="line"><span class="number">11</span></div><div class="line"><span class="number">11</span></div><div class="line"></div><div class="line"><span class="number">0011</span></div><div class="line"><span class="number">0000</span></div><div class="line"><span class="number">0110</span></div><div class="line"><span class="number">1111</span></div><div class="line"><span class="number">1101</span></div></pre></td></tr></table></figure>
<h2 id="数据范围与提示"><a href="#数据范围与提示" class="headerlink" title="数据范围与提示"></a>数据范围与提示</h2><p>对于 $20\%$ 的数据，保证 $n \leq 3$；<br>对于 $100\%$ 的数据，保证 $1 \leq n \leq 13$。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>其实这道题还是非常好的，正如前文的那句话，”宏观是微观的表现，微观是宏观的本质”，我们考虑对这道题递归和分解，使得我们每次只去分析一个小过程，这样就会简便很多，我们可以观察规律，发现<strong>$n$阶网络最后每两组中的数($k <em> 2,k </em> 2+1 $)一定不在$n-1$阶网络的同一侧</strong>，这样我们可以对每层$O(2^n)$进行处理，同时使用<strong>贪心法</strong>，如果当前的这个组没被标记（即是否已经决定开或关），就让它关着，然后用自身的状态以及网络特征，尽可能多的更新其他的组，可以证明这样做是完全正确的，把两个排列放在一起（置换），<strong>用2-SAT的思路进行连边</strong>，同时每两组内的数($k <em> 2, k </em> 2 + 1$)也连边，根据题目性质，<strong>只能形成偶环</strong>，无论怎么染色都不会矛盾（即无解），所以，我们对每一层都进行这样的处理，同时更新上下的序列，就可以在$O(T <em> n </em> 2 ^ n)$的复杂度内解决本题，而这是完全可以接受的</p>
<p>这道题思路非常巧妙，其实也是要<strong>对题目进行深度的理解</strong>，理解网络的<strong>工作原理与特征</strong>，然而代码还是非常恶心。。。细节巨多，最后还是先WA了一次才A的QAQ</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 13</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> up[<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">int</span> low[<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">int</span> ori[<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">int</span> line[<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">int</span> ans[(maxn &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>][<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">bool</span> vis[(maxn &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>][<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">int</span> temp[<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">int</span> judge[<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">int</span> n, x, con, con2;  <span class="comment">//con = n - 1 - (x - 1);</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> side = line[j ^ <span class="number">1</span>];</div><div class="line">    <span class="keyword">int</span> _j = up[side];</div><div class="line">    <span class="keyword">if</span> (vis[con][_j &gt;&gt; <span class="number">1</span>]) <span class="keyword">return</span>;</div><div class="line">    vis[con][_j &gt;&gt; <span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    ans[con][_j &gt;&gt; <span class="number">1</span>] = ans[con][up[line[j]] &gt;&gt; <span class="number">1</span>] ^ ((line[j] &amp; (<span class="number">1</span> &lt;&lt; con)) &gt;&gt; con) ^ ((line[j ^ <span class="number">1</span>] &amp; (<span class="number">1</span> &lt;&lt; con)) &gt;&gt; con) ^ <span class="number">1</span>;<span class="comment">//WA的原因，原先的写法如下：</span></div><div class="line">    <span class="comment">//ans[con][_j &gt;&gt; 1] = ans[con][up[line[j]] &gt;&gt; 1] ^ (line[j] &amp; 1) ^ (line[j ^ 1] &amp; 1) ^ 1;</span></div><div class="line">    <span class="comment">//中间测试时是这样写的：</span></div><div class="line">    <span class="comment">//ans[con][_j &gt;&gt; 1] = ans[con][up[line[j]] &gt;&gt; 1] ^ (line[j] &amp; (1 &lt;&lt; con)) ^ (line[j ^ 1] &amp; (1 &lt;&lt; con)) ^ 1;</span></div><div class="line">    BFS(low[ori[_j ^ <span class="number">1</span>]]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*void BFS2(int j)&#123;</span></div><div class="line">    int side = ori[j ^ 1];</div><div class="line">    int _j = low[side];</div><div class="line">    if (vis[con2][_j &gt;&gt; 1]) return;</div><div class="line">    vis[con2][_j &gt;&gt; 1] = 1;</div><div class="line">    ans[con2][_j &gt;&gt; 1] = ans[con2][j &gt;&gt; 1] ^ 1;</div><div class="line">    BFS2(j ^ 1);</div><div class="line">&#125;*/</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*int shift_left(int n, int x)&#123;</span></div><div class="line">    int a = n &amp; ((1 &lt;&lt; x) - 1);</div><div class="line">    int b = n - a;</div><div class="line">    a = (a &lt;&lt; 1) | (a &gt;&gt; (x - 1)) &amp; ((1 &lt;&lt; x) - 1);</div><div class="line">    return a | b;</div><div class="line">&#125;*/</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">shift_right</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a = n &amp; ((<span class="number">1</span> &lt;&lt; x) - <span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> b = n - a;</div><div class="line">    a = (a &gt;&gt; <span class="number">1</span>) | (a &lt;&lt; (x - <span class="number">1</span>)) &amp; ((<span class="number">1</span> &lt;&lt; x) - <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> a | b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == <span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i += <span class="number">2</span>)&#123;</div><div class="line">            ans[con][i &gt;&gt; <span class="number">1</span>] = <span class="number">1</span> ^ (line[i] == ori[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i += <span class="number">1</span> &lt;&lt; x)&#123;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j++) low[line[j]] = j;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j++) up[ori[j]] = j;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j += <span class="number">2</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (!vis[con][j &gt;&gt; <span class="number">1</span>])&#123;</div><div class="line">                vis[con][j &gt;&gt; <span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">                ans[con][j &gt;&gt; <span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">                BFS(low[ori[j]]), BFS(low[ori[j + <span class="number">1</span>]]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j += <span class="number">2</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (ans[con][j &gt;&gt; <span class="number">1</span>])&#123;</div><div class="line">                temp[shift_right(j, x)] = ori[j ^ <span class="number">1</span>];</div><div class="line">                judge[ori[j ^ <span class="number">1</span>]] = <span class="number">0</span>;</div><div class="line">                temp[shift_right(j ^ <span class="number">1</span>, x)] = ori[j];</div><div class="line">                judge[ori[j]] = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                temp[shift_right(j, x)] = ori[j];</div><div class="line">                judge[ori[j]] = <span class="number">0</span>;</div><div class="line">                temp[shift_right(j ^ <span class="number">1</span>, x)] = ori[j ^ <span class="number">1</span>];</div><div class="line">                judge[ori[j ^ <span class="number">1</span>]] = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j++) ori[j] = temp[j];</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j += <span class="number">2</span>)</div><div class="line">            ans[con2][j &gt;&gt; <span class="number">1</span>] = judge[line[j]];</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j += <span class="number">2</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (ans[con2][j &gt;&gt; <span class="number">1</span>])&#123;</div><div class="line">                temp[shift_right(j, x)] = line[j ^ <span class="number">1</span>];</div><div class="line">                temp[shift_right(j ^ <span class="number">1</span>, x)] = line[j];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                temp[shift_right(j, x)] = line[j];</div><div class="line">                temp[shift_right(j ^ <span class="number">1</span>, x)] = line[j ^ <span class="number">1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j++) line[j] = temp[j];</div><div class="line">        <span class="comment">/*for (int j = i; j &lt; i + (1 &lt;&lt; x); j += 2)&#123;</span></div><div class="line">            if (!vis[con2][j &gt;&gt; 1])&#123;</div><div class="line">                vis[con2][j &gt;&gt; 1] = 1;</div><div class="line">                ans[con2][j &gt;&gt; 1] = 0;</div><div class="line">                BFS2(up[line[j]]), BFS2(up[line[j + 1]]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        */</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    x--;</div><div class="line">    con++;</div><div class="line">    con2--;</div><div class="line">    solve();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"left.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"left.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span> &amp;&amp; n != <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; i++) ori[i] = i;</div><div class="line">        con = <span class="number">0</span>;</div><div class="line">        con2 = (n - <span class="number">1</span>) &lt;&lt; <span class="number">1</span>;</div><div class="line">        x = n;</div><div class="line">        solve();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (n &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>; i++)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span> &lt;&lt; (n - <span class="number">1</span>); j++)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[i][j]);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还是很考察代码能力的。。。现场发明循环移位。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;题解：$Libre$ $Online$ $Judge$ # $6136$. 「2017 山东三轮集训 Day4」Left&lt;br&gt;
    
    </summary>
    
    
      <category term="模拟" scheme="https://goseqh.tk/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="贪心" scheme="https://goseqh.tk/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="Codility" scheme="https://goseqh.tk/tags/Codility/"/>
    
  </entry>
  
  <entry>
    <title>#6075. 「2017 山东一轮集训 Day6」重建</title>
    <link href="https://goseqh.tk/2017/07/11/6075-%E3%80%8C2017-%E5%B1%B1%E4%B8%9C%E4%B8%80%E8%BD%AE%E9%9B%86%E8%AE%AD-Day6%E3%80%8D%E9%87%8D%E5%BB%BA/"/>
    <id>https://goseqh.tk/2017/07/11/6075-「2017-山东一轮集训-Day6」重建/</id>
    <published>2017-07-11T06:02:24.000Z</published>
    <updated>2017-07-11T06:21:12.872Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>题解：$Libre$ $Online$ $Judge$ # $6075$. 「2017 山东一轮集训 Day6」重建<br><a id="more"></a></p>
<h1 id="LOJ-6075-「2017-山东一轮集训-Day6」重建"><a href="#LOJ-6075-「2017-山东一轮集训-Day6」重建" class="headerlink" title="LOJ 6075. 「2017 山东一轮集训 Day6」重建"></a>LOJ 6075. 「2017 山东一轮集训 Day6」重建</h1><p>内存限制：512 MiB<br>时间限制：1000 ms<br>标准输入输出<br>题目类型：传统<br>评测方式：文本比较</p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个 $n$ 个点 $m$ 条边的带权无向连通图 $G$，以及一个大小为 $k$ 的关键点集合 $A$。有个人要从点 $s$ 走到点 $t$，现在可以对所有边加上一个非负整数 $c$，问最大的 $c$，使得加上 $c$ 后，满足：$s$ 到 $t$ 的最短路长度 $= s$ 到 $t$ 且只能经过 $A$ 中的点的最短路长度。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行一个整数 $T$。代表这个数据点中有 $T$ 个测试数据。<br>对于每个测试数据：<br>第一行包含四个整数 $n, m, s, t$。<br>接下来 $m$ 行，每行三个整数 $u_i, v_i, c_i$​​，代表 $G$ 中有一条 $u_i$​​ 到 $v_i $​​ 的长度为 $c_i$ 的无向边。<br>第 $m + 1$ 行包含一个整数 $k$。<br>接下来一行 $k$ 个整数，代表关键点集合 $A$。保证 $s$ 与 $t$ 都在 $A$ 中。<br>输出格式</p>
<p>对于每个测试数据，输出一行一个整数 $c$，代表最大的合法的加到每条边的权值。假如不存在这样的合法的 $c$，则输出 Impossible，假如这样的 $c$ 可以无穷大，则输出 Infinity。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span></div><div class="line"><span class="symbol">6 </span><span class="number">8</span> <span class="number">1</span> <span class="number">6</span></div><div class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">5</span></div><div class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">1</span></div><div class="line"><span class="symbol">2 </span><span class="number">6</span> <span class="number">6</span></div><div class="line"><span class="symbol">2 </span><span class="number">3</span> <span class="number">6</span></div><div class="line"><span class="symbol">4 </span><span class="number">2</span> <span class="number">3</span></div><div class="line"><span class="symbol">3 </span><span class="number">4</span> <span class="number">1</span></div><div class="line"><span class="symbol">4 </span><span class="number">5</span> <span class="number">1</span></div><div class="line"><span class="symbol">5 </span><span class="number">6</span> <span class="number">1</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span></div><div class="line"><span class="symbol">3 </span><span class="number">4</span> <span class="number">1</span> <span class="number">2</span></div><div class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">6</span></div><div class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">2</span></div><div class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">7</span></div><div class="line"><span class="symbol">2 </span><span class="number">3</span> <span class="number">3</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="symbol">1 </span><span class="number">2</span></div><div class="line"><span class="symbol">4 </span><span class="number">4</span> <span class="number">1</span> <span class="number">4</span></div><div class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">1</span></div><div class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">1</span></div><div class="line"><span class="symbol">2 </span><span class="number">4</span> <span class="number">1</span></div><div class="line"><span class="symbol">3 </span><span class="number">4</span> <span class="number">1</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">4</span></div></pre></td></tr></table></figure>
<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span></div><div class="line"><span class="literal">Infinity</span></div><div class="line"><span class="literal">Infinity</span></div></pre></td></tr></table></figure>
<h2 id="数据范围与提示"><a href="#数据范围与提示" class="headerlink" title="数据范围与提示"></a>数据范围与提示</h2><p>对于 $20\%$ 的数据，$n, m, c_i \leq 100$；<br>对于 $40\%$ 的数据，$n, m \leq 100$；<br>另外有 $20\%$ 的数据，每个测试数据的答案要么为 Infinity，要么为 Impossible；<br>对于 $100\%$ 的数据，满足 $1 \leq n \leq 1000, 1 \leq m \leq 10000, 1 \leq c_i \leq 10 ^ 9, 1 \leq T \leq 3$</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>现在发现题目都是这样，一开始怎么也想不到，想到后很简单。。。</p>
<p>这道题就是，我们可以考虑分别为两个部分求最短路，同时我们知道结果肯定是一个关于$c$的一次函数，而且，路径经过的边数就是$c$的系数，观察题目数据范围，$n$比较小，这样，我们可以采用$O(n^2)$的方法，枚举经过的边数，这样做的好处就是，我们可以只考虑经过这么多条边的最短路，因为它们的$c$的系数都相同，同时再钦点它就是全局最短路，然后计算合法性以及合法区间，最后取所有右端点的最大值即可</p>
<p>然后我们可以用Bellman-Ford的思想，一步一步走，来计算最短路</p>
<p>主要还是理解题意吧，理解的比较透彻，就没什么问题了</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LD long double</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    LL cost;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to, LL cost) : next(next), to(to), cost(cost)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to, LL cost)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to, cost);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr, cost);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, s, t, k;</div><div class="line"><span class="keyword">int</span> save[maxn];</div><div class="line"><span class="keyword">int</span> ct;</div><div class="line">LL d1[maxn][<span class="number">2</span>];</div><div class="line">LL d2[maxn][<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> d = <span class="number">0</span>;</div><div class="line">LL INF;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    INF = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">18</span>; i++) INF = <span class="number">10</span> * INF;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) d1[i][<span class="number">0</span>] = d1[i][<span class="number">1</span>] = d2[i][<span class="number">0</span>] = d2[i][<span class="number">1</span>] = INF;</div><div class="line">    d1[s][<span class="number">0</span>] = d1[s][<span class="number">1</span>] = d2[s][<span class="number">0</span>] = d2[s][<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        d1[i][d ^ <span class="number">1</span>] = INF;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ct; i++)</div><div class="line">        d2[save[i]][d ^ <span class="number">1</span>] = INF;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = h[i]; j; j = e[j].next)&#123;</div><div class="line">            <span class="keyword">int</span> op = e[j].to;</div><div class="line">            <span class="keyword">if</span> (d1[op][d ^ <span class="number">1</span>] &gt; d1[i][d] + e[j].cost) d1[op][d ^ <span class="number">1</span>] = d1[i][d] + e[j].cost;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ct; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = h[save[i]]; j; j = e[j].next)&#123;</div><div class="line">            <span class="keyword">int</span> op = e[j].to;</div><div class="line">            <span class="keyword">if</span> (d2[op][d ^ <span class="number">1</span>] &gt; d2[save[i]][d] + e[j].cost) d2[op][d ^ <span class="number">1</span>] = d2[save[i]][d] + e[j].cost;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    d ^= <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL inf[maxn][<span class="number">2</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        update();</div><div class="line">        inf[i][<span class="number">0</span>] = (d1[t][d] &lt; INF) ? d1[t][d] : <span class="number">-1</span>;</div><div class="line">        inf[i][<span class="number">1</span>] = (d2[t][d] &lt; INF) ? d2[t][d] : <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">bool</span> f = <span class="number">0</span>;</div><div class="line"></div><div class="line">    LD ans = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (inf[i][<span class="number">0</span>] == <span class="number">-1</span>) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span> (!f)&#123;</div><div class="line">            <span class="keyword">if</span> (inf[i][<span class="number">0</span>] == inf[i][<span class="number">1</span>])&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"Infinity\n"</span>);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        f = <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (inf[i][<span class="number">1</span>] == <span class="number">-1</span> || inf[i][<span class="number">0</span>] != inf[i][<span class="number">1</span>]) <span class="keyword">continue</span>;</div><div class="line">        LD minnum = -INF;</div><div class="line">        LD maxnum = INF;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (inf[j][<span class="number">0</span>] == <span class="number">-1</span>) <span class="keyword">continue</span>;</div><div class="line">            maxnum = min(maxnum, (LD)(inf[j][<span class="number">0</span>] - inf[i][<span class="number">1</span>]) / (i - j));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (inf[j][<span class="number">0</span>] == <span class="number">-1</span>) <span class="keyword">continue</span>;</div><div class="line">            minnum = max(minnum, (LD)(inf[j][<span class="number">0</span>] - inf[i][<span class="number">1</span>]) / (i - j));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (minnum - maxnum &gt; eps) <span class="keyword">continue</span>;</div><div class="line">        ans = max(ans, maxnum);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (ans + <span class="number">1</span> &lt; eps) <span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, (LL)ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">recover</span><span class="params">()</span></span>&#123;</div><div class="line">    ct = <span class="number">0</span>;</div><div class="line">    cnt = <span class="number">1</span>;</div><div class="line">    <span class="built_in">memset</span>(h, <span class="number">0</span>, <span class="keyword">sizeof</span>(h));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"rebuild.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"rebuild.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span>(T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;s, &amp;t);</div><div class="line">        <span class="keyword">int</span> x, y;</div><div class="line">        LL z;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>, &amp;x, &amp;y, &amp;z);</div><div class="line">            Add_Edge(x, y, z);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            save[++ct] = x;</div><div class="line">        &#125;</div><div class="line">        work();</div><div class="line">        recover();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实细节还是不少的，我们每次要完全更新距离数组，不能保留上次的信息，具体为什么自己想一想就好了</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;题解：$Libre$ $Online$ $Judge$ # $6075$. 「2017 山东一轮集训 Day6」重建&lt;br&gt;
    
    </summary>
    
    
      <category term="图论" scheme="https://goseqh.tk/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路" scheme="https://goseqh.tk/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="Bellman-Ford" scheme="https://goseqh.tk/tags/Bellman-Ford/"/>
    
  </entry>
  
  <entry>
    <title>#6190. 序列查询</title>
    <link href="https://goseqh.tk/2017/07/11/6190-%E5%BA%8F%E5%88%97%E6%9F%A5%E8%AF%A2/"/>
    <id>https://goseqh.tk/2017/07/11/6190-序列查询/</id>
    <published>2017-07-11T05:46:46.000Z</published>
    <updated>2017-07-11T06:21:06.348Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>题解：$Libre$ $Online$ $Judge$ # $6190$. 序列查询<br><a id="more"></a></p>
<h1 id="LOJ-6190-序列查询"><a href="#LOJ-6190-序列查询" class="headerlink" title="LOJ 6190. 序列查询"></a>LOJ 6190. 序列查询</h1><p>内存限制：256 MiB<br>时间限制：2000 ms<br>标准输入输出<br>题目类型：传统<br>评测方式：文本比较</p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出序列 ${a_n}$<br>给出 $m$ 个询问 $[L_i,R_i]$ : 询问 $min{|a_s−a_t|},s,t∈[Li,Ri],s≠t$</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行一个整数 $n$。<br>第二行 $n$ 个整数，表示 $a_i$​​。<br>第三行一个整数 $m$，表示询问个数。<br>之后的 $m$ 行，每行两个正整数，表示 $L_i, R_i$​​。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>共 $m$ 行，表示询问的答案。<br>特别的，如果不存在答案，输出 $2147483647$。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 1"></a>样例输入 1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">4</span></div><div class="line"><span class="symbol">2 </span><span class="number">2</span> <span class="number">3</span> <span class="number">4</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="symbol">1 </span><span class="number">2</span></div><div class="line"><span class="symbol">2 </span><span class="number">4</span></div></pre></td></tr></table></figure>
<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 1"></a>样例输出 1</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span></div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="数据范围与提示"><a href="#数据范围与提示" class="headerlink" title="数据范围与提示"></a>数据范围与提示</h2><p>$1\le n\le 10^5,1\le a_i \le 10^9,1\le m \le 3\times 10^5$</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>显然一道数据结构题，全都是套路。。。然而今天才猛然发现线段树套平衡树空间复杂度为$O(n\log{n})$</p>
<p>方法很独特，我称之为<strong>定序积累法</strong>，首先把所有的询问读入，然后按照左端点排序，同时从右向左逐个更新答案，在达到左端点时取出询问，这样总复杂度就是$O(n\log n)$，这要求答案是可以逐个积累的，就像上面说的那样，具体细节可参见代码</p>
<p>同时这次又看见了大佬在线段树内部调用线段树函数的操作，神不可言～</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 300005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483647</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">query</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> t, l, r, ans;</div><div class="line">    query(<span class="keyword">int</span> t, <span class="keyword">int</span> l, <span class="keyword">int</span> r) : t(t), l(l), r(r)&#123;&#125;</div><div class="line">    query()&#123;&#125;</div><div class="line">&#125;q[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(query a, query b)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (a.l != b.l) <span class="keyword">return</span> a.l &lt; b.l;</div><div class="line">    <span class="keyword">return</span> a.r &lt; b.r;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(query a, query b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a.t &lt; b.t;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; x)</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> ch;</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s[maxn &lt;&lt; <span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> ans[maxn &lt;&lt; <span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        ans[o] = INF;</div><div class="line">        s[o].insert(line[l]);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    init(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    init(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) s[o].insert(line[i]);</div><div class="line">    ans[o] = INF;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy) <span class="keyword">return</span> ans[o];</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">int</span> ans = INF;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) ans = min(ans, get(l, mid, o &lt;&lt; <span class="number">1</span>));</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) ans = min(ans, get(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>));</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o, <span class="keyword">int</span>&amp; now)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (qx &gt; qy) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        ans[o] = min(<span class="built_in">abs</span>(line[l] - qd), ans[o]);</div><div class="line">        now = min(now, ans[o]);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; :: iterator k = s[o].lower_bound(qd);</div><div class="line">    <span class="keyword">if</span> (((k == s[o].end()) || (<span class="built_in">abs</span>(*k - qd)) &gt;= now) &amp;&amp; ((k == s[o].begin()) || (<span class="built_in">abs</span>(*(--k) - qd) &gt;= now)))&#123;</div><div class="line">        now = min(now, get(l, r, o));</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) update(l, mid, o &lt;&lt; <span class="number">1</span>, now);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) update(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, now);</div><div class="line">    ans[o] = min(ans[o &lt;&lt; <span class="number">1</span>], ans[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"query.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"query.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    read(n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(line[i]);</div><div class="line">    read(m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        read(q[i].l), read(q[i].r);</div><div class="line">        q[i].t = i;</div><div class="line">    &#125;</div><div class="line">    init(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    sort(q, q + m, cmp1);</div><div class="line">    <span class="keyword">int</span> j = n;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</div><div class="line">        <span class="keyword">for</span>(; j &gt;= q[i].l; j--)&#123;</div><div class="line">            <span class="keyword">int</span> now = INF;</div><div class="line">            qx = j + <span class="number">1</span>, qy = n, qd = line[j];</div><div class="line">            update(<span class="number">1</span>, n, <span class="number">1</span>, now);</div><div class="line">        &#125;</div><div class="line">        qx = q[i].l, qy = q[i].r;</div><div class="line">        q[i].ans = get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    sort(q, q + m, cmp2);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, q[i].ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;题解：$Libre$ $Online$ $Judge$ # $6190$. 序列查询&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://goseqh.tk/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="树套树" scheme="https://goseqh.tk/tags/%E6%A0%91%E5%A5%97%E6%A0%91/"/>
    
      <category term="线段树套平衡树" scheme="https://goseqh.tk/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%A5%97%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>#6161. 「美团 CodeM 初赛 Round A」倒水</title>
    <link href="https://goseqh.tk/2017/07/11/6161-%E3%80%8C%E7%BE%8E%E5%9B%A2-CodeM-%E5%88%9D%E8%B5%9B-Round-A%E3%80%8D%E5%80%92%E6%B0%B4/"/>
    <id>https://goseqh.tk/2017/07/11/6161-「美团-CodeM-初赛-Round-A」倒水/</id>
    <published>2017-07-11T05:38:18.000Z</published>
    <updated>2017-07-11T06:20:55.300Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>题解：$Libre$ $Online$ $Judge$ # $6161$. 「美团 CodeM 初赛 Round A」倒水<br><a id="more"></a></p>
<h1 id="LOJ-6161-「美团-CodeM-初赛-Round-A」倒水"><a href="#LOJ-6161-「美团-CodeM-初赛-Round-A」倒水" class="headerlink" title="LOJ 6161. 「美团 CodeM 初赛 Round A」倒水"></a>LOJ 6161. 「美团 CodeM 初赛 Round A」倒水</h1><p>内存限制：32 MiB<br>时间限制：1000 ms<br>标准输入输出<br>题目类型：传统<br>评测方式：文本比较</p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>有一个大水缸，里面的水温度为 $T$ 单位，体积为 $C$ 升。另有 $n$ 杯水，每杯水有温度 $t_i$ 单位与体积 $c_i$ 升。现在要把大水缸的水倒入 $n$ 杯水中使得 $n$ 杯水的温度相同，请问这是否可能？如果可能，请求出可行的最高的温度，保留 4 位小数。</p>
<p>注意：一杯温度为 $t_1$​​ 单位，体积为 $c_1$​​ 升的水与另一杯温度为 $t_2$ 单位，体积为 $c_2$​​ 升的水混合后温度变为 $\frac{t_1\times c_1+t_2\times c_2}{c_1+c_2}​$​​​​，体积变为 $c_1+c_2$​​。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行一个整数 $n$。 第二行两个整数 $T,C$。 接下来 $n$ 行每行两个整数 $t_i,c_i$​​。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>如果非法，输出 Impossible。 否则第一行输出 Possible，第二行输出一个保留 4 位小数的实数表示答案。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span></div><div class="line"><span class="symbol">10 </span><span class="number">2</span></div><div class="line"><span class="symbol">20 </span><span class="number">1</span></div><div class="line"><span class="symbol">25 </span><span class="number">1</span></div><div class="line"><span class="symbol">30 </span><span class="number">1</span></div></pre></td></tr></table></figure>
<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Possible</span></div><div class="line">20<span class="selector-class">.0000</span></div></pre></td></tr></table></figure>
<h3 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h3><p>往第二杯水中倒 $0.5$ 升水。 往第三杯水中到 $1$ 升水。 三杯水的温度都变成了 $20$。</p>
<h2 id="数据范围与提示"><a href="#数据范围与提示" class="headerlink" title="数据范围与提示"></a>数据范围与提示</h2><p>$1\le n\le 10^5,0\le t_i,c_i,T\le 10^4,0\le C\le 10^9$</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>其实很容易看出来是一个二分答案，因为在大水缸中温度很高的时候，要使杯子里的水温度越高，就需要越多的大水缸中的水，这样就可以二分了，同时，当大水缸温度介于最高温度与最低温度之间<strong>且最高温度不等于最低温度</strong>时无解</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 20005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-6</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">glass</span>&#123;</span></div><div class="line">    <span class="keyword">double</span> t, c;</div><div class="line">    glass(<span class="keyword">double</span> t, <span class="keyword">double</span> c) : t(t), c(c)&#123;&#125;</div><div class="line">    glass()&#123;&#125;</div><div class="line">&#125;save[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (a - b &gt; eps) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (b - a &gt; eps) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(glass a, glass b)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (a.t != b.t) <span class="keyword">return</span> dcmp(a.t, b.t) &lt; <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> dcmp(a.c, b.c) &lt; <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">double</span> C, T;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">double</span> all = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        all += save[i].c * (x - save[i].t) / (T - x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (dcmp(C, all) &gt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">work</span><span class="params">(<span class="keyword">double</span> l, <span class="keyword">double</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (r - l &lt; eps) <span class="keyword">return</span> l;</div><div class="line">    <span class="keyword">double</span> mid = ((r - l) / <span class="number">2</span>) + l;</div><div class="line">    <span class="keyword">if</span> (judge(mid)) <span class="keyword">return</span> work(mid, r);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> work(l, mid);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"water.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"water.out"</span> ,<span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;T, &amp;C);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;save[i].t, &amp;save[i].c);</div><div class="line">    &#125;</div><div class="line">    sort(save, save + n, cmp);</div><div class="line">    <span class="keyword">if</span> (dcmp(T, save[<span class="number">0</span>].t) &gt;= <span class="number">0</span> &amp;&amp; dcmp(T, save[n - <span class="number">1</span>].t) &lt;= <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(dcmp(T, save[i].t) != <span class="number">0</span>)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Possible\n%.4lf"</span>, save[<span class="number">0</span>].t);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (dcmp(T, save[<span class="number">0</span>].t) &lt; <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">if</span> (judge(save[<span class="number">0</span>].t))&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Possible\n%.4lf"</span>, save[<span class="number">0</span>].t);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">if</span> (!judge(save[n - <span class="number">1</span>].t - eps))&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Possible\n%.4lf"</span>, work(save[n - <span class="number">1</span>].t, T));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>忘记全相等的情况了$QAQ$</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;题解：$Libre$ $Online$ $Judge$ # $6161$. 「美团 CodeM 初赛 Round A」倒水&lt;br&gt;
    
    </summary>
    
    
      <category term="二分答案" scheme="https://goseqh.tk/tags/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>#6164. 「美团 CodeM 初赛 Round A」数列互质</title>
    <link href="https://goseqh.tk/2017/07/11/6164-%E3%80%8C%E7%BE%8E%E5%9B%A2-CodeM-%E5%88%9D%E8%B5%9B-Round-A%E3%80%8D%E6%95%B0%E5%88%97%E4%BA%92%E8%B4%A8/"/>
    <id>https://goseqh.tk/2017/07/11/6164-「美团-CodeM-初赛-Round-A」数列互质/</id>
    <published>2017-07-11T05:14:42.000Z</published>
    <updated>2017-07-11T06:21:01.292Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>题解：$Libre$ $Online$ $Judge$ # $6164$. 「美团 CodeM 初赛 Round A」数列互质<br><a id="more"></a></p>
<h1 id="LOJ-6164-「美团-CodeM-初赛-Round-A」数列互质"><a href="#LOJ-6164-「美团-CodeM-初赛-Round-A」数列互质" class="headerlink" title="LOJ 6164. 「美团 CodeM 初赛 Round A」数列互质"></a>LOJ 6164. 「美团 CodeM 初赛 Round A」数列互质</h1><p>内存限制：512 MiB<br>时间限制：500 ms<br>标准输入输出<br>题目类型：传统<br>评测方式：文本比较</p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出一个长度为 $n$ 的数列 $a_1 , a_2 , a_3\cdots a_n$以及 $m$ 组询问$(l_i , r_i , k_i)$，求区间 $[ l_i , r_i ]$ 中有多少数在该区间中的出现次数与 $k_i$​​ 互质。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行，两个正整数 $n,m$。</p>
<p>第二行，$n$ 个正整数 $a_i$​​ 描述这个数列。</p>
<p>接下来 $m$ 行，每行三个正整数 $l_i , r_i , k_i$，描述一次询问。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出 $m$ 行，即每次询问的答案。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">10 </span><span class="number">5</span></div><div class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span></div><div class="line"><span class="symbol">4 </span><span class="number">7</span> <span class="number">2</span></div><div class="line"><span class="symbol">4 </span><span class="number">7</span> <span class="number">3</span></div><div class="line"><span class="symbol">4 </span><span class="number">8</span> <span class="number">2</span></div><div class="line"><span class="symbol">4 </span><span class="number">8</span> <span class="number">3</span></div><div class="line"><span class="symbol">3 </span><span class="number">8</span> <span class="number">3</span></div></pre></td></tr></table></figure>
<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">0</span></div></pre></td></tr></table></figure>
<h2 id="数据范围与提示"><a href="#数据范围与提示" class="headerlink" title="数据范围与提示"></a>数据范围与提示</h2><p>$1\le n,m\le 5\times 10^4$<br>$1\le a_i\le n$<br>$1\le l_i\le r_i\le n$<br>$1\le k_i\le n$</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>基本就是一个序列莫队，这个怎么想到呢？大概就是发现别的算法大概都不是非常有效，所以想到的吧（逃</p>
<p>但其实我一开始以为莫队会超时，因为在更换$k$的时候我本以为要重新扫一遍当前维护的信息序列，然而正解十分机智，存储了次数的出现次数，这样保证不会超过$O(\sqrt{n})$的复杂度，应该也是逐步思考，然后想到通过这种方法来进行合并优化的吧</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 3000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">q</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> l, r, k, t, ans;</div><div class="line">    q(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k, <span class="keyword">int</span> t) : l(l), r(r), k(k), t(t)&#123;&#125;</div><div class="line">    q()&#123;&#125;</div><div class="line">&#125;sline[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> pos[maxn];</div><div class="line"><span class="keyword">int</span> size;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        pos[i] = i / size;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(q a, q b)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (pos[a.l] != pos[b.l]) <span class="keyword">return</span> pos[a.l] &lt; pos[b.l];</div><div class="line">    <span class="keyword">return</span> a.r &lt; b.r;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(q a, q b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a.t &lt; b.t;</div><div class="line">&#125;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> l, r;</div><div class="line"><span class="keyword">int</span> save[maxn];</div><div class="line"><span class="keyword">int</span> ct;</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="keyword">int</span> cnt[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (r == <span class="number">0</span>) ? l : gcd(r, l % r);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (num[cnt[line[x]]]) num[cnt[line[x]]]--;</div><div class="line">    cnt[line[x]]++;</div><div class="line">    save[ct++] = cnt[line[x]];</div><div class="line">    num[cnt[line[x]]]++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (num[cnt[line[x]]]) num[cnt[line[x]]]--;</div><div class="line">    <span class="keyword">if</span>(cnt[line[x]]) cnt[line[x]]--;</div><div class="line">    save[ct++] = cnt[line[x]];</div><div class="line">    num[cnt[line[x]]]++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_ans</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ct; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[save[i]] &amp;&amp; num[save[i]])&#123;</div><div class="line">            vis[save[i]] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (save[i] != <span class="number">0</span> &amp;&amp; gcd(k, save[i]) == <span class="number">1</span>) ans += num[save[i]];</div><div class="line">            save[temp++] = save[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ct = temp;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ct; i++) vis[save[i]] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"seq.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"seq.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    size = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(n) + <span class="number">1</span>;</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> l, r, k;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;l, &amp;r, &amp;k);</div><div class="line">        sline[i] = q(l - <span class="number">1</span>, r - <span class="number">1</span>, k, i);</div><div class="line">    &#125;</div><div class="line">    sort(sline, sline + m, cmp);</div><div class="line">    l = <span class="number">0</span>, r = <span class="number">-1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="keyword">while</span> (r &gt; sline[i].r) del(r--);</div><div class="line">        <span class="keyword">while</span> (r &lt; sline[i].r) ins(++r);</div><div class="line">        <span class="keyword">while</span> (l &gt; sline[i].l) ins(--l);</div><div class="line">        <span class="keyword">while</span> (l &lt; sline[i].l) del(l++);</div><div class="line">        sline[i].ans = get_ans(sline[i].k);</div><div class="line">    &#125;</div><div class="line">    sort(sline, sline + m, cmp2);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sline[i].ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>好久没写莫队各种被坑。。。感觉还是要仔细一些吧，同时要注意$k=1$的情况，需要进行一些特判，否则会带上次数等于零的那些数字，感觉自己还是不够仔细</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;题解：$Libre$ $Online$ $Judge$ # $6164$. 「美团 CodeM 初赛 Round A」数列互质&lt;br&gt;
    
    </summary>
    
    
      <category term="序列操作" scheme="https://goseqh.tk/tags/%E5%BA%8F%E5%88%97%E6%93%8D%E4%BD%9C/"/>
    
      <category term="莫队算法" scheme="https://goseqh.tk/tags/%E8%8E%AB%E9%98%9F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Dilworth定理</title>
    <link href="https://goseqh.tk/2017/07/01/Dilworth%E5%AE%9A%E7%90%86/"/>
    <id>https://goseqh.tk/2017/07/01/Dilworth定理/</id>
    <published>2017-07-01T09:48:00.000Z</published>
    <updated>2017-07-30T23:45:08.634Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>今天这个定理是我在逛某神犇博客时看到的，是一个以前从未听说过的定理，今天我就来简单介绍一下<br><a id="more"></a></p>
<h1 id="Dilworth-定理"><a href="#Dilworth-定理" class="headerlink" title="Dilworth 定理"></a>Dilworth 定理</h1><p>这是一个应用于偏序集上的定理，应该属于是序理论和组合数学那里面的一些内容，所以我们先来普及一下基础知识</p>
<h2 id="偏序"><a href="#偏序" class="headerlink" title="偏序"></a>偏序</h2><p>设A是一个非空集，P是A上的一个关系，若关系P是自反的、反对称的、和传递的，则称P是集合A上的偏序关系</p>
<p>即P适合下列条件：</p>
<ol>
<li>对任意的a∈A,(a,a)∈P;&lt;/br&gt;&lt;/br&gt;</li>
<li>若（a,b)∈P且（b,a)∈P,则a=b;&lt;/br&gt;&lt;/br&gt;</li>
<li>若（a,b)∈P,(b,c)∈P,则（a,c)∈P,则称P是A上的一个偏序关系。带偏序关系的集合A称为偏序集或半序集</li>
</ol>
<p>若P是A上的一个偏序关系，我们用a≤b来表示（a,b)∈P</p>
<p>比方说：(A,≤)是偏序集，A={1,2,3},偏序≤在A上的大于等于关系。则有：≤={<3,3>,<3,2>,<3,1>,<2,2>,<2,1>,<1,1>},则有3≤2,2≤2,2≤1….</1,1></2,1></2,2></3,1></3,2></3,3></p>
<p>举如下例子说明偏序关系：</p>
<ol>
<li><p>实数集上的小于等于关系是一个偏序关系&lt;/br&gt;&lt;/br&gt;</p>
</li>
<li><p>设S是集合，P（S）是S的所有子集构成的集合，定义P（S）中两个元素A≤B当且仅当A是B的子集，即A包含于B，则P（S）在这个关系下成为偏序集&lt;/br&gt;&lt;/br&gt;</p>
</li>
<li><p>设N是正整数集，定义m≤n当且仅当m能整除n，不难验证这是一个偏序关系。注意它不同于N上的自然序关系</p>
</li>
</ol>
<h2 id="偏序集"><a href="#偏序集" class="headerlink" title="偏序集"></a>偏序集</h2><p>偏序是在集合X上的二元关系≤(这只是个抽象符号，不是“小于或等于”)，它满足自反性、反对称性和传递性。即，对于X中的任意元素a,b和c，有:</p>
<ul>
<li>自反性：a≤a&lt;/br&gt;&lt;/br&gt;</li>
<li>反对称性：如果a≤b且b≤a，则有a=b&lt;/br&gt;&lt;/br&gt;</li>
<li>传递性：如果a≤b且b≤c，则a≤c &lt;/br&gt;&lt;/br&gt;</li>
</ul>
<p>带有偏序关系的集合称为偏序集</p>
<p>令(X,≤)是一个偏序集，对于集合中的两个元素a、b，如果有a≤b或者b≤a，则称a和b是可比的，否则a和b不可比</p>
<p>例：(A,≤)是偏序集，其中A={1,2,3,4,5}，其中≤是整除关系，那么对任意的x∈p都有1≤x,所以1和1,2,3,4,5都是可比的，但是2不能整除3，且3不能整除2，所以2和3是不可比的</p>
<p>在X中，对于元素a，如果任意元素b，由b≤a得出b=a，则称a为极小元</p>
<h2 id="链和反链"><a href="#链和反链" class="headerlink" title="链和反链"></a>链和反链</h2><p>一个反链A是X的一个子集，它的任意两个元素都不能进行比较<br>一个链C是X的一个子集，它的任意两个元素都可比</p>
<h2 id="Dilworth-Theorem"><a href="#Dilworth-Theorem" class="headerlink" title="Dilworth Theorem"></a>Dilworth Theorem</h2><p>下面是两个重要定理：</p>
<p>定理1 令（X,≤）是一个有限偏序集，并令r是其最大链的大小。则X可以被划分成r个但不能再少的反链<br>其对偶定理称为Dilworth定理：</p>
<p>定理2 令（X,≤）是一个有限偏序集，并令m是反链的最大的大小。则X可以被划分成m个但不能再少的链</p>
<p>证明：设p为最少反链个数</p>
<ol>
<li>先证明X不能划分成小于r个反链。由于r是最大链C的大小，C中任两个元素都可比，因此C中任两个元素都不能属于同一反链。所以p&gt;=r&lt;/br&gt;&lt;/br&gt;</li>
<li>设X1＝X，A1是X1中的极小元的集合。从X1中删除A1得到X2。注意到对于X2中任意元素a2，必存在X1中的元素a1，使得a1&lt;=a2。令A2是X2中极小元的集合，从X2中删除A2得到X3……最终，会有一个Xk非空而X(k+1)为空。于是A1,A2,…,Ak就是X的反链的划分，同时存在链a1&lt;=a2&lt;=…&lt;=ak，其中ai在Ai内。由于r是最长链大小，因此r&gt;=k。由于X被划分成了k个反链，因此r&gt;=k&gt;=p。因此r=p，定理1得证</li>
</ol>
<h2 id="Hasse-Diagram"><a href="#Hasse-Diagram" class="headerlink" title="Hasse Diagram"></a>Hasse Diagram</h2><blockquote>
<p>In order theory, a Hasse diagram (/ˈhæsə/; German: [ˈhasə]) is a type of mathematical diagram used to represent a <strong>finite partially ordered set</strong>, in the form of a drawing of its <strong>transitive reduction</strong>. Concretely, for a partially ordered set (S, ≤) one represents each element of S as a vertex in the plane and draws a line segment or curve that goes upward from x to y whenever y covers x (that is, whenever x &lt; y and <strong>there is no z such that x &lt; z &lt; y</strong>). These curves may cross each other but must not touch any vertices other than their endpoints. Such a diagram, with labeled vertices, uniquely determines its partial order.</p>
</blockquote>
<p>大概翻译过来，就是哈赛图是一个有向无环图，它的每条边都是紧密相连的，换句话说它就是一个有向无环图的传递规约——去掉了所有多余的边的图，例如有边A-&gt;B, B-&gt;C,这时如果A-&gt;C也存在，那么它就是一条多余的边</p>
<p>搞清楚了反链和链的定义，就能够很好的从Hasse Diagram中得到理解。链就是从纵向的角度看 Hasse Diagram ,反链是从横向的角度看Hasse Diagram，这一点应该很好理解</p>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>先列举几道，有时间再做一下：</p>
<ul>
<li>hdu 3335</li>
<li>poj 1065</li>
<li>poj 1548</li>
<li>poj 3636</li>
<li>nyist 255</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;今天这个定理是我在逛某神犇博客时看到的，是一个以前从未听说过的定理，今天我就来简单介绍一下&lt;br&gt;
    
    </summary>
    
    
      <category term="数学" scheme="https://goseqh.tk/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="组合数学" scheme="https://goseqh.tk/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="序理论" scheme="https://goseqh.tk/tags/%E5%BA%8F%E7%90%86%E8%AE%BA/"/>
    
      <category term="Dilworth定理" scheme="https://goseqh.tk/tags/Dilworth%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>狄利克雷卷积详解</title>
    <link href="https://goseqh.tk/2017/06/30/%E7%8B%84%E5%88%A9%E5%85%8B%E9%9B%B7%E5%8D%B7%E7%A7%AF%E8%AF%A6%E8%A7%A3/"/>
    <id>https://goseqh.tk/2017/06/30/狄利克雷卷积详解/</id>
    <published>2017-06-30T09:42:30.000Z</published>
    <updated>2017-07-30T23:45:00.026Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>作为初入莫比乌斯反演的Oier，怎么能不学狄利克雷卷积呢？下面我就来简单地介绍一下：<br><a id="more"></a></p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><h2 id="狄利克雷卷积：-f×g-n-sum-d-n-f-d-∗g-frac-n-d"><a href="#狄利克雷卷积：-f×g-n-sum-d-n-f-d-∗g-frac-n-d" class="headerlink" title="狄利克雷卷积：(f×g)(n)=\sum_{d|n}f(d)∗g(\frac{n}{d})"></a>狄利克雷卷积：<script type="math/tex">(f×g)(n)=\sum_{d|n}f(d)∗g(\frac{n}{d})</script></h2><p>一个例子：$f(x)=2x,g(x)=3x$<br>则$(f×g)(6)=f(1)g(6)+f(2)g(3)+f(3)g(2)+f(6)g(1)$，往往省略掉$n$</p>
<p>狄利克雷卷积定义<strong>在数论函数</strong>上</p>
<blockquote>
<p>数论函数： 如果一个函数的定义域为正整数，值域为复数，则称此函数为数论函数常见的数论函数有欧拉函数$φ$和莫比乌斯函数$μ$</p>
</blockquote>
<h2 id="运算律："><a href="#运算律：" class="headerlink" title="运算律："></a>运算律：</h2><h3 id="1-结合律"><a href="#1-结合律" class="headerlink" title="1. 结合律"></a>1. 结合律</h3><script type="math/tex; mode=display">(f×g)×h=f×(g×h)</script><h3 id="2-交换律"><a href="#2-交换律" class="headerlink" title="2. 交换律"></a>2. 交换律</h3><script type="math/tex; mode=display">f×g=g×f</script><h3 id="3-加法-狄利克雷卷积分配律"><a href="#3-加法-狄利克雷卷积分配律" class="headerlink" title="3. 加法-狄利克雷卷积分配律"></a>3. 加法-狄利克雷卷积分配律</h3><script type="math/tex; mode=display">f×(g+h)=f×g+f×h</script><h3 id="4-单位元"><a href="#4-单位元" class="headerlink" title="4. 单位元"></a>4. 单位元</h3><p>单位函数$ϵ$，使得<script type="math/tex">f=ϵ×f=f×ϵ</script>，单位函数的取值：$n=1$时$ϵ(n)=1$，$n$取其他值时$ϵ(n)=0$</p>
<h3 id="5-逆元"><a href="#5-逆元" class="headerlink" title="5. 逆元"></a>5. 逆元</h3><p>对于任意数论函数$f$，如果$f(1)≠0$，则存在唯一的逆函数$f^{-1}$，使得$f×f^{-1}=ϵ$：<br>对于$n=1$，有：$f^{-1}(1)=\frac{1}{f(1)}$<br>对于$n&gt;1$，有：<script type="math/tex">f^{-1}(1)=\frac{-1}{f(1)}\sum_{d|n,n≠d}f(\frac{n}{d})f^{-1}(d)</script></p>
<p>狄利克雷卷积是对数论函数的二元运算，产生的结果也显然是一个数论函数，因此满足<strong>封闭性</strong>。又综合1、4、5，得到：</p>
<p>$G(数论函数,×)$是一个<strong>群</strong></p>
<h2 id="特殊函数"><a href="#特殊函数" class="headerlink" title="特殊函数"></a>特殊函数</h2><p>由于 <script type="math/tex">\sum_{d|n} \varphi(d)=n</script>  </p>
<p>易得：<script type="math/tex">φ×1=n</script>  </p>
<p>回顾莫比乌斯反演：<script type="math/tex">F(n)=\sum_{d|n}f(d)</script>  </p>
<p>这句话的意思就是<script type="math/tex">f×1=F</script>  </p>
<p>根据莫比乌斯函数的性质或定义：<script type="math/tex">μ×1=ϵ</script>  <script type="math/tex">f×1=F×ϵ=F×μ×1</script><br>故：<script type="math/tex">f=F×μ</script><br>可以推出莫比乌斯反演定理：<script type="math/tex">f=μ×F</script>  </p>
<p>也即日常所见的式子：<script type="math/tex">f(n)=\sum_{d|n}μ(d)F(\frac{n}{d})</script>  </p>
<p>根据狄利克雷卷积的交换律，上面的式子可以改写：<script type="math/tex">f=F×μ</script><br>故<script type="math/tex">f(n)=\sum_{d|n}μ(\frac{n}{d})F(d)</script>  </p>
<h2 id="积性函数"><a href="#积性函数" class="headerlink" title="积性函数"></a>积性函数</h2><p>数论函数$f$，如果对于所有$a⊥b$有$f(a∗b)=f(a)∗f(b)$，则称$f$为<strong>积性函数</strong><br>进一步，如果对于所有$a,b∈Z^+$都有$f(a∗b)=f(a)∗f(b)$，则称$f$为<strong>完全积性函数</strong></p>
<p><strong>两个积性函数的狄利克雷卷积也是积性函数</strong></p>
<p>两个例子：欧拉函数$φ$和莫比乌斯函数$μ$</p>
<p>都可以用线性筛求，快速求因子</p>
<p>可以以$O(n)$的代价预处理$[1,n]$的所有数，然后$O(logn)$</p>
<h3 id="分解质因子"><a href="#分解质因子" class="headerlink" title="分解质因子"></a>分解质因子</h3><p>做法：先跑一遍线性筛，以$son[i]$记录把$i$筛掉的最小的质数</p>
<p>分解质因数的时候，不停地$n=n/son[n]$来分解</p>
<p>可以证明复杂度是单次$O(logn)$：每迭代一次，$n$被除以$son[n]$，而$son[n]$最小为$2$，故时间复杂度不超过$O(logn)$</p>
<h3 id="积性函数前缀和"><a href="#积性函数前缀和" class="headerlink" title="积性函数前缀和"></a>积性函数前缀和</h3><p>原文里写的好像是什么杜教筛，那个在另一篇文章里再写吧</p>
<p>哈哈，改别人的文章还是很爽的，改一改就是自己的了，那么狄利克雷卷积的讲解就到此位置啦，再见~</p>
<p>　　　　　　　　　　　　　 ~(≧▽≦)/~啦啦啦</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;作为初入莫比乌斯反演的Oier，怎么能不学狄利克雷卷积呢？下面我就来简单地介绍一下：&lt;br&gt;
    
    </summary>
    
    
      <category term="数论" scheme="https://goseqh.tk/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="数学" scheme="https://goseqh.tk/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="狄利克雷卷积" scheme="https://goseqh.tk/tags/%E7%8B%84%E5%88%A9%E5%85%8B%E9%9B%B7%E5%8D%B7%E7%A7%AF/"/>
    
  </entry>
  
  <entry>
    <title>杜教筛原理详解</title>
    <link href="https://goseqh.tk/2017/06/30/%E6%9D%9C%E6%95%99%E7%AD%9B%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/"/>
    <id>https://goseqh.tk/2017/06/30/杜教筛原理详解/</id>
    <published>2017-06-30T09:38:18.000Z</published>
    <updated>2017-07-30T23:45:04.826Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>刚才简单看了下，正如某位神犇博客上所说的，大千世界，无(sang)奇(xin)不(bing)有(kuang)，居然有比线性筛还要快的算法——杜教筛 orz<br><a id="more"></a></p>
<p>主要看了看推导，是用来求$\mu(x)$（莫比乌斯函数）的前缀和的东西（其实是用来求<strong>积性函数</strong>的前缀和的一种方法）</p>
<p>下面简单地推导一下：</p>
<h1 id="推导"><a href="#推导" class="headerlink" title="推导"></a>推导</h1><p>首先约定下记号，令<script type="math/tex">f(n)=\sum\_{d|n}\mu(d)</script></p>
<p>令<script type="math/tex">s(n)=\sum\_{i=1}^n\mu(i)</script></p>
<p>令<script type="math/tex">g(n)=\sum\_{i=1}^nf(i)</script></p>
<p>那么显然有<script type="math/tex">g(n)=1</script><br>（要是你认真学了莫比乌斯反演的话）</p>
<p>然后，我们开始搞，怎么搞呢？我们可以这样：</p>
<p>由于<script type="math/tex">g(n)=\sum_{i=1}^nf(i)</script></p>
<p>且<script type="math/tex">f(n)=\sum_{d|n}\mu(d)</script></p>
<p>代入有</p>
<script type="math/tex; mode=display">g(n)=\sum_{i=1}^{n} \sum_{d|i}\mu(d)</script><p>则有<script type="math/tex">g(n)=\sum_{i=1}^n\mu(i)*\lfloor{\frac{n}{i}}\rfloor</script></p>
<p>所以<script type="math/tex">g(n)=\sum_{i=1}^ns(\frac{n}{i})</script></p>
<p>这一步需要一些感性理解，然后，我们又知道<script type="math/tex">g(n)=1</script></p>
<p>所以<script type="math/tex">s(n)=1-\sum_{i=2}^ns(\frac{n}{i})</script></p>
<p>然后据说通过什么记忆化+暴力$hash$+积分+预处理可以搞到复杂度$O(n^{\frac{3}{4}})$或者是$O(n^{\frac{2}{3}})$，真是玄学。。。</p>
<p>那么剩下的部分就再用别的文章来介绍啦，今天杜教筛的讲解到此为止（其实就是一堆简(e)单(xin)的数学推导）</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;刚才简单看了下，正如某位神犇博客上所说的，大千世界，无(sang)奇(xin)不(bing)有(kuang)，居然有比线性筛还要快的算法——杜教筛 orz&lt;br&gt;
    
    </summary>
    
    
      <category term="数论" scheme="https://goseqh.tk/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="数学" scheme="https://goseqh.tk/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="杜教筛" scheme="https://goseqh.tk/tags/%E6%9D%9C%E6%95%99%E7%AD%9B/"/>
    
  </entry>
  
  <entry>
    <title>莫比乌斯反演详解</title>
    <link href="https://goseqh.tk/2017/06/30/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94%E8%AF%A6%E8%A7%A3/"/>
    <id>https://goseqh.tk/2017/06/30/莫比乌斯反演详解/</id>
    <published>2017-06-30T09:35:03.000Z</published>
    <updated>2017-07-30T23:44:55.978Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>终于把莫比乌斯反演搞得一清二楚啦（原来我就是那么一个小地方没搞懂，<del>唉我真是太垃圾了</del>），下面对这一神奇的数论定理予以详细的介绍：</p>
<a id="more"></a>
<p>注，由于我们目前研究的都是数论函数，所以默认定义域均为$Z^+$</p>
<p>首先，我们考虑一类函数$F(x)$与$f(x)$，它们之间有如下的性质：</p>
<script type="math/tex; mode=display">F(n)=\sum_{d|n} f(d)</script><p>那么，如果现在我们想知道$f(n)$的表达式该怎么办呢？它其实是这样的：</p>
<script type="math/tex; mode=display">f(n)=\sum_{d|n} \mu(d)*F(\frac{n}{d})</script><p>其中$\mu(d)$是莫比乌斯函数，它的取值定义如下：</p>
<script type="math/tex; mode=display">\mu(d)=
\begin{cases}
1,\mbox{if  }\mbox{ d = 1}\\
0,\mbox{if }\mbox{ d 含有平方因子}\\
(-1)^n,\mbox{if } \mbox{ d = }p_1*p_2*\cdots*p_n\\
\end{cases}</script><p>其中含有平方因子意为存在某一个质因子的平方可以整除$d$</p>
<p>这样，我们就介绍完莫比乌斯反演公式啦</p>
<p>其实它还有一种形式，这种形式才是十分常用的，我就是不知道这个才墨迹了那么长的时间：</p>
<p>还是对于两个函数$F(x)$与$f(x)$，它们有如下的性质：</p>
<script type="math/tex; mode=display">F(n)=\sum_{n|d} f(d)</script><p>体会一下区别啊！可别这么翻过去了</p>
<p>那么它们满足：</p>
<script type="math/tex; mode=display">f(n)=\sum_{n|d} \mu(\frac{d}{n})*F(d)</script><p>这种形式与上述形式十分相近，但这种形式的用处却十分广泛，广泛用于各种信息技术领域<del>以及SB一样的省选题</del></p>
<p>这样，莫比乌斯反演呢我们就介绍完了，下面讨论一下它的证明，哦对了，还有一个性质没有说，那就是：</p>
<script type="math/tex; mode=display">\sum_{d|n}\mu(d)=
\begin{cases}
1,\mbox{if d = 1}\\
0,\mbox{if d}\not=\mbox{1}\\
\end{cases}</script><p>这个性质十分重要，证明过程留给读者。提示：使用组合计数原理以及二项式定理。下面就会看到它在证明莫比乌斯反演定理中的重要性：</p>
<p>先证第一种形式：</p>
<p>首先，我们可知：<script type="math/tex">f(n)=\sum_{d|n} \mu(d)*F(\frac{n}{d})</script><br>然后，我们做一些变换，代入$F(x)$与$f(x)$之间的性质：<script type="math/tex">F(n)=\sum_{d|n} f(d)</script><br>则有：<script type="math/tex">f(n)=\sum_{d|n} \mu(d)*{\sum_{k|{\frac{n}{d}}}f(k)}</script><br>然后，下面需要一些感性思维：<script type="math/tex">f(n)=\sum_{k|n} f(k)*{\sum_{d|{\frac{n}{k}}}\mu(d)}</script><br>然后根据上面的重要性质，可以把第二个级数搞掉，它只有在$k=n$时才为$1$，否则全为零</p>
<p>那么就有右式等于$f(n)$，证毕！</p>
<p>然后对于第二种形式来说，我们可以类比上述过程进行证明，当做思考题啦~</p>
<p>那么，莫比乌斯反演到这里就讲完啦，题目会由其他文章提供与详解，再见啦</p>
<p>　　　　　　　　　　　　　　　~(≧▽≦)/~</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;终于把莫比乌斯反演搞得一清二楚啦（原来我就是那么一个小地方没搞懂，&lt;del&gt;唉我真是太垃圾了&lt;/del&gt;），下面对这一神奇的数论定理予以详细的介绍：&lt;/p&gt;
    
    </summary>
    
    
      <category term="数论" scheme="https://goseqh.tk/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="数学" scheme="https://goseqh.tk/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="莫比乌斯反演" scheme="https://goseqh.tk/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
  </entry>
  
  <entry>
    <title>莫比乌斯反演总结</title>
    <link href="https://goseqh.tk/2017/06/30/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94%E6%80%BB%E7%BB%93/"/>
    <id>https://goseqh.tk/2017/06/30/莫比乌斯反演总结/</id>
    <published>2017-06-30T09:19:21.000Z</published>
    <updated>2017-07-31T00:16:08.550Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>首先大家都知道莫比乌斯反演是什么对吧，那么下面直接对一些常用的公式推导技巧进行一些汇总<br><a id="more"></a></p>
<p><del>说实话你把高效的公式推导出来了代码还不会编么，然后不就轻松AC了么</del></p>
<h2 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h2><p>首先规定几个常用的数论函数：</p>
<h3 id="莫比乌斯函数μ-x"><a href="#莫比乌斯函数μ-x" class="headerlink" title="莫比乌斯函数μ(x)"></a>莫比乌斯函数μ(x)</h3><script type="math/tex; mode=display">\mu(x)=\begin{cases}
1,& x=1\\\\
(-1)^{n},& x=\prod_{i=1}^{n}p_i\mbox{ }\mbox{ }\mbox{ (}p_i\mbox{两两不同且为质数)}\\\\
0,&\exists p^2\mid x \mbox{  且 }p\mbox{为质数}
\end{cases}</script><h3 id="恒等函数id-x"><a href="#恒等函数id-x" class="headerlink" title="恒等函数id(x)"></a>恒等函数id(x)</h3><script type="math/tex; mode=display">id(x)\equiv x</script><h3 id="欧拉函数-x"><a href="#欧拉函数-x" class="headerlink" title="欧拉函数(x)"></a>欧拉函数(x)</h3><script type="math/tex; mode=display">
\varphi(x)=x*\prod_{i=1}^{n}\left(1-\frac{1}{p_i}\right)\mbox{其中 }x=\prod_{i=1}^{n}p_i^{\alpha_i} \mbox{(}p_i \mbox{两两不同且为质数)}</script><h3 id="单位函数e-x"><a href="#单位函数e-x" class="headerlink" title="单位函数e(x)"></a>单位函数e(x)</h3><script type="math/tex; mode=display">e(x)=\begin{cases}
1,&x=1 \\\\
0,&x>1
\end{cases}</script><h2 id="常用定理"><a href="#常用定理" class="headerlink" title="常用定理"></a>常用定理</h2><p>先列一发大纲：</p>
<ul>
<li>质因子定理</li>
</ul>
<ul>
<li>调和级数定理</li>
</ul>
<ul>
<li>$Dirichlet$卷积运算律定理</li>
</ul>
<ul>
<li>$Dirichlet$卷积性质定理</li>
</ul>
<ul>
<li>$Dirichlet$卷积复杂度定理</li>
</ul>
<ul>
<li>莫比乌斯反演定理</li>
</ul>
<ul>
<li>$\varphi$函数定理</li>
</ul>
<h3 id="质因子定理"><a href="#质因子定理" class="headerlink" title="质因子定理"></a>质因子定理</h3><p>自己命名，指的是下面这个等式：</p>
<script type="math/tex; mode=display">gcd(i,j)*lcm(i,j)\equiv i*j</script><p>证明较为容易</p>
<h3 id="调和级数定理"><a href="#调和级数定理" class="headerlink" title="调和级数定理"></a>调和级数定理</h3><p>即有下面的等式：</p>
<script type="math/tex; mode=display">\sum_{d=1}^{N}\frac{N}{d}=N\log N</script><p>微积分证明</p>
<h3 id="平方根调和级数定理"><a href="#平方根调和级数定理" class="headerlink" title="平方根调和级数定理"></a>平方根调和级数定理</h3><p>即有下面的等式：</p>
<script type="math/tex; mode=display">\sum_{d=1}^{N}\sqrt{\frac{N}{d}}=N</script><p>微积分证明</p>
<h3 id="Dirichlet卷积运算律定理"><a href="#Dirichlet卷积运算律定理" class="headerlink" title="Dirichlet卷积运算律定理"></a>Dirichlet卷积运算律定理</h3><p>$Dirichlet$卷积满足：<strong>交换律，结合律</strong><br>证明较为容易</p>
<h3 id="Dirichlet卷积性质定理"><a href="#Dirichlet卷积性质定理" class="headerlink" title="Dirichlet卷积性质定理"></a>Dirichlet卷积性质定理</h3><p>两个<strong>积性函数</strong>的$Dirichlet$卷积仍然是<strong>积性函数</strong><br>证明较为容易</p>
<h3 id="Dirichlet卷积复杂度定理"><a href="#Dirichlet卷积复杂度定理" class="headerlink" title="Dirichlet卷积复杂度定理"></a>Dirichlet卷积复杂度定理</h3><p>我们可以枚举每一个数字并对它的每一个倍数进行统计计算，这样做的复杂度是调和级数，由上述定理，有$Dirichlet$卷积复杂度为$O(\sum_{d=1}^{N}\frac{N}{d}=N\log N)$</p>
<h3 id="莫比乌斯反演定理"><a href="#莫比乌斯反演定理" class="headerlink" title="莫比乌斯反演定理"></a>莫比乌斯反演定理</h3><p>有两种形式：</p>
<h4 id="A形式"><a href="#A形式" class="headerlink" title="A形式"></a>A形式</h4><script type="math/tex; mode=display">F(n)=\sum_{d|n} f(d) \Leftrightarrow f(n)=\sum_{d|n} \mu(d)*F(\frac{n}{d})</script><h4 id="B形式"><a href="#B形式" class="headerlink" title="B形式"></a>B形式</h4><script type="math/tex; mode=display">F(n)=\sum_{n|d} f(d) \Leftrightarrow f(n)=\sum_{n|d} \mu(\frac{d}{n})*F(d)</script><p>可以通过数学变换或是$Dirichlet$卷积来进行证明</p>
<h3 id="φ函数定理"><a href="#φ函数定理" class="headerlink" title="φ函数定理"></a>φ函数定理</h3><p>定义$F(x)$ 表示所有小于$x$且与$x$互质的数的和，其中$x&gt;1$，则有：</p>
<script type="math/tex; mode=display">F(x)=\varphi(x)*\frac{x}{2}</script><p>这个的推导比较简单，留给读者自行思考</p>
<h2 id="数论公式推导技巧"><a href="#数论公式推导技巧" class="headerlink" title="数论公式推导技巧"></a>数论公式推导技巧</h2><p>先列一发大纲</p>
<ul>
<li>$\mu$变换</li>
</ul>
<ul>
<li>$\mu$提取</li>
</ul>
<ul>
<li>$\varphi$变换</li>
</ul>
<ul>
<li>积性函数提取</li>
</ul>
<ul>
<li>$Dirichlet$卷积</li>
</ul>
<p>下面一个个地进行说明</p>
<h3 id="μ变换"><a href="#μ变换" class="headerlink" title="μ变换"></a>μ变换</h3><p>其实这个非常简单啦，但是有的时候容易被人忽略，大概形式就是这样的：</p>
<script type="math/tex; mode=display">[P(x)==k]\Leftrightarrow\sum_{d\mid P(x)/k}\mu(d)</script><p>这个应该都很容易看懂吧……</p>
<p>这个公式也许有人不太习惯使用，但实际上当你学会了他以后，你会对莫比乌斯反演有更直观的认识与感受，帮助你快速地进行推导而完全不需要套用莫比乌斯反演定理</p>
<h3 id="μ提取"><a href="#μ提取" class="headerlink" title="μ提取"></a>μ提取</h3><p>这个往往与上一步是同时进行的，这个提取的含义就是把 $\mu(d)$ 的系数计算出来，以便后续计算，大概是这样的：</p>
<script type="math/tex; mode=display">\sum_{x}\sum_{d\mid P(x)/k}\mu(d)=\sum_{d}\mu(d)*num(d)</script><p>其中 $num(d)$ 表示 $\mu(d)$ 总共出现的次数</p>
<p>最常用的一个形式是这样的：</p>
<script type="math/tex; mode=display">\sum_{i=1}^{n}\sum_{j=1}^{m}\sum_{d\mid gcd(i,j)/k}\mu(d)=\sum_{d}\mu(d)*\left\lfloor \frac{n}{d*k}\right\rfloor*\left\lfloor \frac{m}{d*k}\right\rfloor</script><p>这里即有：</p>
<script type="math/tex; mode=display">num(d)=\left\lfloor \frac{n}{d*k}\right\rfloor*\left\lfloor \frac{m}{d*k}\right\rfloor</script><h3 id="φ变换"><a href="#φ变换" class="headerlink" title="φ变换"></a>φ变换</h3><p>基本就是这个式子，令$Sum(x)$表示小于$x$且与$x$互质的数的和，则有：</p>
<script type="math/tex; mode=display">Sum(x)=\frac{x*\varphi(x)}{2}</script><p>这是因为，如果$i$与$x$互质$(i&lt;x)$，那么易证$x-i$也与$x$互质，这样，我们把他们两两组合，加和，就有了上面的式子，为了计算方便，一般特殊规定$Sum(1)=1$</p>
<h3 id="积性函数提取"><a href="#积性函数提取" class="headerlink" title="积性函数提取"></a>积性函数提取</h3><p>有的时候，我们算法的时间复杂度会因为需要枚举变量$k$（或更多），同时在每个$k$（或更多）之中进行一些分块前缀和计算而导致TLE，我们可以使用一些类似于“封装”的技巧，把公式的某一大部分看成一个数论函数（<strong>通常要求这个函数满足积性</strong>），然后对这个函数进行预处理，从而达到降维的目的</p>
<p>比如，我们看下面的这个式子：</p>
<script type="math/tex; mode=display">\prod_{k=1}^{n}F(k)^{\sum_{i=1}^{n}\sum_{j=1}^{m}\sum_{d\mid gcd(i,j)/k}\mu(d)}=\prod_{k=1}^{n}F(k)^{\sum_{d}\mu(d)*\left\lfloor \frac{n}{d*k}\right\rfloor*\left\lfloor \frac{m}{d*k}\right\rfloor}</script><p>这个式子看似无法继续优化，但是如果我们继续进行积性函数提取，我们可以把前半部分进行封装，变成下面的样子：</p>
<script type="math/tex; mode=display">\prod_{T=1}^{n} \left(\prod_{d\mid T}F(d)^{\mu(\frac{T}{d})} \right) ^{\left\lfloor \frac{n}{T}\right\rfloor*\left\lfloor \frac{m}{T}\right\rfloor}</script><p>此时，我们可以把前半部分提取出来，作为一个新的函数，像下面这样：</p>
<script type="math/tex; mode=display">G(T)=\prod_{d\mid T}F(d)^{\mu(\frac{T}{d})}</script><p>我们现在的任务就是要预处理出所有的$G(x)$，这样原公式的效率就有了大大的提升</p>
<p>而对于这种函数，如果它们是下面这种形式，就很好处理：</p>
<script type="math/tex; mode=display">F(T)=\sum_{d\mid T}G(d)</script><p>或是：</p>
<script type="math/tex; mode=display">F(T)=\prod_{d\mid T}G(d)</script><p>而且求出$G(x)$ 的复杂度为$O(x)$ 的话，那么求出所有的$F(x)$ 的复杂度即为$O(N\log N*O(N))$</p>
<p>其实这个应该很好理解，我们只要枚举$d$然后对于每一个$d*k$都进行更新即可，这是一个调和级数，即：</p>
<script type="math/tex; mode=display">\sum_{d=1}^{N}\frac{N}{d}=N\log N</script><p>而在上例中，求出$G(x)$ 的复杂度为$O(1)$ 的，所以预处理复杂度为$O(N\log N)$</p>
<p>由平方根调和级数定理可知，运行的复杂度由原先的 $ O(Q∗N) $ 优化为了 $ O(N\log N+Q∗\sqrt{N}) $</p>
<h3 id="Dirichlet卷积"><a href="#Dirichlet卷积" class="headerlink" title="Dirichlet卷积"></a>Dirichlet卷积</h3><p>我们在推导公式的时候，往往可以加入一些处理，使得公式的一部分达到如下的形式：</p>
<script type="math/tex; mode=display">\sum_{i\mid n}F(i)*G(\frac{n}{i})=(F*G)(n)</script><p>这时，很明显这就是$Dirichlet$卷积的形式，我们可以做如下两个方向的处理：</p>
<p>第一种，我们可以直接预处理这部分函数，复杂度$O(N \log N)$</p>
<p>第二种，我们可以利用$Dirichlet$卷积的性质：两个积性函数的$Dirichlet$卷积仍然是积性函数，这时我们就可以使用线性筛法进行$O(N)$ 的预处理</p>
<h3 id="交换不变性"><a href="#交换不变性" class="headerlink" title="交换不变性"></a>交换不变性</h3><p>这个指的是，当一个式子中并列存在许多的$\sum$或是$\prod$的时候，我们可以将它们任意调换顺序，同时转移相互依存的条件，这样我们就可以实现一些想要达到的目的</p>
<p>举个例子：</p>
<script type="math/tex; mode=display">\begin{array}{lcl} \sum_{i = 1} ^ {n} \sum_{j = 1} ^ {m} \sum_{d = 1} ^ {\min(n, m)} [gcd(i,j) = d]\\\\= \sum_{d = 1} ^ {\min(n, m)} \sum_{i = 1} ^ {n} \sum_{j = 1} ^ {m}\mbox{ }[gcd(i,j) = d] \end{array}</script><p>同时，在指数上的 $\sum_{}^{}$ 可以与外面的 $\prod_{} ^{}$ 进行自由交换，还是用上面提到过的那个例子：</p>
<script type="math/tex; mode=display">
\begin{array}{lcl}
\prod_{k=1}^{n}F(k)^{\sum_{i=1}^{n}\sum_{j=1}^{m}\sum_{d\mid gcd(i,j)/k}\mu(d)}\\\\=\prod_{k=1}^{n}F(k)^{\sum_{d}\mu(d)*\left\lfloor \frac{n}{d*k}\right\rfloor*\left\lfloor \frac{m}{d*k}\right\rfloor}\\\\=\prod_{T=1}^{n} \left(\prod_{d\mid T}F(d)^{\mu(\frac{T}{d})} \right) ^{\left\lfloor \frac{n}{T}\right\rfloor*\left\lfloor \frac{m}{T}\right\rfloor}
\end{array}</script><p>这就是一个非常好的提取指数上的 $\sum_{}^{}$ 的例子</p>
<h2 id="数论公式计算技巧"><a href="#数论公式计算技巧" class="headerlink" title="数论公式计算技巧"></a>数论公式计算技巧</h2><h3 id="Dirichlet卷积计算方法"><a href="#Dirichlet卷积计算方法" class="headerlink" title="Dirichlet卷积计算方法"></a>Dirichlet卷积计算方法</h3><p>前面多次提到过，就是枚举每一个数字并对它的每一个倍数进行统计计算即可</p>
<h3 id="积性函数线性筛法"><a href="#积性函数线性筛法" class="headerlink" title="积性函数线性筛法"></a>积性函数线性筛法</h3><p>对于一个积性函数，我们一般可以尝试寻找一种方法，使得它可以在线性筛的过程被“顺便”计算出来，比如对于这个函数：</p>
<script type="math/tex; mode=display">
F(x)=\sum_{k\mid x}\mu(k)* k</script><p>我们可以证明这是一个积性函数，然后我们就可以尝试在线性筛中以$O(N)$复杂度进行计算，否则，我们只能采用类似$Dirichlet$卷积的方法，在$O(N\log N)$的时间中对其计算，在$N\approx 10^7$时很容易超时</p>
<p>具体方法如下（在线性筛意义下给出）：</p>
<p>首先有<script type="math/tex">F[1]=1</script><br>其次</p>
<script type="math/tex; mode=display">F(i * prime[j])=\begin{cases}
F[i] * (1 - prime[j]),& prime[j] \nmid i  \\\\  
F[i],& prime[j]\mid i
\end{cases}</script><h2 id="常用公式推导"><a href="#常用公式推导" class="headerlink" title="常用公式推导"></a>常用公式推导</h2><p>这些就是需要通过多做题来进行总结的啦<del>什么东西不是靠做题……</del>，下面简单地总结几个，以后如果再遇到就继续进行添加</p>
<h3 id="单维分块法计算"><a href="#单维分块法计算" class="headerlink" title="单维分块法计算"></a>单维分块法计算</h3><p>即需要我们计算如下的式子：</p>
<script type="math/tex; mode=display">\sum_{i=1}^{n}\left\lfloor\frac{n}{i}\right\rfloor</script><p>这时，我们可以对此进行分类讨论，对于$i&lt;\sqrt{n}$ 的情况与$i&gt;\sqrt{n}$ 的情况分别处理，每次跳动一个值不变的区间，这样，我们可以得到一个$O(\sqrt{n})$ 的算法</p>
<h3 id="双维分块法计算"><a href="#双维分块法计算" class="headerlink" title="双维分块法计算"></a>双维分块法计算</h3><p>即需要我们计算如下的式子：</p>
<script type="math/tex; mode=display">\sum_{i=1}^{n}\left\lfloor\frac{n}{i}\right\rfloor*\left\lfloor\frac{m}{i}\right\rfloor</script><p>这时，我们可以继续沿用上面的方法，但不同的是，我们每次跳动的距离需要多考虑一个$m$，这样，我们每次取对于$n$与$m$来说的跳动距离的较小值，然后进行跳动即可，复杂度$O(\sqrt{MAX(n,m)})$</p>
<h3 id="最大公约数统计"><a href="#最大公约数统计" class="headerlink" title="最大公约数统计"></a>最大公约数统计</h3><p>就是要求下面这个式子：</p>
<script type="math/tex; mode=display">\sum_{i=1}^{n}\sum_{j=1}^{m}gcd(i,j)</script><p>下面对此进行推导：</p>
<script type="math/tex; mode=display">\begin{array}{lcl}\sum_{i=1}^{n}\sum_{j=1}^{m}gcd(i,j)\\\\
=\sum_{i=1}^{n}\sum_{j=1}^{m}\sum_{d=1}^{MIN(n,m)}d*[gcd(i,j)=d]\\\\
=\sum_{i=1}^{n}    \sum_{j=1}^{m}    \sum_{d=1}^{MIN(n,m)}d*     \sum_{k\mid gcd(i,j)/d}    \mu(k) &\mbox{(}\mu\mbox{变换)}\\\\
=\sum_{d=1}^{MIN(n,m)}d*\sum_{k=1}^{MAX(n,m)} \mu(k)*\left\lfloor\frac{n}{d*k} \right \rfloor   \left\lfloor\frac{m}{d*k} \right \rfloor &\mbox{(}\mu\mbox{提取)}
 \end{array}</script><p> 一般推到这里就结束了，使用分块计算的方法，能在下面的时间内求出答案：</p>
<script type="math/tex; mode=display">O\left(\sum_{d=1}^{N}\sqrt{\frac{N}{d}}\right)</script><p> 这个计算完大概是$O(N)$ 的复杂度</p>
<p>但是，我们还可以进一步得到下面的式子：</p>
<script type="math/tex; mode=display">\begin{array}{lcl}\sum_{d=1}^{MIN(n,m)}d*\sum_{k=1}^{MAX(n,m)} \mu(k)*\left\lfloor\frac{n}{d*k} \right \rfloor   \left\lfloor\frac{m}{d*k} \right \rfloor\\\\
=\sum_{T=1}^{MIN(n,m)}\left\lfloor\frac{n}{T}\right\rfloor\left\lfloor\frac{m}{T} \right \rfloor\sum_{d\mid T}d*\mu(\frac{T}{d}) & \mbox{(积性函数提取)} \\\\
=\sum_{T=1}^{MIN(n,m)}\left\lfloor\frac{n}{T}\right\rfloor\left\lfloor\frac{m}{T} \right \rfloor \left(id*\mu\right)(T)&\mbox{(}Dirichlet\mbox{卷积}\mbox{)}\\\\
=\sum_{T=1}^{MIN(n,m)}\left\lfloor\frac{n}{T}\right\rfloor\left\lfloor\frac{m}{T} \right \rfloor G(T)
 \end{array}</script><p> 这个式子巧妙地使用了$Dirichlet$卷积，而我们知道，只要有$Dirichlet$卷积的出现，复杂度就会是$O(N \log N)$，所以我们可以先以$O(N \log N)$ 的复杂度预处理出所有的$G(x)$，然后直接$O(N)$ 进行计算，这样虽然单次查询效率没有上一个方法高，但却给我们提供了良好的思路，而且，在有许多组询问的时候，我们就只能通过这样的方法来进行问题的解决，所以说，这种方法应该更为高效</p>
<h3 id="最小公倍数统计"><a href="#最小公倍数统计" class="headerlink" title="最小公倍数统计"></a>最小公倍数统计</h3><p>即需要我们计算如下的式子：</p>
<script type="math/tex; mode=display">\sum_{i=1}^{n}\sum_{j=1}^{m}lcm(i,j)</script><p>首先根据常用定理，我们知道</p>
<script type="math/tex; mode=display">lcm(i,j)=\frac{i*j}{gcd(i,j)}</script><p>所以我们的式子就化为了：</p>
<script type="math/tex; mode=display">\sum_{i=1}^{n}\sum_{j=1}^{m}\frac{i*j}{gcd(i,j)}</script><p>下面，我们就对这个式子进行详细的推导，我们发现，此时分母起到很大的作用，对于分母不同的两项，我们很难把他们归到一起，所以我们很自然的想到枚举$gcd$的取值，推导如下：</p>
<script type="math/tex; mode=display">\begin{array}{lcl}
\sum_{i=1}^{n}\sum_{j=1}^{m}\frac{i*j}{gcd(i,j)}\\\\
=\sum_{d = 1} ^ {min(n, m)} \sum_{i = 1}^{n} \sum_{j = 1} ^ {m} \frac{i * j}{d} * [gcd(i,j) = d]\\\\= \sum_{d = 1} ^ {min(n, m)} \sum_{i' = 1}^{n} \sum_{j' = 1} ^ {m} i' * j' * d * [gcd(i',j') = 1]\\\\= \sum_{d = 1} ^ {min(n, m)} \sum_{i' = 1}^{n} \sum_{j' = 1} ^ {m} \sum_{k|gcd(i',j')}i' * j' * d *  \mu(k) &\mbox{(}\mu\mbox{变换)}
\\\\= \sum_{d = 1} ^ {min(n, m)}d*\sum_{k} \mu(k) * Sum(\left\lfloor\frac{n}{k*d}\right\rfloor,\left\lfloor\frac{m}{k*d}\right\rfloor) * k^2 &\mbox{(}\mu\mbox{提取)}
\end{array}</script><p>其中</p>
<script type="math/tex; mode=display">\begin{array}{lcl}
Sum(a,b) = \frac{a*(a + 1)}{2} * \frac{b*(b + 1)}{2}
\end{array}</script><p>此时，我们发现式子似乎不能再优化，于是我们使用以前的老套路，积性函数提取以及变量归一化，把变量$k,d$进行归一化，可以得到下面的式子：</p>
<script type="math/tex; mode=display">\begin{array}{lcl}
\sum_{d = 1} ^ {min(n, m)}d*\sum_{k} \mu(k) * Sum(\left\lfloor\frac{n}{k*d}\right\rfloor,\left\lfloor\frac{m}{k*d}\right\rfloor) * k^2 &\mbox{(}\mu\mbox{提取)}\\\\
=\sum_{T = 1}^{min(n, m)} T*Sum( \left\lfloor\frac{n}{T}\right\rfloor,\left\lfloor\frac{m}{T}\right\rfloor)*\sum_{k|T} \mu(k) * k& \mbox{(变量归一化)}\\\\
= \sum_{T = 1}^{min(n, m)} T*Sum( \left\lfloor\frac{n}{T}\right\rfloor,\left\lfloor\frac{m}{T}\right\rfloor)*F(T)& \mbox{(积性函数提取)}\\\\
\end{array}</script><p>这里解释一下为什么$F(T)$ 是积性函数，由于$F(T)$ 是两个积性函数的狄利克雷卷积$(F=f <em> 1,其中f=\mu(k)</em>k,显然为积性函数)$，所以，我们知道$F$是一个积性函数</p>
<p>那么，对于积性函数，我们可以怎么做呢？一开始我想使用杜教筛，但后来发现好像不用这么麻烦 <del>不会杜教筛就直说嘛</del>，然后想到了一个常常被忽略的套路：直接使用线性筛</p>
<p>具体做法如下，首先有$F[1]=1$，我们直接在线性筛中计算函数，然后对于两种情况进行分别的计算：</p>
<script type="math/tex; mode=display">F(i * prime[j])=\begin{cases}
F[i] * (1 - prime[j]),& prime[j] \nmid i  \\\\  
F[i],& prime[j]\mid i
\end{cases}</script><p>这样我们就计算出了所有的$F$,然后，我们就可以使用双维分块法这种老套路进行计算了，最后的复杂度为$O(N + Q * \sqrt{N})$</p>
<h2 id="例题总结"><a href="#例题总结" class="headerlink" title="例题总结"></a>例题总结</h2><h3 id="Noi2010-能量采集"><a href="#Noi2010-能量采集" class="headerlink" title="[Noi2010]能量采集"></a>[Noi2010]能量采集</h3><p>时间限制: 1 Sec  内存限制: 128 MB</p>
<font size="5">题目描述</font>

<p>栋栋有一块长方形的地，他在地上种了一种能量植物，这种植物可以采集太阳光的能量。在这些植物采集能量后，栋栋再使用一个能量汇集机器把这些植物采集到的能量汇集到一起。 栋栋的植物种得非常整齐，一共有n列，每列有m棵，植物的横竖间距都一样，因此对于每一棵植物，栋栋可以用一个坐标(x, y)来表示，其中x的范围是1至n，表示是在第x列，y的范围是1至m，表示是在第x列的第y棵。 由于能量汇集机器较大，不便移动，栋栋将它放在了一个角上，坐标正好是(0, 0)。 能量汇集机器在汇集的过程中有一定的能量损失。如果一棵植物与能量汇集机器连接而成的线段上有k棵植物，则能量的损失为2k + 1。例如，当能量汇集机器收集坐标为(2, 4)的植物时，由于连接线段上存在一棵植物(1, 2)，会产生3的能量损失。注意，如果一棵植物与能量汇集机器连接的线段上没有植物，则能量损失为1。现在要计算总的能量损失。 下面给出了一个能量采集的例子，其中n = 5，m = 4，一共有20棵植物，在每棵植物上标明了能量汇集机器收集它的能量时产生的能量损失。 在这个例子中，总共产生了36的能量损失。<br><img src="http://218.62.22.209:8080/upload/201411/image/noi/NOI20100101.jpg" alt=""></p>
<font size="5">输入</font>

<p>仅包含一行，为两个整数 n 和 m。</p>
<font size="5">输出</font>

<p>仅包含一个整数，表示总共产生的能量损失。</p>
<font size="5">样例输入</font>

<p>5 4</p>
<font size="5">样例输出</font>

<p>36</p>
<font size="5">提示</font>


<font size="5">【样例输入 2】</font>

<p>3 4</p>
<font size="5">【样例输出 2】</font>

<p>20</p>
<font size="5">【数据规模和约定】</font>

<p>对于 10%的数据：1 ≤ n, m ≤ 10；</p>
<p>对于 50%的数据：1 ≤ n, m ≤ 100；</p>
<p>对于 80%的数据：1 ≤ n, m ≤ 1000；</p>
<p>对于 90%的数据：1 ≤ n, m ≤ 10,000；</p>
<p>对于 100%的数据：1 ≤ n, m ≤ 100,000。</p>
<font size="5">题解</font>

<p>我觉得，上面的套路要是都掌握了，自己推一推应该就行，下面的题都只给出最终公式（如果所需的知识点已经全部介绍过的话）</p>
<font size="5">方法一公式如下：</font>

<script type="math/tex; mode=display">Sum =
\sum_{T=1}^{min(n,m)}\left\lfloor\frac{n}{T}\right\rfloor*\left\lfloor\frac{m}{T}\right\rfloor * F(T)\\\\
F(T)=\sum_{k\mid T}\mu(k)* \frac{T}{k}\\\\
Ans = 2*(Sum - m*n ) + m*n</script><p><font size="4">代码 实测用时：$28ms$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">LL prime[maxn], cnt;</div><div class="line">LL F[maxn];</div><div class="line">LL mu[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i])&#123;</div><div class="line">            prime[cnt++] = i;</div><div class="line">            mu[i] = <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * prime[j] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * prime[j]] = <span class="number">1</span>;</div><div class="line">            mu[i * prime[j]] = mu[i] * (<span class="number">-1</span>);</div><div class="line">            <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>)&#123;</div><div class="line">                mu[i * prime[j]] = <span class="number">0</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; i * j &lt; maxn; j++)&#123;</div><div class="line">            F[i * j] += mu[i] * j;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++)&#123;</div><div class="line">        F[i] += F[i - <span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(LL n, LL m)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    LL con = min(n, m);</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= con; i++)&#123;</div><div class="line">        LL next = min(n / (n / i), m / (m / i));</div><div class="line">        ans += (n / i) * (m / i) * (F[next] - F[i - <span class="number">1</span>]);</div><div class="line">        i = next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, m * n + ((ans - m * n) &lt;&lt; <span class="number">1</span>));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    freopen(<span class="string">"ene.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"ene.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    LL n, m;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;m);</div><div class="line">    work(n, m);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></font></p>
<p><font size="5">方法二公式如下：</font></p>
<script type="math/tex; mode=display">Sum=\sum_{d=1}^{min(n,m)}d*\sum_{k=1}^{min(\left\lfloor\frac{n}{d}\right\rfloor,\left\lfloor\frac{m}{d}\right\rfloor)}\left\lfloor\frac{n}{k*d}\right\rfloor*\left\lfloor\frac{m}{k*d}\right\rfloor * \mu(k)\\\\
Ans = 2*(Sum - m*n ) + m*n</script><p><font size="4">代码 实测用时：$44ms$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line">LL mu[maxn];</div><div class="line">LL prime[maxn];</div><div class="line">LL cnt;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i])&#123;</div><div class="line">            mu[i] = <span class="number">-1</span>;</div><div class="line">            prime[cnt++] = i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * prime[j] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * prime[j]] = <span class="number">1</span>;</div><div class="line">            mu[i * prime[j]] = mu[i] * (<span class="number">-1</span>);</div><div class="line">            <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>)&#123;</div><div class="line">                mu[i * prime[j]] = <span class="number">0</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt; maxn; i++)&#123;</div><div class="line">        mu[i] += mu[i - <span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">work</span><span class="params">(LL n, LL m)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    LL con = min(n, m);</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= con; i++)&#123;</div><div class="line">        LL next = min(n / (n / i), m / (m / i));</div><div class="line">        ans += (n / i) * (m / i) * (mu[next] - mu[i - <span class="number">1</span>]);</div><div class="line">        i = next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    freopen(<span class="string">"ene.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"ene.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    LL n, m;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;m);</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= min(n, m); i++)&#123;</div><div class="line">        ans += i * work(n / i, m / i);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, m * n + ((ans - m * n) &lt;&lt; <span class="number">1</span>));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></font></p>
<h3 id="YY的GCD"><a href="#YY的GCD" class="headerlink" title="YY的GCD"></a>YY的GCD</h3><p>时间限制: 5 Sec  内存限制: 512 MB</p>
<h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><p>神犇YY虐完数论后给傻×kAc出了一题给定N, M,求1&lt;=x&lt;=N, 1&lt;=y&lt;=M且gcd(x, y)为质数的(x, y)有多少对kAc这种<br>傻×必然不会了，于是向你来请教……多组输入</p>
<h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>第一行一个整数T 表述数据组数接下来T行，每行两个正整数，表示N, M</p>
<h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>T行，每行一个整数表示第i组数据的结果</p>
<h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h4><p>2</p>
<p>10 10</p>
<p>100 100</p>
<h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h4><p>30</p>
<p>2791</p>
<h4 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h4><p>T = 10000</p>
<p>N, M &lt;= 10000000</p>
<h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>公式如下：</p>
<script type="math/tex; mode=display">Ans =
\sum_{T=1}^{min(n,m)}\left\lfloor\frac{n}{T}\right\rfloor*\left\lfloor\frac{m}{T}\right\rfloor * F(T)\\\\
F(T)=\sum_{k\mid T\mbox{且}T/k\mbox{为质数}}\mu(k)\\\\</script><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> prime[maxn];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> mu[maxn];</div><div class="line">LL F[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i])&#123;</div><div class="line">            mu[i] = <span class="number">-1</span>;</div><div class="line">            prime[cnt++] = i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * prime[j] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * prime[j]] = <span class="number">1</span>;</div><div class="line">            mu[i * prime[j]] = mu[i] * (<span class="number">-1</span>);</div><div class="line">            <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>)&#123;</div><div class="line">                mu[i * prime[j]] = <span class="number">0</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; prime[i] * j &lt; maxn; j++)&#123;</div><div class="line">            F[prime[i] * j] += mu[j];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn ;i++)&#123;</div><div class="line">        F[i] += F[i - <span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> con = min(n, m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= con; i++)&#123;</div><div class="line">        <span class="keyword">int</span> next = min(n / (n / i), m / (m / i));</div><div class="line">        ans += (LL)(n / i) * (m / i) * (F[next] - F[i - <span class="number">1</span>]);</div><div class="line">        i = next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    freopen(<span class="string">"yy.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"yy.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    <span class="keyword">int</span> T, n, m;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        work(n, m);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Spoj5971-LCM-Sum"><a href="#Spoj5971-LCM-Sum" class="headerlink" title="Spoj5971 LCM Sum"></a>Spoj5971 LCM Sum</h3><p>时间限制: 3 Sec  内存限制: 256 MB</p>
<h4 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h4><p>Given n, calculate the sum LCM(1,n) + LCM(2,n) + .. + LCM(n,n), where LCM(i,n) denotes the Least Common Multiple of the integers i and n.</p>
<h4 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h4><p>The first line contains T the number of test cases. Each of the next T lines contain an integer n.</p>
<h4 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h4><p>Output T lines, one for each test case, containing the required sum.</p>
<h4 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input"></a>Sample Input</h4><p>3</p>
<p>1</p>
<p>2</p>
<p>5</p>
<h4 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output"></a>Sample Output</h4><p>1</p>
<p>4</p>
<p>55</p>
<h4 id="HINT-1"><a href="#HINT-1" class="headerlink" title="HINT"></a>HINT</h4><p>1 &lt;= T &lt;= 300000<br>1 &lt;= n &lt;= 1000000</p>
<h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>本题还算是有点意思，有一个容易让大家忽略的技巧（然而上面也提到了），这里把公式详细地推一下</p>
<p>公式如下：</p>
<script type="math/tex; mode=display">\begin{array}{lcl}
Ans=\sum_{i = 1}^{n}lcm(i,n)\\\\
=\sum_{i=1}^{n}\frac{n*i}{gcd(i,n)}\\\\
=n*\sum_{d\mid n}d*\sum_{i=1}^{\frac{n}{d}}i*[gcd(i,\frac{n}{d})=1]\\\\
\end{array}</script><p>这时非常显然，就是要我们求出所有小于且与$\frac{n}{d}$互质的数的和，根据上面讲的$\varphi变换$，我们有这样的公式：</p>
<script type="math/tex; mode=display">\begin{array}{lcl}
n*\sum_{d\mid n}d*\sum_{i=1}^{\frac{n}{d}}i*[gcd(i,\frac{n}{d})=1]\\\\
= n*\sum_{d\mid n}d*\frac{\frac{n}{d}* \varphi(\frac{n}{d})}{2}\\\\
= n*G(n)
\end{array}</script><p>所以，我们只要预处理出所有的$\varphi[i]$，然后直接狄利克雷卷积法预处理后半部分就好了</p>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line">LL fi[maxn];</div><div class="line">LL g[maxn];</div><div class="line">LL prime[maxn], cnt;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    fi[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i])&#123;</div><div class="line">            prime[cnt++] = i;</div><div class="line">            fi[i] = i - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (LL j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (prime[j] * i &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[prime[j] * i] = <span class="number">1</span>;</div><div class="line">            fi[prime[j] * i] = fi[i] * (prime[j] - <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>)&#123;</div><div class="line">                fi[prime[j] * i] = fi[i] * prime[j];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt; maxn; i++) g[i] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        LL add = (i * fi[i]) &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (LL j = <span class="number">1</span>; j * i &lt; maxn; j++)&#123;</div><div class="line">            g[i * j] += add;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt; maxn; i++)&#123;</div><div class="line">        g[i] *= i;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    freopen(<span class="string">"LCM.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"LCM.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    LL T, n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, g[n]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="CQOI2007-余数之和sum"><a href="#CQOI2007-余数之和sum" class="headerlink" title="[CQOI2007]余数之和sum"></a>[CQOI2007]余数之和sum</h3><p>时间限制: 1 Sec  内存限制: 256 MB</p>
<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给出正整数n和k，计算j(n, k)=k mod 1 + k mod 2 + k mod 3 + … + k mod n的值，其中k mod i表示k除以i的余数。例如j(5, 3)=3 mod 1 + 3 mod 2 + 3 mod 3 + 3 mod 4 + 3 mod 5=0+1+0+3+3=7</p>
<h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>输入仅一行，包含两个整数n, k。</p>
<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>输出仅一行，即j(n, k)。</p>
<h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><p>5 3</p>
<h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><p>7</p>
<h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>50%的数据满足：1&lt;=n, k&lt;=1000<br>100%的数据满足：1&lt;=n ,k&lt;=10^9</p>
<h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><p>本题是一道有趣的题，也许它不需要太多的莫比乌斯反演基础</p>
<p>我们知道，$k \bmod i = k - i*\left\lfloor\frac{k}{i}\right\rfloor$ ，还知道在$i&gt;\sqrt{k}$的时候会有很多的值有重复，总共只有$O(\sqrt{n})$个不同的值，那么我们就可以想到使用这些值相同的特性来优化算法</p>
<p>于是我们可以类比分块法做：</p>
<p>令$i∗t \leqslant k \leq i∗(t+1)$，则$k \bmod i = k - i∗t$，考虑$i+1$时的情况，<br>若$\left\lfloor\frac{k}{i}\right\rfloor=\left\lfloor\frac{k}{i+1}\right\rfloor$，则有$(i+1)∗ t \leqslant k \leq (i+1)∗ (t+1)$，$k \bmod (i+1) = k - (i+1)∗ t$，对比两次取模的式子，发现现在的结果比上一次减少了一个固定的数，那就是$t=\left\lfloor\frac{k}{i}\right\rfloor$,所以，我们在值$t=\left\lfloor\frac{k}{i}\right\rfloor$全相等的一群模数$i$中得到了一个等差数列，这个数列所有项的和是我们能够在$O(1)$时间内计算出来的，那么，我们就是要这样“分块”，每个块里面都是一个等差数列</p>
<p>那么，现在只有一个问题没有解决，那就是，这个等差数列里面会不会出现一些项为负数呢？下面我们来证明一下：</p>
<p>如果出现了负数，那么说明此时的模数$j$满足$k \bmod j = k - j ∗ t &lt; 0$，而由我们先前的证明知道，$k \geqslant j ∗ t$，所以不可能出现数列中有负数这种情况</p>
<p>那么我们就可以水过这道题了</p>
<h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(LL n, LL k)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    LL con = min(n, k);</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= con; i++)&#123;</div><div class="line">        LL next = k / (k / i);</div><div class="line">        next = min(next, con);</div><div class="line">        LL d = k / i;</div><div class="line">        LL a = k % i;</div><div class="line">        <span class="comment">//LL num = a / d;</span></div><div class="line">        <span class="comment">/*if (num &lt; next - i)&#123;</span></div><div class="line">            ans += (a + a - num * d) * (num + 1) &gt;&gt; 1;</div><div class="line">            a = a - (num + 1) * d + i + num + 1;</div><div class="line">            ans += (a + a - d * (next - i - num)) * (next - i - num) &gt;&gt; 1;</div><div class="line">        &#125;</div><div class="line">        else &#123;</div><div class="line">            num = next - i;</div><div class="line">            ans += (a + a - num * d) * (num + 1) &gt;&gt; 1;</div><div class="line">        &#125;*/</div><div class="line">        LL num = next - i;</div><div class="line">        ans += (a + a - num * d) * (num + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">        i = next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (n &gt; k)&#123;</div><div class="line">        ans += (n - k) * k;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"rest.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"rest.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    LL n, k;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>, &amp;n, &amp;k);</div><div class="line">    work(n, k);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="jzptab"><a href="#jzptab" class="headerlink" title="jzptab"></a>jzptab</h3><p>时间限制: 11 Sec  内存限制: 512 MB</p>
<h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>求 $ \sum_{i=1}^{n}\sum_{j=1}^{m} lcm(i,j) $ ，答案模$100000009$输出<br>多组询问</p>
<h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><p>一个正整数T表示数据组数<br>接下来T行 每行两个正整数 表示N、M</p>
<h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><p>T行 每行一个整数 表示第i组数据的结果</p>
<h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h4><p>1<br>4 5</p>
<h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h4><p>122</p>
<h4 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h4><p>T &lt;= 10000<br>N, M&lt;=10000000</p>
<h4 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h4><p>这道题在其他题目的基础上，增加了线性筛积性函数的这个环节，是本题的亮点</p>
<p>但其实本题就是统计最小公倍数，公式如下：</p>
<script type="math/tex; mode=display">\begin{array}{lcl}
Ans=\sum_{T = 1}^{min(n, m)} T*Sum( \left\lfloor\frac{n}{T}\right\rfloor,\left\lfloor\frac{m}{T}\right\rfloor)* F(T)\\\\
Sum(a,b) = \frac{a*(a + 1)}{2} * \frac{b*(b + 1)}{2}\\\\
F(T)=\sum_{k|T} \mu(k) * k
\end{array}</script><p>线性筛一发$F[i]$，不会的回到上面自己看去</p>
<h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 100000009</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">LL F[maxn];</div><div class="line"><span class="keyword">int</span> prime[maxn], cnt;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    F[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i])&#123;</div><div class="line">            prime[cnt++] = i;</div><div class="line">            F[i] = (<span class="number">1</span> - i) % M;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * prime[j] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            F[i * prime[j]] = F[i] * (<span class="number">1</span> - prime[j]) % M;</div><div class="line">            vis[i * prime[j]] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>)&#123;</div><div class="line">                F[i * prime[j]] = F[i];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) F[i] = (i * F[i]  % M + F[i - <span class="number">1</span>]) % M<span class="comment">/*, printf("%lld ", F[i])*/</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> con = min(n, m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= con; i++)&#123;</div><div class="line">        <span class="keyword">int</span> next = min(n / (n / i), m / (m / i));</div><div class="line">        ans = (ans + (((LL)(m / i + <span class="number">1</span>) * (m / i) &gt;&gt; <span class="number">1</span>) % M) * (((LL)(n / i + <span class="number">1</span>) * (n / i) &gt;&gt; <span class="number">1</span>) % M) % M * (F[next] - F[i - <span class="number">1</span>]) % M) % M;</div><div class="line">        i = next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, (ans + M) % M);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"jzp.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"jzp.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> n, m, T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span>(T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        work(n, m);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;首先大家都知道莫比乌斯反演是什么对吧，那么下面直接对一些常用的公式推导技巧进行一些汇总&lt;br&gt;
    
    </summary>
    
    
      <category term="数论" scheme="https://goseqh.tk/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="数学" scheme="https://goseqh.tk/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="莫比乌斯反演" scheme="https://goseqh.tk/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
  </entry>
  
</feed>
