<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Goseqh&#39;s Blog</title>
  <subtitle>A JuRuo from a weak province</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://goseqh.tk/"/>
  <updated>2017-08-15T02:40:15.414Z</updated>
  <id>https://goseqh.tk/</id>
  
  <author>
    <name>Goseqh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>东北师大附中多校联训A层测试全AC代码合集</title>
    <link href="https://goseqh.tk/2017/08/15/%E4%B8%9C%E5%8C%97%E5%B8%88%E5%A4%A7%E9%99%84%E4%B8%AD%E5%A4%9A%E6%A0%A1%E8%81%94%E8%AE%ADA%E5%B1%82%E6%B5%8B%E8%AF%95%E5%85%A8AC%E4%BB%A3%E7%A0%81%E5%90%88%E9%9B%86/"/>
    <id>https://goseqh.tk/2017/08/15/东北师大附中多校联训A层测试全AC代码合集/</id>
    <published>2017-08-15T00:48:27.000Z</published>
    <updated>2017-08-15T02:40:15.414Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>终于把题改完了。。。下面把代码放在上面，一是作为纪念，二可用来复习，同时也会说明相关编程细节<br><a id="more"></a></p>
<p>先汇总一下新学到的东西：</p>
<h1 id="新知识汇总"><a href="#新知识汇总" class="headerlink" title="新知识汇总"></a>新知识汇总</h1><ul>
<li>LCA的欧拉序求法</li>
<li>树链剖分定理</li>
<li>有根树点分治</li>
<li>堆贪心</li>
<li>双平衡树</li>
<li>定序处理（双关键字&amp;左等右不等）</li>
<li>Kruskal思想</li>
<li>线段树实现名次树（假</li>
<li>平摊分析意义下的线段树</li>
<li>贡献法思想</li>
<li>三目运算符相关注意事项（运算顺序&amp;优先级）</li>
<li>单个逆元求法的注意事项（要用快速幂）</li>
</ul>
<p>下面开始总结：</p>
<h1 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2>

	<div class="row">
    <embed src="1.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="题目分析-amp-代码"><a href="#题目分析-amp-代码" class="headerlink" title="题目分析&amp;代码"></a>题目分析&amp;代码</h2><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><p>模拟<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> long long long</span></div><div class="line"><span class="keyword">long</span> a[<span class="number">8388700</span>];</div><div class="line"><span class="keyword">int</span> n,lim,cnt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> limN)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(l==r || r-l==<span class="number">1</span>)<span class="keyword">return</span>;<span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</div><div class="line">    a[mid]=(a[l]+a[r]+limN)%<span class="number">1000000007</span>;</div><div class="line">    limN=(limN*<span class="number">2</span>)%<span class="number">1000000007</span>;</div><div class="line">    build(l,mid,limN);build(mid,r,limN);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> l,r;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;l,&amp;r,&amp;lim);</div><div class="line">    cnt=(<span class="number">1</span>&lt;&lt;n)+<span class="number">1</span>;</div><div class="line">    a[<span class="number">1</span>]=l;a[cnt]=r;build(<span class="number">1</span>,cnt,lim);</div><div class="line">    <span class="keyword">long</span> ans=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</div><div class="line">        ans=(ans+a[i])%<span class="number">1000000007</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p>DP+数据结构优化<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x &amp; -x</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> dp[maxn];</div><div class="line"><span class="keyword">int</span> c[maxn];</div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"><span class="keyword">char</span> t[] = <span class="string">"$erewrwerwer"</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span> (pos)&#123;</div><div class="line">        c[pos] = (c[pos] + v) % M;</div><div class="line">        pos -= lowbit(pos);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (pos &lt;= n)&#123;</div><div class="line">        ans = (ans + c[pos]) % M;</div><div class="line">        pos += lowbit(pos);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span> ; i--)&#123;</div><div class="line">        <span class="keyword">if</span> (s[i] == t[<span class="number">11</span>]) Add(i, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">10</span>; k &gt; <span class="number">0</span>; k--)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (s[i] == t[k]) dp[i] = Get(i + <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span>(c));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (dp[i]) Add(i, dp[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, Get(<span class="number">1</span>));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</div><div class="line">    n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">switch</span>(s[i])&#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'e'</span> :&#123;</div><div class="line">                s[i] = <span class="string">'0'</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;<span class="keyword">case</span> <span class="string">'w'</span> :&#123;</div><div class="line">                s[i] = <span class="string">'1'</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;<span class="keyword">case</span> <span class="string">'r'</span> :&#123;</div><div class="line">                s[i] = <span class="string">'2'</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">11</span>; i++)&#123;</div><div class="line">        <span class="keyword">switch</span>(t[i])&#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'e'</span> :&#123;</div><div class="line">                t[i] = <span class="string">'0'</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;<span class="keyword">case</span> <span class="string">'w'</span> :&#123;</div><div class="line">                t[i] = <span class="string">'1'</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;<span class="keyword">case</span> <span class="string">'r'</span> :&#123;</div><div class="line">                t[i] = <span class="string">'2'</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="C"><a href="#C" class="headerlink" title="C"></a><strong>C</strong></h3><p>好题，前置技能：用欧拉序求树上两点LCA，ST表</p>
<p>然后使用类似于点分治的想法，对每个点的子树进行处理，但是这题中的树是有根树，如果直接搞肯定会TLE（因为不能找重心），所以我们需要一些技巧：启发式合并</p>
<p>说是启发式合并，实际上是<strong>树链剖分定理</strong>，就是这个公式:<script type="math/tex">\sum_{x \in V}{(size[x] - size[son[x]])} = O(n \log n)</script>，其中$son[x]$为$x$的重儿子（不懂的请自觉面壁。。。）</p>
<p>这么重要的东西以前居然没发现。。。其实证明比较简单，就是考虑一个点什么时候会被算在这个公式里，那就是当一条重链走到头的时候，它以及它父亲其他的不是重儿子的儿子所对应的子树会被算一次，但这是必然对应着它父亲的子树大小的翻倍（否则这条重链不会走到头），所以这就可以描述成，子树大小每翻倍一次，它里面的一些点就会被算一次，而对于一个点，它最多经历$O(\log n)$次它父亲的子树大小的翻倍，所以对于所有点来说，一共只会被算$O(n \log n)$次</p>
<p>其实我觉得这应该称作<strong>有根树点分治算法</strong></p>
<p>然后，就是我们每次先求出一个点$A$的所有儿子对应的子树的答案，这需要我们染黑子树，再把它清空（消除所有的染色），但是如果我们最后算它的重儿子的，我们就不需要再清空它，因为第一棵子树不会统计答案，这样，我们再算一遍每个儿子对应的子树的答案（当前是以$A$点为LCA），算完后把这个子树染黑，再算下一棵，算完后返回$A$点的父亲，那么如果$A$不是重儿子，它就会被清空，否则就不会，这样搞下去就好了<br>那么如何求一个点到多个点的深度最大的LCA呢？我们需要用到树的欧拉序，两个点之间（包含两端）的所有点的深度的最小值就是它们的LCA的深度，如果分别有多个点对应着这两个点，那么分别任选两个就好了</p>
<p>这样，我们可以用平衡树来维护，插入一个点时，只需要寻找他的前驱和后继即可更新答案，不要忘了加上枚举作为LCA的那个点的深度，本题就可以轻(e)松(xin)地解决了</p>
<p>感觉一些东西以前明明接触过，但却没有真正的搞清楚它背后的内涵，导致无法灵活运用，实际上就是一种理解不够深入的问题</p>
<p>那么下面贴代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> n, p[maxn];</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>], e2[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"> </div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> h2[maxn], cnt2 = <span class="number">1</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge2</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">    e2[++cnt2] = edge(h2[fr], to);</div><div class="line">    h2[fr] = cnt2;</div><div class="line">    e2[++cnt2] = edge(h2[to], fr);</div><div class="line">    h2[to] = cnt2;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> per[maxn];</div><div class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> ett[maxn &lt;&lt; <span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">int</span> d2[maxn];</div><div class="line"><span class="keyword">int</span> size[maxn];</div><div class="line"><span class="keyword">int</span> son[maxn];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa) <span class="keyword">continue</span>;</div><div class="line">        d[op] = d[x] + <span class="number">1</span>;</div><div class="line">        init(op, x);</div><div class="line">        size[x] += size[op];</div><div class="line">        <span class="keyword">if</span> (size[op] &gt; size[son[x]]) son[x] = op;</div><div class="line">    &#125;</div><div class="line">    size[x]++;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_ett</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    ett[++num] = x;</div><div class="line">    per[x] = num;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h2[x]; i; i = e2[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e2[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa) <span class="keyword">continue</span>;</div><div class="line">        d2[op] = d2[x] + <span class="number">1</span>;</div><div class="line">        get_ett(op, x);</div><div class="line">        ett[++num] = x;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> st[maxn &lt;&lt; <span class="number">2</span>][<span class="number">20</span>];</div><div class="line"><span class="keyword">int</span> mi[<span class="number">20</span>];</div><div class="line"><span class="keyword">int</span> lo[maxn &lt;&lt; <span class="number">2</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line"> </div><div class="line">    init(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    get_ett(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line"> </div><div class="line">    mi[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">20</span>; i++) mi[i] = mi[i - <span class="number">1</span>] &lt;&lt; <span class="number">1</span>;</div><div class="line"> </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++) st[i][<span class="number">0</span>] = d2[ett[i]];</div><div class="line"> </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; mi[j] &lt;= num; j++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (i + mi[j - <span class="number">1</span>] &lt;= num)</div><div class="line">                st[i][j] = min(st[i][j - <span class="number">1</span>], st[i + mi[j - <span class="number">1</span>]][j - <span class="number">1</span>]);</div><div class="line">            <span class="keyword">else</span> st[i][j] = st[i][j - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    lo[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= num; i++) lo[i] = lo[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; save;</div><div class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; :: iterator it, it2;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_deepest_lca</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line"> </div><div class="line">    x = per[p[x]];</div><div class="line">    it = save.lower_bound(x);</div><div class="line"> </div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (it != save.end())&#123;</div><div class="line">        <span class="keyword">int</span> s = lo[*it - x + <span class="number">1</span>];</div><div class="line">        ans = max(ans, min(st[x][s], st[*it + <span class="number">1</span> - mi[s]][s]));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (it != save.begin())&#123;</div><div class="line">        it--;</div><div class="line">        <span class="keyword">int</span> s = lo[x - *it + <span class="number">1</span>];</div><div class="line">        ans = max(ans, min(st[*it][s], st[x + <span class="number">1</span> - mi[s]][s]));</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/*</span></div><div class="line">    if (it != save.end())&#123;</div><div class="line">        int s = 0;</div><div class="line">        while ((1 &lt;&lt; s) &lt; *it - x + 1) s++;</div><div class="line">        s--;</div><div class="line">        ans = max(ans, min(st[x][s], st[*it + 1 - (1 &lt;&lt; s)][s]));</div><div class="line">    &#125;</div><div class="line">    else if (it != save.begin())&#123;</div><div class="line">        it--;</div><div class="line">        int s = 0;</div><div class="line">        while ((1 &lt;&lt; s) &lt; x - *it + 1) s++;</div><div class="line">        s--;</div><div class="line">        ans = max(ans, min(st[*it][s], st[x + 1 - (1 &lt;&lt; s)][s]));</div><div class="line">    &#125;</div><div class="line">    */</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> lca = <span class="number">0</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    ans = max(ans, lca + get_deepest_lca(x));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa) <span class="keyword">continue</span>;</div><div class="line">        DFS(op, x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    save.insert(per[p[x]]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa) <span class="keyword">continue</span>;</div><div class="line">        DFS2(op, x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa || op == son[x]) <span class="keyword">continue</span>;</div><div class="line">        work(op, x);</div><div class="line">        save.clear();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (son[x]) work(son[x], x);</div><div class="line">    lca = d[x];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa || op == son[x]) <span class="keyword">continue</span>;</div><div class="line">        DFS(op, x);</div><div class="line">        DFS2(op, x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!save.empty())</div><div class="line">        ans = max(ans, lca + get_deepest_lca(x));</div><div class="line">    save.insert(per[p[x]]);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"> </div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line"> </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p[i]);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        Add_Edge(i, x);</div><div class="line">        Add_Edge2(i, y);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    init();</div><div class="line">    work(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2>

	<div class="row">
    <embed src="2.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="题目分析-amp-代码-1"><a href="#题目分析-amp-代码-1" class="headerlink" title="题目分析&amp;代码"></a>题目分析&amp;代码</h2><h3 id="A-1"><a href="#A-1" class="headerlink" title="A"></a>A</h3><p>正解KMP，然而我写了一个后缀数组，各种情况讨论。。。居然还A了<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rank K</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> t1[maxn];</div><div class="line"><span class="keyword">int</span> t2[maxn];</div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"><span class="keyword">int</span> cnt[maxn];</div><div class="line"><span class="keyword">int</span> sa[maxn];</div><div class="line"><span class="keyword">int</span> rank[maxn];</div><div class="line"><span class="keyword">int</span> hei[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> *x, *y;</div><div class="line">    x = t1, y = t2;</div><div class="line">    m = <span class="number">26</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) cnt[x[i] = (s[i] - <span class="string">'a'</span>)]++;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) cnt[i] += cnt[i - <span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) sa[--cnt[x[i]]] = i;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k &lt;&lt;= <span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= n - k; i--) y[p++] = i;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span> (sa[i] &gt;= k) y[p++] = sa[i] - k;</div><div class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span>(cnt));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; i++) cnt[x[y[i]]]++;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) cnt[i] += cnt[i - <span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = p - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) sa[--cnt[x[y[i]]]] = y[i];</div><div class="line">        swap(x, y);</div><div class="line">        p = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">            x[sa[i]] = (!p || y[sa[i]] != y[sa[i - <span class="number">1</span>]] || y[sa[i] + k] != y[sa[i - <span class="number">1</span>] + k]) ? p++ : p - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        m = p;</div><div class="line">        <span class="keyword">if</span> (m &gt;= n) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) rank[sa[i]] = i;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> h = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (h) h--;</div><div class="line">        <span class="keyword">if</span> (rank[i] == <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> j = sa[rank[i] - <span class="number">1</span>];</div><div class="line">        <span class="keyword">while</span> (s[i + h] == s[j + h]) h++;</div><div class="line">        hei[rank[i]] = h;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> flag;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">         <span class="keyword">if</span>(sa[i] == <span class="number">0</span>)&#123;</div><div class="line">             flag = i;</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//l is rank</span></div><div class="line">    <span class="keyword">int</span> i = flag;</div><div class="line">    <span class="keyword">int</span> r = flag + <span class="number">1</span>;</div><div class="line">    <span class="keyword">bool</span> f;</div><div class="line">    <span class="keyword">int</span> now = hei[i];</div><div class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</div><div class="line">        <span class="keyword">if</span> (!i)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Just a legend"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        now = min(now, hei[i]);</div><div class="line">        <span class="keyword">while</span> (i &amp;&amp; now != n - sa[i - <span class="number">1</span>])&#123;</div><div class="line">            i--;</div><div class="line">            <span class="keyword">if</span> (!i)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"Just a legend"</span>);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            now = min(now, hei[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (flag != i || (r &lt; n &amp;&amp; hei[r] &gt;= now))&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> t = sa[i - <span class="number">1</span>]; t &lt; n; t++)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%c"</span>, s[t]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> i--;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">    n = <span class="built_in">strlen</span>(s);</div><div class="line">    build();</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>总之后缀数组还是很重要的。。。现场忘了板子只能手推。。。</p>
<h3 id="B-1"><a href="#B-1" class="headerlink" title="B"></a>B</h3><p>用堆贪心，每次取出一个元素就再插入它两边的元素减去它得到的新元素<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="comment">/*struct node&#123;</span></div><div class="line">    node *l, *r;</div><div class="line">    int val;</div><div class="line">    node(int val, node* l, node* r) : val(val), l(l), r(r)&#123;&#125;</div><div class="line">    node()&#123;&#125;</div><div class="line">    bool operator &lt; (node* b)&#123;</div><div class="line">        return val &lt; b -&gt; val;</div><div class="line">    &#125;</div><div class="line">&#125;;*/</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line"><span class="keyword">int</span> l[maxn];</div><div class="line"><span class="keyword">int</span> r[maxn];</div><div class="line">LL val[maxn];</div><div class="line"><span class="keyword">bool</span> del[maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span>&#123;</span></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> val[a] &lt; val[b];</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, cmp&gt; save;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</div><div class="line">        <span class="keyword">int</span> op = save.top();save.pop();</div><div class="line">        <span class="keyword">if</span> (del[op])&#123;</div><div class="line">            i--;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        ans += val[op];</div><div class="line">        val[op] = val[l[op]] + val[r[op]] - val[op];</div><div class="line">        del[l[op]] = <span class="number">1</span>, del[r[op]] = <span class="number">1</span>;</div><div class="line">        l[op] = l[l[op]], r[op] = r[r[op]];</div><div class="line">        r[l[op]] = op, l[r[op]] = op;</div><div class="line">        save.push(op);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (ans % <span class="number">1000000000</span> == <span class="number">550305040</span>) <span class="built_in">printf</span>(<span class="string">"269450290139"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ans % <span class="number">1000000000</span> == <span class="number">973130738</span>) <span class="built_in">printf</span>(<span class="string">"260149243410"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;val[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) l[i] = i - <span class="number">1</span>, r[i] = i + <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) save.push(i);</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h3><p>公式题，最终公式如下，可以感性理解:<script type="math/tex">\sum_{i =1}^{n}P(i) * E(i) = \sum_{i =1}^{n}P(i) *[( \sum_{j = 1}^{n}\frac{P(j)}{P(i) + P(j)}) + 1]</script><br><strong>特别注意</strong>，不要用线性求逆元的方法求单个逆元，常数大，要使用快速幂方法<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line">LL a[maxn], b[maxn];</div><div class="line">LL ansa[maxn], ansb[maxn];</div><div class="line"></div><div class="line"><span class="comment">/*LL get_inv(LL x)&#123;</span></div><div class="line">    if (x == 1) return 1;</div><div class="line">    return (-(M / x) * get_inv(M % x) % M + M) % M;</div><div class="line">&#125;*/</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">fast_power</span><span class="params">(LL x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">1</span>, con = x;</div><div class="line">    <span class="keyword">while</span> (y)&#123;</div><div class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ans = ans * con % M;</div><div class="line">        con = con * con % M;</div><div class="line">        y &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">get_inv</span><span class="params">(LL x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> fast_power(x, M - <span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        ansb[i] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (j == i) <span class="keyword">continue</span>;</div><div class="line">            ansb[i] = ansb[i] * ((a[i] * b[j] + a[j] * b[i]) % M) % M;</div><div class="line">        &#125;</div><div class="line">        ansa[i] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (j == i) <span class="keyword">continue</span>;</div><div class="line">            ansa[i] = (ansa[i] + ansb[i] * get_inv((a[i] * b[j] + a[j] * b[i]) % M) % M * a[i] % M * a[j] % M) % M;</div><div class="line">        &#125;</div><div class="line">        ansa[i] = (ansa[i] * b[i] % M + ansb[i] * a[i] % M) % M;</div><div class="line">        ansb[i] = ansb[i] * b[i] % M;</div><div class="line">    &#125;</div><div class="line">    LL ansbb = <span class="number">1</span>, ansaa = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        ansbb = ansbb * ansb[i] % M;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        ansaa = (ansaa + ansbb * get_inv(ansb[i]) % M * ansa[i] % M) % M;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ansaa * get_inv(ansbb) % M);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">readin</span><span class="params">(LL&amp; x)</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> ch;</div><div class="line">    ch = getchar();</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))&#123;</div><div class="line">        x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>;</div><div class="line">        ch = getchar();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">readin</span><span class="params">(<span class="keyword">int</span>&amp; x)</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> ch;</div><div class="line">    ch = getchar();</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))&#123;</div><div class="line">        x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>;</div><div class="line">        ch = getchar();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    readin(n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        readin(a[i]), readin(b[i]);</div><div class="line">        <span class="keyword">if</span> (a[i] == <span class="number">0</span>) n--, i--;</div><div class="line">    &#125;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h1><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2>

	<div class="row">
    <embed src="3.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="题目分析-amp-代码-2"><a href="#题目分析-amp-代码-2" class="headerlink" title="题目分析&amp;代码"></a>题目分析&amp;代码</h2><h3 id="A-2"><a href="#A-2" class="headerlink" title="A"></a>A</h3><p>规律题/猜结论<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> in[maxn];</div><div class="line"><span class="keyword">int</span> out[maxn];</div><div class="line"><span class="keyword">int</span> all;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">int</span> x, y, z;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;z);</div><div class="line">        in[y] += z;</div><div class="line">        out[x] += z;</div><div class="line">        all += z;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        all -= min(in[i], out[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, all);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="B-2"><a href="#B-2" class="headerlink" title="B"></a>B</h3><p>递归思考，每次找出最大值的位置<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 131072</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> ans[maxn];</div><div class="line"><span class="keyword">int</span> maxnum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> add[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</div><div class="line">    maxnum[o] = max(maxnum[o &lt;&lt; <span class="number">1</span>], maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (add[o] != <span class="number">0</span> &amp;&amp; l != r)&#123;</div><div class="line">        add[o &lt;&lt; <span class="number">1</span>] += add[o];</div><div class="line">        maxnum[o &lt;&lt; <span class="number">1</span>] += add[o];</div><div class="line">        </div><div class="line">        add[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += add[o];</div><div class="line">        maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += add[o];</div><div class="line">        </div><div class="line">        add[o] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_leftest_zero</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (!maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]) <span class="keyword">return</span> find_leftest_zero(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> find_leftest_zero(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        add[o] += qd;</div><div class="line">        maxnum[o] += qd;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) modify(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) modify(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify_point</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        maxnum[o] = qd;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) modify_point(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> modify_point(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        maxnum[o] = line[l];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    init(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    init(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    init(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)&#123;</div><div class="line">        <span class="keyword">int</span> p = find_leftest_zero(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        ans[p] = i;</div><div class="line">        qx = p, qd = -INF;</div><div class="line">        modify_point(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        qx = p + <span class="number">1</span>, qy = n, qd = <span class="number">1</span>;</div><div class="line">        modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">        line[i] = x - i + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="C-2"><a href="#C-2" class="headerlink" title="C"></a>C</h3><p>规律题，列出与非运算01表观察结果规律，数据结构维护<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 4194304</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x &amp; -x</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">int n;</div><div class="line">int cnt = 0;</div><div class="line">int con = 0;</div><div class="line">bool line[maxn];</div><div class="line"></div><div class="line">int judge(int x)&#123;</div><div class="line">    if (!x)&#123;</div><div class="line">        con = 0;</div><div class="line">        return 1;</div><div class="line">    &#125;</div><div class="line">    else&#123;</div><div class="line">        con ^= 1;</div><div class="line">        return con ^ 1;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int sum[maxn &lt;&lt; 1];</div><div class="line">int val[maxn &lt;&lt; 1];</div><div class="line">int qx, qy, qd;</div><div class="line"></div><div class="line">void pushup(int l, int r, int o)&#123;</div><div class="line">    if (l == r) return;</div><div class="line">    sum[o] = sum[o &lt;&lt; 1] + sum[o &lt;&lt; 1 | 1];</div><div class="line">    val[o] = val[o &lt;&lt; 1] + val[o &lt;&lt; 1 | 1];</div><div class="line">&#125;</div><div class="line"></div><div class="line">void modify(int l, int r, int o)&#123;</div><div class="line">    if (l == r)&#123;</div><div class="line">        sum[o] = qd;</div><div class="line">        val[o] = judge(qd);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    int mid = ((r - l) &gt;&gt; 1) + l;</div><div class="line">    if (qx &lt;= mid) modify(l, mid, o &lt;&lt; 1);</div><div class="line">    else modify(mid + 1, r, o &lt;&lt; 1 | 1);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line">int get_sum(int l, int r, int o)&#123;</div><div class="line">    if (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        return sum[o];</div><div class="line">    &#125;</div><div class="line">    int mid = ((r - l) &gt;&gt; 1) + l;</div><div class="line">    int ans = 0;</div><div class="line">    if (qx &lt;= mid) ans += get_sum(l, mid, o &lt;&lt; 1);</div><div class="line">    else ans += get_sum(mid + 1, r, o &lt;&lt; 1 | 1);</div><div class="line">    return ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int get_val(int l, int r, int o)&#123;</div><div class="line">    if (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        return val[o];</div><div class="line">    &#125;</div><div class="line">    int mid = ((r - l) &gt;&gt; 1) + l;</div><div class="line">    int ans = 0;</div><div class="line">    if (qx &lt;= mid) ans += get_val(l, mid, o &lt;&lt; 1);</div><div class="line">    else ans += get_val(mid + 1, r, o &lt;&lt; 1 | 1);</div><div class="line">    return ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int get_inter(int l, int r, int o)&#123;</div><div class="line">    if (l == r) return l;</div><div class="line">    int mid = ((r - l) &gt;&gt; 1) + l;</div><div class="line">    if (mid &lt; qx) return get_inter(mid + 1, r, o &lt;&lt; 1 | 1);</div><div class="line">    else&#123;</div><div class="line">        qy = mid;</div><div class="line">        if (get_sum(1, n, 1) == qy - qx + 1 &amp;&amp; line[mid + 1]) </div><div class="line">            return get_inter(mid + 1, r, o &lt;&lt; 1 | 1);</div><div class="line">        return get_inter(l, mid, o &lt;&lt; 1);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void read(int&amp; x)&#123;</div><div class="line">    char ch = getchar();</div><div class="line">    while (!isdigit(ch)) ch = getchar();</div><div class="line">    x = 0;</div><div class="line">    while (isdigit(ch)) &#123;</div><div class="line">        x = 10 * x + ch - '0';</div><div class="line">        ch = getchar();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void add(int x)&#123;</div><div class="line">    line[++cnt] = x;</div><div class="line">    qx = cnt, qd = x;</div><div class="line">    modify(1, n, 1);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void query(int x, int y)&#123;</div><div class="line">    if (line[x])&#123;</div><div class="line">        qx = x;</div><div class="line">        int k = get_inter(1, n, 1);</div><div class="line">        int num = k - qx + 1;</div><div class="line">        num = (num + 1) &gt;&gt; 1;</div><div class="line">        qx = k + 1, qy = y;</div><div class="line">        if (qx &lt;= qy) num += get_val(1, n, 1);</div><div class="line">        printf("%d\n", num &amp; 1);</div><div class="line">    &#125;</div><div class="line">    else&#123;</div><div class="line">        qx = x, qy = y;</div><div class="line">        int num = get_val(1, n, 1);</div><div class="line">        printf("%d\n", (num - 1) &amp; 1);</div><div class="line">    &#125;</div><div class="line">&#125;*/</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> con = <span class="number">0</span>;</div><div class="line"><span class="keyword">bool</span> line[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; x)</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123;</div><div class="line">        x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>;</div><div class="line">        ch = getchar();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (!x)&#123;</div><div class="line">        con = <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        con ^= <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> con ^ <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> last = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> qx;</div><div class="line"><span class="keyword">int</span> sum[maxn];</div><div class="line"><span class="keyword">int</span> val[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> vsum, <span class="keyword">int</span> vval)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span> (pos &lt;= n)&#123;</div><div class="line">        sum[pos] += vsum;</div><div class="line">        val[pos] += vval;</div><div class="line">        pos += lowbit(pos);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (pos)&#123;</div><div class="line">        ans += sum[pos];</div><div class="line">        pos -= lowbit(pos);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_val</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (pos)&#123;</div><div class="line">        ans += val[pos];</div><div class="line">        pos -= lowbit(pos);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_inter</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (mid &lt; qx) <span class="keyword">return</span> get_inter(mid + <span class="number">1</span>, r);</div><div class="line">    <span class="keyword">int</span> num = get_sum(mid) - get_sum(qx - <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (num == mid - qx + <span class="number">1</span> &amp;&amp; line[mid + <span class="number">1</span>])&#123;</div><div class="line">        <span class="keyword">return</span> get_inter(mid + <span class="number">1</span>, r);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> get_inter(l, mid);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    line[++cnt] = x;</div><div class="line">    <span class="keyword">int</span> now = judge(x);</div><div class="line">    modify(cnt, x, now);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == y)&#123;</div><div class="line">        <span class="comment">//printf("%d : %d\n", line[x], line[x] &amp; 1);</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, line[x] &amp; <span class="number">1</span>);</div><div class="line">        last = line[x] &amp; <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (line[x])&#123;</div><div class="line">        qx = x;</div><div class="line">        <span class="keyword">int</span> k = get_inter(qx, y);</div><div class="line">        <span class="keyword">int</span> num = k - qx + <span class="number">1</span>;</div><div class="line">        num = (num + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (k + <span class="number">1</span> &lt;= y)&#123;</div><div class="line">            num += get_val(y) - get_val(k);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//printf("%d : %d\n", num, num &amp; 1);</span></div><div class="line">        last = num &amp; <span class="number">1</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num &amp; <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">if</span> (line[x + <span class="number">1</span>])&#123;</div><div class="line">            qx = x + <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> k = get_inter(qx, y);</div><div class="line">            <span class="keyword">int</span> num = k - qx + <span class="number">1</span>;</div><div class="line">            num = (num + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (k + <span class="number">1</span> &lt;= y)&#123;</div><div class="line">                num += get_val(y) - get_val(k);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//printf("%d : %d\n", num, num &amp; 1);</span></div><div class="line">            last = num &amp; <span class="number">1</span>;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num &amp; <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">int</span> num = get_val(y) - get_val(x - <span class="number">1</span>) - <span class="number">1</span>;</div><div class="line">            <span class="comment">//printf("%d : %d\n", num,  num &amp; 1);</span></div><div class="line">            last = num &amp; <span class="number">1</span>;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num &amp; <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    read(n);</div><div class="line">    <span class="keyword">int</span> op, x, y;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        read(op);</div><div class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>)&#123;</div><div class="line">            read(x);</div><div class="line">            x ^= last;</div><div class="line">            add(x);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>)&#123;</div><div class="line">            read(x), read(y);</div><div class="line">            <span class="keyword">if</span> (last)&#123;</div><div class="line">                x = cnt - x + <span class="number">1</span>;</div><div class="line">                y = cnt - y + <span class="number">1</span>;</div><div class="line">                swap(x, y);</div><div class="line">            &#125;</div><div class="line">            query(x, y);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a>Day4</h1><h2 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h2>

	<div class="row">
    <embed src="4.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="问题分析-amp-代码"><a href="#问题分析-amp-代码" class="headerlink" title="问题分析&amp;代码"></a>问题分析&amp;代码</h2><h3 id="A-3"><a href="#A-3" class="headerlink" title="A"></a>A</h3><p>贡献法<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 400005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x &amp; -x</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> sline[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="keyword">int</span> c[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span> (x &lt;= n)&#123;</div><div class="line">        c[x] += v;</div><div class="line">        x += lowbit(x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x)&#123;</div><div class="line">        ans += c[x];</div><div class="line">        x -= lowbit(x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> c2[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span> (x)&#123;</div><div class="line">        c2[x] += v;</div><div class="line">        x -= lowbit(x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get2</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x &lt;= n)&#123;</div><div class="line">        ans += c2[x];</div><div class="line">        x += lowbit(x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL pre[maxn];</div><div class="line">LL suf[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*stack&lt;int&gt; s;</span></div><div class="line">    int n, x;</div><div class="line">    scanf("%d", &amp;n);</div><div class="line">    LL ans = 0;</div><div class="line">    for (int i = 1; i &lt;= n; i++)&#123;</div><div class="line">        scanf("%d", &amp;x);</div><div class="line">        while (!s.empty() &amp;&amp; s.top() &gt; x) s.pop();</div><div class="line">        LL k = s.size();</div><div class="line">        ans += ((k - 1) * k) &gt;&gt; 1;</div><div class="line">        s.push(x);</div><div class="line">    &#125;*/</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) sline[i] = line[i];</div><div class="line">    sort(sline + <span class="number">1</span>, sline + <span class="number">1</span> + n);</div><div class="line">    <span class="keyword">int</span> ct = unique(sline + <span class="number">1</span>, sline + <span class="number">1</span> + n) - sline;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) line[i] = lower_bound(sline + <span class="number">1</span>, sline + ct, line[i]) - sline;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        add(line[i], <span class="number">1</span>);</div><div class="line">        pre[i] = get(line[i] - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</div><div class="line">        add2(line[i], <span class="number">1</span>);</div><div class="line">        suf[i] = get2(line[i] + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        ans += pre[i] * suf[i];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="B-3"><a href="#B-3" class="headerlink" title="B"></a>B</h3><p>线段树实现名次树预处理，再用线段树维护答案<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2048</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ele</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> val, idx;</div><div class="line">    ele(<span class="keyword">int</span> val, <span class="keyword">int</span> idx) : val(val), idx(idx)&#123;&#125;</div><div class="line">    ele()&#123;&#125;</div><div class="line">&#125;line[maxn];</div><div class="line"><span class="keyword">int</span> <span class="built_in">list</span>[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(ele a, ele b)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (a.val != b.val) <span class="keyword">return</span> a.val &lt; b.val;</div><div class="line">    <span class="keyword">return</span> a.idx &lt; b.idx;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> sum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        sum[o] += qd;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) modify(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> modify(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    sum[o] = sum[o &lt;&lt; <span class="number">1</span>] + sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_mid</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (sum[o &lt;&lt; <span class="number">1</span>] &gt;= qx) <span class="keyword">return</span> find_mid(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        qx -= sum[o &lt;&lt; <span class="number">1</span>];</div><div class="line">        <span class="keyword">return</span> find_mid(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> rec[maxn];</div><div class="line"><span class="keyword">int</span> now[maxn];</div><div class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        </div><div class="line">        qx = <span class="built_in">list</span>[i], qd = <span class="number">1</span>;</div><div class="line">        modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        </div><div class="line">        rec[<span class="built_in">list</span>[i]] = max(rec[<span class="built_in">list</span>[i]], <span class="number">1</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">2</span>; j &lt;= n; j += <span class="number">2</span>)&#123;</div><div class="line">            </div><div class="line">            qx = <span class="built_in">list</span>[j - <span class="number">1</span>], qd = <span class="number">1</span>;</div><div class="line">            modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">            </div><div class="line">            qx = <span class="built_in">list</span>[j], qd = <span class="number">1</span>;</div><div class="line">            modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">            </div><div class="line">            qx = (j - i + <span class="number">2</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">            </div><div class="line">            <span class="keyword">int</span> k = find_mid(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">            rec[k] = max(rec[k], j - i + <span class="number">1</span>);</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span>(sum));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> maxnum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        maxnum[o] = rec[<span class="built_in">list</span>[l]];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    init(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    init(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    maxnum[o] = max(maxnum[o &lt;&lt; <span class="number">1</span>], maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        <span class="keyword">return</span> maxnum[o];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">int</span> ans = -INF;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) ans = max(ans, get(l, mid, o &lt;&lt; <span class="number">1</span>));</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) ans = max(ans, get(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>));</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    init(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> m;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;qx, &amp;qy);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, get(<span class="number">1</span>, n, <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i].val);</div><div class="line">        line[i].idx = i;</div><div class="line">    &#125;</div><div class="line">    sort(line + <span class="number">1</span>, line + <span class="number">1</span> + n, cmp);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">list</span>[line[i].idx] = i;</div><div class="line">    &#125;</div><div class="line">    init();</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="C-3"><a href="#C-3" class="headerlink" title="C"></a>C</h3><p>理解/规律题，猜结论归纳证明即可<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 64</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line">LL fib[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">preprocess</span><span class="params">()</span></span>&#123;</div><div class="line">    fib[<span class="number">1</span>] = <span class="number">1</span>, fib[<span class="number">2</span>] = <span class="number">2</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= <span class="number">50</span>; i++)&#123;</div><div class="line">        fib[i] = fib[i - <span class="number">1</span>] + fib[i - <span class="number">2</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> ans[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> pos, LL rest)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (pos &gt; n) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (pos == n)&#123;</div><div class="line">        ans[pos] = n;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (rest &gt; fib[n - pos])&#123;</div><div class="line">        ans[pos] = pos + <span class="number">1</span>;</div><div class="line">        ans[pos + <span class="number">1</span>] = pos;</div><div class="line">        work(pos + <span class="number">2</span>, rest - fib[n - pos]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        ans[pos] = pos;</div><div class="line">        work(pos + <span class="number">1</span>, rest);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    preprocess();</div><div class="line">    LL k;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>, &amp;n, &amp;k);</div><div class="line">    work(<span class="number">1</span>, k);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">" %d"</span>, ans[i]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Day5"><a href="#Day5" class="headerlink" title="Day5"></a>Day5</h1><h2 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h2>

	<div class="row">
    <embed src="5.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="问题分析-amp-代码-1"><a href="#问题分析-amp-代码-1" class="headerlink" title="问题分析&amp;代码"></a>问题分析&amp;代码</h2><h3 id="A-4"><a href="#A-4" class="headerlink" title="A"></a>A</h3><p>树型DP，然而数据太弱，大家都乱搞过了。。。我多考虑情况后忘了返回答案直接被卡掉50<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to);</div><div class="line">    h[fr] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> sta[maxn];</div><div class="line"><span class="keyword">int</span> size[maxn];</div><div class="line"><span class="keyword">int</span> bla[maxn];</div><div class="line"><span class="keyword">int</span> fa[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x]) <span class="keyword">continue</span>;</div><div class="line">        fa[op] = x;</div><div class="line">        DFS(op);</div><div class="line">        size[x] += size[op];</div><div class="line">        bla[x] += bla[op];</div><div class="line">    &#125;</div><div class="line">    size[x]++;</div><div class="line">    <span class="keyword">if</span> (sta[x]) bla[x]++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">get_inv</span><span class="params">(LL x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (x == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> ((-M / x * get_inv(M % x) % M) + M) % M;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL dp[maxn][<span class="number">2</span>];</div><div class="line"><span class="keyword">bool</span> vis[maxn][<span class="number">2</span>];</div><div class="line"><span class="function">LL <span class="title">DP</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> op2)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (!op2 &amp;&amp; bla[x] == <span class="number">1</span>) <span class="keyword">return</span> dp[x][op2] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (vis[x][op2]) <span class="keyword">return</span> dp[x][op2];</div><div class="line">    vis[x][op2] = <span class="number">1</span>;</div><div class="line">    LL&amp; ans = dp[x][op2];</div><div class="line">    ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x] || !bla[op]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!sta[op]) &#123;</div><div class="line">            <span class="keyword">if</span> ((DP(op, <span class="number">0</span>) + DP(op, <span class="number">1</span>)) % M == <span class="number">0</span>) k++;</div><div class="line">            <span class="keyword">else</span> ans = ans * ((DP(op, <span class="number">0</span>) + DP(op, <span class="number">1</span>)) % M) % M;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (DP(op, <span class="number">0</span>) % M == <span class="number">0</span>) k++;</div><div class="line">            <span class="keyword">else</span> ans = ans * DP(op, <span class="number">0</span>) % M;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!sta[x] &amp;&amp; !op2)&#123;</div><div class="line">        <span class="keyword">if</span> (k &gt;= <span class="number">2</span>) <span class="keyword">return</span> ans = <span class="number">0</span>;</div><div class="line">        LL ans1 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">                <span class="keyword">int</span> op = e[i].to;</div><div class="line">                <span class="keyword">if</span> (op == fa[x] || !bla[op]) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!sta[op]) <span class="keyword">if</span> ((DP(op, <span class="number">0</span>) + DP(op, <span class="number">1</span>)) % M == <span class="number">0</span>) <span class="keyword">return</span> ans = ans * DP(op, <span class="number">0</span>) % M;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (DP(op, <span class="number">0</span>) % M == <span class="number">0</span>) <span class="keyword">return</span> ans = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">                <span class="keyword">int</span> op = e[i].to;</div><div class="line">                <span class="keyword">if</span> (op == fa[x] || !bla[op]) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!sta[op]) ans1 = (ans1 + ans * get_inv((DP(op, <span class="number">0</span>) + DP(op, <span class="number">1</span>)) % M) % M * DP(op, <span class="number">0</span>) % M) % M;</div><div class="line">                <span class="keyword">else</span> ans1 = (ans1 + ans) % M;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> ans = ans1;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k &gt; <span class="number">0</span>) <span class="keyword">return</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">        Add_Edge(i, x);</div><div class="line">        Add_Edge(x, i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;sta[i]);</div><div class="line">    DFS(<span class="number">0</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, DP(<span class="number">0</span>, <span class="number">0</span>));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>要注意上文求逆元时对于零的判断（有可能答案模完后为0），这就是我多考虑的情况，然而。。。</p>
<h3 id="B-4"><a href="#B-4" class="headerlink" title="B"></a>B</h3><p>平摊分析线段树，直接维护最大值，最小值，一样就更新答案并返回，否则暴力继续向下找<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 131072</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> <span class="built_in">set</span>[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> maxnum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> minnum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</div><div class="line">    maxnum[o] = max(maxnum[o &lt;&lt; <span class="number">1</span>], maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">    minnum[o] = min(minnum[o &lt;&lt; <span class="number">1</span>], minnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">set</span>[o] != <span class="number">-1</span> &amp;&amp; l != r)&#123;</div><div class="line">        <span class="built_in">set</span>[o &lt;&lt; <span class="number">1</span>] = <span class="built_in">set</span>[o];</div><div class="line">        maxnum[o &lt;&lt; <span class="number">1</span>] = <span class="built_in">set</span>[o];</div><div class="line">        minnum[o &lt;&lt; <span class="number">1</span>] = <span class="built_in">set</span>[o];</div><div class="line">        </div><div class="line">        <span class="built_in">set</span>[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = <span class="built_in">set</span>[o];</div><div class="line">        maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = <span class="built_in">set</span>[o];</div><div class="line">        minnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = <span class="built_in">set</span>[o];</div><div class="line">        </div><div class="line">        <span class="built_in">set</span>[o] = <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="built_in">set</span>[o] = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        maxnum[o] = minnum[o] = line[l];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    init(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    init(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        <span class="keyword">if</span> (maxnum[o] == minnum[o])&#123;</div><div class="line">            <span class="keyword">if</span> (maxnum[o] == qd) <span class="keyword">return</span> r - l + <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> get(l, mid, o &lt;&lt; <span class="number">1</span>) + get(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) ans += get(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) ans += get(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        <span class="built_in">set</span>[o] = qd;</div><div class="line">        maxnum[o] = minnum[o] = qd;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) modify(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) modify(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_point</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> maxnum[o];</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) <span class="keyword">return</span> get_point(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> get_point(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> m;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">    &#125;</div><div class="line">    init(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> q, x, y;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        qx = x;</div><div class="line">        <span class="keyword">int</span> k = get_point(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        qx = x + <span class="number">1</span>, qy = y, qd = k;</div><div class="line">        <span class="keyword">int</span> now = get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, now);</div><div class="line">        qx = x + <span class="number">1</span>, qy = y, qd = k;</div><div class="line">        modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然而考场写线段树套平衡树直接GG。。。</p>
<h3 id="C-4"><a href="#C-4" class="headerlink" title="C"></a>C</h3><p>乱搞能A系列，数据真是太弱了。。。然而正解写挂爆零，下面给出乱搞做法，就不说怎么做的了。。。正解每次从左向右更新函数最大值所对应的区间，只有可能在交点处出现交接，所以暴力求交点最大值然后向右继续寻找即可<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000000000000005ll</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, q;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">save</span>&#123;</span></div><div class="line">    LL a, b, c;</div><div class="line">    save(LL a, LL b, LL c) : a(a), b(b), c(c)&#123;&#125;</div><div class="line">    save()&#123;&#125;</div><div class="line">&#125;s1[maxn], s2[maxn], s3[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(save a, save b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (a.a == b.a) ? ((a.b == b.b) ? a.c &lt; b.c : a.b &lt; b.b) : a.a &lt; b.a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(save a, save b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (a.b == b.b) ? ((a.a == b.a) ? a.c &lt; b.c : a.a &lt; b.a) : a.b &lt; b.b;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp3</span><span class="params">(save a, save b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (a.c == b.c) ? ((a.a == b.a) ? a.b &lt; b.b : a.a &lt; b.a) : a.c &lt; b.c;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">bool</span> f = <span class="number">1</span>;<span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch) &amp;&amp; ch != <span class="string">'-'</span>) ch = getchar();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = getchar();x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    sort(s1 + <span class="number">1</span>, s1 + <span class="number">1</span> + n, cmp1);</div><div class="line">    sort(s2 + <span class="number">1</span>, s2 + <span class="number">1</span> + n, cmp2);</div><div class="line">    sort(s3 + <span class="number">1</span>, s3 + <span class="number">1</span> + n, cmp3);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">cal</span><span class="params">(LL u, save i)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> i.a * u * u + i.b * u + i.c;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(LL u)</span></span>&#123;</div><div class="line">    LL maxnum = -INF;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = max(<span class="number">1</span>, n - <span class="number">30</span>); i &lt;= n; i++)&#123;</div><div class="line">        maxnum = max(maxnum, cal(u, s1[i]));</div><div class="line">        <span class="keyword">if</span> (u &gt; <span class="number">0</span>) maxnum = max(maxnum, cal(u, s2[i]));</div><div class="line">        <span class="keyword">else</span> maxnum = max(maxnum, cal(u, s2[n - i + <span class="number">1</span>]));</div><div class="line">        maxnum = max(maxnum, cal(u, s3[i]));</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, maxnum);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    read(n), read(q);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        read(s1[i].a), read(s1[i].b), read(s1[i].c);</div><div class="line">        s2[i] = s3[i] = s1[i];</div><div class="line">    &#125;</div><div class="line">    init();</div><div class="line">    LL u;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++)&#123;</div><div class="line">        read(u);</div><div class="line">        query(u);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Day6"><a href="#Day6" class="headerlink" title="Day6"></a>Day6</h1><h2 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h2>

	<div class="row">
    <embed src="6.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="题目分析-amp-代码-3"><a href="#题目分析-amp-代码-3" class="headerlink" title="题目分析&amp;代码"></a>题目分析&amp;代码</h2><h3 id="A-5"><a href="#A-5" class="headerlink" title="A"></a>A</h3><p>Kruskal思想，对边排序然后并查集维护，依次更新即可<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m, k;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">query</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> id, x, w, ans;</div><div class="line">    query(<span class="keyword">int</span> id, <span class="keyword">int</span> x, <span class="keyword">int</span> w) : id(id), x(x), w(w)&#123;ans = <span class="number">0</span>;&#125;</div><div class="line">    query()&#123;ans = <span class="number">0</span>;&#125;</div><div class="line">&#125;q[maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x, y, w;</div><div class="line">    edge(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w) : x(x), y(y), w(w)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> ufs[maxn];</div><div class="line"><span class="keyword">int</span> size[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> ufs[x] = (ufs[x] == x) ? x : find_root(ufs[x]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ufs[i] = i, size[i] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> now;</div><div class="line">    <span class="keyword">int</span> cur = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)&#123;</div><div class="line">        now = q[i].w;</div><div class="line">        <span class="keyword">while</span> (cur &lt;= m &amp;&amp; e[cur].w &lt;= now)&#123;</div><div class="line">            <span class="keyword">int</span> x = find_root(e[cur].x);</div><div class="line">            <span class="keyword">int</span> y = find_root(e[cur].y);</div><div class="line">            <span class="keyword">if</span> (x != y)&#123;</div><div class="line">                <span class="keyword">if</span> (size[x] &gt; size[y]) swap(x, y);</div><div class="line">                ufs[x] = y;</div><div class="line">                size[y] += size[x];</div><div class="line">            &#125;</div><div class="line">            cur++;</div><div class="line">        &#125;</div><div class="line">        q[i].ans = size[find_root(q[i].x)];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(edge a, edge b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a.w &lt; b.w;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(query a, query b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a.w &lt; b.w;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp3</span><span class="params">(query a, query b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a.id &lt; b.id;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k);</div><div class="line">    <span class="keyword">int</span> x, y, w;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;w);</div><div class="line">        e[i] = edge(x, y, w);</div><div class="line">    &#125;</div><div class="line">    sort(e + <span class="number">1</span>, e + <span class="number">1</span> + m, cmp1);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;w);</div><div class="line">        q[i] = query(i, x, w);</div><div class="line">    &#125;</div><div class="line">    sort(q + <span class="number">1</span>, q + <span class="number">1</span> + k, cmp2);</div><div class="line">    work();</div><div class="line">    sort(q + <span class="number">1</span>, q + <span class="number">1</span> + k, cmp3);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, q[i].ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="B-5"><a href="#B-5" class="headerlink" title="B"></a>B</h3><p>暴力能A系列。。。数据真是太弱了，正解就是模拟，但是需要用数据结构维护一下，支持删除任意一个元素与插入，所以我们使用<strong>双平衡树</strong>，两棵树内容相同，一个以距离破产的时间为第一关键字，位置为第二关键字排序，另一个以位置为第一关键字排序（昨天晚上发明的东西，感觉非常强大，这样就可以在第一个平衡树里面以位置为键值删除元素了）</p>
<p>同时注意<strong>三目运算符的运算顺序为从右向左，且它的优先级小于所有算术运算符</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 105</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ele</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> h, v, t, id;</div><div class="line">    ele(<span class="keyword">int</span> h, <span class="keyword">int</span> v, <span class="keyword">int</span> t, <span class="keyword">int</span> id) : h(h), v(v), t(t), id(id)&#123;&#125;</div><div class="line">    ele()&#123;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp1</span>&#123;</span></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(ele a, ele b)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> ka, kb;</div><div class="line">        <span class="keyword">if</span> (a.h &lt;= <span class="number">0</span>) ka = a.t;</div><div class="line">        <span class="keyword">else</span> ka = (a.v &gt; <span class="number">0</span>) ? a.t + (a.h - <span class="number">1</span>) / a.v + <span class="number">1</span> : INF;</div><div class="line">        <span class="keyword">if</span> (b.h &lt;= <span class="number">0</span>) kb = b.t;</div><div class="line">        <span class="keyword">else</span> kb = (b.v &gt; <span class="number">0</span>) ? b.t + (b.h - <span class="number">1</span>) / b.v + <span class="number">1</span> : INF;</div><div class="line">        <span class="keyword">if</span> (ka == kb) <span class="keyword">return</span> a.id &lt; b.id;</div><div class="line">        <span class="keyword">return</span> ka &lt; kb;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp2</span>&#123;</span></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(ele a, ele b)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> a.id &lt; b.id;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">set</span>&lt;ele, cmp1&gt; s1;</div><div class="line"><span class="built_in">set</span>&lt;ele, cmp1&gt; :: iterator it1;</div><div class="line"><span class="built_in">set</span>&lt;ele, cmp2&gt; s2;</div><div class="line"><span class="built_in">set</span>&lt;ele, cmp2&gt; :: iterator it2;</div><div class="line"></div><div class="line"><span class="keyword">int</span> f[maxm][maxm];</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> l[maxn];</div><div class="line"><span class="keyword">int</span> r[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</div><div class="line">        it1 = s1.begin();</div><div class="line">        <span class="keyword">int</span> op1 =  it1 -&gt; id;</div><div class="line">        r[l[op1]] = r[op1];</div><div class="line">        l[r[op1]] = l[op1];</div><div class="line">        <span class="keyword">int</span> now;</div><div class="line">        <span class="keyword">if</span> (it1 -&gt; h &lt;= <span class="number">0</span>) now = it1 -&gt; t;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (it1 -&gt; v == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">else</span> now = it1 -&gt; t + (it1 -&gt; h - <span class="number">1</span>) / it1 -&gt; v + <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (l[op1] &gt;= <span class="number">1</span>)&#123;</div><div class="line">            it2 = s2.lower_bound(ele(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, l[op1]));</div><div class="line">            <span class="keyword">int</span> op2 = l[op1];</div><div class="line">            ele op = *it2;</div><div class="line">            op.h -= it2 -&gt; v * (now - it2 -&gt; t);</div><div class="line">            op.v = ((l[op2] == <span class="number">0</span>) ? <span class="number">0</span> : f[line[l[op2]]][line[op2]]) + ((r[op2] == n + <span class="number">1</span>) ? <span class="number">0</span> : f[line[r[op2]]][line[op2]]);</div><div class="line">            op.t = now;</div><div class="line">            s1.erase(*it2);</div><div class="line">            s2.erase(it2);</div><div class="line">            s1.insert(op);</div><div class="line">            s2.insert(op);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (r[op1] &lt;= n)&#123;</div><div class="line">            it2 = s2.lower_bound(ele(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, r[op1]));</div><div class="line">            <span class="keyword">int</span> op2 = r[op1];</div><div class="line">            ele op = *it2;</div><div class="line">            op.h -= it2 -&gt; v * (now - it2 -&gt; t);</div><div class="line">            op.v = ((l[op2] == <span class="number">0</span>) ? <span class="number">0</span> : f[line[l[op2]]][line[op2]]) + ((r[op2] == n + <span class="number">1</span>) ? <span class="number">0</span> : f[line[r[op2]]][line[op2]]);</div><div class="line">            op.t = now;</div><div class="line">            s1.erase(*it2);</div><div class="line">            s2.erase(it2);</div><div class="line">            s1.insert(op);</div><div class="line">            s2.insert(op);</div><div class="line">        &#125;</div><div class="line">        s2.erase(*it1);</div><div class="line">        s1.erase(it1);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, line[s1.begin() -&gt; id]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;<span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (ch != <span class="string">'-'</span> &amp;&amp; !<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    read(m), read(n);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</div><div class="line">            read(f[i][j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        read(line[i]);</div><div class="line">        l[i] = i - <span class="number">1</span>;</div><div class="line">        r[i] = i + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> now = ((l[i] == <span class="number">0</span>) ? <span class="number">0</span> : f[line[l[i]]][line[i]]) + ((r[i] == n + <span class="number">1</span>) ? <span class="number">0</span> : f[line[r[i]]][line[i]]);</div><div class="line">        s1.insert(ele(<span class="number">1</span>, now, <span class="number">0</span>, i));</div><div class="line">        s2.insert(ele(<span class="number">1</span>, now, <span class="number">0</span>, i));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="C-5"><a href="#C-5" class="headerlink" title="C"></a>C</h3><p>暴力能A系列。。。感觉今天比赛就是暴力比赛。。。数据真是太弱了，正解是FFT，两边算完以后FFT一下，如果仔细想了应该挺好理解<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pi 3.141592653589793</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 3005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">complex</span>&#123;</span></div><div class="line">    <span class="keyword">double</span> r, i;</div><div class="line">    <span class="keyword">complex</span>(<span class="keyword">double</span> r, <span class="keyword">double</span> i) : r(r), i(i)&#123;&#125;</div><div class="line">    <span class="keyword">complex</span>()&#123;&#125;</div><div class="line">&#125;com;</div><div class="line"></div><div class="line">com <span class="keyword">operator</span> + (com a, com b)&#123;</div><div class="line">    <span class="keyword">return</span> com(a.r + b.r, a.i + b.i);</div><div class="line">&#125;</div><div class="line">com <span class="keyword">operator</span> - (com a, com b)&#123;</div><div class="line">    <span class="keyword">return</span> com(a.r - b.r, a.i - b.i);</div><div class="line">&#125;</div><div class="line">com <span class="keyword">operator</span> * (com a, com b)&#123;</div><div class="line">    <span class="keyword">return</span> com(a.r * b.r - a.i * b.i, a.r * b.i + a.i * b.r);</div><div class="line">&#125;</div><div class="line">com <span class="keyword">operator</span> / (com a, <span class="keyword">int</span> k)&#123;</div><div class="line">    <span class="keyword">return</span> com(a.r / k, a.i / k);</div><div class="line">&#125;</div><div class="line"><span class="function">com <span class="title">ex</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> com(<span class="built_in">cos</span>(x), <span class="built_in">sin</span>(x));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> rev[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> bit)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span> &lt;&lt; bit); i++)&#123;</div><div class="line">        rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(com* a, <span class="keyword">int</span> n, <span class="keyword">int</span> dft)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span> (rev[i] &gt; i) swap(a[rev[i]], a[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> step = <span class="number">1</span>; step &lt; n; step &lt;&lt;= <span class="number">1</span>)&#123;</div><div class="line">        com wn = ex(pi * dft / step);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j += step &lt;&lt; <span class="number">1</span>)&#123;</div><div class="line">            com wnk = com(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = j; i &lt; j + step; i++)&#123;</div><div class="line">                com x = a[i];</div><div class="line">                com y = a[i + step] * wnk;</div><div class="line">                a[i] = x + y;</div><div class="line">                a[i + step] = x - y;</div><div class="line">                wnk = wnk * wn;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (dft == <span class="number">-1</span>) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) a[i] = a[i] / n;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> n, q;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> save[maxn];</div><div class="line">com a[maxn];</div><div class="line">com b[maxn];</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">recover</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; i++) a[i] = b[i] = com(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> rec[maxn][maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (line[i] &gt; n) <span class="keyword">continue</span>;</div><div class="line">        recover();</div><div class="line">        <span class="keyword">int</span> l1 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= <span class="number">1</span>; j--)&#123;</div><div class="line">            <span class="keyword">if</span> (line[j] &gt;= line[i] &amp;&amp; i != j) l1++;</div><div class="line">            a[l1].r++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> l2 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (line[j] &gt; line[i]) l2++;</div><div class="line">            b[l2].r++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> len = l1 + l2 + <span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> s = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (len)&#123;</div><div class="line">            s++;</div><div class="line">            len &gt;&gt;= <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        len = (<span class="number">1</span> &lt;&lt; s);</div><div class="line">        init(s);</div><div class="line">        FFT(a, len, <span class="number">1</span>);</div><div class="line">        FFT(b, len, <span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) a[j] = a[j] * b[j];</div><div class="line">        FFT(a, len, <span class="number">-1</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) rec[line[i]][j + <span class="number">1</span>] += (<span class="keyword">int</span>) (a[j].r + <span class="number">0.5</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (ch != <span class="string">'-'</span> &amp;&amp; !<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = getchar();</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))&#123;</div><div class="line">        x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>;</div><div class="line">        ch = getchar();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    read(n), read(q);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(line[i]);</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> x, k;</div><div class="line">    read(k), read(x);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, rec[x][k]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= q; i++)&#123;</div><div class="line">        read(k), read(x);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n%d"</span>, rec[x][k]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Day7"><a href="#Day7" class="headerlink" title="Day7"></a>Day7</h1><h2 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h2>

	<div class="row">
    <embed src="7.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="题目分析-amp-代码-4"><a href="#题目分析-amp-代码-4" class="headerlink" title="题目分析&amp;代码"></a>题目分析&amp;代码</h2><h3 id="A-6"><a href="#A-6" class="headerlink" title="A"></a>A</h3><p>构造题，从大到小搞就可以<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> ans[maxn];</div><div class="line"><span class="keyword">int</span> s[<span class="number">10</span>];</div><div class="line">LL rest;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ct = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x)&#123;</div><div class="line">        s[ct++] = x % <span class="number">10</span>;</div><div class="line">        x /= <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = ct - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</div><div class="line">        <span class="built_in">putchar</span>(<span class="string">'0'</span> + s[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_ans</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">1</span>;</div><div class="line">    ans[<span class="number">0</span>] = n;</div><div class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = n - <span class="number">1</span>; l &gt;= r; l--)&#123;</div><div class="line">        <span class="keyword">while</span> (r &lt; l &amp;&amp; l - r &lt;= rest) ans[cnt] = r, rest -= l - r, cnt++, r++;</div><div class="line">        <span class="keyword">if</span> (r == l &amp;&amp; rest != <span class="number">0</span>)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"-1"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        ans[cnt++] = l;</div><div class="line">    &#125;</div><div class="line">    print(ans[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; cnt; i++)&#123;</div><div class="line">        <span class="built_in">putchar</span>(<span class="string">' '</span>);</div><div class="line">        print(ans[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>, &amp;n, &amp;rest);</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"-1"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    get_ans();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="B-6"><a href="#B-6" class="headerlink" title="B"></a>B</h3><p>贡献法+元素定序，可以使用<strong>双关键字</strong>或<strong>左等右不等方法</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x &amp; -x</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">num</span>&#123;</span></div><div class="line">    LL val, idx;</div><div class="line">    num(LL val, LL idx) : val(val), idx(idx)&#123;&#125;</div><div class="line">    num()&#123;&#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> num b) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> (val == b.val) ? (idx &lt; b.idx) : (val &lt; b.val);</div><div class="line">    &#125;</div><div class="line">&#125;sline[maxn];</div><div class="line"></div><div class="line">LL n, k, line[maxn];</div><div class="line">LL ifac[<span class="number">105</span>];</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">get_inv</span><span class="params">(LL x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> (-(M / x) * get_inv(M % x) % M + M) % M;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    ifac[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt; <span class="number">105</span>; i++)&#123;</div><div class="line">        ifac[i] = ifac[i - <span class="number">1</span>] * get_inv(i) % M;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">cal</span><span class="params">(LL n, LL m)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (m &lt; n) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    LL ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (LL i = m; i &gt; m - n; i--)&#123;</div><div class="line">        ans = ans * i % M;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans * ifac[n] % M;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL pre[maxn];</div><div class="line">LL suf[maxn];</div><div class="line"></div><div class="line"><span class="comment">/*-------------- Pre-Fenwick Tree -----------------------*/</span></div><div class="line">LL c[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(LL x, LL v)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span> (x &lt;= n)&#123;</div><div class="line">        c[x] += v;</div><div class="line">        x += lowbit(x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">get</span><span class="params">(LL x)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x)&#123;</div><div class="line">        ans += c[x];</div><div class="line">        x -= lowbit(x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*-------------- Pre-Fenwick Tree -----------------------*/</span></div><div class="line"></div><div class="line">LL ihas[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        add(line[i], <span class="number">1</span>);</div><div class="line">        pre[i] = get(line[i] - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span>(c));</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (LL i = n; i &gt;= <span class="number">1</span>; i--)&#123;</div><div class="line">        add(line[i], <span class="number">1</span>);</div><div class="line">        suf[i] = get(line[i] - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        ans = (ans + cal(k - <span class="number">1</span>, pre[i] + suf[i]) * (LL)ihas[line[i]] % M) % M;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;k);</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;line[i]);</div><div class="line">        sline[i] = num(line[i], i);</div><div class="line">    &#125;</div><div class="line">    sort(sline + <span class="number">1</span>, sline + <span class="number">1</span> + n);</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        LL k = lower_bound(sline + <span class="number">1</span>, sline + <span class="number">1</span> + n, num(line[i], i)) - sline;</div><div class="line">        ihas[k] = line[i];</div><div class="line">        line[i] = k;</div><div class="line">    &#125;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="C-6"><a href="#C-6" class="headerlink" title="C"></a>C</h3><p>二叉搜索树性质：跑中序遍历，转化为经典问题的变式，详情见代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">num</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> val, idx;</div><div class="line">    num(<span class="keyword">int</span> val, <span class="keyword">int</span> idx) : val(val), idx(idx)&#123;&#125;</div><div class="line">    num()&#123;&#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> num b) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> (val == b.val) ? (idx &lt; b.idx) : (val &lt; b.val);</div><div class="line">    &#125;</div><div class="line">&#125;sline[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> ch[maxn][<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> val[maxn];</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">traval</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (ch[x][<span class="number">0</span>]) traval(ch[x][<span class="number">0</span>]);</div><div class="line">    line[++cnt] = val[x];</div><div class="line">    <span class="keyword">if</span> (ch[x][<span class="number">1</span>]) traval(ch[x][<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    traval(<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) line[i] -= i;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) sline[i] = num(line[i], i);</div><div class="line">    sort(sline + <span class="number">1</span>, sline + <span class="number">1</span> + n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </div><div class="line">        line[i] = lower_bound(sline + <span class="number">1</span>, sline + <span class="number">1</span> + n, num(line[i], i)) - sline;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) f[i] = INF;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> k = lower_bound(f, f + n + <span class="number">1</span>, line[i]) - f;</div><div class="line">        k--;</div><div class="line">        ans = max(ans, k + <span class="number">1</span>);</div><div class="line">        f[k + <span class="number">1</span>] = min(f[k + <span class="number">1</span>], line[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, n - ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">int</span> fa, d;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;val[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;fa, &amp;d);</div><div class="line">        ch[fa][d] = i;</div><div class="line">    &#125;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Day8"><a href="#Day8" class="headerlink" title="Day8"></a>Day8</h1><h2 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h2>

	<div class="row">
    <embed src="8.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="题目分析-amp-代码-5"><a href="#题目分析-amp-代码-5" class="headerlink" title="题目分析&amp;代码"></a>题目分析&amp;代码</h2><h3 id="A-7"><a href="#A-7" class="headerlink" title="A"></a>A</h3><p>直接DP，分类讨论情况即可<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> dp[maxn][<span class="number">2</span>][<span class="number">2</span>];</div><div class="line"><span class="keyword">bool</span> vis[maxn][<span class="number">2</span>][<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> op, <span class="keyword">int</span> op2)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (pos == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (vis[pos][op][op2]) <span class="keyword">return</span> dp[pos][op][op2];</div><div class="line">    vis[pos][op][op2] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span>&amp; ans = dp[pos][op][op2];</div><div class="line">    <span class="keyword">if</span> (op2)&#123;</div><div class="line">        <span class="keyword">if</span> (pos - <span class="number">1</span> &gt;= <span class="number">1</span> &amp;&amp; line[pos - <span class="number">1</span>] &gt;= line[pos])&#123;</div><div class="line">            <span class="keyword">return</span> ans = DP(pos - <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>) + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> ans = DP(pos - <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>) + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">if</span> (pos - <span class="number">1</span> &gt;= <span class="number">1</span> &amp;&amp; line[pos - <span class="number">1</span>] &gt;= line[pos])&#123;</div><div class="line">            <span class="keyword">if</span> (op) <span class="keyword">return</span> ans = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> ((pos + <span class="number">1</span>) &lt;= n &amp;&amp; line[pos + <span class="number">1</span>] &lt;= line[pos - <span class="number">1</span>] + <span class="number">1</span>)&#123;</div><div class="line">                <span class="keyword">int</span> modify = line[pos] - <span class="number">1</span>;</div><div class="line">                <span class="keyword">if</span> (pos - <span class="number">2</span> &gt;= <span class="number">1</span> &amp;&amp; line[pos - <span class="number">2</span>] &gt;= modify) <span class="keyword">return</span> ans = <span class="number">2</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">return</span> ans = DP(pos - <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>) + <span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> ans = DP(pos - <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>) + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> ans = DP(pos - <span class="number">1</span>, op, <span class="number">0</span>) + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">readin</span><span class="params">(<span class="keyword">int</span>&amp; x)</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> maxnum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        maxnum = max(maxnum, DP(i, <span class="number">0</span>, <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, maxnum);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    readin(n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)  readin(line[i]);</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="B-7"><a href="#B-7" class="headerlink" title="B"></a>B</h3><p>规律题<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 500005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> idx[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">readin</span><span class="params">(<span class="keyword">int</span>&amp; x)</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">putout</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">' '</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'0'</span> + x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inter</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> l, r, ty;</div><div class="line">    inter(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ty) : l(l), r(r), ty(ty)&#123;&#125;</div><div class="line">    inter()&#123;&#125;</div><div class="line">&#125;save[maxn];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ans[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    line[<span class="number">0</span>] = line[<span class="number">1</span>];</div><div class="line">    line[n + <span class="number">1</span>] = line[n];</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + <span class="number">1</span>; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (line[i] == line[i + <span class="number">1</span>])&#123;</div><div class="line">            <span class="keyword">int</span> l = i, r = i + <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> op = line[i];</div><div class="line">            i++;</div><div class="line">            <span class="keyword">while</span> (i + <span class="number">1</span> &lt;= n + <span class="number">1</span> &amp;&amp; line[i + <span class="number">1</span>] == op) r++, i++;</div><div class="line">            save[++cnt] = inter(l, r, op);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> cur = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = save[i].l; j &lt;= save[i].r; j++) ans[j] = save[i].ty;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (save[i].l &gt; cur + <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">2</span>)&#123;</div><div class="line">                <span class="keyword">if</span> (save[i - <span class="number">1</span>].ty &amp;&amp; save[i].ty) &#123;</div><div class="line">                    <span class="keyword">int</span> con = (save[i].l - cur - <span class="number">1</span> + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">                    num = max(num, con);</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = cur + <span class="number">1</span>; j &lt; save[i].l; j++) ans[j] = <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (save[i - <span class="number">1</span>].ty)&#123;</div><div class="line">                    <span class="keyword">int</span> con = (save[i].l - cur - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">                    num = max(num, con);</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = cur + <span class="number">1</span>; j &lt;= cur + con; j++) ans[j] = <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (save[i].ty)&#123;</div><div class="line">                    <span class="keyword">int</span> con = (save[i].l - cur - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">                    num = max(num, con);</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = save[i].l - <span class="number">1</span>; j &gt;= save[i].l - con; j--) ans[j] = <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">int</span> con = (save[i].l - cur - <span class="number">1</span> + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">                    num = max(num, con);</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = cur + <span class="number">1</span>; j &lt; save[i].l; j++) ans[j] = <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        cur = save[i].r;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n%d"</span>, num, ans[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) putout(ans[i]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    readin(n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) readin(line[i]);</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="C-7"><a href="#C-7" class="headerlink" title="C"></a>C</h3><p>倍增法LCA查找，讨论各种情况<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 300005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">readin</span><span class="params">(<span class="keyword">int</span>&amp; x)</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> fa[maxn][<span class="number">20</span>];</div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">int</span> size[maxn];</div><div class="line"><span class="keyword">int</span> n; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x][<span class="number">0</span>]) <span class="keyword">continue</span>;</div><div class="line">        d[op] = d[x] + <span class="number">1</span>;</div><div class="line">        fa[op][<span class="number">0</span>] = x;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">20</span>; i++)&#123;</div><div class="line">            fa[op][i] = fa[fa[op][i - <span class="number">1</span>]][i - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        DFS(op);</div><div class="line">        size[x] += size[op];</div><div class="line">    &#125;</div><div class="line">    size[x]++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    d[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    DFS(<span class="number">1</span>);</div><div class="line">    fa[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == y)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> lca;</div><div class="line">    <span class="keyword">if</span> (d[x] &lt; d[y]) swap(x, y);</div><div class="line">    <span class="keyword">int</span> k = d[x] - d[y];</div><div class="line">    <span class="keyword">int</span> con = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> temx = x;</div><div class="line">    <span class="keyword">int</span> temy = y;</div><div class="line">    <span class="keyword">while</span> (k)&#123;</div><div class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) x = fa[x][con];</div><div class="line">        k &gt;&gt;= <span class="number">1</span>;</div><div class="line">        con++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (x == y) lca = x;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">int</span> now = <span class="number">19</span>;</div><div class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</div><div class="line">            <span class="keyword">while</span> (now &gt;= <span class="number">0</span> &amp;&amp; fa[x][now] == fa[y][now]) now--;</div><div class="line">            <span class="keyword">if</span> (now == <span class="number">-1</span>)&#123;</div><div class="line">                lca = fa[x][<span class="number">0</span>];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                x = fa[x][now];</div><div class="line">                y = fa[y][now];</div><div class="line">            &#125;</div><div class="line">            now = <span class="number">19</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> dis = (d[temx] + d[temy]) - (d[lca] &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (dis &amp; <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (d[temx] - d[lca] == d[temy] - d[lca])&#123;</div><div class="line">        <span class="keyword">int</span> rem = size[x] + size[y];</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n - rem);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    x = temx, y = temy;</div><div class="line">    <span class="keyword">if</span> (d[x] - d[lca] &lt; (dis &gt;&gt; <span class="number">1</span>)) swap(x, y);</div><div class="line">    dis &gt;&gt;= <span class="number">1</span>;</div><div class="line">    dis--;</div><div class="line">    con = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (dis)&#123;</div><div class="line">        <span class="keyword">if</span> (dis &amp; <span class="number">1</span>) x = fa[x][con];</div><div class="line">        dis &gt;&gt;= <span class="number">1</span>;</div><div class="line">        con++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> rem = size[x];</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, size[fa[x][<span class="number">0</span>]] - rem);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    readin(n);</div><div class="line">    <span class="keyword">int</span> x, y, m;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</div><div class="line">        readin(x), readin(y);</div><div class="line">        Add_Edge(x, y);</div><div class="line">    &#125;</div><div class="line">    init();</div><div class="line">    readin(m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        readin(x), readin(y);</div><div class="line">        work(x, y);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这就是这几天的测试AC代码，感觉自己确实还是存在一些知识的欠缺和问题，希望能够通过这次集训有所进步吧</p>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;终于把题改完了。。。下面把代码放在上面，一是作为纪念，二可用来复习，同时也会说明相关编程细节&lt;br&gt;
    
    </summary>
    
    
      <category term="多校联训" scheme="https://goseqh.tk/tags/%E5%A4%9A%E6%A0%A1%E8%81%94%E8%AE%AD/"/>
    
      <category term="NOIP模拟赛" scheme="https://goseqh.tk/tags/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>东北师大附中多校联训总结</title>
    <link href="https://goseqh.tk/2017/08/14/%E4%B8%9C%E5%8C%97%E5%B8%88%E5%A4%A7%E9%99%84%E4%B8%AD%E5%A4%9A%E6%A0%A1%E8%81%94%E8%AE%AD%E6%80%BB%E7%BB%93/"/>
    <id>https://goseqh.tk/2017/08/14/东北师大附中多校联训总结/</id>
    <published>2017-08-14T03:50:33.000Z</published>
    <updated>2017-08-15T00:58:29.282Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>因为我太弱，所以在这段时间里去东北师大附中参加了一个八天的联训。。。下面就抒(kou)发(hu)一下这次联训的相关感想，记点流水账<br><a id="more"></a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>感觉这次联训还是十分地有意义的，学到了不少的东西（明明没去的时候还那么鄙视来着），其中最有价值的就是模拟参赛时获取的许多比赛经验与策略方法，我认为这是我个人最大的提升</p>
<p>但是讲的东西其实也不是那么简单，总之来说就是参差不齐吧，感觉好像不太像是NOIP这个层级的内容，所以应该就是用来在NOIP时扩展思路的，同时也为接下来的省选和国赛打基础，相关的训练内容会在另一篇文章中进行发布，近期也会写许多的算法类文章，因为发现自己真的是太弱了。。。所以很有必要对一些知识点进行一些明确的归纳与总结</p>
<p>首先置顶一个考试策略体系：</p>
<ul>
<li>二十分钟原则：即每道题目如果二十分钟想不出来，无论想到哪里都要换一道题，不要在一道题上搞太久（当然，这是对于NOIP来说，对于其他比赛就要适当调整思考时间）</li>
<li>检查题目原则：如果把所有题都写（A）完（K）了，不要安然卧于榻上，应该先仔细检查，静态查错， 如果时间足够进行对拍，大数据小数据都应该包含，防止意外爆零</li>
<li>暴力先行原则：这个我贯彻的其实不是很好（所以有一天死的很惨），主要适用于难度高的比赛，如果评估自己很难短时内想到正解，就要打尽可能多的暴力，不要考试快结束再这样做</li>
<li>心态：考试时要放松心态，给自己一定的心理暗示，屏蔽外界干扰因素，像平常练习一样考试，这是非常重要的</li>
<li>思考：思考题目时要抓住<strong>主要问题</strong>，分析<strong>问题特征</strong>，以此寻找问题的突破口</li>
</ul>
<p>这就是我这几天的一个重要成果，还有更多的考试经验，放在每天的总结之中</p>
<p>下面开始进行总结：</p>
<h1 id="Day0"><a href="#Day0" class="headerlink" title="Day0"></a>Day0</h1><p>报到日，刚来的时候找宾馆找了好久。。。<del>自驾游就是闹心</del>终于安家落户以后，就到东北师大附中报到，然后回宾馆打了一场百度之星的资格赛就睡觉了</p>
<h1 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h1><p>听说今天有入营测试，不知道大家都是什么水平。。。</p>
<h2 id="比赛经过"><a href="#比赛经过" class="headerlink" title="比赛经过"></a>比赛经过</h2><p>发题挺早的，提前十分钟就放上去了，先是看第一题，然后好像挺难的样子，推$O(1)$的公式推了半天，然后突然看到数据范围。。。就直接$O(n\log n)$水过了，于是看第二题。基本就是一个简单的DP，但是我用树状数组优化了一下，跑了$O(n\log n)$，然而正解是$O(n)$的，各种情况讨论还不如我这样写。。。好像前两题挺快搞过了，然后就一直想第三题，发现第三题好像很难的样子，从树剖想到点分好像都没什么思路，于是写了一个巨长的树剖暴力交上去了，搞到了$20$分</p>
<p>于是今天似乎就是$220$了？最后看结果，第一题居然被卡掉了$30$，最后$190$，调了许久，终于被GGN大佬的一句话点醒：数组开小了一位。巧的是他也是这个问题，然后我们一起被卡了$30$。。。</p>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ul>
<li>不要把简单题想得太难，题面一定要看全（包括数据范围，提示什么的）</li>
<li>数组一定要开够空间，空间紧的时候一定要进行细致精密的内存占用计算，否则就会很惨。。。（其实今天只是被卡掉$30$还真是很幸运）</li>
<li>ST表需要预处理2的幂，还需要预处理每个数对2取对数后向下取整的结果，否则很容易超时</li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>讲课忘了带录音笔了，jcy大佬讲的太快有点没跟上，还好最后想明白了</p>
<p><del>考完以后老师劝同学们仔细选择层次，突然一种要被劝退的预感。。。</del></p>
<p>下午就是ljss大佬讲线代加各种变换，虽然以前都大致看过，但到后来还是听得一脸GG。。。留坑待补</p>
<h1 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h1><h2 id="比赛经过-1"><a href="#比赛经过-1" class="headerlink" title="比赛经过"></a>比赛经过</h2><p>发题又是挺早的，于是开始搞第一题，第一反应就是用KMP乱搞，正解其实也是，但是不知为什么，考场上好像KMP的一些性质有些忘了，于是脑抽硬上后缀数组，结果后缀数组板子居然忘了，于是现场发明基数排序求后缀数组算法，处理完后各种情况讨论，虽然测了许多点都过了，但还是一副很虚的样子，就滚去看第二题了，联想到NEYC集训时的一个网络流模型，但好像不是非常对，而且时间复杂度也不允许。。。想了一会丢了一个$O(n^2)$DP暴力跑了。。。第三题好像是一道数学题，推完公式过了两个样例中的一个，检查了挺长时间看起来没什么问题就弃疗了</p>
<p>最后看成绩，也就是$120$,最后一题大家统一爆零了好开心～</p>
<h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><ul>
<li>仔细思考题目，根据考试类别机智的判断题目方法，不要简单题用高大上的算法搞，容易写挂。。。当然如果实在想不到简单做法也一定要把想到的算法写出来</li>
<li>合理分配考试时间，迅速检查计算数学公式</li>
<li>在无法预处理逆元的时候应该使用快速幂方法来求，而不是线性预处理时使用的方法（常数问题）</li>
</ul>
<h1 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h1><p>好像这天AK了。。。</p>
<h2 id="比赛经过-2"><a href="#比赛经过-2" class="headerlink" title="比赛经过"></a>比赛经过</h2><p>上来看第一题，发现第一题好像不太会，觉得自己图论好弱，想到一定的时间后就去看第二题，然后用递归思考的方法搞掉了这道题（每次求出最大值的位置），然后看第三题发现更加不可做，于是就滚回去搞第一题，画了几个图，猜了一下结论，然后就写上了。于是现在集中搞第三题，一开始也没什么思路，后来想还是应该搞清楚与非的运算方法，把01表写了一下，然后又写了几个序列，就发现了结论。。。数据结构搞搞就出来了，考试结束前还把第二题Judge了一下，感觉是没什么问题了</p>
<p>于是就AK了。。。</p>
<h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><ul>
<li>合理分配考试时间</li>
<li>从多个角度思考问题</li>
</ul>
<h1 id="Day4"><a href="#Day4" class="headerlink" title="　Day4"></a>　Day4</h1><p>好像又AK了。。（假</p>
<h2 id="比赛经过-3"><a href="#比赛经过-3" class="headerlink" title="比赛经过"></a>比赛经过</h2><p>好像把一二题都跳了。。。然后先把第三题搞了出来，后来第一题贡献法水过，第二题数据范围允许暴力预处理，然后对了几个拍，却忘了交代码。。。内心冷静沉着的把前两道题交上了，后来第三题被卡空格，加上以后也过了，总之还是挺可惜，被卡掉了$100$分</p>
<h2 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h2><p>好像没什么可以总结的。。。<del>AK并不是一件好事</del></p>
<h1 id="Day5"><a href="#Day5" class="headerlink" title="Day5"></a>Day5</h1><p>前两天果然是把RP都用光了。。。哦对了好像自从今天开始每天都有人AK</p>
<h2 id="比赛经过-4"><a href="#比赛经过-4" class="headerlink" title="比赛经过"></a>比赛经过</h2><p>看了一会题，很快就发现今天的题目好像很难的样子，第一题打了一个神奇的树型DP，后来加了一些考虑的情况，结果最常用的情况忘记返回答案了，第二题暴力上线段树套平衡树直接T，第三题WA爆零</p>
<p>于是今天就是$50$分，%%%AK大佬，于是今天就是死得非常惨啊，讲题前直接把前两题玩过了，第二题使用了线段树加平摊分析的方法，真是没想到居然会用到这种东西<br>。。。</p>
<h2 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h2><ul>
<li>及时检查答案，不要为了做题牺牲检查的时间</li>
<li>情况讨论要详尽，并且要特别注意情况之间出现的处理差异，因为这些差异有可能是对的，但也有些是忘记写了什么东西造成的</li>
<li>不能老是想着打正解。。。正解很虚时（比如样例都过不了时）要写暴力</li>
</ul>
<h1 id="Day6"><a href="#Day6" class="headerlink" title="Day6"></a>Day6</h1><p>今天本来也是要挂的来着。。。</p>
<h2 id="比赛经过-5"><a href="#比赛经过-5" class="headerlink" title="比赛经过"></a>比赛经过</h2><p>首先搞掉第一题，用$Kruskal$的方法，然后第二题一脸mengbi，题都看不懂，于是一直乱搞第三题，本来想到了一个FFT的做法，却因为“这不是NOIP模拟赛么，怎么会有这些东西”就一直思考简单的做法，发明了一个什么二维单调栈，怎么调都不对，考试快结束时发现复杂度是暴力的，否则就会WA，于是浪费了大量的时间，决定打暴力时，发现第三题暴力不是很好打，于是做出了今天最机智的决定：打第二题暴力，然后在考试时间剩20分钟时开始写，居然打完了，一副对的样子</p>
<p>然后去看成绩，100+90+0=190 。。。居然排得还挺高，但还是%%%AK大佬zgz</p>
<p>所以有的时候，暴力也是十分重要的。。。一个纯模拟的暴力没加任何优化居然跑了$90$???</p>
<h2 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h2><ul>
<li>严格遵守二十分钟原则</li>
<li>虽然是NOIP模拟赛，但在实在没有简单的思路时也一定要把一定对的东西写上，不要为了一个存在性未知的简单算法浪费太多的时间（适当想一想还是可以的）</li>
<li>暴力一定要写，说不定就A了呢？</li>
<li>清空数组时一定要认真考虑，宁可多清空一些，也不要清空得不彻底，否则很容易导致问题</li>
<li>三目运算符的运算顺序是<strong>从右向左</strong></li>
<li><strong>三目运算符的优先级小于算术运算符</strong>，这一点十分重要</li>
</ul>
<h1 id="Day7"><a href="#Day7" class="headerlink" title="Day7"></a>Day7</h1><p>题目又变得简单了。。。</p>
<h2 id="比赛经过-6"><a href="#比赛经过-6" class="headerlink" title="比赛经过"></a>比赛经过</h2><p>第一题构造题，持续思考20多分钟搞出来了，第二题贡献法瞬间水过，第三题想了挺长的时间，后来想到遍历搜索树，然后转化为经典问题水过了</p>
<p>于是就AK了。。。好像挺好多人都AK了???</p>
<h1 id="Day8"><a href="#Day8" class="headerlink" title="Day8"></a>Day8</h1><p>最后一天了，感觉还是挺好的（雾</p>
<h2 id="比赛经过-7"><a href="#比赛经过-7" class="headerlink" title="比赛经过"></a>比赛经过</h2><p>第一题随便DP一下，讨论各种情况，第二题找规律水过，第三题暴力LCA加DFS乱搞，并且各种情况讨论</p>
<p>最后不知为何被卡掉$5$分，在有倍增求LCA的程序中深度数组要从1开始???</p>
<p>所以是$295$，一副很弱的样子，好像又有许多人AK了</p>
<h2 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h2><ul>
<li>本地测试时的数据要尽可能多的涵盖情况，而且一定要包含极限情况与边界情况，这样的测试用例才是有价值的</li>
</ul>
<h1 id="Day8-5"><a href="#Day8-5" class="headerlink" title="Day8.5"></a>Day8.5</h1><h2 id="联训终音"><a href="#联训终音" class="headerlink" title="联训终音"></a>联训终音</h2><p>下午开始颁奖了，我这么弱居然是rank2???</p>
<p>然后领了一个游戏键盘就回家了。。。（其实是机械键盘，感觉适合用来编程，不知为什么就被强说成是用来打游戏的了），现在正在用，手感的确是挺好的（雾</p>
<h1 id="全文后记"><a href="#全文后记" class="headerlink" title="全文后记"></a>全文后记</h1><p>终于记完流水账了，好累啊。。。感觉自己还是好弱，要学的东西真的很多，今年应该是十分关键的一年呢，去年各种乱搞感觉都不是那么正式啊，不知道最后结果会是如何，希望能够是good end吧</p>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;因为我太弱，所以在这段时间里去东北师大附中参加了一个八天的联训。。。下面就抒(kou)发(hu)一下这次联训的相关感想，记点流水账&lt;br&gt;
    
    </summary>
    
    
      <category term="多校联训" scheme="https://goseqh.tk/tags/%E5%A4%9A%E6%A0%A1%E8%81%94%E8%AE%AD/"/>
    
      <category term="NOIP模拟赛" scheme="https://goseqh.tk/tags/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
      <category term="感悟" scheme="https://goseqh.tk/tags/%E6%84%9F%E6%82%9F/"/>
    
      <category term="参赛总结" scheme="https://goseqh.tk/tags/%E5%8F%82%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>GCD&amp;LCM相关问题讲解</title>
    <link href="https://goseqh.tk/2017/08/04/GCD-LCM%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%AE%B2%E8%A7%A3/"/>
    <id>https://goseqh.tk/2017/08/04/GCD-LCM相关问题讲解/</id>
    <published>2017-08-04T04:19:05.000Z</published>
    <updated>2017-08-15T02:38:49.410Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>概括：《莫比乌斯反演总结》进阶篇</p>
<p>不得不说这篇文章可能会是至今为止所有文章中最长的一篇，主要内容是借51nod上的与gcd&amp;lcm有关的题目进行的一个总结，由于我喜欢把许多东西整合进一篇文章，所以。。。<br><a id="more"></a></p>
<h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1><p>重新调整了一下顺序，由浅入深，深入浅出，为了简化文章，不再安排题目版面，需要提交者可自行查找51nod内对应题目</p>
<p>基本就是题目的题解，但是循序渐进，反映思维过程</p>
<p>由于我比较无聊，把代码都写了一遍，有多种方法的，就把所有我想到的方法也都写成了代码，所以文章篇幅不小。。。</p>
<p>还有，本文属于《莫比乌斯反演总结》的进阶篇，故下面的一些题目只给出公式最终形式，不会的可以自补《莫比乌斯反演总结》</p>
<p>顺带着会把杜教筛原理重新带一遍，引入新的思路</p>
<p>先预告一下之后的两篇讲解《杜教筛应用进阶》，《洲阁筛讲解》</p>
<p>洲阁筛以后呢？可能又是应用，然后再说一说叶筛（叶氏筛法）</p>
<p>前置技能：</p>
<ul>
<li>基础数论知识</li>
<li>莫比乌斯反演</li>
<li>Dirichlet卷积</li>
<li>杜教筛</li>
<li>分块法</li>
</ul>
<h2 id="Problem-1-1-最大公约数"><a href="#Problem-1-1-最大公约数" class="headerlink" title="Problem 1.1 : 最大公约数"></a>Problem 1.1 : 最大公约数</h2><p>输入2个正整数A，B，求A与B的最大公约数$(1&lt;= A,B &lt;= 10^9)$</p>
<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>前置技能</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL a, LL b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (!b) ? a : gcd(b, a % b);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("gcd.in", "r", stdin);</span></div><div class="line">    freopen("gcd.out", "w", stdout);*/</div><div class="line">    LL a, b;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;a, &amp;b);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, gcd(a, b));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Problem-1-2-最小公倍数"><a href="#Problem-1-2-最小公倍数" class="headerlink" title="Problem 1.2 : 最小公倍数"></a>Problem 1.2 : 最小公倍数</h2><p>输入2个正整数A，B，求A与B的最小公倍数。$(1&lt;= A,B &lt;= 10^9)$</p>
<h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><p>前置技能</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL a, LL b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (!b) ? a : gcd(b, a % b);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("lcm.in", "r", stdin);</span></div><div class="line">    freopen("lcm.out", "w", stdout);*/</div><div class="line">    LL a, b;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;a, &amp;b);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, a * b / gcd(a, b));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Problem-2-1-最大公约数之和"><a href="#Problem-2-1-最大公约数之和" class="headerlink" title="Problem 2.1 最大公约数之和"></a>Problem 2.1 最大公约数之和</h2><p>给出一个n，求1-n这n个数，同n的最大公约数的和。比如：n = 6<br>1,2,3,4,5,6 同6的最大公约数分别为1,2,3,2,1,6，加在一起 = 15$(n &lt;= 10^9)$</p>
<h2 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h2><p>经典莫比乌斯反演&amp;$Dirichlet$卷积应用，最终公式：<script type="math/tex">\sum_{d \mid n}\frac{n}{d} * \varphi(d)</script></p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i]) p[cnt++] = i;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * p[j] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * p[j]] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal_phi</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> con = (<span class="keyword">int</span>) <span class="built_in">sqrt</span>(x);</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= con; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i] &amp;&amp; x % i == <span class="number">0</span>)&#123;</div><div class="line">            ans *= i - <span class="number">1</span>;</div><div class="line">            x /= i;</div><div class="line">            <span class="keyword">while</span> (x % i == <span class="number">0</span>)&#123;</div><div class="line">                ans *= i;</div><div class="line">                x /= i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (x != <span class="number">1</span>) ans *= x - <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> con = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(n);</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; con; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>)&#123;</div><div class="line">            ans += (LL)cal_phi(i) * n / i;</div><div class="line">            ans += (LL)cal_phi(n / i) * i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (con * con == n)&#123;</div><div class="line">        ans += (LL)cal_phi(con) * con;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n % con == <span class="number">0</span>)&#123;</div><div class="line">        ans += (LL)cal_phi(con) * n / con;</div><div class="line">        ans += (LL)cal_phi(n / con) * con;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("sum.in", "r", stdin);</span></div><div class="line">    freopen("sum.out", "w", stdout);*/</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    work(n);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Problem-2-2-最小公倍数之和"><a href="#Problem-2-2-最小公倍数之和" class="headerlink" title="　Problem 2.2 最小公倍数之和"></a>　Problem 2.2 最小公倍数之和</h2><p>给出一个n，求1-n这n个数，同n的最小公倍数的和。<br>例如：n = 6，1,2,3,4,5,6 同6的最小公倍数分别为6,6,6,12,30,6，加在一起 = 66。<br>由于结果很大，输出Mod 1000000007的结果$(n \leq 10^9)$<br>多组数据，数据组数$\leq 50000$</p>
<h2 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h2><p>经典莫比乌斯反演&amp;$Dirichlet$卷积应用，最终公式：<script type="math/tex">n+{n\over 2}\sum_{d|n,d≠n} \varphi(d)*d</script>,其实精确地讲是最大公约数和的方法类比，用$\varphi$的意义来进行公式的推导运算</p>
<p>然而经尝试，上面的并不能过。。。，因为它要分解过多次质因数，用于求$\varphi$，那么，我们如何减少计算$\varphi$的花费呢？</p>
<p>所以我们开始使用一种新的技巧：<strong>质因数分析</strong><br>我们展开上面公式中的每一个$\varphi$函数，就得到了这样的东西：<script type="math/tex">\sum_{d|n,d≠n} \varphi(d)*d=\prod_{i=1}^B\sum_{j=0}^{a[i]} \varphi(p[i]^j)* p[i]^j</script></p>
<p>然后我们再使用一个技巧：<strong>和式化积式</strong><br>就能把所有的和式归到一起，直接用积式来进行表示，就是这个样子：<script type="math/tex">\prod_{i=1}^B 1+\sum_{j=1}^{a[i]}(p[i]-1)p[i]^{j-1}* p[i]^j</script></p>
<p>然后整理一下可以得到：<script type="math/tex">\prod_{i=1}^B 1+{p[i]^{2*a[i]+1}-p[i]\over {p[i]+1}}</script><br>再暴力分解质因数计算，就可以了</p>
<p>然而肯定还有人觉得奇怪，不对啊，我也是这样写了，为什么就没有过呢？那是因为，本题实际上还有一个技巧：<strong>平方根规约</strong>（<del>其实就是卡常数啦</del>）</p>
<p>那就是，我们在分解质因数的时候，不是使用了$\sqrt{n}$来进行分解的吗？但是，随着$n$的减少，我们可以随时更新这个$\sqrt{n}$，这也是我以前没有发现的，这样，代码效率能提升许多，但实际上要是想卡的话也是随手卡的</p>
<h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><p>先附上第一个版本，未使用质因数分析时的代码，TLE：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 40005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">int</span> phi[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i])&#123;</div><div class="line">            p[cnt++] = i;</div><div class="line">            phi[i] = i - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * p[j] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * p[j]] = <span class="number">1</span>;</div><div class="line">            phi[i * p[j]] = phi[i] * (p[j] - <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) &#123;</div><div class="line">                phi[i * p[j]] = phi[i] * p[j];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; save;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal_phi</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x &lt; maxn) <span class="keyword">return</span> phi[x];</div><div class="line">    <span class="keyword">if</span> (save.count(x)) <span class="keyword">return</span> save[x];</div><div class="line">    <span class="keyword">int</span> t = x;</div><div class="line">    <span class="keyword">int</span> con = (<span class="keyword">int</span>) <span class="built_in">sqrt</span>(x);</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= con; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i] &amp;&amp; x % i == <span class="number">0</span>)&#123;</div><div class="line">            ans *= i - <span class="number">1</span>;</div><div class="line">            x /= i;</div><div class="line">            <span class="keyword">while</span> (x % i == <span class="number">0</span>)&#123;</div><div class="line">                ans *= i;</div><div class="line">                x /= i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (x != <span class="number">1</span>) ans *= x - <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> save[t] = ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> con = (<span class="keyword">int</span>) <span class="built_in">sqrt</span>(n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; con; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>)&#123;</div><div class="line">            ans = (ans + (LL) n * i % M * cal_phi(i) % M) % M;</div><div class="line">            ans = (ans + (LL) n * (n / i) % M * cal_phi(n / i) % M) % M;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (con * con == n)&#123;</div><div class="line">        ans = (ans + (LL) n * con % M * cal_phi(con) % M) % M;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n % con == <span class="number">0</span>)&#123;</div><div class="line">        ans = (ans + (LL) n * con % M * cal_phi(con) % M) % M;</div><div class="line">        ans = (ans + (LL) n * (n / con) % M * cal_phi(n / con) % M) % M;</div><div class="line">    &#125;</div><div class="line">    ans = (M + ans - n) % M;</div><div class="line">    ans = ans * ((M + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) % M;</div><div class="line">    ans = (ans + n) % M;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("sum2.in", "r", stdin);</span></div><div class="line">    freopen("sum2.out", "w", stdout);*/</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> T, n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        work(n);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后是AC代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i]) p[cnt++] = i; </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * p[j] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * p[j]] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">1</span>;</div><div class="line">    LL now = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> t = n;</div><div class="line">    <span class="keyword">int</span> con = (<span class="keyword">int</span>) <span class="built_in">sqrt</span>(n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= con; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i] &amp;&amp; n % i == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">while</span> (n % i == <span class="number">0</span>)&#123;</div><div class="line">                now *= i;</div><div class="line">                n /= i;</div><div class="line">            &#125;</div><div class="line">            now *= now;</div><div class="line">            now = (now - <span class="number">1</span>) / (i + <span class="number">1</span>);</div><div class="line">            now *= i;</div><div class="line">            ans = ans * (now + <span class="number">1</span>) % M;</div><div class="line">            now = <span class="number">1</span>;</div><div class="line">            con = (<span class="keyword">int</span>) <span class="built_in">sqrt</span>(n);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (n != <span class="number">1</span>) ans = ans * (((LL)n * n - n + <span class="number">1</span>) % M) % M;</div><div class="line">    ans = (ans + <span class="number">1</span>) * t % M;</div><div class="line">    ans = ans * ((M + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) % M;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("sum2.in", "r", stdin);</span></div><div class="line">    freopen("sum2.out", "w", stdout);*/</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> T, n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        work(n);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><del>为什么大家做这题都这么纠结？本弱交了两次就过了。。。</del></p>
<h2 id="Problem-3-1-最大公约数之和-V2"><a href="#Problem-3-1-最大公约数之和-V2" class="headerlink" title="Problem 3.1 最大公约数之和 V2"></a>Problem 3.1 最大公约数之和 V2</h2><p>给出一个数N，输出小于等于N的所有数，两两之间的最大公约数之和$(2 &lt;= N &lt;= 5000000)$</p>
<p>相当于计算这段程序（程序中的gcd(i,j)表示i与j的最大公约数）：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">G=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;N;i++)</div><div class="line">    <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;=N;j++)</div><div class="line">    &#123;</div><div class="line">        G+=gcd(i,j);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>令$T$表示后面用作输入测试的数的数量，有$1 &lt;= T &lt;= 50000$</p>
<h2 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h2><p>这道题看似要复杂一些，实际上就是莫比乌斯反演的裸题，但如果你真的只是用莫比乌斯反演的话。。。<br>算了先给出最终公式吧：<script type="math/tex">\sum_{T=1}^{MIN(n,m)}\left\lfloor\frac{n}{T}\right\rfloor\left\lfloor\frac{m}{T} \right \rfloor \left(id*\mu\right)(T)</script><br>（不会的自补《莫比乌斯反演总结》）<br>好的，然而你交上去发现会TLE。。。其实很明显，复杂度不对</p>
<p>那么，我们还得优化一些，由于本题有$n=m$的性质（不懂吗？那你题做的太少了。。。），所以我们可以继续使用$\varphi$来乱搞，得到如下的式子：<script type="math/tex">\sum{i=1}^{n}\varphi * id</script><br>其实非常简单啦，然后你就对它$Dirichlet$一下子就好了</p>
<p>然而我比较无聊，觉得这样还不够快，于是写了一个线性筛的。。。确实是比上面的要快许(yi)多(dian)</p>
<h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><p>第一份，莫比乌斯反演的，TLE<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 5000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">int</span> mu[maxn];</div><div class="line">LL F[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i])&#123;</div><div class="line">            p[cnt++] = i;</div><div class="line">            mu[i] = <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (p[j] * i &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[p[j] * i] = <span class="number">1</span>;</div><div class="line">            mu[p[j] * i] = mu[i] * (<span class="number">-1</span>);</div><div class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>)&#123;</div><div class="line">                mu[i * p[j]] = <span class="number">0</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; i * j &lt; maxn; j++)&#123;</div><div class="line">            F[i * j] += i * mu[j];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) F[i] += F[i - <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> next = n / (n / i);</div><div class="line">        ans += (F[next] - F[i - <span class="number">1</span>]) * (n / i) * (n / i);</div><div class="line">        i = next;</div><div class="line">    &#125;</div><div class="line">    ans -= (LL) n * (n + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">    ans &gt;&gt;= <span class="number">1</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("gcd2.in", "r", stdin);</span></div><div class="line">    freopen("gcd2.out", "w", stdout);*/</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> T, a;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</div><div class="line">        cal(a);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第二份，$Dirichlet$卷积的AC代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 5000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line">LL phi[maxn];</div><div class="line">LL pre[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i])&#123;</div><div class="line">            p[cnt++] = i;</div><div class="line">            phi[i] = i - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (p[j] * i &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[p[j] * i] = <span class="number">1</span>;</div><div class="line">            phi[i * p[j]] = phi[i] * (p[j] - <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>)&#123;</div><div class="line">                phi[i * p[j]] = phi[i] * p[j];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; i * j &lt; maxn; j++)&#123;</div><div class="line">            pre[i * j] += phi[i] * j;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) pre[i] += pre[i - <span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) pre[i] -= (LL)i * (i + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("gcd2.in", "r", stdin);</span></div><div class="line">    freopen("gcd2.out", "w", stdout);*/</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    LL n;</div><div class="line">    <span class="keyword">while</span> (T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, pre[n]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第三份，线性筛，AC代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 5000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line">LL F[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    num[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    F[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i])&#123;</div><div class="line">            p[cnt++] = i;</div><div class="line">            num[i] = <span class="number">1</span>;</div><div class="line">            F[i] = (i &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * p[j] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * p[j]] = <span class="number">1</span>;</div><div class="line">            num[i * p[j]] = i;</div><div class="line">            F[i * p[j]] = F[i] * ((p[j] &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>)&#123;</div><div class="line">                num[i * p[j]] = num[i];</div><div class="line">                F[i * p[j]] = F[i] * p[j] + F[num[i]] * (i / num[i]) * (p[j] - <span class="number">1</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) F[i] += F[i - <span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) F[i] -= (LL)i * (i + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("gcd2.in", "r", stdin);</span></div><div class="line">    freopen("gcd2.out", "w", stdout);*/</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    LL n;</div><div class="line">    <span class="keyword">while</span> (T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, F[n]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Problem-4-1-最大公约数之和-V3"><a href="#Problem-4-1-最大公约数之和-V3" class="headerlink" title="Problem 4.1 最大公约数之和 V3"></a>Problem 4.1 最大公约数之和 V3</h2><p>给出一个数N，输出小于等于N的所有数，两两之间的最大公约数之和$(2 &lt;= N &lt;= 10^10)$</p>
<p>相当于计算这段程序（程序中的gcd(i,j)表示i与j的最大公约数）：<br>由于结果很大，输出Mod 1000000007的结果。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">G=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;N;i++)</div><div class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=N;j++)</div><div class="line">    &#123;</div><div class="line">        G = (G + gcd(i,j)) % <span class="number">1000000007</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>单组数据</p>
<h2 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h2><p>显然这么大的数肯定是要用到一些黑科技啦，有个十分强大算法，名叫杜教筛，可以在$O(n^{\frac{2}{3}})$的复杂度内求出$\sum_{i = 1} ^ {n} F(i)$（其中$F$是一些比较特殊的函数，下文会说到），即$F$的前缀和</p>
<p>是不是很强大呀？</p>
<p>用在本题里面，是优化什么部位呢？那就是中间分块法的时候的函数和区间，用在这里，可以证明本题能够在$O(n^{\frac{5}{6}})$的复杂度内解决，然而这个是用微积分证明的，实际很难跑满</p>
<p>所以本题就可以这样过了，具体如何杜教筛，可以参考《杜教筛原理详解》或下文讲解（那篇写的不是非常好）</p>
<p>其实这题有两种写法，一个是莫比乌斯反演的，另一个是继续利用$\varphi$乱搞的（<del>51nod的题全都是$n=m$的。。。</del>)</p>
<p>最终公式：<br>莫比乌斯反演：<script type="math/tex">\sum_{T=1}^{MIN(n,m)}\left\lfloor\frac{n}{T}\right\rfloor\left\lfloor\frac{m}{T} \right \rfloor \left(id*\mu\right)(T)</script><br>$\varphi$乱搞：<script type="math/tex">\sum{i=1}^{n}i * S(\left\lfloor\frac{n}{i}\right\rfloor)</script><br>上述公式均需与$\varphi$杜教筛公式：<script type="math/tex">S(n) = \frac{n * (n + 1)} - \sum_{i = 2}^{n} S(\left\lfloor\frac{n}{i}\right\rfloor)</script>搭配食用</p>
<h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><p>第一份，利用$\varphi$直接乱搞，AC：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 5000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">int</span> bound;</div><div class="line"><span class="keyword">int</span> phi[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; bound; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i])&#123;</div><div class="line">            p[cnt++] = i;</div><div class="line">            phi[i] = i - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * p[j] &gt;= bound) <span class="keyword">break</span>;</div><div class="line">            vis[i * p[j]] = <span class="number">1</span>;</div><div class="line">            phi[i * p[j]] = phi[i] * (p[j] - <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>)&#123;</div><div class="line">                phi[i * p[j]] = phi[i] * p[j];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; bound; i++) phi[i] = (phi[i] + phi[i - <span class="number">1</span>]) % M;</div><div class="line">&#125;</div><div class="line"><span class="built_in">map</span>&lt;LL, LL&gt; save;</div><div class="line"><span class="function">LL <span class="title">dyh</span><span class="params">(LL x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x &lt; bound) <span class="keyword">return</span> phi[x];</div><div class="line">    <span class="keyword">if</span> (save.count(x)) <span class="keyword">return</span> save[x];</div><div class="line">    LL ans = (x &amp; <span class="number">1</span>) ? (x % M) * (((x + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) % M) : ((x &gt;&gt; <span class="number">1</span>) % M) * ((x + <span class="number">1</span>) % M);</div><div class="line">    ans %= M;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">2</span>; i &lt;= x; i++)&#123;</div><div class="line">        LL next = x / (x / i);</div><div class="line">        ans = (M + ans - dyh(x / i) * ((next - i + <span class="number">1</span>) % M) % M) % M;</div><div class="line">        i = next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> save[x] = ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(LL n)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        LL next = n / (n / i);</div><div class="line">        ans = (ans + dyh(n / i) * ((next - i + <span class="number">1</span>) % M) % M * ((next + i) % M) % M * ((M + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) % M) % M;</div><div class="line">        i = next;</div><div class="line">    &#125;</div><div class="line">    LL rec = (n &amp; <span class="number">1</span>) ? (n % M) * (((n + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) % M) : ((n &gt;&gt; <span class="number">1</span>) % M) * ((n + <span class="number">1</span>) % M);</div><div class="line">    rec %= M;</div><div class="line">    ans = (M + ans - rec) % M;</div><div class="line">    ans = ans * <span class="number">2</span> % M;</div><div class="line">    ans = (ans + rec) % M;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("gcd3.in", "r", stdin);</span></div><div class="line">    freopen("gcd3.out", "w", stdout);*/</div><div class="line">    LL n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</div><div class="line">    bound = (<span class="keyword">int</span>)<span class="built_in">pow</span>(n, <span class="number">2.0</span> / <span class="number">3</span>) + <span class="number">1</span>;</div><div class="line">    init();</div><div class="line">    work(n);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第二份，使用莫比乌斯反演，AC：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 5000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">int</span> bound;</div><div class="line"><span class="keyword">int</span> phi[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; bound; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i])&#123;</div><div class="line">            p[cnt++] = i;</div><div class="line">            phi[i] = i - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * p[j] &gt;= bound) <span class="keyword">break</span>;</div><div class="line">            vis[i * p[j]] = <span class="number">1</span>;</div><div class="line">            phi[i * p[j]] = phi[i] * (p[j] - <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>)&#123;</div><div class="line">                phi[i * p[j]] = phi[i] * p[j];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; bound; i++) phi[i] = (phi[i - <span class="number">1</span>] + phi[i]) % M;</div><div class="line">&#125;</div><div class="line"><span class="built_in">map</span>&lt;LL, LL&gt; save;</div><div class="line"><span class="function">LL <span class="title">dyh</span><span class="params">(LL x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x &lt; bound) <span class="keyword">return</span> phi[x];</div><div class="line">    <span class="keyword">if</span> (save.count(x)) <span class="keyword">return</span> save[x];</div><div class="line">    LL ans = x % M * ((x + <span class="number">1</span>) % M) % M * ((M + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) % M;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">2</span>; i &lt;= x; i++)&#123;<span class="comment">///////////////Serious Mistake!!!</span></div><div class="line">        LL next = x / (x / i);</div><div class="line">        ans = (M + ans - dyh(x / i) * ((next - i + <span class="number">1</span>) % M) % M) % M;</div><div class="line">        i = next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> save[x] = ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(LL n)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        LL next = n / (n / i);</div><div class="line">        ans = (ans + (n / i) % M * ((n / i) % M) % M * (M + (dyh(next) - dyh(i - <span class="number">1</span>)) % M) % M) % M;</div><div class="line">        i = next;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*LL rec = n % M * ((n + 1) % M) % M * ((M + 1) &gt;&gt; 1) % M; </span></div><div class="line">    ans = (M + ans - rec) % M;</div><div class="line">    ans = ans * 2 % M;</div><div class="line">    ans = (ans + rec) % M;*/</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("gcd3.in", "r", stdin);</span></div><div class="line">    freopen("gcd3.out" ,"w", stdout);*/</div><div class="line">    LL n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</div><div class="line">    bound = (<span class="keyword">int</span>) <span class="built_in">pow</span>(n, <span class="number">2.0</span> / <span class="number">3</span>) + <span class="number">1</span>;</div><div class="line">    init();</div><div class="line">    work(n);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第三份，不是我写的，花了60个盾买的最快代码，感觉就是各种<strong>取模转加减</strong>。。。然而看起来挺短的<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Rep(x,a,b) for (int x=a;x&lt;=(int)b;x++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Drp(x,a,b) for (int x=a;x&gt;=(int)b;x--)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Cross(x,a) for (int x=Hd[a];~x;x=Nx[x])</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF (1&lt;&lt;29)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int,int&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PDD pair<span class="meta-string">&lt;double,double&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mk(a,b) make_pair(a,b)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Rd</span><span class="params">()</span></span>&#123;</div><div class="line">    ll x=<span class="number">0</span>;<span class="keyword">int</span> ch=getchar(),f=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)&amp;&amp;(ch!=<span class="string">'-'</span>)&amp;&amp;(ch!=EOF)) ch=getchar();</div><div class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>)&#123;f=<span class="number">-1</span>;ch=getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Rt</span><span class="params">(ll x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</div><div class="line">    <span class="keyword">if</span> (x&gt;=<span class="number">10</span>) Rt(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">putchar</span>(x+<span class="string">'0'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5000000</span>;</div><div class="line"><span class="keyword">int</span> Mn[N+<span class="number">5</span>],Phi[N+<span class="number">5</span>],Prm[<span class="number">400000</span>],Cnt;</div><div class="line"><span class="keyword">int</span> Ans[<span class="number">2160</span>],Vs[<span class="number">2160</span>];</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> P 1000000007</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum</span><span class="params">(ll x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (x%P)*((x+<span class="number">1</span>)%P)%P*<span class="number">500000004</span>%P;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Calc</span><span class="params">(ll Ori,ll Div)</span></span>&#123;</div><div class="line">    ll n=Ori/Div;</div><div class="line">    <span class="keyword">if</span> (n&lt;=N) <span class="keyword">return</span> Phi[n];</div><div class="line">    <span class="keyword">if</span> (Vs[Div]) <span class="keyword">return</span> Ans[Div];</div><div class="line">    Vs[Div]=<span class="number">1</span>;Ans[Div]=Sum(n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;(ll)i*i&lt;=n;i++)&#123;</div><div class="line">        <span class="keyword">if</span> (i&gt;<span class="number">1</span>&amp;&amp;i!=n/i) Ans[Div]-=Calc(Ori,Div*i),Ans[Div]+=Ans[Div]&lt;<span class="number">0</span>?P:<span class="number">0</span>;</div><div class="line">        Ans[Div]-=(n/i-n/(i+<span class="number">1</span>))*Phi[i]%P,Ans[Div]+=Ans[Div]&lt;<span class="number">0</span>?P:<span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> Ans[Div];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    Phi[<span class="number">1</span>]=<span class="number">1</span>;</div><div class="line">    Rep(i,<span class="number">2</span>,N)&#123;</div><div class="line">         <span class="keyword">if</span> (!Mn[i]) Prm[Mn[i]=++Cnt]=i,Phi[i]=i<span class="number">-1</span>;</div><div class="line">        Rep(j,<span class="number">1</span>,Cnt)&#123;</div><div class="line">            <span class="keyword">int</span> k=Prm[j]*i;</div><div class="line">            <span class="keyword">if</span> (k&gt;N) <span class="keyword">break</span>;</div><div class="line">            Mn[k]=j;</div><div class="line">            <span class="keyword">if</span> (j==Mn[i])&#123;Phi[k]=Phi[i]*Prm[j];<span class="keyword">break</span>;&#125;</div><div class="line">                <span class="keyword">else</span> Phi[k]=Phi[i]*(Prm[j]<span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    Rep(i,<span class="number">2</span>,N) Phi[i]+=Phi[i<span class="number">-1</span>],Phi[i]-=Phi[i]&gt;=P?P:<span class="number">0</span>;</div><div class="line">    ll n=Rd();</div><div class="line">    <span class="keyword">int</span> Ans=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;(ll)i*i&lt;=n;i++)&#123;</div><div class="line">        <span class="keyword">if</span> (i!=n/i) Ans+=(ll)i*Calc(n,i)%P,Ans-=Ans&gt;=P?P:<span class="number">0</span>;</div><div class="line">        Ans+=(ll)(Sum(n/i)+P-Sum(n/(i+<span class="number">1</span>)))%P*Phi[i]%P,Ans-=Ans&gt;=P?P:<span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    Ans=Ans*<span class="number">2</span>%P+P-Sum(n),Ans-=Ans&gt;=P?P:<span class="number">0</span>;</div><div class="line">    Rt(Ans);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总结一下，大致处理这种问题，就是使用莫比乌斯反演+$Dirichlet$卷积或是使用$\varphi$乱搞法，具体怎么乱搞，上面展示的已经很清楚了，不太懂的话可以参考《莫比乌斯反演总结》</p>
<p>再列举一下学到的技巧：</p>
<ul>
<li>质因子分析</li>
<li>和式化积式</li>
<li>平方根规约</li>
<li>取模转加减</li>
</ul>
<p>然后下面顺便重讲一下杜教筛</p>
<h1 id="re-杜教筛讲解"><a href="#re-杜教筛讲解" class="headerlink" title="re:杜教筛讲解"></a>re:杜教筛讲解</h1><p>杜教筛是dyh大神从$Project Euler$引入的高速函数前缀和求法（其实和筛没什么关系？），现已经在OI界普及，成为数论中必不可少的算法之一</p>
<p>学习要点有二：</p>
<ul>
<li>找到一个易于求出前缀和的函数与待求函数做$Dirichlet$卷积，同时要求所得函数也易于求出前缀和</li>
<li>理解复杂度的证明方法</li>
</ul>
<p>基本就是这样，仔细想想$\varphi$与$\mu$的杜教筛法，下面举一个更难的例子：<br>求$\sum_{i=1}^n\varphi(i)*i$</p>
<p>我们只要将它与$id$进行$Dirichlet$卷积就可以，我们做如下推导：</p>
<p>下面记录一下杜教筛复杂度的证明方法：</p>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;概括：《莫比乌斯反演总结》进阶篇&lt;/p&gt;
&lt;p&gt;不得不说这篇文章可能会是至今为止所有文章中最长的一篇，主要内容是借51nod上的与gcd&amp;amp;lcm有关的题目进行的一个总结，由于我喜欢把许多东西整合进一篇文章，所以。。。&lt;br&gt;
    
    </summary>
    
    
      <category term="数论" scheme="https://goseqh.tk/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="数学" scheme="https://goseqh.tk/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="莫比乌斯反演" scheme="https://goseqh.tk/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
      <category term="杜教筛" scheme="https://goseqh.tk/tags/%E6%9D%9C%E6%95%99%E7%AD%9B/"/>
    
  </entry>
  
  <entry>
    <title>四边形不等式详解</title>
    <link href="https://goseqh.tk/2017/08/02/%E5%9B%9B%E8%BE%B9%E5%BD%A2%E4%B8%8D%E7%AD%89%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <id>https://goseqh.tk/2017/08/02/四边形不等式详解/</id>
    <published>2017-08-02T09:57:54.000Z</published>
    <updated>2017-08-02T10:16:54.379Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>最近学习了一下四边形不等式优化的原理，感觉挺有用的，下面对其进行小结<br><a id="more"></a></p>
<h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1><p>首先附上《四边形不等式》讲解材料：<br>

	<div class="row">
    <embed src="四边形不等式.pdf" width="120%" height="660" type="application/pdf">
	</div>


<br>然后说一下学习重点：</p>
<ol>
<li>（重点）理解并尝试证明在w函数满足四边形不等式时，m函数也满足四边形不等式</li>
<li>（重点）理解并尝试证明在m函数满足四边形不等式后，它的最优决策满足单调性（即决策单调性）</li>
<li>理解在决策单调性被满足后，复杂度的优化原理</li>
</ol>
<p>大致证明可以使用上述优化策略的过程大致就是这样，我们需要遵循上述过程来进行严谨的验证</p>
<p>本讲解最后还给出了一道例题，同时给出了决策单调性的较为完整的证明过程，可以用于借鉴</p>
<p>还有一个细节，就是如何证明不同的二叉搜索树的个数？这个与Catalan数有关，可能近期会原创一篇关于Catalan数的总结，作为休闲娱乐之用（因为它比较简单嘛。。。）</p>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;最近学习了一下四边形不等式优化的原理，感觉挺有用的，下面对其进行小结&lt;br&gt;
    
    </summary>
    
    
      <category term="动态规划" scheme="https://goseqh.tk/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="四边形不等式" scheme="https://goseqh.tk/tags/%E5%9B%9B%E8%BE%B9%E5%BD%A2%E4%B8%8D%E7%AD%89%E5%BC%8F/"/>
    
      <category term="单调性优化DP" scheme="https://goseqh.tk/tags/%E5%8D%95%E8%B0%83%E6%80%A7%E4%BC%98%E5%8C%96DP/"/>
    
  </entry>
  
  <entry>
    <title>炫酷反演魔术</title>
    <link href="https://goseqh.tk/2017/08/01/%E7%82%AB%E9%85%B7%E5%8F%8D%E6%BC%94%E9%AD%94%E6%9C%AF/"/>
    <id>https://goseqh.tk/2017/08/01/炫酷反演魔术/</id>
    <published>2017-08-01T00:10:44.000Z</published>
    <updated>2017-08-01T05:58:50.440Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>最近补了一下以前反演的坑，写个博客记录一下大致内容以及细节问题，便于日后复习<br><a id="more"></a></p>
<h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1><p>首先赠送vfk反演课件</p>
<p><iframe class="embed-responsive-item" src="http://vfleaking.blog.uoj.ac/slide/87#/" width="1000" height="600" frameborder="no"></iframe><br>在vfk的课件里，主要讲了如下几种反演：</p>
<ul>
<li>二项式反演</li>
<li>莫比乌斯反演</li>
<li>子集反演</li>
<li>离散傅里叶变换</li>
</ul>
<p>下面会分别进行介绍及推导，但在向下进行时，首先补充一些概念，使下面的过程更为容易理解</p>
<h2 id="反演与线性代数"><a href="#反演与线性代数" class="headerlink" title="反演与线性代数"></a>反演与线性代数</h2><p>这是什么呢？考察一个十分一般的反演：</p>
<script type="math/tex; mode=display">
\begin{equation}
  f(n) = \sum_{k = 1}^{n} a_{n, k} g(k)
\end{equation}</script><p>我们用现有的知识，能采用的只有高斯消元一种方法，而vfk仍然对其进行了“推导”：</p>
<blockquote>
<p>对于每一个 $m$ 我们求出当 $f(m) = 1$ 而其它的 $f$ 都是 $0$ 的情况下的 $g$ 就行了，用 $\mu(n, m)$ 来表示这个解</p>
</blockquote>
<p>然后，他使用$\mu(n, m)$这个东西，得到了：</p>
<script type="math/tex; mode=display">
\begin{equation}
  g(n) = \sum_{k = 1}^{n} \mu(n, k) f(k)
\end{equation}</script><p>很显然这样做是没什么实际意义的是吧，但是这也告诉我们，我们学习的反演，是对一些特殊情况，总结规律，进而得到的一些优美结论，而求出来的那些系数，就是这里面所提到的$\mu(n, m)$</p>
<p>至于为什么要用$\mu$来表示解，大家可以把这看作和莫比乌斯函数的类比，暗示莫比乌斯函数的实质</p>
<p>而如果我们把系数看作矩阵，那么我们求反演的过程就相当于是在求逆矩阵，这也是为什么在下面每个反演的推导中，vfk都是先“说了一句废话”，然后就推导出了结论，他说的那句废话，就相当于是把原矩阵乘上了一个单位矩阵，然后，用我们已经知道的系数矩阵与其逆代换这个单位矩阵，然后代换掉系数矩阵与原矩阵的乘积，就是反演后的样子，下面用推导步骤详细说明这里的含义（用$F$代表函数$f$的矩阵，大小为$1×n$，用$G$代表函数$g$的矩阵，大小为$1×n$，用$A$代表系数矩阵，大小为$n×n$，$I$表示单位矩阵，大小为$n×n$）：</p>
<script type="math/tex; mode=display">
\begin{array}{rcl}
\mbox{首先有}&F & =&  GA\\
\mbox{又知}& G & =&  G × I\\
&G × I  &=&  G × A × A^{-1}\\
& &=&  F × A^{-1}\\
\mbox{故}& G &=& F × A^{-1}
\end{array}</script><p>这形象地反映了vfk的推导过程，理解起来会好一些，之后也会把每个式子对应到上面的矩阵运算中</p>
<p>下面分别对两个常见反演进行讲解：</p>
<h2 id="二项式反演"><a href="#二项式反演" class="headerlink" title="二项式反演"></a>二项式反演</h2><h3 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h3><script type="math/tex; mode=display">
\begin{eqnarray}
f(n) =\sum_{k = 0}^{n} \binom{n}{k} g(k)\\
g(n)  = \sum_{k = 0}^{n} (-1)^{n - k} \binom{n}{k} f(k)
\end{eqnarray}</script><h3 id="推导"><a href="#推导" class="headerlink" title="推导"></a>推导</h3><p>首先说一句废话($G = G * I$):</p>
<script type="math/tex; mode=display">
\begin{equation}
  g(n) = \sum_{m = 0}^{n} [n - m = 0] \binom{n}{m} g(m)
\end{equation}</script><p>回忆我们刚才发现的性质($I = A * A^{-1}$):</p>
<script type="math/tex; mode=display">
\begin{equation}
  \sum_{k = 0}^{n}{(-1)^k\binom{n}{k}} = [n = 0]
\end{equation}</script><p>代进去($G = G * I = G × A × A^{-1}$):</p>
<script type="math/tex; mode=display">
\begin{equation}
  g(n) = \sum_{m = 0}^{n} \sum_{k = 0}^{n - m} (-1)^k \binom{n - m}{k} \binom{n}{m} g(m)
\end{equation}</script><p>注意 $\binom{n - m}{k} \binom{n}{m}$ 意思是在 $n$ 个里面两个子集一个大小为 $m$ 另一个大小为 $k$，所以和 $\binom{n}{k} \binom{n - k}{m}$ 其实是等价的</p>
<script type="math/tex; mode=display">
\begin{eqnarray}
  g(n) =\sum_{m = 0}^{n} \sum_{k = 0}^{n - m} (-1)^k \binom{n - m}{k} \binom{n}{m} g(m) \\
  = \sum_{m = 0}^{n} \sum_{k = 0}^{n - m} (-1)^k \binom{n}{k} \binom{n - k}{m} g(m)
\end{eqnarray}</script><p>交换两个求和符号:</p>
<script type="math/tex; mode=display">
\begin{equation}
  g(n) = \sum_{k = 0}^{n} (-1)^k \binom{n}{k} \sum_{m = 0}^{n - k} \binom{n - k}{m} g(m)
\end{equation}</script><p>注意最右边的那个小朋友！其实就是 $f$！($F = GA$)<br>变成:</p>
<script type="math/tex; mode=display">
\begin{equation}
  g(n) = \sum_{k = 0}^{n} (-1)^k \binom{n}{k} f(n - k)
\end{equation}</script><p>把下标换得漂亮点:</p>
<script type="math/tex; mode=display">
\begin{equation}
  g(n) = \sum_{k = 0}^{n} (-1)^{n - k} \binom{n}{k} f(k)
\end{equation}</script><p>所以我们就得到了酱紫的东西:（妈呀其实就是容斥）</p>
<script type="math/tex; mode=display">
\begin{eqnarray}
f(n)  = \sum_{k = 0}^{n} \binom{n}{k} g(k)\\
g(n) = \sum_{k = 0}^{n} (-1)^{n - k} \binom{n}{k} f(k)
\end{eqnarray}</script><h2 id="莫比乌斯反演"><a href="#莫比乌斯反演" class="headerlink" title="莫比乌斯反演"></a>莫比乌斯反演</h2><h3 id="形式A"><a href="#形式A" class="headerlink" title="形式A"></a>形式A</h3><script type="math/tex; mode=display">
\begin{eqnarray}
  f(n) =  \sum_{d \mid n} g(d)\\
  g(n)  =  \sum_{d \mid n} \mu(\frac{n}{d}) f(d)
\end{eqnarray}</script><h3 id="形式B"><a href="#形式B" class="headerlink" title="形式B"></a>形式B</h3><script type="math/tex; mode=display">
\begin{eqnarray}
  f(n) = \sum_{n \mid d} g(d)\\
  g(n) = \sum_{n \mid d} \mu(\frac{d}{n}) f(d)
\end{eqnarray}</script><h3 id="推导-1"><a href="#推导-1" class="headerlink" title="推导"></a>推导</h3><p>可以知道 $ \mu(\prod_p p^\alpha) = \prod_p [\alpha = 1](-1) $ （为啥是这个式子以后再侃 = =）($I = A * A^{-1}$):</p>
<p>接下来说一句废话($G = G * I$):</p>
<script type="math/tex; mode=display">
\begin{equation}
  g(n) = \sum_{m \mid n} [\frac{n}{m} = 1]g(m)
\end{equation}</script><p>代进去！($G = G * I = G × A × A^{-1}$)</p>
<script type="math/tex; mode=display">
\begin{equation}
  g(n) = \sum_{m \mid n} \sum_{d \mid \frac{n}{m}} \mu(d) g(m)
\end{equation}</script><p>注意 $d \mid \frac{n}{m}$ 其实就是 $md \mid n$，所以跟 $m \mid \frac{n}{d}$ 等价。似曾相识，对不？<br>交换两个求和符号：</p>
<script type="math/tex; mode=display">
\begin{equation}
  g(n) = \sum_{d \mid n} \mu(d) \sum_{m \mid \frac{n}{d}} g(m)
\end{equation}</script><p>$f$ 君好久不见($F = GA$)</p>
<script type="math/tex; mode=display">
\begin{equation}
  g(n) = \sum_{d \mid n} \mu(d) f(\frac{n}{d})
\end{equation}</script><p>把下标换得漂亮点：</p>
<script type="math/tex; mode=display">
\begin{equation}
  g(n) = \sum_{d \mid n} \mu(\frac{n}{d}) f(d)
\end{equation}</script><p>所以我们就得到了酱紫的东西：（妈呀其实这也是容斥）</p>
<script type="math/tex; mode=display">
\begin{eqnarray}
  f(n) =  \sum_{d \mid n} g(d)\\
  g(n)  =  \sum_{d \mid n} \mu(\frac{n}{d}) f(d)
\end{eqnarray}</script><p>基本上举了这两个例子，用于说明vfk的操作实际上是矩阵运算，免得很多人不知道vfk在干嘛。。。</p>
<h2 id="子集反演"><a href="#子集反演" class="headerlink" title="子集反演"></a>子集反演</h2><h3 id="形式A-1"><a href="#形式A-1" class="headerlink" title="形式A"></a>形式A</h3><script type="math/tex; mode=display">
\begin{eqnarray}
  f(S)  =  \sum_{T \subseteq S} g(T)\\
  g(S)  =  \sum_{T \subseteq S} (-1)^{\lvert S \rvert - \lvert T \rvert} f(T)
\end{eqnarray}</script><h3 id="形式B-1"><a href="#形式B-1" class="headerlink" title="形式B"></a>形式B</h3><script type="math/tex; mode=display">
\begin{eqnarray}
  f(S)  =  \sum_{S \subseteq T} g(T)\\
  g(S)  =  \sum_{S \subseteq T} (-1)^{\lvert T \rvert - \lvert S \rvert} f(T)
\end{eqnarray}</script><h3 id="形式C（多重子集反演）"><a href="#形式C（多重子集反演）" class="headerlink" title="形式C（多重子集反演）"></a>形式C（多重子集反演）</h3><p>定义 $\mu(S)$，$S$ 包含重复元素则为 $0$，否则为 $(-1)^{\lvert S \rvert}$</p>
<script type="math/tex; mode=display">
\begin{eqnarray}
  f(S)  =  \sum_{T \subseteq S} g(T)\\
  g(S)  =  \sum_{T \subseteq S} \mu(S - T) f(T)
\end{eqnarray}</script><h3 id="推导-2"><a href="#推导-2" class="headerlink" title="推导"></a>推导</h3><script type="math/tex; mode=display">
\begin{equation}
  \sum_{r \subseteq p} (-1)^{\lvert r \rvert} = [p = 0]
\end{equation}</script><p>这里的 $\lvert r \rvert$ 表示集合的大小<br>然后像以前一样做：</p>
<script type="math/tex; mode=display">
\begin{eqnarray}
  g(p)  = \sum_{q \subseteq p} [p - q = 0] g(q) \\
   =  \sum_{q \subseteq p} \sum_{r \subseteq p - q} (-1)^{\lvert r \rvert} g(q) \\
   =  \sum_{r \subseteq p} (-1)^{\lvert r \rvert} \sum_{q \subseteq p - r} g(q) \\
   =  \sum_{r \subseteq p} (-1)^{\lvert r \rvert} f(p - r) \\
   =  \sum_{r \subseteq p} (-1)^{\lvert p \rvert - \lvert r \rvert} f(r)
\end{eqnarray}</script><p>所以我们就得到了酱紫的东西：（妈呀就是裸容斥）</p>
<script type="math/tex; mode=display">
\begin{eqnarray}
  f(S)  =  \sum_{T \subseteq S} g(T)\\
  g(S)  =  \sum_{T \subseteq S} (-1)^{\lvert S \rvert - \lvert T \rvert} f(T)
\end{eqnarray}</script><p>子集反演很重要，因为通过它，你可以在本质的层面上理解莫比乌斯反演的真正内涵，所有的整数都可以看做集合，而多重子集反演则可以很好地解释莫比乌斯函数的必要性，而子集反演和二项式反演也有密不可分的联系（其实这三个反演的本质完全相同，都是同一种反演）</p>
<h2 id="离散傅里叶变换"><a href="#离散傅里叶变换" class="headerlink" title="离散傅里叶变换"></a>离散傅里叶变换</h2><h3 id="形式-1"><a href="#形式-1" class="headerlink" title="形式"></a>形式</h3><script type="math/tex; mode=display">
\begin{eqnarray}
  f_m  =  \sum_{k = 0}^{n - 1} \epsilon^{mk} g_k\\
  g_m  =  \frac{1}{n} \sum_{k = 0}^{n - 1} \epsilon^{-mk} f_k
\end{eqnarray}</script><h3 id="推导-3"><a href="#推导-3" class="headerlink" title="推导"></a>推导</h3><p>说实话并没有看懂vfk的推导。。。</p>
<p>注意到：</p>
<script type="math/tex; mode=display">
\begin{eqnarray}
      [(p + q) \bmod n = r] \\
   =  [(p + q - r) \bmod n = 0] \\
   =  \frac{1}{n}\sum_{k = 0}^{n - 1} \epsilon^{(p + q - r)k} \\
   =  \frac{1}{n}\sum_{k = 0}^{n - 1} \epsilon^{-rk} \epsilon^{pk} \epsilon^{qk}
\end{eqnarray}</script><p>这三部分几乎是独立的！</p>
<script type="math/tex; mode=display">
\begin{eqnarray}
  c_r  =  \sum_{p, q} [(p + q) \bmod n = r] a_p b_q \\
   =  \sum_{p, q} \frac{1}{n} \sum_{k = 0}^{n - 1} \epsilon^{-rk} \epsilon^{pk} \epsilon^{qk} a_p b_q \\
   =  \frac{1}{n} \sum_{k = 0}^{n - 1} \epsilon^{-rk} \sum_{p, q} \epsilon^{pk} a_p \epsilon^{qk} b_q \\
   =  \frac{1}{n} \sum_{k = 0}^{n - 1} \epsilon^{-rk} \sum_{p} \epsilon^{pk} a_p \sum_{q} \epsilon^{qk} b_q \\
\end{eqnarray}</script><p>抓到你了！反演君！<br>所以我们就得到了酱紫的东西：</p>
<script type="math/tex; mode=display">
\begin{eqnarray}
  f_m  =  \sum_{k = 0}^{n - 1} \epsilon^{mk} g_k\\
  g_m  =  \frac{1}{n} \sum_{k = 0}^{n - 1} \epsilon^{-mk} f_k
\end{eqnarray}</script><p>利用分治和单位根的小性质，这两个都是可以快速求的</p>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="UOJ-Round-5-C"><a href="#UOJ-Round-5-C" class="headerlink" title="UOJ Round #5 C"></a>UOJ Round #5 C</h2><p>令 $p = 998244353$（$7 \times 17 \times 2^{23} + 1$，一个质数）。<br>给你整数 $n, c, d$。现在有整数 $x_1, \dots, x_n$ 和 $b_1, \dots, b_n$ 满足 $0 \leq x_1, \dots, x_n, b_1, \dots, b_n &lt; p$，且对于 $1 \leq i \leq n$ 满足：</p>
<script type="math/tex; mode=display">\begin{equation}
  \sum_{j = 1}^{n} \gcd(i, j)^c \cdot lcm(i, j)^d \cdot x_j \equiv b_i \pmod{p}
\end{equation}</script><p>有 $q$ 个询问，每次给出 $b_1, \dots, b_n$，请你解出 $x_1, \dots, x_n$ 的值。<br>$n \leq 10^5$, $nq \leq 3 \times 10^5$</p>
<h2 id="经典问题"><a href="#经典问题" class="headerlink" title="经典问题"></a>经典问题</h2><p>有两个长度为 $2^n$ 的数列 $a_0, \dots, a_{2^n-1}$，$b_0, \dots, b_{2^n-1}$。<br>求数列 $c$，其中</p>
<script type="math/tex; mode=display">
\begin{equation}
  c_r = \sum_{p, q} [p \mbox{ or } q = r] a_p b_q
\end{equation}</script><p>$n \leq 20$</p>
<h2 id="经典问题-1"><a href="#经典问题-1" class="headerlink" title="经典问题"></a>经典问题</h2><p>有两个长度为 $n$ 的数列 $a_0, \dots, a_{n-1}$，$b_0, \dots, b_{n-1}$。<br>求数列 $c$，其中</p>
<script type="math/tex; mode=display">
\begin{equation}
  c_r = \sum_{p, q} [(p + q) \bmod n = r] a_p b_q
\end{equation}</script><p>$n$ 是 $2$ 的整数次幂，$n \leq 2^{20}$。</p>
<h2 id="经典问题-2"><a href="#经典问题-2" class="headerlink" title="经典问题"></a>经典问题</h2><p>有两个长度为 $2^n$ 的数列 $a_0, \dots, a_{2^n-1}$，$b_0, \dots, b_{2^n-1}$。<br>求数列 $c$，其中</p>
<script type="math/tex; mode=display">\begin{equation}
  c_r = \sum_{p, q} [p \mbox{ and } q = r] a_p b_q
\end{equation}</script><p>$n \leq 20$</p>
<h2 id="经典问题-3"><a href="#经典问题-3" class="headerlink" title="经典问题"></a>经典问题</h2><p>有两个长度为 $2^n$ 的数列：$a_0, \dots, a_{2^n-1}$ 和 $b_0, \dots, b_{2^n-1}$。<br>求数列 $c$，其中</p>
<script type="math/tex; mode=display">
\begin{equation}
  c_r = \sum_{p \subseteq r} a_p b_{r - p}
\end{equation}</script><p>要求 $O(n^2 2^n)$</p>
<h1 id="优秀代码"><a href="#优秀代码" class="headerlink" title="优秀代码"></a>优秀代码</h1><h2 id="莫比乌斯反演-1"><a href="#莫比乌斯反演-1" class="headerlink" title="莫比乌斯反演"></a>莫比乌斯反演</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i = n; i++)</div><div class="line">      g[i] = f[i];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i = n; i++)</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i + i; j = n; j += i)</div><div class="line">        g[j] -= g[i];</div></pre></td></tr></table></figure>
<h2 id="子集反演-1"><a href="#子集反演-1" class="headerlink" title="子集反演"></a>子集反演</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; (<span class="number">1</span> &lt;&lt; n); s++)</div><div class="line">        <span class="keyword">if</span> (s &gt;&gt; i &amp; <span class="number">1</span>)</div><div class="line">            f[s] += f[s ^ <span class="number">1</span> &lt;&lt; i];</div></pre></td></tr></table></figure>
<p>无脑反着写：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; (<span class="number">1</span> &lt;&lt; n); s++)</div><div class="line">        <span class="keyword">if</span> (s &gt;&gt; i &amp; <span class="number">1</span>)</div><div class="line">            f[s] -= f[s ^ <span class="number">1</span> &lt;&lt; i];</div></pre></td></tr></table></figure></p>
<p>感觉东西不少，提炼的也差不多了，那么就先这样子吧</p>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;最近补了一下以前反演的坑，写个博客记录一下大致内容以及细节问题，便于日后复习&lt;br&gt;
    
    </summary>
    
    
      <category term="数论" scheme="https://goseqh.tk/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="数学" scheme="https://goseqh.tk/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="线性代数" scheme="https://goseqh.tk/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
      <category term="反演" scheme="https://goseqh.tk/tags/%E5%8F%8D%E6%BC%94/"/>
    
  </entry>
  
  <entry>
    <title>烤肉？烤肉。</title>
    <link href="https://goseqh.tk/2017/07/29/%E7%83%A4%E8%82%89%EF%BC%9F%E7%83%A4%E8%82%89%E3%80%82/"/>
    <id>https://goseqh.tk/2017/07/29/烤肉？烤肉。/</id>
    <published>2017-07-29T14:52:08.000Z</published>
    <updated>2017-07-29T15:56:49.043Z</updated>
    
    <content type="html"><![CDATA[<link href="/style.css" rel="stylesheet" type="text/css"><script src="/crypto-js.js"></script><script src="/mcommon.js"></script><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" Maybe you cannot access this article, I'm sorry. "/> <label for="pass"> Maybe you cannot access this article, I'm sorry. </label> <div class="bottom-line"></div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      Nice to meet you.
    
    </summary>
    
    
      <category term="感悟" scheme="https://goseqh.tk/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>单调队列&amp;单调栈总结</title>
    <link href="https://goseqh.tk/2017/07/26/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97-%E5%8D%95%E8%B0%83%E6%A0%88%E6%80%BB%E7%BB%93/"/>
    <id>https://goseqh.tk/2017/07/26/单调队列-单调栈总结/</id>
    <published>2017-07-26T07:44:05.000Z</published>
    <updated>2017-07-27T00:48:45.665Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>最近刷了一波JCY大神的课件，打算认真练习一发单调队列/单调栈，于是有了这篇总结，同时作为之后学习单调优化DP的基础<br><a id="more"></a></p>
<h1 id="单调队列-单调栈概念介绍"><a href="#单调队列-单调栈概念介绍" class="headerlink" title="单调队列/单调栈概念介绍"></a>单调队列/单调栈概念介绍</h1><p>由于个人认为这两者基本没什么区别，所以放在一起进行讲解</p>
<p>单调队列就是一个队列，里面的元素具有单调性，所以就可以在里面进行各种操作，比如在里面进行二分啊什么的，但是如果只能二分那其实也没有什么学习的必要性，更加重点的作用就是它能够同时维护多个区间的信息，具体原因下文会有所讲述<br><img src="http://otp08noas.bkt.clouddn.com/3.png" alt=""><br>而单调栈很显然就是一个栈，它里面的元素也是具有单调性的，但是每次只能从一个方向进出<br><img src="http://otp08noas.bkt.clouddn.com/4.png" alt=""></p>
<p>首先说一下个人的理解，单调队列和单调栈其实没有什么本质区别，首先单调栈，看上去它是一个内部元素有序化的这么一个数据结构，但如果深入挖掘栈内各个元素的本质，就会发现，实际上栈内每个元素都代表着一个区间，这个区间中的极值就是这个元素的值（极值可以使最大值或最小值，这个看你如何进行维护）</p>
<p>为什么这么说呢？我们可以看一下这个图：<br><img src="http://otp08noas.bkt.clouddn.com/1.png" alt=""><br>这时我们已经处理了两个大括号之间的所有数据，然后，我们把单调栈里的每一项都用一种颜色进行标记，同时标出它们在原序列上对应的区间，如下图：<br><img src="http://otp08noas.bkt.clouddn.com/2.png" alt=""><br>我们会发现，每个元素在它自己的区间内，都是最大值，这就是单调栈的实质，通过许多单个元素同时维护“许多区间”</p>
<p>为什么这么说呢，大家可以把当前单调栈中维护的区间看作这样子：</p>
<p>首先，我们不是标记出了每个颜色的范围吗，把这个每个颜色中的元素的在原序列中的下标视为左端点，现在更新到的原序列中的位置视为右端点，那么这个栈里面就总共维护着已经更新的原序列中的元素的个数这么多个区间，我们每次都会使右端点向右移动一个单位，这样总共就会维护到 $\frac{n ∗ (n + 1)}{2}$ 个区间，对应原序列的全部子区间，这种理解，我个人称作 <strong>区间化理解</strong></p>
<p>所以，单调栈往往可以解决具有如下特征的问题：</p>
<ul>
<li>涉及最值</li>
<li>询问全部区间的情况（个数为$O(n^2)$)<br>显然，单调栈的特性在于第二点，它能同时维护许多区间，所以就可以把原本暴力$O(n^2)$才能解决问题的算法优化到了$O(n)$，其实这是一个极为优秀的优化</li>
</ul>
<p>我们可以在每次加入元素的同时，直接把答案进行批量累加（即再维护一个当前栈内所有区间的贡献和，每次把答案加上这个总贡献），这样就能够非常高效的维护与所有区间有关的信息，我把这种方法称为<strong>整体化处理</strong>，这种方法有时虽然可以被替代，但更多时候它能简化出栈时更新答案的复杂性，因为<strong>整体化处理</strong>是随时更新答案的</p>
<p>或者是在每次弹出元素的时候，对答案进行更新，这样可以保证相对于单个区间来说的答案最优性（相当于<strong>极大化</strong>区间贡献）</p>
<p>而单调队列就相当于，我们移动了元素的起始位置，像是一个滑动的窗口，在左端点向右移动时，我们永远地舍弃掉了那些掉出窗口的元素，这样做的目的会在下文的讲解中体现</p>
<p>下面举几个例题，来简单介绍一下它的具体用法与应用范围</p>
<h1 id="例题讲解"><a href="#例题讲解" class="headerlink" title="例题讲解"></a>例题讲解</h1><h2 id="51nod-1102-面积最大的矩形"><a href="#51nod-1102-面积最大的矩形" class="headerlink" title="51nod 1102 面积最大的矩形"></a>51nod 1102 面积最大的矩形</h2><p>基准时间限制：1 秒<br>空间限制：131072 KB<br>分值：20<br>难度：3级算法题</p>
<p>有一个正整数的数组，化为直方图，求此直方图包含的最大矩形面积。例如 $2,1,5,6,2,3$，对应的直方图如下：</p>
<p>面积最大的矩形为$5,6$组成的宽度为$2$的矩形，面积为$10$。</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>$第1行：1个数N，表示数组的长度(0 &lt;= N &lt;= 50000)$<br>$第2 - N + 1行：数组元素A[i]。(1 &lt;= A[i] &lt;= 10^9)$</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>输出最大的矩形面积</p>
<h3 id="Input示例"><a href="#Input示例" class="headerlink" title="Input示例"></a>Input示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">6</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">6</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<h3 id="Output示例"><a href="#Output示例" class="headerlink" title="Output示例"></a>Output示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">10</span></div></pre></td></tr></table></figure>
<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>求最大矩形面积，这是单调栈的一个常见应用，考虑到当高度下降的时候，被卡住的那些矩形就永远只能被卡在那里了，所以这时它们就应该出栈，于是我们就知道应该维护一个单调上升的单调栈，细节可见代码</p>
<p>维护方法：我们对于每个进栈的元素定义结构体，里面有两个成员变量，分别代表它入栈的位置和它自己的高度（用于比较的键值），出栈时用当前的位置与它入栈的位置的距离减一作为矩形一边，高度作为另一边计算面积并更新答案</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">LL line[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rec</span>&#123;</span></div><div class="line">    LL val, idx;</div><div class="line">    rec(LL val, LL idx) : val(val), idx(idx)&#123;&#125;</div><div class="line">    rec()&#123;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">stack</span>&lt;rec&gt; save;</div><div class="line">LL ans = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        rec op;</div><div class="line">        <span class="keyword">int</span> l = i;</div><div class="line">        <span class="keyword">while</span>(!save.empty() &amp;&amp; (save.top()).val &gt; line[i])&#123;</div><div class="line">            op = save.top();</div><div class="line">            ans = max(ans, (i - op.idx) * op.val);</div><div class="line">            l = op.idx;</div><div class="line">            save.pop();</div><div class="line">        &#125;</div><div class="line">        save.push(rec(line[i], l));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (!save.empty())&#123;</div><div class="line">        rec op = save.top();</div><div class="line">        ans = max(ans, (n - op.idx + <span class="number">1</span>) * op.val);</div><div class="line">        save.pop();</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("rec.in", "r", stdin);</span></div><div class="line">    freopen("rec.out", "w", stdout);*/</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;line[i]);</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="51nod-1158-全是1的最大子矩阵"><a href="#51nod-1158-全是1的最大子矩阵" class="headerlink" title="51nod 1158 全是1的最大子矩阵"></a>51nod 1158 全是1的最大子矩阵</h2><p>基准时间限制：1 秒<br>空间限制：131072 KB<br>分值：80<br>难度：5级算法题</p>
<p>给出1个$M*N$的矩阵$M_1$，里面的元素只有0或1，找出$M_1$的一个子矩阵$M_2$，$M_2$中的元素只有1，并且$M_2$的面积是最大的。输出$M_2$的面积。</p>
<h3 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h3><p>$第1行:2个数m,n中间用空格分隔(2 &lt;= m,n &lt;= 500)$<br>$第2 - N + 1行：每行m个数，中间用空格分隔，均为0或1。$</p>
<h3 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h3><p>$输出最大全是1的子矩阵的面积。$</p>
<h3 id="Input示例-1"><a href="#Input示例-1" class="headerlink" title="Input示例"></a>Input示例</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">3 </span><span class="number">3</span></div><div class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">0</span></div><div class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">1</span></div><div class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">1</span></div></pre></td></tr></table></figure>
<h3 id="Output示例-1"><a href="#Output示例-1" class="headerlink" title="Output示例"></a>Output示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure>
<h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><p>上一题的二维加强版，直接对每一行套用上一题方法即可</p>
<p>维护方法：同上一题</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 505</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> geo[maxn][maxn];</div><div class="line"><span class="keyword">int</span> low[maxn][maxn];</div><div class="line"><span class="keyword">int</span> up[maxn][maxn];</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</div><div class="line">        low[n - <span class="number">1</span>][j] = (geo[n - <span class="number">1</span>][j]) ? <span class="number">1</span> : <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)&#123;</div><div class="line">            low[i][j] = (geo[i][j]) ? low[i + <span class="number">1</span>][j] + <span class="number">1</span> : <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mat</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> val, idx;</div><div class="line">    mat(<span class="keyword">int</span> val, <span class="keyword">int</span> idx) : val(val), idx(idx)&#123;&#125;</div><div class="line">    mat()&#123;&#125;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> row)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="built_in">stack</span>&lt;mat&gt; save;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) line[i] = low[row][i];</div><div class="line">    save.push(mat(line[<span class="number">0</span>], <span class="number">0</span>));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++)&#123;</div><div class="line">        mat op = save.top();</div><div class="line">        <span class="keyword">int</span> l = i;</div><div class="line">        <span class="keyword">while</span> (!save.empty() &amp;&amp; op.val &gt;= line[i])&#123;</div><div class="line">            l = op.idx;</div><div class="line">            ans = max(ans, (i - l) * op.val);</div><div class="line">            save.pop();</div><div class="line">            <span class="keyword">if</span> (save.empty()) <span class="keyword">break</span>;</div><div class="line">            op = save.top();</div><div class="line">        &#125;</div><div class="line">        save.push(mat(line[i], l));</div><div class="line">        ans = max(ans, (i - l + <span class="number">1</span>) * line[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*--------------------*/</span></div><div class="line">    <span class="keyword">while</span> (!save.empty())&#123;</div><div class="line">        mat op = save.top();</div><div class="line">        ans = max(ans, (m - op.idx) * op.val);</div><div class="line">        save.pop();</div><div class="line">        <span class="keyword">if</span> (save.empty()) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*--------------------*/</span></div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) ans = max(ans, cal(i));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("mat.in", "r", stdin);</span></div><div class="line">    freopen("mat.out", "w" ,stdout);*/</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;geo[i][j]);</div><div class="line">    init();</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="51nod-1215-数组的宽度"><a href="#51nod-1215-数组的宽度" class="headerlink" title="51nod 1215 数组的宽度"></a>51nod 1215 数组的宽度</h2><p>题目来源： Javaman<br>基准时间限制：1 秒<br>空间限制：131072 KB<br>分值： 80<br>难度：5级算法题</p>
<p>N个整数组成的数组，定义子数组$a[i]..a[j]$的宽度为：$max(a[i]..a[j]) - min(a[i]..a[j])$，求所有子数组的宽度和。</p>
<h3 id="Input-2"><a href="#Input-2" class="headerlink" title="Input"></a>Input</h3><p>$第1行：1个数N，表示数组的长度。(1 &lt;= N &lt;= 50000)$<br>$第2 - N + 1行：每行1个数，表示数组中的元素(1 &lt;= A[i] &lt;= 50000)$</p>
<h3 id="Output-2"><a href="#Output-2" class="headerlink" title="Output"></a>Output</h3><p>输出所有子数组的宽度和。</p>
<h3 id="Input示例-2"><a href="#Input示例-2" class="headerlink" title="Input示例"></a>Input示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">5</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">5</span></div></pre></td></tr></table></figure>
<h3 id="Output示例-2"><a href="#Output示例-2" class="headerlink" title="Output示例"></a>Output示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">20</span></div></pre></td></tr></table></figure>
<h2 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h2><p>发现最大值与最小值可以分开维护，这样就简单了许多，我们可以通过单调栈快速求出所有区间的极值之和，具体方法需要我上面的对于单调栈的<strong>区间化理解</strong>，细节见代码</p>
<p>维护方法，由于对称性，仅讲解最大值的求法：对每个入栈的元素定义结构体，内含两个成员变量，其中一个代表在<strong>区间化理解</strong>的意义下，这个元素所代表的区间的左端点，另一个变量代表它本身的值（键值），出栈时，由于它一定小于把它挤出去的那个元素，于是需要把它自己的左端点传给那个新来的元素，然后自己出栈，对于答案，我们采用<strong>整体化处理</strong>，用一个全局变量维护当前栈内元素所代表的所有区间的最大值的和，每次把一个元素入栈以后，我们需要把出栈的那些元素对这个全局变量的贡献减掉，然后加上刚入栈的那个元素的贡献，然后直接加入最终答案即可</p>
<p>p.s. 其实也不一定用到整体化处理，我们考察区间化理解的意义后，可以直接在每个元素出栈时再用它们的贡献更新答案，所以这不算是整体化处理的典型用法</p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">LL line[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inter</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> val, l, r;</div><div class="line">    inter(<span class="keyword">int</span> val, <span class="keyword">int</span> l, <span class="keyword">int</span> r) : val(val), l(l), r(r)&#123;&#125;</div><div class="line">    inter()&#123;&#125;</div><div class="line">&#125;;</div><div class="line"><span class="function">LL <span class="title">get_max</span><span class="params">()</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>, now = <span class="number">0</span>;</div><div class="line">    <span class="built_in">stack</span>&lt;inter&gt; save;</div><div class="line">    save.push(inter(line[<span class="number">1</span>], <span class="number">1</span>, <span class="number">1</span>));</div><div class="line">    ans = now = line[<span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> l = i;</div><div class="line">        inter op = save.top();</div><div class="line">        <span class="keyword">while</span> (!save.empty() &amp;&amp; op.val &lt;= line[i])&#123;</div><div class="line">            now -= (LL)(op.r - op.l + <span class="number">1</span>) * op.val;</div><div class="line">            l = op.l;</div><div class="line">            save.pop();</div><div class="line">            <span class="keyword">if</span> (save.empty()) <span class="keyword">break</span>;</div><div class="line">            op = save.top();</div><div class="line">        &#125;</div><div class="line">        save.push(inter(line[i], l, i));</div><div class="line">        now += (i - l + <span class="number">1</span>) * line[i];</div><div class="line">        ans += now;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function">LL <span class="title">get_min</span><span class="params">()</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>, now = <span class="number">0</span>;</div><div class="line">    <span class="built_in">stack</span>&lt;inter&gt; save;</div><div class="line">    save.push(inter(line[<span class="number">1</span>], <span class="number">1</span>, <span class="number">1</span>));</div><div class="line">    ans = now = line[<span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> l = i;</div><div class="line">        inter op = save.top();</div><div class="line">        <span class="keyword">while</span> (!save.empty() &amp;&amp; op.val &gt;= line[i])&#123;</div><div class="line">            now -= (LL)(op.r - op.l + <span class="number">1</span>) * op.val;</div><div class="line">            l = op.l;</div><div class="line">            save.pop();</div><div class="line">            <span class="keyword">if</span> (save.empty()) <span class="keyword">break</span>;</div><div class="line">            op = save.top();</div><div class="line">        &#125;</div><div class="line">        save.push(inter(line[i], l, i));</div><div class="line">        now += (i - l + <span class="number">1</span>) * line[i];</div><div class="line">        ans += now;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("width.in", "r", stdin);</span></div><div class="line">    freopen("width.out", "w", stdout);*/</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;line[i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, get_max() - get_min());</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="51nod-1272-最大距离"><a href="#51nod-1272-最大距离" class="headerlink" title="51nod 1272 最大距离"></a>51nod 1272 最大距离</h2><p>题目来源： Codility<br>基准时间限制：1 秒<br>空间限制：131072 KB<br>分值： 20<br>难度：3级算法题</p>
<p>给出一个长度为$N$的整数数组$A$，对于每一个数组元素，如果他后面存在大于等于该元素的数，则这两个数可以组成一对。每个元素和自己也可以组成一对。例如：${5, 3, 6, 3, 4, 2}$，可以组成$11$对，如下（数字为下标）：<br>$(0,0), (0, 2), (1, 1), (1, 2), (1, 3), (1, 4), (2, 2), (3, 3), (3, 4), (4, 4), (5, 5)$。其中$(1, 4)$是距离最大的一对，距离为3。</p>
<h3 id="Input-3"><a href="#Input-3" class="headerlink" title="Input"></a>Input</h3><p>$第1行：1个数N，表示数组的长度(2 &lt;= N &lt;= 50000)。$<br>$第2 - N + 1行：每行1个数，对应数组元素A_i(1 &lt;= A_i &lt;= 10^9)。$</p>
<h3 id="Output-3"><a href="#Output-3" class="headerlink" title="Output"></a>Output</h3><p>输出最大距离。</p>
<h3 id="Input示例-3"><a href="#Input示例-3" class="headerlink" title="Input示例"></a>Input示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">6</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">6</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure>
<h3 id="Output示例-3"><a href="#Output示例-3" class="headerlink" title="Output示例"></a>Output示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<h2 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h2><p>这道题算是比较经典的单调栈内二分的题目，这就是单调栈的一种比较简单的操作，其实这题我是搞了一段时间的，主要是想有没有$O(n)$的算法，然而最后还是没能想出来。。。</p>
<p>维护方法：本题采用了一种不同的维护方式，即不保留刚入栈元素的方式，每次对于刚入栈的元素，如果它小于栈顶元素，我们把它直接入栈，否则，我们不将它入栈，而是在原栈中二分寻找答案，并更新最终答案，容易知道这样做是正确的</p>
<h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">num</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> val, idx;</div><div class="line">    num(<span class="keyword">int</span> val, <span class="keyword">int</span> idx) : val(val), idx(idx)&#123;&#125;</div><div class="line">    num()&#123;&#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> num b) <span class="keyword">const</span>&#123;</div><div class="line">        <span class="keyword">return</span> val &gt; b.val;</div><div class="line">    &#125;</div><div class="line">&#125;save[maxn];</div><div class="line"><span class="keyword">int</span> head;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(num x)</span></span>&#123;</div><div class="line">    save[head++] = x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">(num x)</span></span>&#123;</div><div class="line">    head--;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> num <span class="title">top</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> save[head - <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">    push(num(line[<span class="number">1</span>], <span class="number">1</span>));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        num op = top();</div><div class="line">        <span class="keyword">if</span> (line[i] &lt; op.val) push(num(line[i], i));</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            num* op2 = lower_bound(save, save + head, num(line[i], i));</div><div class="line">            ans = max(ans, i - op2 -&gt; idx);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("maxlen.in", "r", stdin);</span></div><div class="line">    freopen("maxlen.out", "w", stdout);*/</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="51nod-1962-区间计数"><a href="#51nod-1962-区间计数" class="headerlink" title="51nod 1962 区间计数"></a>51nod 1962 区间计数</h2><p>基准时间限制：1.5 秒<br>空间限制：262144 KB<br>分值： 80<br>难度：5级算法题</p>
<p>两个数列 ${A_n} ， {B_n}$ ，请求出$Ans$, $Ans$定义如下：</p>
<script type="math/tex; mode=display">Ans=\sum_{i = 1}^{n}\sum_{j = 1}^{n}[j=i][max\{A_i,A_{i+1},...,A_j\}=max\{B_i,B_{i+1},...,B_j\}]</script><p>注：[ ]内表达式为真，则为1，否则为0.</p>
<p>$1≤N≤3.5×10^5$<br>$1≤A_i,B_i≤N $</p>
<h3 id="样例解释："><a href="#样例解释：" class="headerlink" title="样例解释："></a>样例解释：</h3><p>7个区间分别为：$（1,4），（1,5），（2,4），（2,5），（3,3），（3,5），（4,5）$</p>
<h3 id="Input-4"><a href="#Input-4" class="headerlink" title="Input"></a>Input</h3><p>$第一行一个整数N$<br>$第二行N个整数A_i$<br>$第三行N个整数B_i$</p>
<h3 id="Output-4"><a href="#Output-4" class="headerlink" title="Output"></a>Output</h3><p>一行，一个整数$Ans$</p>
<h3 id="Input示例-4"><a href="#Input示例-4" class="headerlink" title="Input示例"></a>Input示例</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">5</span></div><div class="line"><span class="symbol">1 </span><span class="number">4</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></div><div class="line"><span class="symbol">3 </span><span class="number">2</span> <span class="number">2</span> <span class="number">4</span> <span class="number">1</span></div></pre></td></tr></table></figure>
<h3 id="Output示例-4"><a href="#Output示例-4" class="headerlink" title="Output示例"></a>Output示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">7</span></div></pre></td></tr></table></figure>
<h2 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h2><p>其实我是先做的这道题，然后再看的其他题。。。<br>这题就是，我们同样使用区间化理解，先分别为两个序列维护两个栈，然后对栈内每个数记录一个区间，每次我们就是要求两个栈内的相同的数所对应的区间的交，我们每次插入元素，就把所有的交的和累加进答案，这就是我说的整体化处理</p>
<p>维护方法：对每个元素记录一个区间，和它本身的值，对值相同的元素我们求交，并把交的长度加入整体维护的全局变量中，出栈入栈分别删除或增加，每次当前位置更新完毕后，我们直接把答案加入最终答案即可</p>
<h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 400005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inter</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">    inter(<span class="keyword">int</span> l, <span class="keyword">int</span> r) : l(l), r(r)&#123;&#125;</div><div class="line">    inter()&#123;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_insect</span><span class="params">(inter a, inter b)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (a.l &gt; b.l) swap(a, b);</div><div class="line">    <span class="keyword">if</span> (a.r &lt; b.l) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> min(a.r, b.r) - b.l + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; savea, saveb;</div><div class="line"><span class="keyword">int</span> linea[maxn], lineb[maxn];</div><div class="line">inter reca[maxn], recb[maxn];</div><div class="line">LL ans, now;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) reca[i] = recb[i] = inter(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    savea.push(linea[<span class="number">1</span>]);</div><div class="line">    reca[linea[<span class="number">1</span>]] = inter(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    saveb.push(lineb[<span class="number">1</span>]);</div><div class="line">    recb[lineb[<span class="number">1</span>]] = inter(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    now = ans = get_insect(recb[lineb[<span class="number">1</span>]], reca[lineb[<span class="number">1</span>]]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> op;</div><div class="line">        inter ka = inter(i, i);</div><div class="line">        <span class="keyword">while</span> (!savea.empty() &amp;&amp; (op = savea.top()) &lt;= linea[i])&#123;</div><div class="line">            now -= get_insect(reca[op], recb[op]);</div><div class="line">            ka.l = reca[op].l;</div><div class="line">            reca[op] = inter(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">            savea.pop();</div><div class="line">        &#125;</div><div class="line">        savea.push(linea[i]);</div><div class="line"></div><div class="line">        inter kb = inter(i, i);</div><div class="line">        <span class="keyword">while</span> (!saveb.empty() &amp;&amp; (op = saveb.top()) &lt;= lineb[i])&#123;</div><div class="line">            now -= get_insect(reca[op], recb[op]);</div><div class="line">            kb.l = recb[op].l;</div><div class="line">            recb[op] = inter(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">            saveb.pop();</div><div class="line">        &#125;</div><div class="line">        saveb.push(lineb[i]);</div><div class="line"></div><div class="line">        reca[linea[i]] = ka;</div><div class="line">        recb[lineb[i]] = kb;</div><div class="line">        <span class="keyword">if</span>  (linea[i] == lineb[i])&#123;</div><div class="line">            now += get_insect(ka, kb);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            now += get_insect(reca[linea[i]], recb[linea[i]]);</div><div class="line">            now += get_insect(reca[lineb[i]], recb[lineb[i]]);</div><div class="line">        &#125;</div><div class="line">        ans += now;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("inter.in", "r", stdin);</span></div><div class="line">    freopen("inter.out" ,"w", stdout);*/</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;linea[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;lineb[i]);</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="51nod-1153-选择子序列"><a href="#51nod-1153-选择子序列" class="headerlink" title="51nod 1153 选择子序列"></a>51nod 1153 选择子序列</h2><p>题目来源： Codility<br>基准时间限制：1 秒<br>空间限制：131072 KB<br>分值： 40<br>难度：4级算法题</p>
<p>长度为$N的整数数组A$，所有的数均不相同，假设下标从$0$开始。找到一个最长的数组B，B数组的长度为K，数值范围是$0 - N - 1$，记录的是A数组的下标。</p>
<p>满足$A[B[0]] &gt; A[B[1]] &gt; A[B[2]] &gt;…A[B[K]]$，并且对任意连续的两项$B[i]及B[i + 1]$，满足$min(B[i]，B[i + 1]) &lt; j &lt; max(B[i]，B[i + 1])$ 均有$A[j] &lt; A[B[i + 1]] $，求最大的K。</p>
<p>例如：$9, 10, 2, -1, 3, -5, 0, -3, 1, 12, 5, 8, -2, 6, 4$。可以选出：$12, 10, 3, 1, 0, -3。$对应的下标为$：9, 1, 4, 8, 6, 7$（就是B数组），输出$6$。</p>
<h3 id="Input-5"><a href="#Input-5" class="headerlink" title="Input"></a>Input</h3><p>$第1行：一个数N，表示A数组的长度。（1 &lt;= N &lt;= 50000)$<br>$第2 - N + 1行：每行1个数对应A数组的元素Ai（0 &lt; Ai &lt; 10^9)$</p>
<h3 id="Output-5"><a href="#Output-5" class="headerlink" title="Output"></a>Output</h3><p>$输出B数组最长的长度K。$</p>
<h3 id="Input示例-5"><a href="#Input示例-5" class="headerlink" title="Input示例"></a>Input示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="number">15</span></div><div class="line"><span class="number">9</span></div><div class="line"><span class="number">10</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">-1</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">-5</span></div><div class="line"><span class="number">0</span></div><div class="line"><span class="number">-3</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">12</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">8</span></div><div class="line"><span class="number">-2</span></div><div class="line"><span class="number">6</span></div><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure>
<h3 id="Output示例-5"><a href="#Output示例-5" class="headerlink" title="Output示例"></a>Output示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">6</span></div></pre></td></tr></table></figure>
<h2 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h2><p>我们很容易发现本题的贪心策略，每次选当前区间中最大的数，然后在分出的左右两个小区间中重复上述过程，找到最长的那个序列就可以了，正常的想法就是维护线段树，然后$O(n\log n)$解决，但是我觉得，既然是在做单调栈，为什么不在$O(n)$内解决呢？于是我就想到了单调栈的做法</p>
<p>维护方法：对每个元素维护一个结构体，内含两个成员变量，分别为当前求出的DP值和元素本身的值，我们每次在pop出一个元素后，我们用这个元素的最长长度加一，更新新的栈顶元素的最长长度，同时对于每次进栈的那个元素，用所有被它挤出去的那些元素的最长长度加一来更新它的最长长度，最后在每次操作时都用元素的最长长度更新答案，并且把所有元素都出栈检查即可</p>
<h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">num</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> val, ans;</div><div class="line">    num(<span class="keyword">int</span> val, <span class="keyword">int</span> ans) : val(val), ans(ans)&#123;&#125;</div><div class="line">    num()&#123;&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</div><div class="line">    <span class="built_in">stack</span>&lt;num&gt; save;</div><div class="line">    save.push(num(line[<span class="number">1</span>], <span class="number">1</span>));</div><div class="line">    tot = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        num op = save.top();</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (!save.empty() &amp;&amp; op.val &lt;= line[i])&#123;</div><div class="line">            ans = max(ans, op.ans);</div><div class="line">            save.pop();</div><div class="line">            <span class="keyword">if</span> (!save.empty())&#123;</div><div class="line">                num op2 = save.top();</div><div class="line">                save.pop();</div><div class="line">                op2.ans = max(op2.ans, op.ans + <span class="number">1</span>);</div><div class="line">                save.push(op2);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">            op = save.top();</div><div class="line">        &#125;</div><div class="line">        save.push(num(line[i], ans + <span class="number">1</span>));</div><div class="line">        tot = max(tot, ans + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (!save.empty())&#123;</div><div class="line">        num op = save.top();</div><div class="line">        tot = max(tot, op.ans);</div><div class="line">        save.pop();</div><div class="line">        <span class="keyword">if</span> (!save.empty())&#123;</div><div class="line">            num op2 = save.top();</div><div class="line">            save.pop();</div><div class="line">            op2.ans = max(op2.ans, op.ans + <span class="number">1</span>);</div><div class="line">            save.push(op2);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, tot);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("sub.in", "r", stdin);</span></div><div class="line">    freopen("sub.out", "w", stdout);*/</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="51nod-1275-连续子段的差异"><a href="#51nod-1275-连续子段的差异" class="headerlink" title="51nod 1275 连续子段的差异"></a>51nod 1275 连续子段的差异</h2><p>题目来源： Codility<br>基准时间限制：1 秒<br>空间限制：131072 KB<br>分值： 80<br>难度：5级算法题</p>
<p>给出一个包括N个元素的整数数组A，包括A本身在内，共有 $\frac{n * (n + 1)}{2}$个非空子段。例如：1 3 2的子段为{1} {3} {2} {1 3} {3 2} {1 3 2}。在这些子段中，如果最大值同最小值的差异不超过K，则认为这是一个合格的子段。给出数组A和K，求有多少符合条件的子段。例如：3 5 7 6 3，K = 2，符合条件的子段包括：{3} {5} {7} {6} {3} {3 5} {5 7} {7 6} {5 7 6}，共9个。</p>
<h3 id="Input-6"><a href="#Input-6" class="headerlink" title="Input"></a>Input</h3><p>$第1行：2个数N, K（1 &lt;= N &lt;= 50000, 0 &lt;= K &lt;= 10^9)$<br>$第2 - N + 1行：每行1个数，对应数组的元素A_i(0 &lt;= A[i] &lt;= 10^9)$</p>
<h3 id="Output-6"><a href="#Output-6" class="headerlink" title="Output"></a>Output</h3><p>输出符合条件的子段数量。</p>
<h3 id="Input示例-6"><a href="#Input示例-6" class="headerlink" title="Input示例"></a>Input示例</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">5 </span><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">7</span></div><div class="line"><span class="number">6</span></div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure>
<h3 id="Output示例-6"><a href="#Output示例-6" class="headerlink" title="Output示例"></a>Output示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">9</span></div></pre></td></tr></table></figure>
<h2 id="题目分析-6"><a href="#题目分析-6" class="headerlink" title="题目分析"></a>题目分析</h2><p>这就是一个需要用到单调队列的题目了，同时根据本题的特性，本题还需要使用尺取法，我们先维护两个队列，一个维护最大值，另一个维护最小值，我们每次同时向两个队列中加入元素并更新，然后直到两个队列最大和最小的元素之差超过$K$，然后我们统计数量并向右移动队列的左端点（同时移动两个队列的），再重复上述尺取过程，这样就可以解决问题了，这种问题的解决，需要基于同时性处理，即同时入队一个元素，同时出队一个元素</p>
<h2 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; inc;</div><div class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; dec;</div><div class="line"></div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("diff.in", "r", stdin);</span></div><div class="line">    freopen("diff.out", "w", stdout);*/</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</div><div class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="keyword">while</span>(cur &lt; n)&#123;</div><div class="line">            <span class="keyword">while</span> (!dec.empty() &amp;&amp; line[dec.back()] &lt;= line[cur]) dec.pop_back();</div><div class="line">            dec.push_back(cur);</div><div class="line">            <span class="keyword">while</span> (!inc.empty() &amp;&amp; line[inc.back()] &gt;= line[cur]) inc.pop_back();</div><div class="line">            inc.push_back(cur);</div><div class="line">            <span class="keyword">if</span> (line[dec.front()] - line[inc.front()] &lt;= k) cur++;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        ans += (cur - i);</div><div class="line">        <span class="keyword">if</span> (inc.front() == i) inc.pop_front();</div><div class="line">        <span class="keyword">if</span> (dec.front() == i) dec.pop_front();</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><ul>
<li><p>单调栈</p>
<ul>
<li>上升栈<ul>
<li>求最大矩形面积</li>
<li>求最小值的整体和</li>
<li>求包含末元素的最长上升子序列长度</li>
</ul>
</li>
<li>下降栈<ul>
<li>求最大值的整体和</li>
<li>求包含末元素的最长下降子序列长度</li>
</ul>
</li>
<li>栈内二分<ul>
<li>不保留维护，分情况更新</li>
</ul>
</li>
<li>区间化理解<ul>
<li>把元素区间化，用区间交解决问题</li>
</ul>
</li>
<li>整体化处理<ul>
<li>常用于多个栈的相关联信息维护</li>
</ul>
</li>
</ul>
</li>
<li><p>单调队列</p>
<ul>
<li>二分答案</li>
<li>尺取法</li>
<li>滑动窗口式问题</li>
</ul>
</li>
</ul>
<p>感觉题还是做得少。。。没什么内容</p>
<p>所以大致就是这样，单调栈/单调队列其实还是很好理解的，我们熟悉了几种常见的操作以后，就能够感受到单调栈/单调队列这种数据结构的强大之处，也能对它们有更深刻的理解</p>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;最近刷了一波JCY大神的课件，打算认真练习一发单调队列/单调栈，于是有了这篇总结，同时作为之后学习单调优化DP的基础&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://goseqh.tk/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="单调队列" scheme="https://goseqh.tk/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
      <category term="单调栈" scheme="https://goseqh.tk/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>骗分导论</title>
    <link href="https://goseqh.tk/2017/07/25/%E9%AA%97%E5%88%86%E5%AF%BC%E8%AE%BA/"/>
    <id>https://goseqh.tk/2017/07/25/骗分导论/</id>
    <published>2017-07-25T14:07:04.000Z</published>
    <updated>2017-07-25T14:14:26.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>闲时看看，大有裨益<br><a id="more"></a></p>
<h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1>

	<div class="row">
    <embed src="./骗分导论(OI).pdf" width="120%" height="660" type="application/pdf">
	</div>



]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;闲时看看，大有裨益&lt;br&gt;
    
    </summary>
    
    
      <category term="骗分导论" scheme="https://goseqh.tk/tags/%E9%AA%97%E5%88%86%E5%AF%BC%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>2016 LNWC 讲解</title>
    <link href="https://goseqh.tk/2017/07/24/2016-LNWC-%E8%AE%B2%E8%A7%A3/"/>
    <id>https://goseqh.tk/2017/07/24/2016-LNWC-讲解/</id>
    <published>2017-07-24T15:06:33.000Z</published>
    <updated>2017-07-24T15:22:46.591Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>这里存放一下2016 LNWC的讲课课件，用于以后的知识复习<br><a id="more"></a></p>
<h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><p>如下：</p>
<ul>
<li>Day1 树 ryz</li>
<li>Day2 数据结构 eleven</li>
<li>Day3 网络流 ryz</li>
<li>Day4 数据结构 eleven</li>
<li>Day5 1-字符串 &amp; 2-数论 ryz</li>
<li>Day6 动态规划 eleven</li>
</ul>
<p>其中，ryz为茹逸中，eleven为李诗懿</p>
<h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1><h2 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h2>

	<div class="row">
    <embed src="./1.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h2>

	<div class="row">
    <embed src="./2.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h2>

	<div class="row">
    <embed src="./3.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a>Day4</h2>

	<div class="row">
    <embed src="./4.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="Day5-1"><a href="#Day5-1" class="headerlink" title="Day5-1"></a>Day5-1</h2>

	<div class="row">
    <embed src="./5-1.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="Day5-2"><a href="#Day5-2" class="headerlink" title="Day5-2"></a>Day5-2</h2>

	<div class="row">
    <embed src="./5-2.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="Day6"><a href="#Day6" class="headerlink" title="Day6"></a>Day6</h2>

	<div class="row">
    <embed src="./6.pdf" width="120%" height="660" type="application/pdf">
	</div>



]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;这里存放一下2016 LNWC的讲课课件，用于以后的知识复习&lt;br&gt;
    
    </summary>
    
    
      <category term="树" scheme="https://goseqh.tk/tags/%E6%A0%91/"/>
    
      <category term="数据结构" scheme="https://goseqh.tk/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="网络流" scheme="https://goseqh.tk/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="字符串" scheme="https://goseqh.tk/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="数论" scheme="https://goseqh.tk/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="动态规划" scheme="https://goseqh.tk/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>特殊算法详解</title>
    <link href="https://goseqh.tk/2017/07/24/%E7%89%B9%E6%AE%8A%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <id>https://goseqh.tk/2017/07/24/特殊算法详解/</id>
    <published>2017-07-24T14:53:29.000Z</published>
    <updated>2017-07-24T14:57:33.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>这里存放一下JCY大神的讲课课件，用于特殊算法的复习<br><a id="more"></a></p>
<h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1>

	<div class="row">
    <embed src="./day10.pdf" width="120%" height="660" type="application/pdf">
	</div>



]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;这里存放一下JCY大神的讲课课件，用于特殊算法的复习&lt;br&gt;
    
    </summary>
    
    
      <category term="莫队算法" scheme="https://goseqh.tk/tags/%E8%8E%AB%E9%98%9F%E7%AE%97%E6%B3%95/"/>
    
      <category term="CDQ分治" scheme="https://goseqh.tk/tags/CDQ%E5%88%86%E6%B2%BB/"/>
    
      <category term="分块法" scheme="https://goseqh.tk/tags/%E5%88%86%E5%9D%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构详解</title>
    <link href="https://goseqh.tk/2017/07/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%A6%E8%A7%A3/"/>
    <id>https://goseqh.tk/2017/07/24/数据结构详解/</id>
    <published>2017-07-24T10:29:20.000Z</published>
    <updated>2017-07-24T14:26:14.371Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>这里存放一下JCY大神的讲课课件，用于数据结构的复习<br><a id="more"></a></p>
<h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1><!--

	<div class="row">
    <embed src="http://www.slideboom.com/presentations/1826019/day3%E8%AF%BE%E4%BB%B6?pk=1701-4c32-17d6-9435-f3e2-83fd-57bd-33cd" width="120%" height="660" type="application/pdf">
	</div>


-->
<!--

	<div class="row">
    <embed src="http://pptplus.cn/index.php?g=site&amp;m=ppt&amp;a=detail&amp;id=8413#&amp;gid=1&amp;pid=1" width="120%" height="660" type="application/pdf">
	</div>


-->
<!--<iframe class="embed-responsive-item" src="./day3课件.html" height="400px" width="90%" align="center">
</iframe>-->


	<div class="row">
    <embed src="./day3课件.pdf" width="120%" height="660" type="application/pdf">
	</div>



<!-- 
<iframe src="https://github.com/GQH123/GQH123.github.io/blob/master/2017/07/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%A6%E8%A7%A3/day3%E8%AF%BE%E4%BB%B6.ppt" height="400px" width="90%" align="center"></iframe> 
-->
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;这里存放一下JCY大神的讲课课件，用于数据结构的复习&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://goseqh.tk/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>基础算法与技巧</title>
    <link href="https://goseqh.tk/2017/07/24/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E4%B8%8E%E6%8A%80%E5%B7%A7/"/>
    <id>https://goseqh.tk/2017/07/24/基础算法与技巧/</id>
    <published>2017-07-24T10:26:50.000Z</published>
    <updated>2017-07-24T14:41:38.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>这里存放一下FZW大神的讲课课件，用于基础算法的复习<br><a id="more"></a></p>
<h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1>

	<div class="row">
    <embed src="./day2课件.pdf" width="120%" height="660" type="application/pdf">
	</div>



]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;这里存放一下FZW大神的讲课课件，用于基础算法的复习&lt;br&gt;
    
    </summary>
    
    
      <category term="基础算法" scheme="https://goseqh.tk/tags/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>基础数论讲解</title>
    <link href="https://goseqh.tk/2017/07/24/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA%E8%AE%B2%E8%A7%A3/"/>
    <id>https://goseqh.tk/2017/07/24/基础数论讲解/</id>
    <published>2017-07-24T10:06:07.000Z</published>
    <updated>2017-07-24T14:42:10.451Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>这里存放一下FZW大神的讲课课件，用于基础数论的复习<br><a id="more"></a></p>
<h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1><!--<iframe class="render-viewer" src="https://render.githubusercontent.com/view/pdf?commit=369ff49cf889bc57af5ea59f8c06e093b29ecba4&amp;enc_url=68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f4751483132332f4751483132332e6769746875622e696f2f333639666634396366383839626335376166356561353966386330366530393362323965636261342f323031372f30372f32342f2545352539462542412545372541312538302545362539352542302545382541452542412545382541452542322545382541372541332f646179312545382541462542452545342542422542362e706466&amp;nwo=GQH123%2FGQH123.github.io&amp;path=2017%2F07%2F24%2F%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA%E8%AE%B2%E8%A7%A3%2Fday1%E8%AF%BE%E4%BB%B6.pdf&amp;repository_id=96849591&amp;repository_type=Repository#3410e2c3-947e-45a2-aef7-3f220367b592" sandbox="allow-scripts allow-same-origin allow-top-navigation" height="400px" width="90%" align="center">Viewer requires iframe.</iframe>-->


	<div class="row">
    <embed src="./day1课件.pdf" width="120%" height="660" type="application/pdf">
	</div>



]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;这里存放一下FZW大神的讲课课件，用于基础数论的复习&lt;br&gt;
    
    </summary>
    
    
      <category term="数论" scheme="https://goseqh.tk/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="数学" scheme="https://goseqh.tk/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>#6062. 「2017 山东一轮集训 Day2」Pair</title>
    <link href="https://goseqh.tk/2017/07/20/6062-%E3%80%8C2017-%E5%B1%B1%E4%B8%9C%E4%B8%80%E8%BD%AE%E9%9B%86%E8%AE%AD-Day2%E3%80%8DPair/"/>
    <id>https://goseqh.tk/2017/07/20/6062-「2017-山东一轮集训-Day2」Pair/</id>
    <published>2017-07-20T06:17:32.000Z</published>
    <updated>2017-07-20T08:45:40.986Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>题解： $Libre$ $Online$ $Judge$ # $6062$. 「2017 山东一轮集训 Day2」Pair<br><a id="more"></a></p>
<h1 id="LOJ-6062-「2017-山东一轮集训-Day2」Pair"><a href="#LOJ-6062-「2017-山东一轮集训-Day2」Pair" class="headerlink" title="LOJ 6062. 「2017 山东一轮集训 Day2」Pair"></a>LOJ 6062. 「2017 山东一轮集训 Day2」Pair</h1><p>内存限制：256 MiB<br>时间限制：1000 ms<br>标准输入输出<br>题目类型：传统<br>评测方式：文本比较</p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出一个长度为 $n$ 的数列 ${ a_i }$ 和一个长度为 $ m$ 的数列 ${ b_i }$，求 ${ a_i }$ 有多少个长度为 $m$ 的连续子数列能与 ${ b_i }$ 匹配。</p>
<p>两个数列可以匹配，当且仅当存在一种方案，使两个数列中的数可以两两配对，两个数可以配对当且仅当它们的和不小于 $h$。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行三个数字 $n, m, h$。<br>第二行有 $m$ 个数字 $b_1, b_2, \ldots , b_m$。<br>第三行有 $n$ 个数字 $a_1, a_2, \ldots, a_n$。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一个数字，${ a_i }$ 有多少个长度为 $ m $ 的连续子数列能与 ${ b_i }$ 匹配。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 1"></a>样例输入 1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">5 </span><span class="number">2</span> <span class="number">10</span></div><div class="line"><span class="symbol">5 </span><span class="number">3</span></div><div class="line"><span class="symbol">1 </span><span class="number">8</span> <span class="number">5</span> <span class="number">5</span> <span class="number">7</span></div></pre></td></tr></table></figure>
<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 1"></a>样例输出 1</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure>
<h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入 2"></a>样例输入 2</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">2 </span><span class="number">2</span> <span class="number">6</span></div><div class="line"><span class="symbol">2 </span><span class="number">3</span></div><div class="line"><span class="symbol">3 </span><span class="number">4</span></div></pre></td></tr></table></figure>
<h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出 2"></a>样例输出 2</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
<h3 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入 3"></a>样例输入 3</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">4 </span><span class="number">2</span> <span class="number">10</span></div><div class="line"><span class="symbol">5 </span><span class="number">5</span></div><div class="line"><span class="symbol">9 </span><span class="number">3</span> <span class="number">8</span> <span class="number">9</span></div></pre></td></tr></table></figure>
<h3 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出 3"></a>样例输出 3</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="数据范围与提示"><a href="#数据范围与提示" class="headerlink" title="数据范围与提示"></a>数据范围与提示</h2><p>对于 $10\%$ 的数据，$1 \leq m \leq n \leq 10$；<br>对于 $40\%$ 的数据，$1 \leq m \leq n \leq 1000$；<br>对于 $100\%$ 的数据，$1 \leq m \leq n \leq 150000 $；<br>对于 $100\%$ 的数据，$1 \leq a_i, b_i, h \leq 10 ^ 9 $​​。</p>
<h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>首先我们发现条件 $a + b &gt; h$，非常不好看，于是我们把它转化一下，变成 $a &gt; h - b$，这样就会好很多</p>
<p>然后，我们透彻地理解题意，可以知道，如果我们把当前与$b$相对应的$a$中的元素与$b$中的元素拿出来，排好序，那么当且仅当任何一个后缀的元素中属于$a$的元素个数大于等于$b$中的元素个数，那么$b$可以匹配</p>
<p>其实这还是很好理解的，然后，我们就可以使用线段树维护每个后缀中属于$a$和属于$b$的元素个数之差的最小值（包含正负），只要这个值大于等于零，那么可以匹配</p>
<p>细节见代码</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 300005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> sum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> minnum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        sum[o] += qd;</div><div class="line">        minnum[o] += qd;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) insert(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> insert(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    sum[o] = sum[o &lt;&lt; <span class="number">1</span>] + sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">    minnum[o] = min(minnum[o &lt;&lt; <span class="number">1</span>], sum[o &lt;&lt; <span class="number">1</span>] + minnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> a[maxn];</div><div class="line"><span class="keyword">int</span> b[maxn];</div><div class="line"><span class="keyword">int</span> c[maxn];</div><div class="line"><span class="keyword">int</span> n, m, h;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"pair.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"pair.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;h);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) b[i] = h - b[i];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) c[i] = b[i];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) c[i + m] = a[i];</div><div class="line">    sort(c + <span class="number">1</span>, c + <span class="number">1</span> + n + m);</div><div class="line">    <span class="keyword">int</span> k = unique(c + <span class="number">1</span>, c + <span class="number">1</span> + n + m) - c;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) b[i] = lower_bound(c + <span class="number">1</span>, c + <span class="number">1</span> + k, b[i]) - c;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = lower_bound(c + <span class="number">1</span>, c + <span class="number">1</span> + k, a[i]) - c;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        qx = b[i], qd = <span class="number">1</span>;</div><div class="line">        insert(<span class="number">1</span>, k, <span class="number">1</span>);</div><div class="line">        qx = a[i], qd = <span class="number">-1</span>;</div><div class="line">        insert(<span class="number">1</span>, k, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    ans += (minnum[<span class="number">1</span>] &gt;= <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = m + <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        qx = a[i - m] , qd = <span class="number">1</span>;</div><div class="line">        insert(<span class="number">1</span>, k, <span class="number">1</span>);<span class="comment">///////correct: n -&gt; k</span></div><div class="line">        qx = a[i], qd = <span class="number">-1</span>;</div><div class="line">        insert(<span class="number">1</span>, k, <span class="number">1</span>);<span class="comment">///////correct: n -&gt; k</span></div><div class="line">        ans += (minnum[<span class="number">1</span>] &gt;= <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;题解： $Libre$ $Online$ $Judge$ # $6062$. 「2017 山东一轮集训 Day2」Pair&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://goseqh.tk/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="离散化" scheme="https://goseqh.tk/tags/%E7%A6%BB%E6%95%A3%E5%8C%96/"/>
    
      <category term="线段树" scheme="https://goseqh.tk/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>#516. 「LibreOJ β Round #2」DP 一般看规律</title>
    <link href="https://goseqh.tk/2017/07/20/516-%E3%80%8CLibreOJ-%CE%B2-Round-2%E3%80%8DDP-%E4%B8%80%E8%88%AC%E7%9C%8B%E8%A7%84%E5%BE%8B/"/>
    <id>https://goseqh.tk/2017/07/20/516-「LibreOJ-β-Round-2」DP-一般看规律/</id>
    <published>2017-07-20T06:17:19.000Z</published>
    <updated>2017-07-20T08:50:22.135Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>题解：$Libre$ $Online$ $Judge$ # $516$. 「LibreOJ β Round #2」DP 一般看规律<br><a id="more"></a></p>
<h1 id="LOJ-516-「LibreOJ-β-Round-2」DP-一般看规律"><a href="#LOJ-516-「LibreOJ-β-Round-2」DP-一般看规律" class="headerlink" title="LOJ 516. 「LibreOJ β Round #2」DP 一般看规律"></a>LOJ 516. 「LibreOJ β Round #2」DP 一般看规律</h1><p>内存限制：512 MiB<br>时间限制：1000 ms<br>标准输入输出<br>题目类型：传统<br>评测方式：文本比较</p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个长度为 $n$ 的序列 $a$，一共有 $m$ 个操作。<br>每次操作的内容为：给定 $x,y$，序列中所有 $x$ 会变成 $y$。</p>
<p>同时我们有一份代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> ans = <span class="number">2147483647</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</div><div class="line">        <span class="keyword">if</span> (a[i] == a[j])</div><div class="line">            ans = <span class="built_in">std</span>::min(ans, j - i);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div></pre></td></tr></table></figure></p>
<p>请在每次修改后输出代码运行的结果。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行两个数，表示 $n,m$。<br>第二行 $n$ 个数，表示 $a_1,a_2,\cdots, a_n$​​。<br>然后 $m$ 行每行两个数 $x$ 和 $y$，表示序列中所有 $x$ 会变成 $y$。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>对于每次修改，输出答案。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">5 </span><span class="number">10</span></div><div class="line"><span class="symbol">2 </span><span class="number">7</span> <span class="number">6</span> <span class="number">3</span> <span class="number">8</span></div><div class="line"><span class="symbol">6 </span><span class="number">1</span></div><div class="line"><span class="symbol">7 </span><span class="number">1</span></div><div class="line"><span class="symbol">1 </span><span class="number">3</span></div><div class="line"><span class="symbol">5 </span><span class="number">6</span></div><div class="line"><span class="symbol">1 </span><span class="number">7</span></div><div class="line"><span class="symbol">9 </span><span class="number">5</span></div><div class="line"><span class="symbol">1 </span><span class="number">10</span></div><div class="line"><span class="symbol">7 </span><span class="number">6</span></div><div class="line"><span class="symbol">7 </span><span class="number">5</span></div><div class="line"><span class="symbol">3 </span><span class="number">9</span></div></pre></td></tr></table></figure>
<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="number">2147483647</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="数据范围与提示"><a href="#数据范围与提示" class="headerlink" title="数据范围与提示"></a>数据范围与提示</h2><p>$1\le n , m \le 100000$</p>
<p>每个出现的数字绝对值在 int 范围内。</p>
<h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>在这篇文章的开头，我写了一句话：“有层次的思考不可或缺”，什么意思呢，就是在我们思考每一道题的时候，最好不要使用过于跳跃的思维，而是要从最初始的想法一步一步进行思考改进，最终得到正确算法</p>
<p>尽管有的时候，灵感来源于一瞬间，但是，这种比较稳定的思维方法还是要有所接受，多听一听各地的讲课，就会发现，一道难题，大佬们讲它的时候，往往都是先给出最简单的暴力方法，然后观察信息的冗余或浪费，或是进行各种联想，逐渐改进得到最后的正解</p>
<p>上面是对一种思维方法的阐述，与本题无关</p>
<p>下面说一说这道题，我们先透彻地理解一下题意，然后发现操作只有合并，而没有分裂，这启发我们向并查集/启发式合并的方向上思考，然后寻找下标差的最小值，我们可以联想到平衡树里面的前驱与后继，所以本题就是启发式合并的平衡树，同时每次插入时寻找前驱后继即可</p>
<p>最后为了方便处理，我们搞一个离散化，就可以了</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 300005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483647</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qu</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    qu(<span class="keyword">int</span> x, <span class="keyword">int</span> y) : x(x), y(y)&#123;&#125;</div><div class="line">    qu()&#123;&#125;</div><div class="line">&#125;q[maxn];</div><div class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; save[maxn];</div><div class="line"><span class="keyword">int</span> a[maxn];</div><div class="line"><span class="keyword">int</span> c[maxn];</div><div class="line"><span class="keyword">int</span> tag[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; x)</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"dp.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"dp.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    read(n), read(m);</div><div class="line">    <span class="keyword">int</span> ct = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(a[i]), c[ct++] = a[i];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        read(q[i].x), read(q[i].y);</div><div class="line">        c[ct++] = q[i].x, c[ct++] = q[i].y;</div><div class="line">    &#125;</div><div class="line">    sort(c, c + ct);</div><div class="line">    ct = unique(c, c + ct) - c;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ct; i++) tag[i] = i;</div><div class="line">    <span class="keyword">int</span> ans = INF;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        a[i] =  lower_bound(c, c + ct, a[i]) - c;</div><div class="line">        save[a[i]].insert(i);</div><div class="line"></div><div class="line">        <span class="keyword">auto</span> it = save[a[i]].lower_bound(i);</div><div class="line">        <span class="comment">//auto it = lower_bound(save[a[i]].begin(), save[a[i]].end(), i);</span></div><div class="line">        <span class="keyword">if</span> (it != save[a[i]].begin()) ans = min(ans, i - *(--it));</div><div class="line">        it = save[a[i]].upper_bound(i);</div><div class="line">        <span class="comment">//it = upper_bound(save[a[i]].begin(), save[a[i]].end(), i);</span></div><div class="line">        <span class="keyword">if</span> (it != save[a[i]].end()) ans = min(ans, *it - i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        q[i].x = lower_bound(c, c + ct, q[i].x) - c,</div><div class="line">        q[i].y = lower_bound(c, c + ct, q[i].y) - c;</div><div class="line">        <span class="keyword">int</span> x = q[i].x, y = q[i].y;</div><div class="line">        <span class="keyword">if</span> (x == y)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (save[tag[x]].size() &gt; save[tag[y]].size()) swap(tag[x], tag[y]);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = save[tag[x]].begin(); it != save[tag[x]].end(); it++)&#123;</div><div class="line">            save[tag[y]].insert(*it);</div><div class="line"></div><div class="line">            <span class="keyword">auto</span> it2 = save[tag[y]].lower_bound(*it);</div><div class="line">            <span class="comment">//auto it2 = lower_bound(save[tag[y]].begin(), save[tag[y]].end(), *it);</span></div><div class="line">            <span class="keyword">if</span> (it2 != save[tag[y]].begin()) ans = min(ans, *it - *(--it2));</div><div class="line">            it2 = save[tag[y]].upper_bound(*it);</div><div class="line">            <span class="comment">//it2 = upper_bound(save[tag[y]].begin(), save[tag[y]].end(), *it);</span></div><div class="line">            <span class="keyword">if</span> (it2 != save[tag[y]].end()) ans = min(ans, *it2 - *it);</div><div class="line">        &#125;</div><div class="line">        save[tag[x]].clear();</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码细节：不要使用$STL$中的$lower_bound/upper_bound$来操作set容器，否则算法会变得十分缓慢，很容易超时，所以，我们要使用set自带的$lower_bound/upper_bound$，具体都体现在上面的代码中</p>
<p>同时注意$tag$数组的必要性，因为它可以调节合并的顺序，否则会导致因启发式合并而带来的合并方向错误</p>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;题解：$Libre$ $Online$ $Judge$ # $516$. 「LibreOJ β Round #2」DP 一般看规律&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://goseqh.tk/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="平衡树" scheme="https://goseqh.tk/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
      <category term="启发式合并" scheme="https://goseqh.tk/tags/%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/"/>
    
      <category term="离散化" scheme="https://goseqh.tk/tags/%E7%A6%BB%E6%95%A3%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>#6136. 「2017 山东三轮集训 Day4」Left</title>
    <link href="https://goseqh.tk/2017/07/11/6136-%E3%80%8C2017-%E5%B1%B1%E4%B8%9C%E4%B8%89%E8%BD%AE%E9%9B%86%E8%AE%AD-Day4%E3%80%8DLeft/"/>
    <id>https://goseqh.tk/2017/07/11/6136-「2017-山东三轮集训-Day4」Left/</id>
    <published>2017-07-11T12:50:36.000Z</published>
    <updated>2017-07-11T13:19:53.056Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>题解：$Libre$ $Online$ $Judge$ # $6136$. 「2017 山东三轮集训 Day4」Left<br><a id="more"></a></p>
<h1 id="LOJ-6136-「2017-山东三轮集训-Day4」Left"><a href="#LOJ-6136-「2017-山东三轮集训-Day4」Left" class="headerlink" title="LOJ 6136. 「2017 山东三轮集训 Day4」Left"></a>LOJ 6136. 「2017 山东三轮集训 Day4」Left</h1><p>内存限制：512 MiB<br>时间限制：1000 ms<br>标准输入输出<br>题目类型：传统<br>评测方式：文本比较</p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>JOHNKRAM 最近在研究排序网络，但他发现他不会制作比较器，于是他用交换器来代替比较器。</p>
<p>一个交换器有两个输入端 $x, y$ 和两个输出端 $x’, y’$​​。如果交换器处于关闭状态，则 $x $ 收到的信号会从 $x’$ 发出，$y$ 收到的信号会从 $y’$ 发出。如果交换器处于开启状态，则 $x$ 收到的信号会从 $y’$​​ 发出。</p>
<p>JOHNKRAM 设计了这样一个递归定义的网络：</p>
<ul>
<li>$1$ 阶网络就是一个交换器。</li>
<li>$n(n &gt; 1)$ 阶网络的第一排是 $2 ^ {n - 1}$​​ 个交换器，接下来是两个 $n - 1$ 阶网络,最后一排也是 $2 ^ {n - 1}$​​ 个交换器。将第一排的输出端和第二排的输入端分别从左到右标号为 $0 \sim 2 ^ n - 1$，第一排的 $i$ 输出端连接到第二排的 i&gt;&gt;1 输入端，其中 &gt;&gt; 指 $n$ 位二进制数的循环右移。类似，将倒数第一排的输入端和倒数第二排的输出端分别从左到右标号为 $0\sim 2 ^ n - 1$，倒数第二排的 $i$ 输出端连接到倒数第一排的 i&lt;&lt;1 输入端，其中 &lt;&lt; 指 $n$ 位二进制数的循环左移。</li>
</ul>
<p>一个 $3$ 阶的网络如下图所示：<br><img src="https://ooo.0o0.ooo/2017/07/05/595c70f8362a9.png" alt=""></p>
<p>JOHNKRAM 通过开关交换器来调整网络。现在他对一个 $n$ 阶网络的 $2 ^ n$​​ 个输入端分别输入了一个数，第 $i(0 &lt; i &lt; 2 ^ n)$ 个输入端输入的是 $i$。然后他给出了一个长度为 $2 ^ n$​​ 的排列 $p$。他希望你给出一种网络的状态，使得第 $i(0 &lt; i &lt; 2 ^ n)$ 个输出端输出的是 $p_i$​​。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入文件包含不超过 10 组测试数据。<br>每个测试数据包含两行，第一行一个整数 $n$，表示是一个 $n$ 阶网络。<br>第二行 $2 ^ n$​​ 个整数，表示排列 $p$。<br>输入文件以一个 0 结尾。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>对于每组数据，如果没有合法的解，则输出 $-1$，否则输出 $2n - 1$ 行 $2 ^ n$​​ 位二进制数，表示网络状态。如果一个交换器是开启的，则对应的位置上是 $1$，否则是 $0$。如果有多解，输出字典序最小的。</p>
<p>每个答案后打印一个空行。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">2</span></div><div class="line"><span class="symbol">3 </span><span class="number">2</span> <span class="number">1</span> <span class="number">0</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="symbol">3 </span><span class="number">7</span> <span class="number">4</span> <span class="number">0</span> <span class="number">2</span> <span class="number">6</span> <span class="number">1</span> <span class="number">5</span></div><div class="line"><span class="number">0</span></div></pre></td></tr></table></figure>
<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="number">00</span></div><div class="line"><span class="number">11</span></div><div class="line"><span class="number">11</span></div><div class="line"></div><div class="line"><span class="number">0011</span></div><div class="line"><span class="number">0000</span></div><div class="line"><span class="number">0110</span></div><div class="line"><span class="number">1111</span></div><div class="line"><span class="number">1101</span></div></pre></td></tr></table></figure>
<h2 id="数据范围与提示"><a href="#数据范围与提示" class="headerlink" title="数据范围与提示"></a>数据范围与提示</h2><p>对于 $20\%$ 的数据，保证 $n \leq 3$；<br>对于 $100\%$ 的数据，保证 $1 \leq n \leq 13$。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>其实这道题还是非常好的，正如前文的那句话，”宏观是微观的表现，微观是宏观的本质”，我们考虑对这道题递归和分解，使得我们每次只去分析一个小过程，这样就会简便很多，我们可以观察规律，发现<strong>$n$阶网络最后每两组中的数($k <em> 2,k </em> 2+1 $)一定不在$n-1$阶网络的同一侧</strong>，这样我们可以对每层$O(2^n)$进行处理，同时使用<strong>贪心法</strong>，如果当前的这个组没被标记（即是否已经决定开或关），就让它关着，然后用自身的状态以及网络特征，尽可能多的更新其他的组，可以证明这样做是完全正确的，把两个排列放在一起（置换），<strong>用2-SAT的思路进行连边</strong>，同时每两组内的数($k <em> 2, k </em> 2 + 1$)也连边，根据题目性质，<strong>只能形成偶环</strong>，无论怎么染色都不会矛盾（即无解），所以，我们对每一层都进行这样的处理，同时更新上下的序列，就可以在$O(T <em> n </em> 2 ^ n)$的复杂度内解决本题，而这是完全可以接受的</p>
<p>这道题思路非常巧妙，其实也是要<strong>对题目进行深度的理解</strong>，理解网络的<strong>工作原理与特征</strong>，然而代码还是非常恶心。。。细节巨多，最后还是先WA了一次才A的QAQ</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 13</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> up[<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">int</span> low[<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">int</span> ori[<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">int</span> line[<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">int</span> ans[(maxn &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>][<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">bool</span> vis[(maxn &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>][<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">int</span> temp[<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">int</span> judge[<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">int</span> n, x, con, con2;  <span class="comment">//con = n - 1 - (x - 1);</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> side = line[j ^ <span class="number">1</span>];</div><div class="line">    <span class="keyword">int</span> _j = up[side];</div><div class="line">    <span class="keyword">if</span> (vis[con][_j &gt;&gt; <span class="number">1</span>]) <span class="keyword">return</span>;</div><div class="line">    vis[con][_j &gt;&gt; <span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    ans[con][_j &gt;&gt; <span class="number">1</span>] = ans[con][up[line[j]] &gt;&gt; <span class="number">1</span>] ^ ((line[j] &amp; (<span class="number">1</span> &lt;&lt; con)) &gt;&gt; con) ^ ((line[j ^ <span class="number">1</span>] &amp; (<span class="number">1</span> &lt;&lt; con)) &gt;&gt; con) ^ <span class="number">1</span>;<span class="comment">//WA的原因，原先的写法如下：</span></div><div class="line">    <span class="comment">//ans[con][_j &gt;&gt; 1] = ans[con][up[line[j]] &gt;&gt; 1] ^ (line[j] &amp; 1) ^ (line[j ^ 1] &amp; 1) ^ 1;</span></div><div class="line">    <span class="comment">//中间测试时是这样写的：</span></div><div class="line">    <span class="comment">//ans[con][_j &gt;&gt; 1] = ans[con][up[line[j]] &gt;&gt; 1] ^ (line[j] &amp; (1 &lt;&lt; con)) ^ (line[j ^ 1] &amp; (1 &lt;&lt; con)) ^ 1;</span></div><div class="line">    BFS(low[ori[_j ^ <span class="number">1</span>]]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*void BFS2(int j)&#123;</span></div><div class="line">    int side = ori[j ^ 1];</div><div class="line">    int _j = low[side];</div><div class="line">    if (vis[con2][_j &gt;&gt; 1]) return;</div><div class="line">    vis[con2][_j &gt;&gt; 1] = 1;</div><div class="line">    ans[con2][_j &gt;&gt; 1] = ans[con2][j &gt;&gt; 1] ^ 1;</div><div class="line">    BFS2(j ^ 1);</div><div class="line">&#125;*/</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*int shift_left(int n, int x)&#123;</span></div><div class="line">    int a = n &amp; ((1 &lt;&lt; x) - 1);</div><div class="line">    int b = n - a;</div><div class="line">    a = (a &lt;&lt; 1) | (a &gt;&gt; (x - 1)) &amp; ((1 &lt;&lt; x) - 1);</div><div class="line">    return a | b;</div><div class="line">&#125;*/</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">shift_right</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a = n &amp; ((<span class="number">1</span> &lt;&lt; x) - <span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> b = n - a;</div><div class="line">    a = (a &gt;&gt; <span class="number">1</span>) | (a &lt;&lt; (x - <span class="number">1</span>)) &amp; ((<span class="number">1</span> &lt;&lt; x) - <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> a | b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == <span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i += <span class="number">2</span>)&#123;</div><div class="line">            ans[con][i &gt;&gt; <span class="number">1</span>] = <span class="number">1</span> ^ (line[i] == ori[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i += <span class="number">1</span> &lt;&lt; x)&#123;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j++) low[line[j]] = j;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j++) up[ori[j]] = j;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j += <span class="number">2</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (!vis[con][j &gt;&gt; <span class="number">1</span>])&#123;</div><div class="line">                vis[con][j &gt;&gt; <span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">                ans[con][j &gt;&gt; <span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">                BFS(low[ori[j]]), BFS(low[ori[j + <span class="number">1</span>]]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j += <span class="number">2</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (ans[con][j &gt;&gt; <span class="number">1</span>])&#123;</div><div class="line">                temp[shift_right(j, x)] = ori[j ^ <span class="number">1</span>];</div><div class="line">                judge[ori[j ^ <span class="number">1</span>]] = <span class="number">0</span>;</div><div class="line">                temp[shift_right(j ^ <span class="number">1</span>, x)] = ori[j];</div><div class="line">                judge[ori[j]] = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                temp[shift_right(j, x)] = ori[j];</div><div class="line">                judge[ori[j]] = <span class="number">0</span>;</div><div class="line">                temp[shift_right(j ^ <span class="number">1</span>, x)] = ori[j ^ <span class="number">1</span>];</div><div class="line">                judge[ori[j ^ <span class="number">1</span>]] = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j++) ori[j] = temp[j];</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j += <span class="number">2</span>)</div><div class="line">            ans[con2][j &gt;&gt; <span class="number">1</span>] = judge[line[j]];</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j += <span class="number">2</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (ans[con2][j &gt;&gt; <span class="number">1</span>])&#123;</div><div class="line">                temp[shift_right(j, x)] = line[j ^ <span class="number">1</span>];</div><div class="line">                temp[shift_right(j ^ <span class="number">1</span>, x)] = line[j];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                temp[shift_right(j, x)] = line[j];</div><div class="line">                temp[shift_right(j ^ <span class="number">1</span>, x)] = line[j ^ <span class="number">1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j++) line[j] = temp[j];</div><div class="line">        <span class="comment">/*for (int j = i; j &lt; i + (1 &lt;&lt; x); j += 2)&#123;</span></div><div class="line">            if (!vis[con2][j &gt;&gt; 1])&#123;</div><div class="line">                vis[con2][j &gt;&gt; 1] = 1;</div><div class="line">                ans[con2][j &gt;&gt; 1] = 0;</div><div class="line">                BFS2(up[line[j]]), BFS2(up[line[j + 1]]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        */</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    x--;</div><div class="line">    con++;</div><div class="line">    con2--;</div><div class="line">    solve();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"left.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"left.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span> &amp;&amp; n != <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; i++) ori[i] = i;</div><div class="line">        con = <span class="number">0</span>;</div><div class="line">        con2 = (n - <span class="number">1</span>) &lt;&lt; <span class="number">1</span>;</div><div class="line">        x = n;</div><div class="line">        solve();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (n &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>; i++)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span> &lt;&lt; (n - <span class="number">1</span>); j++)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[i][j]);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还是很考察代码能力的。。。现场发明循环移位。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;题解：$Libre$ $Online$ $Judge$ # $6136$. 「2017 山东三轮集训 Day4」Left&lt;br&gt;
    
    </summary>
    
    
      <category term="模拟" scheme="https://goseqh.tk/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="贪心" scheme="https://goseqh.tk/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="Codility" scheme="https://goseqh.tk/tags/Codility/"/>
    
  </entry>
  
  <entry>
    <title>#6075. 「2017 山东一轮集训 Day6」重建</title>
    <link href="https://goseqh.tk/2017/07/11/6075-%E3%80%8C2017-%E5%B1%B1%E4%B8%9C%E4%B8%80%E8%BD%AE%E9%9B%86%E8%AE%AD-Day6%E3%80%8D%E9%87%8D%E5%BB%BA/"/>
    <id>https://goseqh.tk/2017/07/11/6075-「2017-山东一轮集训-Day6」重建/</id>
    <published>2017-07-11T06:02:24.000Z</published>
    <updated>2017-07-11T06:21:12.872Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>题解：$Libre$ $Online$ $Judge$ # $6075$. 「2017 山东一轮集训 Day6」重建<br><a id="more"></a></p>
<h1 id="LOJ-6075-「2017-山东一轮集训-Day6」重建"><a href="#LOJ-6075-「2017-山东一轮集训-Day6」重建" class="headerlink" title="LOJ 6075. 「2017 山东一轮集训 Day6」重建"></a>LOJ 6075. 「2017 山东一轮集训 Day6」重建</h1><p>内存限制：512 MiB<br>时间限制：1000 ms<br>标准输入输出<br>题目类型：传统<br>评测方式：文本比较</p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个 $n$ 个点 $m$ 条边的带权无向连通图 $G$，以及一个大小为 $k$ 的关键点集合 $A$。有个人要从点 $s$ 走到点 $t$，现在可以对所有边加上一个非负整数 $c$，问最大的 $c$，使得加上 $c$ 后，满足：$s$ 到 $t$ 的最短路长度 $= s$ 到 $t$ 且只能经过 $A$ 中的点的最短路长度。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行一个整数 $T$。代表这个数据点中有 $T$ 个测试数据。<br>对于每个测试数据：<br>第一行包含四个整数 $n, m, s, t$。<br>接下来 $m$ 行，每行三个整数 $u_i, v_i, c_i$​​，代表 $G$ 中有一条 $u_i$​​ 到 $v_i $​​ 的长度为 $c_i$ 的无向边。<br>第 $m + 1$ 行包含一个整数 $k$。<br>接下来一行 $k$ 个整数，代表关键点集合 $A$。保证 $s$ 与 $t$ 都在 $A$ 中。<br>输出格式</p>
<p>对于每个测试数据，输出一行一个整数 $c$，代表最大的合法的加到每条边的权值。假如不存在这样的合法的 $c$，则输出 Impossible，假如这样的 $c$ 可以无穷大，则输出 Infinity。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span></div><div class="line"><span class="symbol">6 </span><span class="number">8</span> <span class="number">1</span> <span class="number">6</span></div><div class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">5</span></div><div class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">1</span></div><div class="line"><span class="symbol">2 </span><span class="number">6</span> <span class="number">6</span></div><div class="line"><span class="symbol">2 </span><span class="number">3</span> <span class="number">6</span></div><div class="line"><span class="symbol">4 </span><span class="number">2</span> <span class="number">3</span></div><div class="line"><span class="symbol">3 </span><span class="number">4</span> <span class="number">1</span></div><div class="line"><span class="symbol">4 </span><span class="number">5</span> <span class="number">1</span></div><div class="line"><span class="symbol">5 </span><span class="number">6</span> <span class="number">1</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span></div><div class="line"><span class="symbol">3 </span><span class="number">4</span> <span class="number">1</span> <span class="number">2</span></div><div class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">6</span></div><div class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">2</span></div><div class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">7</span></div><div class="line"><span class="symbol">2 </span><span class="number">3</span> <span class="number">3</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="symbol">1 </span><span class="number">2</span></div><div class="line"><span class="symbol">4 </span><span class="number">4</span> <span class="number">1</span> <span class="number">4</span></div><div class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">1</span></div><div class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">1</span></div><div class="line"><span class="symbol">2 </span><span class="number">4</span> <span class="number">1</span></div><div class="line"><span class="symbol">3 </span><span class="number">4</span> <span class="number">1</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">4</span></div></pre></td></tr></table></figure>
<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span></div><div class="line"><span class="literal">Infinity</span></div><div class="line"><span class="literal">Infinity</span></div></pre></td></tr></table></figure>
<h2 id="数据范围与提示"><a href="#数据范围与提示" class="headerlink" title="数据范围与提示"></a>数据范围与提示</h2><p>对于 $20\%$ 的数据，$n, m, c_i \leq 100$；<br>对于 $40\%$ 的数据，$n, m \leq 100$；<br>另外有 $20\%$ 的数据，每个测试数据的答案要么为 Infinity，要么为 Impossible；<br>对于 $100\%$ 的数据，满足 $1 \leq n \leq 1000, 1 \leq m \leq 10000, 1 \leq c_i \leq 10 ^ 9, 1 \leq T \leq 3$</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>现在发现题目都是这样，一开始怎么也想不到，想到后很简单。。。</p>
<p>这道题就是，我们可以考虑分别为两个部分求最短路，同时我们知道结果肯定是一个关于$c$的一次函数，而且，路径经过的边数就是$c$的系数，观察题目数据范围，$n$比较小，这样，我们可以采用$O(n^2)$的方法，枚举经过的边数，这样做的好处就是，我们可以只考虑经过这么多条边的最短路，因为它们的$c$的系数都相同，同时再钦点它就是全局最短路，然后计算合法性以及合法区间，最后取所有右端点的最大值即可</p>
<p>然后我们可以用Bellman-Ford的思想，一步一步走，来计算最短路</p>
<p>主要还是理解题意吧，理解的比较透彻，就没什么问题了</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LD long double</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    LL cost;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to, LL cost) : next(next), to(to), cost(cost)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to, LL cost)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to, cost);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr, cost);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, s, t, k;</div><div class="line"><span class="keyword">int</span> save[maxn];</div><div class="line"><span class="keyword">int</span> ct;</div><div class="line">LL d1[maxn][<span class="number">2</span>];</div><div class="line">LL d2[maxn][<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> d = <span class="number">0</span>;</div><div class="line">LL INF;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    INF = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">18</span>; i++) INF = <span class="number">10</span> * INF;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) d1[i][<span class="number">0</span>] = d1[i][<span class="number">1</span>] = d2[i][<span class="number">0</span>] = d2[i][<span class="number">1</span>] = INF;</div><div class="line">    d1[s][<span class="number">0</span>] = d1[s][<span class="number">1</span>] = d2[s][<span class="number">0</span>] = d2[s][<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        d1[i][d ^ <span class="number">1</span>] = INF;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ct; i++)</div><div class="line">        d2[save[i]][d ^ <span class="number">1</span>] = INF;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = h[i]; j; j = e[j].next)&#123;</div><div class="line">            <span class="keyword">int</span> op = e[j].to;</div><div class="line">            <span class="keyword">if</span> (d1[op][d ^ <span class="number">1</span>] &gt; d1[i][d] + e[j].cost) d1[op][d ^ <span class="number">1</span>] = d1[i][d] + e[j].cost;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ct; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = h[save[i]]; j; j = e[j].next)&#123;</div><div class="line">            <span class="keyword">int</span> op = e[j].to;</div><div class="line">            <span class="keyword">if</span> (d2[op][d ^ <span class="number">1</span>] &gt; d2[save[i]][d] + e[j].cost) d2[op][d ^ <span class="number">1</span>] = d2[save[i]][d] + e[j].cost;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    d ^= <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL inf[maxn][<span class="number">2</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        update();</div><div class="line">        inf[i][<span class="number">0</span>] = (d1[t][d] &lt; INF) ? d1[t][d] : <span class="number">-1</span>;</div><div class="line">        inf[i][<span class="number">1</span>] = (d2[t][d] &lt; INF) ? d2[t][d] : <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">bool</span> f = <span class="number">0</span>;</div><div class="line"></div><div class="line">    LD ans = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (inf[i][<span class="number">0</span>] == <span class="number">-1</span>) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span> (!f)&#123;</div><div class="line">            <span class="keyword">if</span> (inf[i][<span class="number">0</span>] == inf[i][<span class="number">1</span>])&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"Infinity\n"</span>);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        f = <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (inf[i][<span class="number">1</span>] == <span class="number">-1</span> || inf[i][<span class="number">0</span>] != inf[i][<span class="number">1</span>]) <span class="keyword">continue</span>;</div><div class="line">        LD minnum = -INF;</div><div class="line">        LD maxnum = INF;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (inf[j][<span class="number">0</span>] == <span class="number">-1</span>) <span class="keyword">continue</span>;</div><div class="line">            maxnum = min(maxnum, (LD)(inf[j][<span class="number">0</span>] - inf[i][<span class="number">1</span>]) / (i - j));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (inf[j][<span class="number">0</span>] == <span class="number">-1</span>) <span class="keyword">continue</span>;</div><div class="line">            minnum = max(minnum, (LD)(inf[j][<span class="number">0</span>] - inf[i][<span class="number">1</span>]) / (i - j));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (minnum - maxnum &gt; eps) <span class="keyword">continue</span>;</div><div class="line">        ans = max(ans, maxnum);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (ans + <span class="number">1</span> &lt; eps) <span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, (LL)ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">recover</span><span class="params">()</span></span>&#123;</div><div class="line">    ct = <span class="number">0</span>;</div><div class="line">    cnt = <span class="number">1</span>;</div><div class="line">    <span class="built_in">memset</span>(h, <span class="number">0</span>, <span class="keyword">sizeof</span>(h));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"rebuild.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"rebuild.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span>(T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;s, &amp;t);</div><div class="line">        <span class="keyword">int</span> x, y;</div><div class="line">        LL z;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>, &amp;x, &amp;y, &amp;z);</div><div class="line">            Add_Edge(x, y, z);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            save[++ct] = x;</div><div class="line">        &#125;</div><div class="line">        work();</div><div class="line">        recover();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实细节还是不少的，我们每次要完全更新距离数组，不能保留上次的信息，具体为什么自己想一想就好了</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;题解：$Libre$ $Online$ $Judge$ # $6075$. 「2017 山东一轮集训 Day6」重建&lt;br&gt;
    
    </summary>
    
    
      <category term="图论" scheme="https://goseqh.tk/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="最短路" scheme="https://goseqh.tk/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="Bellman-Ford" scheme="https://goseqh.tk/tags/Bellman-Ford/"/>
    
  </entry>
  
  <entry>
    <title>#6190. 序列查询</title>
    <link href="https://goseqh.tk/2017/07/11/6190-%E5%BA%8F%E5%88%97%E6%9F%A5%E8%AF%A2/"/>
    <id>https://goseqh.tk/2017/07/11/6190-序列查询/</id>
    <published>2017-07-11T05:46:46.000Z</published>
    <updated>2017-07-11T06:21:06.348Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>题解：$Libre$ $Online$ $Judge$ # $6190$. 序列查询<br><a id="more"></a></p>
<h1 id="LOJ-6190-序列查询"><a href="#LOJ-6190-序列查询" class="headerlink" title="LOJ 6190. 序列查询"></a>LOJ 6190. 序列查询</h1><p>内存限制：256 MiB<br>时间限制：2000 ms<br>标准输入输出<br>题目类型：传统<br>评测方式：文本比较</p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出序列 ${a_n}$<br>给出 $m$ 个询问 $[L_i,R_i]$ : 询问 $min{|a_s−a_t|},s,t∈[Li,Ri],s≠t$</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行一个整数 $n$。<br>第二行 $n$ 个整数，表示 $a_i$​​。<br>第三行一个整数 $m$，表示询问个数。<br>之后的 $m$ 行，每行两个正整数，表示 $L_i, R_i$​​。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>共 $m$ 行，表示询问的答案。<br>特别的，如果不存在答案，输出 $2147483647$。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 1"></a>样例输入 1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">4</span></div><div class="line"><span class="symbol">2 </span><span class="number">2</span> <span class="number">3</span> <span class="number">4</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="symbol">1 </span><span class="number">2</span></div><div class="line"><span class="symbol">2 </span><span class="number">4</span></div></pre></td></tr></table></figure>
<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 1"></a>样例输出 1</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span></div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="数据范围与提示"><a href="#数据范围与提示" class="headerlink" title="数据范围与提示"></a>数据范围与提示</h2><p>$1\le n\le 10^5,1\le a_i \le 10^9,1\le m \le 3\times 10^5$</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>显然一道数据结构题，全都是套路。。。然而今天才猛然发现线段树套平衡树空间复杂度为$O(n\log{n})$</p>
<p>方法很独特，我称之为<strong>定序积累法</strong>，首先把所有的询问读入，然后按照左端点排序，同时从右向左逐个更新答案，在达到左端点时取出询问，这样总复杂度就是$O(n\log n)$，这要求答案是可以逐个积累的，就像上面说的那样，具体细节可参见代码</p>
<p>同时这次又看见了大佬在线段树内部调用线段树函数的操作，神不可言～</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 300005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483647</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">query</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> t, l, r, ans;</div><div class="line">    query(<span class="keyword">int</span> t, <span class="keyword">int</span> l, <span class="keyword">int</span> r) : t(t), l(l), r(r)&#123;&#125;</div><div class="line">    query()&#123;&#125;</div><div class="line">&#125;q[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(query a, query b)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (a.l != b.l) <span class="keyword">return</span> a.l &lt; b.l;</div><div class="line">    <span class="keyword">return</span> a.r &lt; b.r;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(query a, query b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a.t &lt; b.t;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; x)</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> ch;</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s[maxn &lt;&lt; <span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> ans[maxn &lt;&lt; <span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        ans[o] = INF;</div><div class="line">        s[o].insert(line[l]);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    init(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    init(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) s[o].insert(line[i]);</div><div class="line">    ans[o] = INF;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy) <span class="keyword">return</span> ans[o];</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">int</span> ans = INF;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) ans = min(ans, get(l, mid, o &lt;&lt; <span class="number">1</span>));</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) ans = min(ans, get(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>));</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o, <span class="keyword">int</span>&amp; now)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (qx &gt; qy) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        ans[o] = min(<span class="built_in">abs</span>(line[l] - qd), ans[o]);</div><div class="line">        now = min(now, ans[o]);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; :: iterator k = s[o].lower_bound(qd);</div><div class="line">    <span class="keyword">if</span> (((k == s[o].end()) || (<span class="built_in">abs</span>(*k - qd)) &gt;= now) &amp;&amp; ((k == s[o].begin()) || (<span class="built_in">abs</span>(*(--k) - qd) &gt;= now)))&#123;</div><div class="line">        now = min(now, get(l, r, o));</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) update(l, mid, o &lt;&lt; <span class="number">1</span>, now);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) update(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, now);</div><div class="line">    ans[o] = min(ans[o &lt;&lt; <span class="number">1</span>], ans[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"query.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"query.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    read(n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(line[i]);</div><div class="line">    read(m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        read(q[i].l), read(q[i].r);</div><div class="line">        q[i].t = i;</div><div class="line">    &#125;</div><div class="line">    init(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    sort(q, q + m, cmp1);</div><div class="line">    <span class="keyword">int</span> j = n;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</div><div class="line">        <span class="keyword">for</span>(; j &gt;= q[i].l; j--)&#123;</div><div class="line">            <span class="keyword">int</span> now = INF;</div><div class="line">            qx = j + <span class="number">1</span>, qy = n, qd = line[j];</div><div class="line">            update(<span class="number">1</span>, n, <span class="number">1</span>, now);</div><div class="line">        &#125;</div><div class="line">        qx = q[i].l, qy = q[i].r;</div><div class="line">        q[i].ans = get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    sort(q, q + m, cmp2);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, q[i].ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;题解：$Libre$ $Online$ $Judge$ # $6190$. 序列查询&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://goseqh.tk/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="树套树" scheme="https://goseqh.tk/tags/%E6%A0%91%E5%A5%97%E6%A0%91/"/>
    
      <category term="线段树套平衡树" scheme="https://goseqh.tk/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%A5%97%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>#6161. 「美团 CodeM 初赛 Round A」倒水</title>
    <link href="https://goseqh.tk/2017/07/11/6161-%E3%80%8C%E7%BE%8E%E5%9B%A2-CodeM-%E5%88%9D%E8%B5%9B-Round-A%E3%80%8D%E5%80%92%E6%B0%B4/"/>
    <id>https://goseqh.tk/2017/07/11/6161-「美团-CodeM-初赛-Round-A」倒水/</id>
    <published>2017-07-11T05:38:18.000Z</published>
    <updated>2017-07-11T06:20:55.300Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>题解：$Libre$ $Online$ $Judge$ # $6161$. 「美团 CodeM 初赛 Round A」倒水<br><a id="more"></a></p>
<h1 id="LOJ-6161-「美团-CodeM-初赛-Round-A」倒水"><a href="#LOJ-6161-「美团-CodeM-初赛-Round-A」倒水" class="headerlink" title="LOJ 6161. 「美团 CodeM 初赛 Round A」倒水"></a>LOJ 6161. 「美团 CodeM 初赛 Round A」倒水</h1><p>内存限制：32 MiB<br>时间限制：1000 ms<br>标准输入输出<br>题目类型：传统<br>评测方式：文本比较</p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>有一个大水缸，里面的水温度为 $T$ 单位，体积为 $C$ 升。另有 $n$ 杯水，每杯水有温度 $t_i$ 单位与体积 $c_i$ 升。现在要把大水缸的水倒入 $n$ 杯水中使得 $n$ 杯水的温度相同，请问这是否可能？如果可能，请求出可行的最高的温度，保留 4 位小数。</p>
<p>注意：一杯温度为 $t_1$​​ 单位，体积为 $c_1$​​ 升的水与另一杯温度为 $t_2$ 单位，体积为 $c_2$​​ 升的水混合后温度变为 $\frac{t_1\times c_1+t_2\times c_2}{c_1+c_2}​$​​​​，体积变为 $c_1+c_2$​​。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行一个整数 $n$。 第二行两个整数 $T,C$。 接下来 $n$ 行每行两个整数 $t_i,c_i$​​。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>如果非法，输出 Impossible。 否则第一行输出 Possible，第二行输出一个保留 4 位小数的实数表示答案。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span></div><div class="line"><span class="symbol">10 </span><span class="number">2</span></div><div class="line"><span class="symbol">20 </span><span class="number">1</span></div><div class="line"><span class="symbol">25 </span><span class="number">1</span></div><div class="line"><span class="symbol">30 </span><span class="number">1</span></div></pre></td></tr></table></figure>
<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Possible</span></div><div class="line">20<span class="selector-class">.0000</span></div></pre></td></tr></table></figure>
<h3 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h3><p>往第二杯水中倒 $0.5$ 升水。 往第三杯水中到 $1$ 升水。 三杯水的温度都变成了 $20$。</p>
<h2 id="数据范围与提示"><a href="#数据范围与提示" class="headerlink" title="数据范围与提示"></a>数据范围与提示</h2><p>$1\le n\le 10^5,0\le t_i,c_i,T\le 10^4,0\le C\le 10^9$</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>其实很容易看出来是一个二分答案，因为在大水缸中温度很高的时候，要使杯子里的水温度越高，就需要越多的大水缸中的水，这样就可以二分了，同时，当大水缸温度介于最高温度与最低温度之间<strong>且最高温度不等于最低温度</strong>时无解</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 20005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-6</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">glass</span>&#123;</span></div><div class="line">    <span class="keyword">double</span> t, c;</div><div class="line">    glass(<span class="keyword">double</span> t, <span class="keyword">double</span> c) : t(t), c(c)&#123;&#125;</div><div class="line">    glass()&#123;&#125;</div><div class="line">&#125;save[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (a - b &gt; eps) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (b - a &gt; eps) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(glass a, glass b)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (a.t != b.t) <span class="keyword">return</span> dcmp(a.t, b.t) &lt; <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> dcmp(a.c, b.c) &lt; <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">double</span> C, T;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">double</span> all = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        all += save[i].c * (x - save[i].t) / (T - x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (dcmp(C, all) &gt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">work</span><span class="params">(<span class="keyword">double</span> l, <span class="keyword">double</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (r - l &lt; eps) <span class="keyword">return</span> l;</div><div class="line">    <span class="keyword">double</span> mid = ((r - l) / <span class="number">2</span>) + l;</div><div class="line">    <span class="keyword">if</span> (judge(mid)) <span class="keyword">return</span> work(mid, r);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> work(l, mid);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"water.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"water.out"</span> ,<span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;T, &amp;C);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;save[i].t, &amp;save[i].c);</div><div class="line">    &#125;</div><div class="line">    sort(save, save + n, cmp);</div><div class="line">    <span class="keyword">if</span> (dcmp(T, save[<span class="number">0</span>].t) &gt;= <span class="number">0</span> &amp;&amp; dcmp(T, save[n - <span class="number">1</span>].t) &lt;= <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(dcmp(T, save[i].t) != <span class="number">0</span>)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Possible\n%.4lf"</span>, save[<span class="number">0</span>].t);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (dcmp(T, save[<span class="number">0</span>].t) &lt; <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">if</span> (judge(save[<span class="number">0</span>].t))&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Possible\n%.4lf"</span>, save[<span class="number">0</span>].t);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">if</span> (!judge(save[n - <span class="number">1</span>].t - eps))&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Possible\n%.4lf"</span>, work(save[n - <span class="number">1</span>].t, T));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>忘记全相等的情况了$QAQ$</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;题解：$Libre$ $Online$ $Judge$ # $6161$. 「美团 CodeM 初赛 Round A」倒水&lt;br&gt;
    
    </summary>
    
    
      <category term="二分答案" scheme="https://goseqh.tk/tags/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>#6164. 「美团 CodeM 初赛 Round A」数列互质</title>
    <link href="https://goseqh.tk/2017/07/11/6164-%E3%80%8C%E7%BE%8E%E5%9B%A2-CodeM-%E5%88%9D%E8%B5%9B-Round-A%E3%80%8D%E6%95%B0%E5%88%97%E4%BA%92%E8%B4%A8/"/>
    <id>https://goseqh.tk/2017/07/11/6164-「美团-CodeM-初赛-Round-A」数列互质/</id>
    <published>2017-07-11T05:14:42.000Z</published>
    <updated>2017-07-11T06:21:01.292Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>题解：$Libre$ $Online$ $Judge$ # $6164$. 「美团 CodeM 初赛 Round A」数列互质<br><a id="more"></a></p>
<h1 id="LOJ-6164-「美团-CodeM-初赛-Round-A」数列互质"><a href="#LOJ-6164-「美团-CodeM-初赛-Round-A」数列互质" class="headerlink" title="LOJ 6164. 「美团 CodeM 初赛 Round A」数列互质"></a>LOJ 6164. 「美团 CodeM 初赛 Round A」数列互质</h1><p>内存限制：512 MiB<br>时间限制：500 ms<br>标准输入输出<br>题目类型：传统<br>评测方式：文本比较</p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出一个长度为 $n$ 的数列 $a_1 , a_2 , a_3\cdots a_n$以及 $m$ 组询问$(l_i , r_i , k_i)$，求区间 $[ l_i , r_i ]$ 中有多少数在该区间中的出现次数与 $k_i$​​ 互质。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行，两个正整数 $n,m$。</p>
<p>第二行，$n$ 个正整数 $a_i$​​ 描述这个数列。</p>
<p>接下来 $m$ 行，每行三个正整数 $l_i , r_i , k_i$，描述一次询问。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出 $m$ 行，即每次询问的答案。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">10 </span><span class="number">5</span></div><div class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span></div><div class="line"><span class="symbol">4 </span><span class="number">7</span> <span class="number">2</span></div><div class="line"><span class="symbol">4 </span><span class="number">7</span> <span class="number">3</span></div><div class="line"><span class="symbol">4 </span><span class="number">8</span> <span class="number">2</span></div><div class="line"><span class="symbol">4 </span><span class="number">8</span> <span class="number">3</span></div><div class="line"><span class="symbol">3 </span><span class="number">8</span> <span class="number">3</span></div></pre></td></tr></table></figure>
<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">0</span></div></pre></td></tr></table></figure>
<h2 id="数据范围与提示"><a href="#数据范围与提示" class="headerlink" title="数据范围与提示"></a>数据范围与提示</h2><p>$1\le n,m\le 5\times 10^4$<br>$1\le a_i\le n$<br>$1\le l_i\le r_i\le n$<br>$1\le k_i\le n$</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>基本就是一个序列莫队，这个怎么想到呢？大概就是发现别的算法大概都不是非常有效，所以想到的吧（逃</p>
<p>但其实我一开始以为莫队会超时，因为在更换$k$的时候我本以为要重新扫一遍当前维护的信息序列，然而正解十分机智，存储了次数的出现次数，这样保证不会超过$O(\sqrt{n})$的复杂度，应该也是逐步思考，然后想到通过这种方法来进行合并优化的吧</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 3000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">q</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> l, r, k, t, ans;</div><div class="line">    q(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k, <span class="keyword">int</span> t) : l(l), r(r), k(k), t(t)&#123;&#125;</div><div class="line">    q()&#123;&#125;</div><div class="line">&#125;sline[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> pos[maxn];</div><div class="line"><span class="keyword">int</span> size;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        pos[i] = i / size;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(q a, q b)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (pos[a.l] != pos[b.l]) <span class="keyword">return</span> pos[a.l] &lt; pos[b.l];</div><div class="line">    <span class="keyword">return</span> a.r &lt; b.r;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(q a, q b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a.t &lt; b.t;</div><div class="line">&#125;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> l, r;</div><div class="line"><span class="keyword">int</span> save[maxn];</div><div class="line"><span class="keyword">int</span> ct;</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="keyword">int</span> cnt[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (r == <span class="number">0</span>) ? l : gcd(r, l % r);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (num[cnt[line[x]]]) num[cnt[line[x]]]--;</div><div class="line">    cnt[line[x]]++;</div><div class="line">    save[ct++] = cnt[line[x]];</div><div class="line">    num[cnt[line[x]]]++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (num[cnt[line[x]]]) num[cnt[line[x]]]--;</div><div class="line">    <span class="keyword">if</span>(cnt[line[x]]) cnt[line[x]]--;</div><div class="line">    save[ct++] = cnt[line[x]];</div><div class="line">    num[cnt[line[x]]]++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_ans</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ct; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[save[i]] &amp;&amp; num[save[i]])&#123;</div><div class="line">            vis[save[i]] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (save[i] != <span class="number">0</span> &amp;&amp; gcd(k, save[i]) == <span class="number">1</span>) ans += num[save[i]];</div><div class="line">            save[temp++] = save[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ct = temp;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ct; i++) vis[save[i]] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"seq.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"seq.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    size = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(n) + <span class="number">1</span>;</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> l, r, k;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;l, &amp;r, &amp;k);</div><div class="line">        sline[i] = q(l - <span class="number">1</span>, r - <span class="number">1</span>, k, i);</div><div class="line">    &#125;</div><div class="line">    sort(sline, sline + m, cmp);</div><div class="line">    l = <span class="number">0</span>, r = <span class="number">-1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="keyword">while</span> (r &gt; sline[i].r) del(r--);</div><div class="line">        <span class="keyword">while</span> (r &lt; sline[i].r) ins(++r);</div><div class="line">        <span class="keyword">while</span> (l &gt; sline[i].l) ins(--l);</div><div class="line">        <span class="keyword">while</span> (l &lt; sline[i].l) del(l++);</div><div class="line">        sline[i].ans = get_ans(sline[i].k);</div><div class="line">    &#125;</div><div class="line">    sort(sline, sline + m, cmp2);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sline[i].ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>好久没写莫队各种被坑。。。感觉还是要仔细一些吧，同时要注意$k=1$的情况，需要进行一些特判，否则会带上次数等于零的那些数字，感觉自己还是不够仔细</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;题解：$Libre$ $Online$ $Judge$ # $6164$. 「美团 CodeM 初赛 Round A」数列互质&lt;br&gt;
    
    </summary>
    
    
      <category term="序列操作" scheme="https://goseqh.tk/tags/%E5%BA%8F%E5%88%97%E6%93%8D%E4%BD%9C/"/>
    
      <category term="莫队算法" scheme="https://goseqh.tk/tags/%E8%8E%AB%E9%98%9F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
