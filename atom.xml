<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Goseqh&#39;s Blog</title>
  <subtitle>A JuRuo from a weak province</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://goseqh.tk/"/>
  <updated>2017-09-09T08:52:05.299Z</updated>
  <id>https://goseqh.tk/</id>
  
  <author>
    <name>Goseqh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【置顶】黑科技汇总</title>
    <link href="https://goseqh.tk/2017/09/09/%E3%80%90%E7%BD%AE%E9%A1%B6%E3%80%91%E9%BB%91%E7%A7%91%E6%8A%80%E6%B1%87%E6%80%BB/"/>
    <id>https://goseqh.tk/2017/09/09/【置顶】黑科技汇总/</id>
    <published>2017-09-09T08:01:20.000Z</published>
    <updated>2017-09-09T08:52:05.299Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>在这神秘的光芒背后，有着怎样的奥秘？（纯胡扯<br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;在这神秘的光芒背后，有着怎样的奥秘？（纯胡扯&lt;br&gt;
    
    </summary>
    
    
      <category term="黑科技" scheme="https://goseqh.tk/tags/%E9%BB%91%E7%A7%91%E6%8A%80/"/>
    
  </entry>
  
  <entry>
    <title>【置顶】编程错误汇总</title>
    <link href="https://goseqh.tk/2017/09/09/%E3%80%90%E7%BD%AE%E9%A1%B6%E3%80%91%E7%BC%96%E7%A8%8B%E9%94%99%E8%AF%AF%E6%B1%87%E6%80%BB/"/>
    <id>https://goseqh.tk/2017/09/09/【置顶】编程错误汇总/</id>
    <published>2017-09-09T07:17:39.000Z</published>
    <updated>2017-10-10T23:16:40.579Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>大家喜闻乐见的引起众吐（槽）的文章&lt;（￣︶￣）/<br><a id="more"></a></p>
<h1 id="语法类"><a href="#语法类" class="headerlink" title="语法类"></a>语法类</h1><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><ul>
<li><strong>注意内外层循环变量的冲突</strong></li>
<li>注意内部语句循环变量的正确使用</li>
<li>注意循环变量与全局变量（循环外部变量）的冲突</li>
</ul>
<h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><ul>
<li>注意if…else的对应性，不要把内层的if对应到外层的else上，为避免这一错误可多使用’{}’</li>
<li>注意<gqh style="font-family:Goseqh;color:red">运算符的优先级</gqh></li>
</ul>
<h2 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h2><ul>
<li>保险起见，在每个分支后面加上break;</li>
</ul>
<h2 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h2><ul>
<li><gqh style="font-family:Goseqh;color:red">严重问题:注意宏定义的不安全性</gqh>，代码示例如下：</li>
</ul>
<p>我们想计算$(a + b) * c$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> A a + b</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a, b, c;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;c);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, A * c);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但这样做的结果是$a + b * c$<br>要想得到正确结果，多使用’()’：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> A (a + b)</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a, b, c;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;c);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, A * c);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h2><ul>
<li><p style="font-family:verdana;color:orange">尽可能避免在任何STL中存放比较方法定义与外部数组存在关联的元素，否则会导致排序紊乱产生错误</p>

</li>
</ul>
<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><ul>
<li><p style="font-family:verdana;color:red">严重问题：绝对不要使用STL的二分查找功能来查找set中的元素，只能使用set自带的二分查找成员函数，否则会导致严重的TLE问题</p>

</li>
</ul>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><ul>
<li>不要在未对要访问的map键值赋值的情况下访问它，否则会RE</li>
</ul>
<h3 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h3><ul>
<li>注意cmp的定义方法：当$a$比$b$优先级小的时候返回true</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span>&#123;</span></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> a &lt; b;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, cmp&gt; p;</div></pre></td></tr></table></figure>
<p>$p$是一个大根堆</p>
<h1 id="算法类"><a href="#算法类" class="headerlink" title="算法类"></a>算法类</h1><h2 id="前缀和-积"><a href="#前缀和-积" class="headerlink" title="前缀和/积"></a>前缀和/积</h2><ul>
<li>不要使最开头累加/乘的操作访问不该访问的内存</li>
<li>如果是求前缀积，一定不要忘记第一个元素应该手动设为$1$</li>
</ul>
<h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><ul>
<li>注意不要忘记每次对幂数进行的右移操作，否则会TLE（当然，这个本地也是很容易测试出来的，但可能会不知道问题出在哪里）</li>
<li><gqh style="font-family:verdana;color:red">严重问题：注意绝对不要使幂数为一个负数</gqh>，如果容易出现此错误，最好提前判断一下</li>
<li>在取模的题目中，不要忘记每次乘法都是需要取模的</li>
</ul>
<h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><ul>
<li><gqh style="font-family:verdana;color:red">严重问题：注意不要让查询的区间为不合法区间</gqh>，否则会RE，这种错误往往比较隐蔽，所以可能出现此情况时最好提前判断一下</li>
<li><p>注意线段树的基本架构不要写错：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Operate</span> <span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="comment">//pushdown(l, r, o);</span></div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        <span class="comment">//do something</span></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) Operate(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) Operate(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><gqh style="font-family:verdana;color:orange">有的时候，当题目卡常数时，我们需要把线段树改写为迭代形式，以加快运行速度</gqh>

</li>
</ul>
<h2 id="动态规划（DP）"><a href="#动态规划（DP）" class="headerlink" title="动态规划（DP）"></a>动态规划（DP）</h2>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;大家喜闻乐见的引起众吐（槽）的文章&amp;lt;（￣︶￣）/&lt;br&gt;
    
    </summary>
    
    
      <category term="编程错误" scheme="https://goseqh.tk/tags/%E7%BC%96%E7%A8%8B%E9%94%99%E8%AF%AF/"/>
    
  </entry>
  
  <entry>
    <title>东北育才NOIP校内模拟赛总结</title>
    <link href="https://goseqh.tk/2017/09/09/%E4%B8%9C%E5%8C%97%E8%82%B2%E6%89%8DNOIP%E6%A0%A1%E5%86%85%E6%A8%A1%E6%8B%9F%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
    <id>https://goseqh.tk/2017/09/09/东北育才NOIP校内模拟赛总结/</id>
    <published>2017-09-09T06:57:37.000Z</published>
    <updated>2017-09-09T07:22:52.435Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>NOIP即将到来，又是新的轮回，不知今年会怎么样……<br><a id="more"></a></p>
<h1 id="东北育才2017-9-8校内NOIP模拟赛总结"><a href="#东北育才2017-9-8校内NOIP模拟赛总结" class="headerlink" title="东北育才2017.9.8校内NOIP模拟赛总结"></a>东北育才2017.9.8校内NOIP模拟赛总结</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2>

	<div class="row">
    <embed src="test0908.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="名次"><a href="#名次" class="headerlink" title="名次"></a>名次</h2><p><img src="./2e5ec48b37bc6896.jpg" alt="图片加载失败/(ㄒoㄒ)/~~"></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="A-dist"><a href="#A-dist" class="headerlink" title="A.dist"></a>A.dist</h3><h4 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h4><p>本题应该说是比较基础的题目了，如果没能想到做法，说明那么在基础的知识点上面掌握的并不牢固，如果写挂，说明细节把握不好，不够仔细，需要更加认真</p>
<p>本题的做法有许多，本文只介绍一种：</p>
<p>考虑绝对值的几何意义，我们可以直接把所有点的位置进行排序，然后预处理前缀后缀和，对每个点进行扫描求和，不妨设这个点为第$i$个点，点的位置为$x_i$</p>
<p>那么这个点贡献的答案就是 <script type="math/tex">(i * x_{i} - pre[i]) + (suf[i] - (n - i + 1) * x_{i})</script></p>
<p>这样本题就在$O(n \log n)$内解决了</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line">LL line[maxn];</div><div class="line">LL suf[maxn];</div><div class="line">LL pre[maxn];</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">	<span class="keyword">char</span> ch = getchar();</div><div class="line">	<span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span> (ch != <span class="string">'-'</span> &amp;&amp; !<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">	<span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = getchar();</div><div class="line">	x = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">	<span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">//freopen("dist.in", "r", stdin);</span></div><div class="line">	<span class="comment">//freopen("dist.out", "w", stdout);</span></div><div class="line">	read(n);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(line[i]);</div><div class="line">	sort(line + <span class="number">1</span>, line + <span class="number">1</span> + n);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) suf[i] = suf[i + <span class="number">1</span>] + line[i];</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) pre[i] = pre[i - <span class="number">1</span>] + line[i];</div><div class="line">	LL ans = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">		ans += suf[i] - line[i] * (n - i + <span class="number">1</span>) + line[i] * i - pre[i];</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="B-fight"><a href="#B-fight" class="headerlink" title="B.fight"></a>B.fight</h3><h4 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h4><p>考虑相邻位交换，我们假设当前要打的怪物为$i$，下一个为$i + 1$，那么$i$与$i + 1$（假设这是存在的）交换后的状态对答案的贡献减去交换前的贡献，并且我们要求它小于零，即使答案更优，那么就对应着如下的式子（其中$num_i$表示使怪物死亡需要的攻击次数）:</p>
<script type="math/tex; mode=display">
\begin{align}
\Delta_{ans} &= ((num_i + num_{i + 1}) * A_{i} + num_{i + 1} * A_{i + 1}) - ((num_i + num_{i + 1}) * A_{i + 1} + num_i * A_i) \\
&= A_i * num_{i + 1} - num_i * A_{i + 1}\\
& < 0\\
\end{align}</script><p>由此，我们知道：</p>
<script type="math/tex; mode=display">\frac{A_i}{num_i} < \frac{A_{i + 1}}{num_{i + 1}}</script><p>即，我们将每一个怪物的权值定义为它的攻击力除以使其死亡需要的攻击次数，那么我们应该尽可能地先去攻击权值较大的怪物，所以，我们只需要对此排序，扫描一遍即可出解</p>
<p>那么本题就在$O(n \log n)$内解决了</p>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><p>注意：</p>
<ul>
<li>排序的时候要转换类型为double型<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, ak;</div><div class="line">LL line[maxn];</div><div class="line">LL sline[maxn];</div><div class="line">LL a[maxn];</div><div class="line">LL d[maxn];</div><div class="line">LL h[maxn];</div><div class="line">LL pre[maxn];</div><div class="line">LL num[maxn];</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">	<span class="keyword">char</span> ch = getchar();</div><div class="line">	<span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span> (ch != <span class="string">'-'</span> &amp;&amp; !<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">	<span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = getchar();</div><div class="line">	x = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">	<span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> ((<span class="keyword">double</span>) a[x] / num[x]) &gt; ((<span class="keyword">double</span>) a[y] / num[y]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">//freopen("fight.in", "r", stdin);</span></div><div class="line">	<span class="comment">//freopen("fight.out", "w", stdout);</span></div><div class="line">	read(n), read(ak);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(a[i]), read(d[i]), read(h[i]);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) sline[i] = i;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) num[i] = (h[i] - <span class="number">1</span>) / (ak - d[i]) + <span class="number">1</span>;</div><div class="line">	sort(sline + <span class="number">1</span>, sline + <span class="number">1</span> + n, cmp);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) pre[i] = pre[i - <span class="number">1</span>] + num[sline[i]];</div><div class="line">	LL ans = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </div><div class="line">	ans = ans + pre[i] * a[sline[i]];</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="C-city"><a href="#C-city" class="headerlink" title="C.city"></a>C.city</h3><h4 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h4><p>题目要求修路以及建房，且修路优先，同时，我们可以发现修路并不是独立的，路的修建方法与最优解有很大的关联，那么我们考察代价的计算方法，去掉这样的关联性，即可使用$Kruskal$最小生成树算法解决问题</p>
<p>我们发现，一个房子的建设代价，由两部分构成，一是自己城市的代价，二是周边城市带来的代价，我们发现，这两部分代价是独立的，而且第一部分我们可以很容易地求出，计算公式为：</p>
<script type="math/tex; mode=display">h[i] * \frac{(a[i] + b[i] - 1) * (a[i] - b[i])}{2}</script><p>这应该很容易理解</p>
<p>我们下面探讨第二部分的求法，我们发现，对比两个有边直接相连且都需要建房的城市，我们一定要先在$h$值较大的城市建房，为什么呢？我们可以想上一题一样列出公式，对比两种情况下的权值并作差，即可得出这一结论，方法相同，本处不再赘述<sup><a href="#fn_1" id="reffn_1">1</a></sup></p>
<p>那么我们对于每一条边，都可以求出这条边被连接后整体答案的增加值，我们只要两边的城市互相之间的影响即可，结合上一结论即可推导出公式：</p>
<script type="math/tex; mode=display">r * (b[x] + b[y]) + h[y] * b[x] * (a[y] - b[y]) + h[x] * a[y] * (a[x] - b[x])</script><p>那么，我们对于已经有边的，减去前面的新建费用；所有没有边的两个城市，我们把边的权值按照上述方法定义，即可去掉边代价的关联性，使用$Kruskal$最小生成树算法即可解决本题</p>
<h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><p>注意：</p>
<ul>
<li>边的规模往往远大于点的规模，安全的做法是分别进行宏定义，不要同时使用一个宏</li>
<li>对于已经建好的边，要减掉新建边的费用<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 100005 <span class="comment">//需要注意的地方</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line">LL a[maxn];</div><div class="line">LL b[maxn];</div><div class="line">LL h[maxn];</div><div class="line"><span class="keyword">char</span> geo[maxn][maxn];</div><div class="line">LL n, m, r;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">	<span class="keyword">int</span> x, y;</div><div class="line">	LL len;</div><div class="line">	edge(<span class="keyword">int</span> x, <span class="keyword">int</span> y, LL len) : x(x), y(y), len(len)&#123;&#125;</div><div class="line">	edge()&#123;&#125;</div><div class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> edge b) <span class="keyword">const</span> &#123;</div><div class="line">		<span class="keyword">return</span> len &lt; b.len;</div><div class="line">	&#125;</div><div class="line">&#125;e[maxm &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to, LL len)</span> </span>&#123;</div><div class="line">	e[++cnt] = edge(fr, to, len);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ufs[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> ufs[x] = ((ufs[x] == x) ? x : find_root(ufs[x]));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">get_len</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (h[x] &gt; h[y]) swap(x, y);</div><div class="line">	<span class="keyword">return</span> r * (b[x] + b[y]) + h[y] * b[x] * (a[y] - b[y]) + h[x] * a[y] * (a[x] - b[x]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init1</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ufs[i] = i;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">			<span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</div><div class="line">			<span class="keyword">if</span> (geo[i][j] == <span class="string">'N'</span>) Add_Edge(i, j, get_len(i, j));</div><div class="line">			<span class="keyword">else</span>&#123;</div><div class="line">				<span class="keyword">int</span> x = find_root(i);</div><div class="line">				<span class="keyword">int</span> y = find_root(j);</div><div class="line">				<span class="keyword">if</span> (x == y) <span class="keyword">continue</span>;</div><div class="line">				<span class="keyword">else</span> ufs[x] = y;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL ans1 = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work1</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> ct = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">		<span class="keyword">if</span> (ufs[i] == i) ct++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (ct != <span class="number">1</span>)&#123;</div><div class="line">		sort(e + <span class="number">1</span>, e + cnt + <span class="number">1</span>);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)&#123;</div><div class="line">			<span class="keyword">int</span> x = find_root(e[i].x);</div><div class="line">			<span class="keyword">int</span> y = find_root(e[i].y);</div><div class="line">			<span class="keyword">if</span> (x == y) <span class="keyword">continue</span>;</div><div class="line">			ufs[x] = y;</div><div class="line">			ans1 += e[i].len;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">			<span class="keyword">if</span> (geo[i][j] == <span class="string">'Y'</span>) ans1 += get_len(i, j) - r * (b[i] + b[j]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">		ans1 += h[i] * ((a[i] + b[i] - <span class="number">1</span>) * (a[i] - b[i]) &gt;&gt; <span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">	<span class="keyword">char</span> ch = getchar();</div><div class="line">	<span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span> (ch != <span class="string">'-'</span> &amp;&amp; !<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">	<span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = getchar();</div><div class="line">	x = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10l</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">	<span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">//freopen("city.in", "r", stdin);</span></div><div class="line">	<span class="comment">//freopen("city.out", "w", stdout);</span></div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(b[i]);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(a[i]);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(h[i]);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%s"</span>, geo[i] + <span class="number">1</span>);</div><div class="line">	read(r);</div><div class="line">	init1();</div><div class="line">	work1();</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans1);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本套题目前两题难度较低，考察基础的编程思想与方法，最后一题考察图论的相关算法以及贡献法思维，难度较大，总体难度较为适中，命题难度编排合理，适于作为noip模拟题出现</p>
<p>第三题需要考虑的情况较多，尽管我确实把这些情况都进行了考虑，并且进行了正确的讨论，但最后却卡在了宏定义的问题上，导致边数组过小，程序WA了五个点，感觉还是十分可惜的，这样的问题一定要多加注意</p>
<blockquote id="fn_1">
<sup>1</sup>. 但是标程并未使用这一结论，经实际测试本结论正确<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;NOIP即将到来，又是新的轮回，不知今年会怎么样……&lt;br&gt;
    
    </summary>
    
    
      <category term="NOIP模拟赛" scheme="https://goseqh.tk/tags/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
      <category term="东北育才学校" scheme="https://goseqh.tk/tags/%E4%B8%9C%E5%8C%97%E8%82%B2%E6%89%8D%E5%AD%A6%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>东北师大附中九月集训省选模拟赛总结</title>
    <link href="https://goseqh.tk/2017/09/09/%E4%B8%9C%E5%8C%97%E5%B8%88%E5%A4%A7%E9%99%84%E4%B8%AD%E4%B9%9D%E6%9C%88%E9%9B%86%E8%AE%AD%E7%9C%81%E9%80%89%E6%A8%A1%E6%8B%9F%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
    <id>https://goseqh.tk/2017/09/09/东北师大附中九月集训省选模拟赛总结/</id>
    <published>2017-09-09T06:57:13.000Z</published>
    <updated>2017-09-09T06:57:13.403Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>东北师大附中九月集训NOIP模拟赛总结</title>
    <link href="https://goseqh.tk/2017/09/09/%E4%B8%9C%E5%8C%97%E5%B8%88%E5%A4%A7%E9%99%84%E4%B8%AD%E4%B9%9D%E6%9C%88%E9%9B%86%E8%AE%ADNOIP%E6%A8%A1%E6%8B%9F%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
    <id>https://goseqh.tk/2017/09/09/东北师大附中九月集训NOIP模拟赛总结/</id>
    <published>2017-09-09T06:56:23.000Z</published>
    <updated>2017-09-09T08:50:40.847Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>NOIP即将到来，又是新的轮回，不知今年会怎么样……<br><a id="more"></a></p>
<h1 id="东北师大附中2017-9-7-NOIP模拟赛总结"><a href="#东北师大附中2017-9-7-NOIP模拟赛总结" class="headerlink" title="# 东北师大附中2017.9.7 NOIP模拟赛总结"></a># 东北师大附中2017.9.7 NOIP模拟赛总结</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2>

	<div class="row">
    <embed src="0907.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="名次"><a href="#名次" class="headerlink" title="名次"></a>名次</h2><p><img src="./0907.png" alt="图片加载失败/(ㄒoㄒ)/~~"></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a>官方题解</h3>

	<div class="row">
    <embed src="0907sol.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h3 id="A-Cyl"><a href="#A-Cyl" class="headerlink" title="A.Cyl"></a>A.Cyl</h3><h4 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h4><p>我们看到数据范围以后，就知道这题一定不是暴搜了对吧，然后，我们模拟操作几下，就能够发现，本题实际上就是一个情况讨论题，我们对如下三种形式的数分别进行讨论:$3k + 1, 3k + 2, 3k + 3$，得出在$n$和$m$是这三种数两两组合的情况，然后直接讨论即可，应该比较简单</p>
<p>但是，我们又发现，当$n$, $m$过小时，上面的规律不再使用，因为用于平衡掉余数的空间不够大，它需要往回翻，所以，对于较小的$1, 2, 3$我们再分别特殊手算一下即可</p>
<p>吐槽：本题没说立方体不能有一半在外面啊！！！棱不是接触就行吗？？？</p>
<p>不然本题就A了。。。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    LL n, m;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">if</span> (n &gt; m) swap(n, m);</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">if</span> (m % <span class="number">3</span> == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%lld"</span>, (m - <span class="number">1</span>) / <span class="number">3</span> * <span class="number">2</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"-1"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">2</span>)&#123;</div><div class="line">        <span class="keyword">if</span> (m % <span class="number">3</span> == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%lld"</span>, (m - <span class="number">1</span>) / <span class="number">3</span> * <span class="number">2</span> + <span class="number">1</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"-1"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">3</span>)&#123;</div><div class="line">        <span class="keyword">if</span> (m == <span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">"8"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (m % <span class="number">3</span> == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%lld"</span>, (n - <span class="number">1</span>) / <span class="number">3</span> * <span class="number">2</span> + (m - <span class="number">1</span>) / <span class="number">3</span> * <span class="number">2</span> + (n - <span class="number">1</span>) % <span class="number">3</span> + (m - <span class="number">1</span>) % <span class="number">3</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld"</span>, (n - <span class="number">1</span>) / <span class="number">3</span> * <span class="number">2</span> + (m - <span class="number">1</span>) / <span class="number">3</span> * <span class="number">2</span> + (n - <span class="number">1</span>) % <span class="number">3</span> + (m - <span class="number">1</span>) % <span class="number">3</span> + <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld"</span>, (n - <span class="number">1</span>) / <span class="number">3</span> * <span class="number">2</span> + (m - <span class="number">1</span>) / <span class="number">3</span> * <span class="number">2</span> + (n - <span class="number">1</span>) % <span class="number">3</span> + (m - <span class="number">1</span>) % <span class="number">3</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="B-RoundTrip"><a href="#B-RoundTrip" class="headerlink" title="B.RoundTrip"></a>B.RoundTrip</h3><h4 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h4><p>我们发现这道题好像是一个经典问题，我们显然要先用Tarjan缩点，把图变成一个DAG，然后加边</p>
<p>因为时间不够，所以我乱讨论了一番，十分地麻烦，然后就WA了。。。</p>
<p>实际上有一种很简单的统计方法，我们可以发现，直接分别统计出度与入度为零的点的个数就可以，然后取个MAX，这样保证存在加边方案满足题意（想一想为什么？）</p>
<p>这样本题就解决了。。。</p>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) :  next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to);</div><div class="line">    h[fr] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> low[maxn];</div><div class="line"><span class="keyword">int</span> pre[maxn];</div><div class="line"><span class="keyword">int</span> sccno[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> ct = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> t;</div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    pre[x] = low[x] = ++t;</div><div class="line">    vis[x] = <span class="number">1</span>;</div><div class="line">    s.push(x);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span> (!vis[op]) low[x] = min(low[x], Tarjan(op, x));</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!sccno[op]) low[x] = min(low[x], low[op]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (low[x] == pre[x])&#123;</div><div class="line">        ++ct;</div><div class="line">        <span class="keyword">int</span> op = s.top();</div><div class="line">        s.pop();</div><div class="line">        <span class="keyword">while</span> (op != x)&#123;</div><div class="line">            sccno[op] = ct;</div><div class="line">            op = s.top();</div><div class="line">            s.pop();</div><div class="line">        &#125;</div><div class="line">        sccno[x] = ct;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> low[x];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> in[maxn];</div><div class="line"><span class="keyword">int</span> out[maxn];</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    read(n), read(m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        read(x), read(y);</div><div class="line">        Add_Edge(x, y);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (!vis[i]) Tarjan(i, i);</div><div class="line">    <span class="keyword">if</span> (ct == <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"0"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = h[i]; j; j = e[j].next)&#123;</div><div class="line">            <span class="keyword">int</span> op = e[j].to;</div><div class="line">            <span class="keyword">if</span> (sccno[i] == sccno[op]) <span class="keyword">continue</span>;</div><div class="line">            out[sccno[i]]++;</div><div class="line">            in[sccno[op]]++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ans1 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> ans2 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ct; i++)&#123;</div><div class="line">        ans1 += (!out[i]);</div><div class="line">        ans2 += (!in[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, max(ans1, ans2));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="C-Graph"><a href="#C-Graph" class="headerlink" title="C.Graph"></a>C.Graph</h3><h4 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h4><p>本题真的是一个黑科技啊。。。居然还有这样的操作。。。</p>
<p>我们发现，本题如果暴力处理肯定会挂，于是我们采用特殊的方法，先观察答案路径的性质：</p>
<ul>
<li>路径上只有两个关键点，且是路径的两个端点</li>
<li>长度最小</li>
</ul>
<p>于是，我们通过第一条性质，可以对每个点暴力SPFA，搜到一个关键点就停下来，然后更新答案， 用一个栈保存更新过的结点，然后只清空这些栈中的结点距离（其实在下一场的总结中有一种技巧可以避免这样做）</p>
<p>然后就拿了90分。。。后来发现源点忘了入栈了，改过来就A了</p>
<p>—————-上面是我的方(bao)法(li)，不要被它蒙蔽了双眼。。。—————-</p>
<p>正解是二进制分组+多源多汇最短路<del>(你是在跑网络流吗)</del></p>
<p>我第一次知道最短路还可以这样跑。。。其实大家都觉得二进制分组是看点，但是我觉得这种跑最短路的方法才真的应该铭记。。。</p>
<p>二进制分组就是按照点的标号的某一位的数(0或1）进行左右分组，对每一位都这样做，就必然可以找出答案（因为答案的两个点的标号必然不同）</p>
<p>然后我们新建源点与汇点，连长度为1的边，就可以狂跑最短路啦</p>
<p>其实分组怎么分都行。。。zgz随机化分组随手碾标程。。。</p>
<p>那么代码如下：</p>
<h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><p>注意这是我的方(bao)法(li)，不喜勿喷:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) :  next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to);</div><div class="line">    h[fr] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> low[maxn];</div><div class="line"><span class="keyword">int</span> pre[maxn];</div><div class="line"><span class="keyword">int</span> sccno[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> ct = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> t;</div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    pre[x] = low[x] = ++t;</div><div class="line">    vis[x] = <span class="number">1</span>;</div><div class="line">    s.push(x);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span> (!vis[op]) low[x] = min(low[x], Tarjan(op, x));</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!sccno[op]) low[x] = min(low[x], low[op]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (low[x] == pre[x])&#123;</div><div class="line">        ++ct;</div><div class="line">        <span class="keyword">int</span> op = s.top();</div><div class="line">        s.pop();</div><div class="line">        <span class="keyword">while</span> (op != x)&#123;</div><div class="line">            sccno[op] = ct;</div><div class="line">            op = s.top();</div><div class="line">            s.pop();</div><div class="line">        &#125;</div><div class="line">        sccno[x] = ct;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> low[x];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> in[maxn];</div><div class="line"><span class="keyword">int</span> out[maxn];</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    read(n), read(m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        read(x), read(y);</div><div class="line">        Add_Edge(x, y);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span> (!vis[i]) Tarjan(i, i);</div><div class="line">    <span class="keyword">if</span> (ct == <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"0"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = h[i]; j; j = e[j].next)&#123;</div><div class="line">            <span class="keyword">int</span> op = e[j].to;</div><div class="line">            <span class="keyword">if</span> (sccno[i] == sccno[op]) <span class="keyword">continue</span>;</div><div class="line">            out[sccno[i]]++;</div><div class="line">            in[sccno[op]]++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ans1 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> ans2 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ct; i++)&#123;</div><div class="line">        ans1 += (!out[i]);</div><div class="line">        ans2 += (!in[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, max(ans1, ans2));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是正解:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/****************************************\</span></div><div class="line">* Author : ztx</div><div class="line">* Title  : std-graph</div><div class="line">* ALG    : 最短路</div><div class="line">* CMT    : 按照二进制拆分进行log(n)次最短路</div><div class="line">* Time   : 2016-10-19</div><div class="line">\****************************************/</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Rep(i,l,r) for(i=(l);i&lt;=(r);i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,l,r) for(i=(l);i&lt; (r);i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Rev(i,r,l) for(i=(r);i&gt;=(l);i--)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rev(i,r,l) for(i=(r);i&gt; (l);i--)</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll ;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> lf ;</div><div class="line"><span class="keyword">int</span> CH , NEG ;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TP&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(TP&amp; ret)</span> </span>&#123;</div><div class="line">    ret = NEG = <span class="number">0</span> ; <span class="keyword">while</span> (CH=getchar() , CH&lt;<span class="string">'!'</span>) ;</div><div class="line">    <span class="keyword">if</span> (CH == <span class="string">'-'</span>) NEG = <span class="literal">true</span> , CH = getchar() ;</div><div class="line">    <span class="keyword">while</span> (ret = ret*<span class="number">10</span>+CH-<span class="string">'0'</span> , CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</div><div class="line">    <span class="keyword">if</span> (NEG) ret = -ret ;</div><div class="line">&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TP&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">readc</span><span class="params">(TP&amp; ret)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span> (ret=getchar() , ret&lt;<span class="string">'!'</span>) ;</div><div class="line">    <span class="keyword">while</span> (CH=getchar() , CH&gt;<span class="string">'!'</span>) ;</div><div class="line">&#125;</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TP&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reads</span><span class="params">(TP *ret)</span> </span>&#123;</div><div class="line">    ret[<span class="number">0</span>]=<span class="number">0</span>;<span class="keyword">while</span> (CH=getchar() , CH&lt;<span class="string">'!'</span>) ;</div><div class="line">    <span class="keyword">while</span> (ret[++ret[<span class="number">0</span>]]=CH,CH=getchar(),CH&gt;<span class="string">'!'</span>) ;</div><div class="line">    ret[ret[<span class="number">0</span>]+<span class="number">1</span>]=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  maxn  100010LL</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  maxm  500010LL</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  maxk  233330LL</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> e[<span class="number">3</span>][(maxm&lt;&lt;<span class="number">1</span>)+maxn], star[maxn], tote = <span class="number">1</span>;</div><div class="line"><span class="keyword">int</span> rstar[maxn], rtote;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  to(p)  e[0][p]</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  nxt(p) e[1][p]</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  len(p) e[2][p]</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  ft     q.front()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  bk     q.back()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  pf(x)  q.push_front(x)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  pb(x)  q.push_back(x)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  pop    q.pop_front()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span>  infi   0x3f3f3f3fLL</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>&#123;</div><div class="line">    tote ++ , to(tote) = v, len(tote) = w, nxt(tote) = star[u], star[u] = tote;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, s;</div><div class="line"><span class="keyword">int</span> S[maxk];</div><div class="line"><span class="keyword">int</span> dis[maxn];</div><div class="line"><span class="keyword">bool</span> inq[maxn];</div><div class="line"><span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;q;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i, k, u, v, w, p, ans;</div><div class="line">    <span class="comment">/// tote = 1, memset(star,0,sizeof star);</span></div><div class="line">    Rep (i,<span class="number">1</span>,m)</div><div class="line">        read(u), read(v), read(w),</div><div class="line">        AddEdge(u,v,w), AddEdge(v,u,w);</div><div class="line">    <span class="comment">//puts("!!!!!"); </span></div><div class="line">    <span class="built_in">memcpy</span>(rstar,star,<span class="keyword">sizeof</span> star);</div><div class="line">    rtote = tote;</div><div class="line">    Rep (i,<span class="number">1</span>,s)</div><div class="line">        read(S[i]);</div><div class="line">    <span class="comment">//puts("!!!!!"); </span></div><div class="line">    ans = infi;</div><div class="line">    rep (k,<span class="number">0</span>,<span class="number">20</span>) &#123;</div><div class="line">        <span class="comment">/// build the graph</span></div><div class="line">        <span class="built_in">memcpy</span>(star,rstar,<span class="keyword">sizeof</span> rstar);</div><div class="line">        tote = rtote;</div><div class="line">        Rep (i,<span class="number">1</span>,s)</div><div class="line">            <span class="keyword">if</span> (S[i]&amp;(<span class="number">1</span>&lt;&lt;k)) AddEdge(n+<span class="number">1</span>,S[i],<span class="number">0</span>);</div><div class="line">            <span class="keyword">else</span> AddEdge(S[i],n+<span class="number">2</span>,<span class="number">0</span>);</div><div class="line">        <span class="comment">/// spfa</span></div><div class="line">        q.clear();</div><div class="line">        <span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dis);</div><div class="line">        dis[n+<span class="number">1</span>]=<span class="number">0</span>;</div><div class="line">        pb(n+<span class="number">1</span>);</div><div class="line">        <span class="keyword">while</span> (!q.empty())</div><div class="line">            <span class="keyword">for</span> (u=ft,pop,inq[u]=<span class="literal">false</span>,p=star[u];p;p=nxt(p))</div><div class="line">                <span class="keyword">if</span> (v=to(p),dis[u]+len(p)&lt;dis[v])</div><div class="line">                    <span class="keyword">if</span> (dis[v]=dis[u]+len(p),!inq[v])</div><div class="line">                        <span class="keyword">if</span> (inq[v]=<span class="literal">true</span>,!q.empty()&amp;&amp;dis[v]&lt;dis[ft]) pf(v);</div><div class="line">                            <span class="keyword">else</span> pb(v);</div><div class="line">        <span class="keyword">if</span> (dis[n+<span class="number">2</span>] &lt; ans) ans = dis[n+<span class="number">2</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> READ</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span>  READ</span></div><div class="line">        freopen(<span class="string">"graph.in"</span> ,<span class="string">"r"</span>,<span class="built_in">stdin</span> ) ;</div><div class="line">        freopen(<span class="string">"graph.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>) ;</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;s) != EOF &amp;&amp; n+m+s&gt;<span class="number">0</span>) work();</div><div class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span>  READ</span></div><div class="line">        fclose(<span class="built_in">stdin</span>) ; fclose(<span class="built_in">stdout</span>) ;</div><div class="line">    <span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">        getchar() ; getchar() ;</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本次题目较为简单， 但未能取得高分，原因有三点：一是题面叙述不够清楚，二是时间安排不够合理，在思考题目上花费了较多时间，导致检查时间不够，三是知识欠缺，未能用正确的方法通过问题</p>
<hr>
<h1 id="东北师大附中2017-9-9-NOIP模拟赛总结"><a href="#东北师大附中2017-9-9-NOIP模拟赛总结" class="headerlink" title="东北师大附中2017.9.9 NOIP模拟赛总结"></a>东北师大附中2017.9.9 NOIP模拟赛总结</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2>

	<div class="row">
    <embed src="0909.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="名次-1"><a href="#名次-1" class="headerlink" title="名次"></a>名次</h2><p><img src="./0909.png" alt="图片加载失败/(ㄒoㄒ)/~~"></p>
<h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><h3 id="A-公约数"><a href="#A-公约数" class="headerlink" title="A.公约数"></a>A.公约数</h3><h4 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h4><p>自己在做的时候，感觉这题以前好像做过，然后好像是一个不等关系，然后能推出来一堆东西，于是就按照这个思路试了一下，先写了一个找规律的程序，把所有可能的对都打了出来，然后观察了一会，发现数对都是这样的形式（假设$c = gcd(a,b)$）：</p>
<script type="math/tex; mode=display">(a, b) = (a, a + c)</script><p>但是在后面还有一些不太满足这个规律的，然后就想在二进制意义下各种乱搞证明。。。</p>
<p>于是就。。。浪费了大把的时间</p>
<p>后来还是想回到最开始的思路上，直接用不等关系证明，于是瞬间就推了出来。。。如下（不妨设$x \geq y$）：</p>
<script type="math/tex; mode=display">
\begin{align}
gcd(x, y) &= x \oplus y\\
gcd(x, y) \oplus y&=  x\\
x &\leq  gcd(x, y) + y\\
\end{align}</script><p>所以，我们就知道了：$x = y + gcd(x, y)$</p>
<p>上面的规律到此就被证明了，于是我们就此以及调和级数定理设计一个“枚举”算法：先枚举gcd，然后里面扫描每一个数，判断是否有$x \oplus (x + gcd) = gcd$即可</p>
<p>这样本题就在$O(n \log n)$内解决了</p>
<p>同时，我们把上面用到的一个不等式：</p>
<script type="math/tex; mode=display">x \oplus y \leq x + y</script><p>称作异或不等式，便于以后的应用</p>
<p>给我的启示就是，有题快做，一定不要死扣证明，如果实在拿不准就先做别的题，这样才是真正的noip模拟</p>
<h4 id="官方题解-1"><a href="#官方题解-1" class="headerlink" title="官方题解"></a>官方题解</h4>

	<div class="row">
    <embed src="公约数.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><p>居然这么**短。。。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, ans;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//freopen("gcd.in", "r", stdin);</span></div><div class="line">    <span class="comment">//freopen("gcd.out", "w", stdout);</span></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt;= (n &gt;&gt; <span class="number">1</span>); d++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = d; i &lt;= n - d; i += d)&#123;</div><div class="line">            <span class="keyword">if</span> ((i ^ (i + d)) == d) ans++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="B-树上路径"><a href="#B-树上路径" class="headerlink" title="B.树上路径"></a>B.树上路径</h3><h4 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h4><p>本题看上去就是一个点分治，一开始以为二分，然后就反应过来直接点分治就可以，那么具体细节就不说了，还是注意全局变量的可变性，注意清空用完的数组变量等，注意判断点是否已经被访问过，以及注意多重循环嵌套时不要使用重复的循环变量等等。。。</p>
<p>但是，这次这些问题都没有犯，而是犯了STL错误：set决不能使用STL的二分查找，只能使用自己的成员函数，还有一点错误，就是不要考察每个长度，只需要考虑二分后最短的原先存在的长度加上当前正在考虑的这条链的长度是否在范围内就可以，否则复杂度就是$O(n^2\log^2 n)$的了，这种细节都要注意</p>
<h4 id="官方题解-2"><a href="#官方题解-2" class="headerlink" title="官方题解"></a>官方题解</h4>

	<div class="row">
    <embed src="树上路径.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, s, t;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to, len;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to, <span class="keyword">int</span> len) : next(next), to(to), len(len)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> len)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[x], y, len);</div><div class="line">    h[x] = cnt;</div><div class="line">    e[++cnt] = edge(h[y], x, len);</div><div class="line">    h[y] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> siz[maxn];</div><div class="line"><span class="keyword">int</span> g;</div><div class="line"><span class="keyword">int</span> as;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    siz[x] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (vis[op] || op == fa) <span class="keyword">continue</span>;</div><div class="line">        DFS1(op, x);</div><div class="line">        siz[x] += siz[op];</div><div class="line">        <span class="keyword">if</span> (siz[op] &gt; (as &gt;&gt; <span class="number">1</span>)) f = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (as - siz[x] &gt; (as &gt;&gt; <span class="number">1</span>)) f = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (f) g = x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"></div><div class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s1;</div><div class="line"><span class="keyword">int</span> s2[maxn];</div><div class="line"><span class="keyword">int</span> ct2 = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    s2[++ct2] = d[x];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa || vis[op]) <span class="keyword">continue</span>;</div><div class="line">        d[op] = d[x] + e[i].len;</div><div class="line">        DFS2(op, x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ans = INF;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DAC</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ns = as;</div><div class="line">    DFS1(x, x);</div><div class="line">    x = g;</div><div class="line">    s1.insert(<span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (vis[op]) <span class="keyword">continue</span>;</div><div class="line">        d[op] = e[i].len;</div><div class="line">        DFS2(op, x);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= ct2; j++)&#123;</div><div class="line">            <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; :: iterator it1 = s1.lower_bound(s - s2[j]);</div><div class="line">            <span class="keyword">int</span> d = s2[j] + (*it1);</div><div class="line">            <span class="keyword">if</span> (s &lt;= d &amp;&amp; d &lt;= t) ans = min(ans, d);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= ct2; j++) s1.insert(s2[j]);</div><div class="line">        ct2 = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    s1.clear();</div><div class="line">    vis[x] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (vis[op]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span> (siz[op] &gt; siz[x]) as = ns - siz[x];</div><div class="line">        <span class="keyword">else</span> as = siz[op];</div><div class="line">        DAC(op);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch) &amp;&amp; ch != <span class="string">'-'</span>) ch = getchar();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = getchar();</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//freopen("path.in", "r", stdin);</span></div><div class="line">    <span class="comment">//freopen("path.out", "w", stdout);</span></div><div class="line">    <span class="keyword">int</span> x, y, z;</div><div class="line">    read(n), read(s), read(t);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</div><div class="line">        read(x), read(y), read(z);</div><div class="line">        Add_Edge(x, y, z);</div><div class="line">    &#125;</div><div class="line">    as = n;</div><div class="line">    DAC(<span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (ans &lt; INF) <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"-1"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="C-飞扬的小鸟"><a href="#C-飞扬的小鸟" class="headerlink" title="C.飞扬的小鸟"></a>C.飞扬的小鸟</h3><h4 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h4><p>我们一看完题，就可以联想到SCOI的一道修车题，这两道题看上去简直是一毛一样的，于是我也几乎写了一毛一样的代码，然后就华丽的TLE了。。。</p>
<p>后来仔细地看了看，数据范围好像不太一样。。。这道题的范围好像很难承受，于是就水了题解。。。发现这题竟然使用了动态加边的技巧，然而以前从来没写过。。。都不知道怎么动态加边，于是又水了一发标程，于是就学会了</p>
<p>然而调了半天没搞出来，最后发现是点的标号有问题，标的有重复，然后就一直玄学地TLE。。。改完就过了</p>
<p>但是学到了新的东西，还是很开心的，这样动态加边也算是写过了，同时还学到一个东西：在多次SPFA的时候不必重新设定数组，而是新开一个标记数组表示这是第几次SPFA就可以了，可以节约许多的时间</p>
<h4 id="官方题解-3"><a href="#官方题解-3" class="headerlink" title="官方题解"></a>官方题解</h4>

	<div class="row">
    <embed src="飞扬的小鸟.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><p>一开始以为是最大流，顺手就打出来了，然后发现不是，就又写了费用流。。。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn2 105</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm2 205</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 10000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="comment">/*int n, m, s, t;</span></div><div class="line"></div><div class="line">struct edge&#123;</div><div class="line">    int next, to, flow;</div><div class="line">    edge(int next, int to, int flow) : next(next), to(to), flow(flow)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxm &lt;&lt; 1];</div><div class="line"></div><div class="line">int h[maxn], cnt = 1;</div><div class="line">void Add_Edge(int fr, int to, int flow)&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to, flow);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr, 0);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line">bool BFS()&#123;</div><div class="line">    queue&lt;int&gt; bfs;</div><div class="line">    bfs.push(s);</div><div class="line">    memset(d, 0, sizeof(d));</div><div class="line">    while (!bfs.empty())&#123;</div><div class="line">        int op = bfs.front();bfs.pop();</div><div class="line">        for (int i = h[op]; i; i = e[i].next)&#123;</div><div class="line">            if (!e[i].flow) continue;</div><div class="line">            int k = e[i].to;</div><div class="line">            if (k == s || d[k]) continue;</div><div class="line">            d[k] = d[op] + 1;</div><div class="line">            bfs.push(k);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if (!d[t]) return false;</div><div class="line">    return true;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int DFS(int x, int a)&#123;</div><div class="line">    if (x == t) return a;</div><div class="line">    int rest = a;</div><div class="line">    for (int i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        if (!e[i].flow) continue;</div><div class="line">        int op = e[i].to</div><div class="line">        if (d[op] != d[x] + 1) continue;</div><div class="line">        int k = DFS(op, min(rest, e[i].flow));</div><div class="line">        e[i].flow -= k;</div><div class="line">        e[i ^ 1].flow += k;</div><div class="line">        rest -= k;</div><div class="line">        if (!rest) return a;</div><div class="line">    &#125;</div><div class="line">    return a - rest;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void Dinic(int&amp; maxflow)&#123;</div><div class="line">    while (BFS()) maxflow += DFS(s, INF);</div><div class="line">&#125;*/</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, s, t;</div><div class="line"><span class="keyword">int</span> p2[maxn2];</div><div class="line"><span class="keyword">int</span> geo[maxn2][maxm2];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to, flow, cost;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to, <span class="keyword">int</span> flow ,<span class="keyword">int</span> cost) : next(next), to(to), flow(flow), cost(cost)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxm &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to, <span class="keyword">int</span> flow, <span class="keyword">int</span> cost)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to, flow, cost);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr, <span class="number">0</span>, -cost);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> dt[maxn];</div><div class="line"><span class="keyword">int</span> ti = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> spfa[maxn];</div><div class="line"><span class="keyword">int</span> l, r;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">()</span></span>&#123;</div><div class="line">    l = <span class="number">0</span>, r = <span class="number">-1</span>;</div><div class="line">    spfa[++r] = s;</div><div class="line">    vis[s] = <span class="number">1</span>;</div><div class="line">    d[s] = <span class="number">0</span>;</div><div class="line">    dt[s] = ++ti;</div><div class="line">    <span class="keyword">while</span> (l &lt;= r)&#123;</div><div class="line">        <span class="keyword">int</span> op = spfa[l++];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[op]; i; i = e[i].next)&#123;</div><div class="line">            <span class="keyword">if</span> (!e[i].flow) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> k = e[i].to;</div><div class="line">            <span class="keyword">if</span> (dt[k] != ti || d[k] &gt; d[op] + e[i].cost)&#123;</div><div class="line">                p[k] = i;</div><div class="line">                dt[k] = ti;</div><div class="line">                d[k] = d[op] + e[i].cost;</div><div class="line">                <span class="keyword">if</span> (!vis[k]) spfa[++r] = k, vis[k] = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        vis[op] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (dt[t] != ti) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> rec[maxn];</div><div class="line"><span class="keyword">int</span> pos[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Augment</span><span class="params">(<span class="keyword">int</span>&amp; maxflow, <span class="keyword">int</span>&amp; mincost)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> now = t, flow = INF;</div><div class="line">    <span class="keyword">while</span> (now != s)&#123;</div><div class="line">        <span class="keyword">int</span> k = p[now];</div><div class="line">        flow = min(flow, e[k].flow);</div><div class="line">        now = e[k ^ <span class="number">1</span>].to;</div><div class="line">    &#125;</div><div class="line">    now = t;</div><div class="line">    <span class="keyword">while</span> (now != s)&#123;</div><div class="line">        <span class="keyword">int</span> k = p[now];</div><div class="line">        e[k].flow -= flow;</div><div class="line">        e[k ^ <span class="number">1</span>].flow += flow;</div><div class="line">        now = e[k ^ <span class="number">1</span>].to;</div><div class="line">    &#125;</div><div class="line">    maxflow += flow, mincost += flow * (d[t] - d[s]);</div><div class="line">    now = t;</div><div class="line">    <span class="keyword">if</span> (!e[p[now]].flow &amp;&amp; now != t - <span class="number">1</span>)&#123;</div><div class="line">        now = e[p[now] ^ <span class="number">1</span>].to;</div><div class="line">        rec[pos[now + <span class="number">1</span>]]++;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">            Add_Edge(i, now + <span class="number">1</span>, <span class="number">1</span>, rec[pos[now + <span class="number">1</span>]] * geo[i][pos[now + <span class="number">1</span>]]);</div><div class="line">        &#125;</div><div class="line">        Add_Edge(now + <span class="number">1</span>, t, <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MCMF</span><span class="params">(<span class="keyword">int</span>&amp; maxflow, <span class="keyword">int</span>&amp; mincost)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span> (SPFA()) Augment(maxflow, mincost);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch) &amp;&amp; ch != <span class="string">'-'</span>) ch = getchar();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = getchar();</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//freopen("flappy.in", "r" ,stdin);</span></div><div class="line">    <span class="comment">//freopen("flappy.out", "w", stdout);</span></div><div class="line"></div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    read(n), read(m);</div><div class="line"></div><div class="line">    s = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(p2[i]), sum += p2[i], Add_Edge(s, i, p2[i], <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</div><div class="line">            read(geo[i][j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</div><div class="line">            rec[j] = <span class="number">1</span>;</div><div class="line">            Add_Edge(i, (j - <span class="number">1</span>) * sum + <span class="number">1</span> + n, <span class="number">1</span>, geo[i][j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> + n; i &lt;= sum * m + n; i++)&#123;</div><div class="line">        pos[i] = (i - <span class="number">1</span> - n) / sum + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    t = n + sum * m + <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</div><div class="line">        Add_Edge((j - <span class="number">1</span>) * sum + <span class="number">1</span> + n, t, <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">    &#125; </div><div class="line"></div><div class="line">    <span class="keyword">int</span> maxflow = <span class="number">0</span>, mincost = <span class="number">0</span>;</div><div class="line">    MCMF(maxflow, mincost);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, mincost);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>本次题目难度不大，但是技巧性强，没能拿到高分的确是一种失误，注意日后的模拟要严格按照真实考试模式进行，尽可能节约时间，并尽快写完，调试代码</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;NOIP即将到来，又是新的轮回，不知今年会怎么样……&lt;br&gt;
    
    </summary>
    
    
      <category term="NOIP模拟赛" scheme="https://goseqh.tk/tags/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
      <category term="东北师大附中" scheme="https://goseqh.tk/tags/%E4%B8%9C%E5%8C%97%E5%B8%88%E5%A4%A7%E9%99%84%E4%B8%AD/"/>
    
  </entry>
  
  <entry>
    <title>Libre Online Judge阶段性汇总III</title>
    <link href="https://goseqh.tk/2017/09/07/Libre-Online-Judge%E9%98%B6%E6%AE%B5%E6%80%A7%E6%B1%87%E6%80%BBIII/"/>
    <id>https://goseqh.tk/2017/09/07/Libre-Online-Judge阶段性汇总III/</id>
    <published>2017-09-07T10:05:45.000Z</published>
    <updated>2017-09-07T10:05:45.575Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BZOJ阶段性汇总VI</title>
    <link href="https://goseqh.tk/2017/09/07/BZOJ%E9%98%B6%E6%AE%B5%E6%80%A7%E6%B1%87%E6%80%BBVI/"/>
    <id>https://goseqh.tk/2017/09/07/BZOJ阶段性汇总VI/</id>
    <published>2017-09-07T10:04:53.000Z</published>
    <updated>2017-09-07T23:26:07.520Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>I love you, really … don’t forgive me …<br><a id="more"></a></p>
<p><title>Problem 3697. -- 采药人的路径</title><center><h2>3697: 采药人的路径</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>1240&nbsp;&nbsp;<span class="green">Solved: </span>428<br>[<a href="submitpage.php?id=3697">Submit</a>][<a href="problemstatus.php?id=3697">Status</a>][<a href="bbs.php?id=3697">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p><span style="font-size: medium">采药人的药田是一个树状结构，每条路径上都种植着同种药材。<br>
采药人以自己对药材独到的见解，对每种药材进行了分类。大致分为两类，一种是阴性的，一种是阳性的。<br>
采药人每天都要进行采药活动。他选择的路径是很有讲究的，他认为阴阳平衡是很重要的，所以他走的一定是两种药材数目相等的路径。采药工作是很辛苦的，所以他希望他选出的路径中有一个可以作为休息站的节点（不包括起点和终点），满足起点到休息站和休息站到终点的路径也是阴阳平衡的。他想知道他一共可以选择多少种不同的路径。</span></p></div><h3>Input</h3><div class="content"><p><span style="font-size: medium">第1行包含一个整数N。<br>
接下来N-1行，每行包含三个整数a_i、b_i和t_i，表示这条路上药材的类型。</span></p></div><h3>Output</h3><div class="content"><p><span style="font-size: medium">输出符合采药人要求的路径数目。</span></p></div><h3>Sample Input</h3><p></p>
<div class="content"><span class="sampledata">7<br>
1 2 0<br>
3 1 1<br>
2 4 0<br>
5 2 0<br>
6 3 1<br>
5 7 1<br>
</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">1</span></div><h3>HINT</h3>
<div class="content"><p></p><p><span style="font-size: medium">对于100%的数据，N &le; 100,000。<br><br>
</span></p><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search="></a></p></div>


<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>树</li>
<li>点分治</li>
</ul>
<hr>
<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>树上链状信息统计问题</strong></p>
<p>本题显然是要使用点分治的，那么主要的问题就是如何表示中间有一个休息站，我们首先定义一下结点的权值：从根到这个点的路径中阳性-阴性的草药的差，则中间有一个休息站就是一个节点的前面有一个与它权值相同的结点，或是另外一条链上有这样的点对，再或者就是两条链上分别有权值互为相反数的点</p>
<p>于是我们分类讨论一下就可以了，另外要特别注意权值为0的点的处理（其实需要特别处理吗？？？好像不需要。。。）</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>注意：注意全局变量的全局性，不要在递归几次以后继续在当前层使用全局变量！！！<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to, len;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to, <span class="keyword">int</span> len) : next(next), to(to), len(len)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to, <span class="keyword">int</span> len)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to, len);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr, len);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> as;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> si[maxn];</div><div class="line"><span class="keyword">int</span> g;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_r</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    si[x] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa || vis[op]) <span class="keyword">continue</span>;</div><div class="line">        find_r(op, x);</div><div class="line">        si[x] += si[op];</div><div class="line">        <span class="keyword">if</span> (si[op] &gt; as &gt;&gt; <span class="number">1</span>) f = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    si[x]++;</div><div class="line">    <span class="keyword">if</span> (as - si[x] &gt; as &gt;&gt; <span class="number">1</span>) f = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (f) g = x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> s[<span class="number">2</span>][maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> t[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line">LL ans = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_ans</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> now)</span></span>&#123;</div><div class="line">    t[now + maxn]++;</div><div class="line">    <span class="keyword">if</span> (t[now + maxn] == <span class="number">1</span>) ans += s[<span class="number">1</span>][maxn - now];</div><div class="line">    <span class="keyword">else</span> ans += s[<span class="number">0</span>][maxn - now] + s[<span class="number">1</span>][maxn - now];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa || vis[op]) <span class="keyword">continue</span>;</div><div class="line">        get_ans(op, x, now + e[i].len);</div><div class="line">    &#125;</div><div class="line">    t[now + maxn]--;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> now, <span class="keyword">int</span> p)</span></span>&#123;</div><div class="line">    t[now + maxn]++;</div><div class="line">    <span class="keyword">if</span> (t[now + maxn] == <span class="number">1</span>) s[<span class="number">0</span>][now + maxn] += p;</div><div class="line">    <span class="keyword">else</span> s[<span class="number">1</span>][now + maxn] += p;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa || vis[op]) <span class="keyword">continue</span>;</div><div class="line">        update(op, x, now + e[i].len, p);</div><div class="line">    &#125;</div><div class="line">    t[now + maxn]--;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> ns)</span></span>&#123;</div><div class="line">    as = ns;</div><div class="line">    find_r(x, x);</div><div class="line">    x = g;</div><div class="line">    s[<span class="number">0</span>][maxn]++;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (vis[op]) <span class="keyword">continue</span>;</div><div class="line">        get_ans(op, x, e[i].len);</div><div class="line">        t[maxn]++;</div><div class="line">        update(op, x, e[i].len, <span class="number">1</span>);</div><div class="line">        t[maxn]--;</div><div class="line">    &#125;</div><div class="line">    update(x, x, <span class="number">0</span>, <span class="number">-1</span>);</div><div class="line">    vis[x] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (vis[op]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span> (si[op] &gt; si[x]) work(op, ns - si[x]);</div><div class="line">        <span class="keyword">else</span> work(op, si[op]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n, x, y, z;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;z);</div><div class="line">        <span class="keyword">if</span> (z == <span class="number">1</span>) Add_Edge(x, y, <span class="number">1</span>);</div><div class="line">        <span class="keyword">else</span> Add_Edge(x, y, <span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">    work(<span class="number">1</span>, n);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><title>Problem 3626. -- [LNOI2014]LCA</title><center><h2>3626: [LNOI2014]LCA</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>2998&nbsp;&nbsp;<span class="green">Solved: </span>1178<br>[<a href="submitpage.php?id=3626">Submit</a>][<a href="problemstatus.php?id=3626">Status</a>][<a href="bbs.php?id=3626">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p><span style="font-size: medium">给出一个n个节点的有根树（编号为0到n-1，根节点为0）。一个点的深度定义为这个节点到根的距离+1。<br>
设dep[i]表示点i的深度，LCA(i,j)表示i与j的最近公共祖先。<br>
有q次询问，每次询问给出l r z，求sigma_{l&lt;=i&lt;=r}dep[LCA(i,z)]。<br>
（即，求在[l,r]区间内的每个节点i与z的最近公共祖先的深度之和）</span></p><p></p>
<p></p></div><h3>Input</h3><div class="content"><p><span style="font-size: medium">第一行2个整数n q。<br>
接下来n-1行，分别表示点1到点n-1的父节点编号。<br>
接下来q行，每行3个整数l r z。</span></p>
<p></p></div><h3>Output</h3><div class="content"><p><span style="font-size: medium">输出q行，每行表示一个询问的答案。<span style="widows: 2; text-transform: none; text-indent: 0px; display: inline !important; font: 14px/23px Arial; white-space: normal; orphans: 2; float: none; letter-spacing: normal; color: rgb(0,0,0); word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px">每个答案对201314取模输出</span></span></p>
<p></p></div><h3>Sample Input</h3>
<div class="content"><span class="sampledata">5 2<br>
0<br>
0<br>
1<br>
1<br>
1 4 3<br>
1 4 2<br>
<br>
</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">8<br>
5<br>
<br>
</span></div><h3>HINT</h3>
<div class="content"><p></p><p><span style="font-size: medium">共5组数据，n与q的规模分别为10000,20000,30000,40000,50000。</span></p><br>
<p></p><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search=数据已加强 by saffah">数据已加强 by saffah<br><br></a></p></div>





---        

**Tags**:
 - 树
 - LCA
 - LCA理解
 - 询问拆分法

---        

## 题目分析
**批量LCA深度和问题**

这题的思路非常好，我们发现一个一个求肯定是不行的对吧， 肯定要把信息记录在树上便于以后的查询，联系LCA的定义，我们可以发现，我们可以把从根到每个在询问区间内的结点的路径上的点的权值都加1，然后直接求当前结点到根的路径权值就可以了

最后为了方便处理，我们使用询问拆分法，把一个询问拆分成两个前缀作差的形式


## 代码
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 201314</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt = <span class="number">1</span>, h[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"><span class="keyword">int</span> son[maxn];</div><div class="line"><span class="keyword">int</span> si[maxn];</div><div class="line"><span class="keyword">int</span> dfs[maxn];</div><div class="line"><span class="keyword">int</span> idfs[maxn];</div><div class="line"><span class="keyword">int</span> top[maxn];</div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">int</span> t;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == f[x]) <span class="keyword">continue</span>;</div><div class="line">        f[op] = x;</div><div class="line">        d[op] = d[x] + <span class="number">1</span>;</div><div class="line">        DFS1(op);</div><div class="line">        si[x] += si[op];</div><div class="line">        <span class="keyword">if</span> (si[op] &gt; si[son[x]]) son[x] = op;</div><div class="line">    &#125;</div><div class="line">    si[x]++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> tp)</span></span>&#123;</div><div class="line">    dfs[x] = ++t;</div><div class="line">    idfs[t] = x;</div><div class="line">    top[x] = tp;</div><div class="line">    <span class="keyword">if</span> (son[x]) DFS2(son[x], tp);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == f[x] || op == son[x]) <span class="keyword">continue</span>;</div><div class="line">        DFS2(op, op);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> sum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> add[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</div><div class="line">    sum[o] = sum[o &lt;&lt; <span class="number">1</span>] + sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (add[o] &amp;&amp; l != r)&#123;</div><div class="line">        <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">        add[o &lt;&lt; <span class="number">1</span>] += add[o];</div><div class="line">        sum[o &lt;&lt; <span class="number">1</span>] += add[o] * (mid + <span class="number">1</span> - l);</div><div class="line"></div><div class="line">        add[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += add[o];</div><div class="line">        sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += add[o] * (r - mid);</div><div class="line"></div><div class="line">        add[o] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        add[o] += qd;</div><div class="line">        sum[o] += (r - l + <span class="number">1</span>) * qd;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) modify(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) modify(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        <span class="keyword">return</span> sum[o];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) ans += get(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) ans += get(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    DFS1(<span class="number">1</span>);</div><div class="line">    DFS2(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ans[maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">query</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x, z, id, t;</div><div class="line">    query(<span class="keyword">int</span> x, <span class="keyword">int</span> z, <span class="keyword">int</span> id, <span class="keyword">int</span> t) : x(x), z(z), id(id), t(t)&#123;&#125;</div><div class="line">    query()&#123;&#125;</div><div class="line">&#125;q[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(query a, query b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a.x &lt; b.x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify_path_to_root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> f1 = top[x];</div><div class="line">    <span class="keyword">while</span> (f1 != <span class="number">1</span>)&#123;</div><div class="line">        qx = dfs[f1], qy = dfs[x], qd = <span class="number">1</span>;</div><div class="line">        modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        x = f[f1];</div><div class="line">        f1 = top[x];</div><div class="line">    &#125;</div><div class="line">    qx = <span class="number">1</span>, qy = dfs[x], qd = <span class="number">1</span>;</div><div class="line">    modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_path_to_root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> f1 = top[x];</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (f1 != <span class="number">1</span>)&#123;</div><div class="line">        qx = dfs[f1], qy = dfs[x];</div><div class="line">        ans += get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        x = f[f1];</div><div class="line">        f1 = top[x];</div><div class="line">    &#125;</div><div class="line">    qx = <span class="number">1</span>, qy = dfs[x];</div><div class="line">    ans += get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m &lt;&lt; <span class="number">1</span>; i++)&#123;</div><div class="line">        <span class="keyword">while</span> (cur &lt; q[i].x)&#123;</div><div class="line">            modify_path_to_root(++cur);</div><div class="line">        &#125;</div><div class="line">        ans[q[i].id] += q[i].t * get_path_to_root(q[i].z);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">int</span> x, z, l, r;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">        Add_Edge(x + <span class="number">1</span>, i);</div><div class="line">    &#125;</div><div class="line">    init();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;l, &amp;r, &amp;z);</div><div class="line">        q[i &lt;&lt; <span class="number">1</span>] = query(l, z + <span class="number">1</span>, i, <span class="number">-1</span>);</div><div class="line">        q[(i &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>] = query(r + <span class="number">1</span>, z + <span class="number">1</span>, i, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    sort(q, q + (m &lt;&lt; <span class="number">1</span>), cmp1);</div><div class="line">    work();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i] % M);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<title>Problem 3381. -- [Usaco2004 Open]Cave Cows 2 洞穴里的牛之二</title><center><h2>3381: [Usaco2004 Open]Cave Cows 2 洞穴里的牛之二</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>73&nbsp;&nbsp;<span class="green">Solved: </span>58<br>[<a href="submitpage.php?id=3381">Submit</a>][<a href="problemstatus.php?id=3381">Status</a>][<a href="bbs.php?id=3381">Discuss</a>]</center><h3>Description</h3><div class="content"><div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;洞窟里有一道长长的通道．它由N(1&le;N&le;25000)段道尾相连构成，编号分别为1到N．每个通道有一个阈值，其范围在[1，10^9]依次通过i..j的通道，那奶牛的体重指数就不能超过i..j通道中阈值的最小值．贝茜有Q(1&le;Q&le;25000)个问题，想请教你由i到j的通道的阈值的最小值．</span></div></div><h3>Input</h3><div class="content"><div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;第1行输入N和Q，接下来N行输入每个通道的阈值，之后Q行每行两个整数，对应问题中的i和j（i&lt;j）．</span></div></div><h3>Output</h3><div class="content"><div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;对于每个问题，输出其结果．</span></div></div><h3>Sample Input</h3>
<div class="content"><span class="sampledata">10 4<br>
75<br>
30<br>
100<br>
38<br>
50<br>
51<br>
52<br>
20<br>
81<br>
5<br>
1 10<br>
3 5<br>
6 9<br>
8 10</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">5<br>
38<br>
20<br>
5</span></div><h3>HINT</h3>
<div class="content"><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search=Orange">Orange</a></p></div>


---        
**Tags**:
 - 数据结构
 - ST表
---    



## 题目分析
**区间静态最小问题**
直接RMQ即可。。。


## 代码
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> lo[maxn];</div><div class="line"><span class="keyword">int</span> mi[maxn];</div><div class="line"><span class="keyword">int</span> rmq[maxn][<span class="number">30</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    mi[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">30</span>; i++) mi[i] = mi[i - <span class="number">1</span>] &lt;&lt; <span class="number">1</span>;</div><div class="line">    lo[<span class="number">0</span>] = lo[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) lo[i] = lo[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) rmq[i][<span class="number">0</span>] = line[i];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; mi[j] &lt;= n; j++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (i + mi[j - <span class="number">1</span>] &lt;= n)</div><div class="line">                rmq[i][j] = min(rmq[i][j - <span class="number">1</span>], rmq[i + mi[j - <span class="number">1</span>]][j - <span class="number">1</span>]);</div><div class="line">            <span class="keyword">else</span> </div><div class="line">                rmq[i][j] = rmq[i][j - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> now = lo[y - x + <span class="number">1</span>];</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, min(rmq[x][now], rmq[y - mi[now] + <span class="number">1</span>][now]));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y, q;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;q);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">    init();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x ,&amp;y);</div><div class="line">        query(x, y);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<title>Problem 4146. --  [AMPPZ2014]Divisors</title><center><h2>4146:  [AMPPZ2014]Divisors</h2><span class="green">Time Limit: </span>20 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>256 MB<br><span class="green">Submit: </span>675&nbsp;&nbsp;<span class="green">Solved: </span>374<br>[<a href="submitpage.php?id=4146">Submit</a>][<a href="problemstatus.php?id=4146">Status</a>][<a href="bbs.php?id=4146">Discuss</a>]</center><h3>Description</h3><div class="content"><div>给定一个序列a[1],a[2],...,a[n]。求满足i!=j且a[i]|a[j]的二元组(i,j)的个数。</div>
<p></p></div><h3>Input</h3><div class="content"><div>第一行包含一个正整数n(1&lt;=n&lt;=2000000)，表示序列长度。</div>
<div>第二行包含n个正整数，依次表示a[1],a[2],...,a[n](1&lt;=a[i]&lt;=2000000)。</div>
<p></p></div><h3>Output</h3><div class="content"><div>一个整数，即满足条件的二元组的个数。</div>
<p></p></div><h3>Sample Input</h3>
<div class="content"><span class="sampledata">5<br>
2 4 5 2 6</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">6</span></div><h3>HINT</h3>
<div class="content"><p><div>满足条件的6组分别为(1,2),(1,4),(1,5),(4,1),(4,2),(4,5)。</div><br>
<div></div><br>
</p><p></p><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search=鸣谢Claris上传">鸣谢Claris上传</a></p>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>数学</li>
<li>整除问题</li>
</ul>
<hr>
<h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>多基数整除问题</strong><br>处理这样的问题，我们要联想到一个结论：调和级数上界</p>
<p>我们继续考虑这样的思路，那么我们只需要先保存每种数字有多少个，然后从小到大对倍数进行扫描求和即可</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">int</span> tn = n;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">        num[line[i]]++;</div><div class="line">    &#125;</div><div class="line">    sort(line + <span class="number">1</span>, line + <span class="number">1</span> + n);</div><div class="line">    n = unique(line + <span class="number">1</span>, line + <span class="number">1</span> + n) - line - <span class="number">1</span>;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; line[i] * j &lt;= line[n]; j++)&#123;</div><div class="line">            ans += (LL)num[line[i]] * num[j * line[i]];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans - tn);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 4390. -- [Usaco2015 dec]Max Flow</title><center><h2>4390: [Usaco2015 dec]Max Flow</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>270&nbsp;&nbsp;<span class="green">Solved: </span>169<br>[<a href="submitpage.php?id=4390">Submit</a>][<a href="problemstatus.php?id=4390">Status</a>][<a href="bbs.php?id=4390">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p>Farmer John has installed a new system of N&minus;1 pipes to transport milk between the N stalls in his barn (2&le;N&le;50,000), conveniently numbered 1&hellip;N. Each pipe connects a pair of stalls, and all stalls are connected to each-other via paths of pipes.<br>
<br>
FJ is pumping milk between KK pairs of stalls (1&le;K&le;100,000). For the iith such pair, you are told two stalls sisi and titi, endpoints of a path along which milk is being pumped at a unit rate. FJ is concerned that some stalls might end up overwhelmed with all the milk being pumped through them, since a stall can serve as a waypoint along many of the KK paths along which milk is being pumped. Please help him determine the maximum amount of milk being pumped through any stall. If milk is being pumped along a path from sisi to titi, then it counts as being pumped through the endpoint stalls sisi and titi, as well as through every stall along the path between them.</p><p></p>
<p></p><p></p><p></p>
<p></p><p>给定一棵有N个点的树，所有节点的权值都为0。</p><p></p>
<p></p><p>有K次操作，每次指定两个点s,t，将s到t路径上所有点的权值都加一。</p><p></p>
<p></p><p>请输出K次操作完毕后权值最大的那个点的权值。</p><p></p>
<p></p><p></p></div><h3>Input</h3><div class="content"><p>The first line of the input contains NN and KK.<br>
<br>
The next N&minus;1 lines each contain two integers x and y (x&ne;y，x&ne;y) describing a pipe between stalls x and y.<br>
<br>
The next K lines each contain two integers ss and t describing the endpoint stalls of a path through which milk is being pumped.</p>&lt;/div&gt;<h3>Output</h3><div class="content"><p>An integer specifying the maximum amount of milk pumped through any stall in the barn.</p></div><h3>Sample Input</h3><p></p>
<p><div class="content"><span class="sampledata">5 10<br>
3 4<br>
1 5<br>
4 2<br>
5 4<br>
5 4<br>
5 4<br>
3 5<br>
4 3<br>
4 3<br>
1 3<br>
3 5<br>
5 4<br>
1 5<br>
3 4</span></div></p><h3>Sample Output</h3><p></p>
<p><div class="content"><span class="sampledata">9</span></div></p><h3>HINT</h3><p></p>
<p><div class="content"><p></p></div></p><h3>Source</h3><p></p>
<h2 id="Platinum鸣谢Claris提供译文"><a href="#Platinum鸣谢Claris提供译文" class="headerlink" title="Platinum鸣谢Claris提供译文"></a><div class="content"><p><a href="problemset.php?search=Platinum鸣谢Claris提供译文">Platinum鸣谢Claris提供译文</a></p></div></h2><p><strong>Tags</strong>:</p>
<ul>
<li>树</li>
<li>树上差分</li>
</ul>
<hr>
<h2 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>树上链状信息维护问题</strong></p>
<p>我也不知道这种问题应该称作什么。。。其实树剖即可解决，但为了体现本题的价值，我们使用树上差分，就是LCA与其父亲各减一，两个端点加一，注意LCA为根时的情况</p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, k; </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">int</span> fa[maxn][<span class="number">30</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">30</span>; i++)&#123;</div><div class="line">        fa[x][i] = fa[fa[x][i - <span class="number">1</span>]][i - <span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x][<span class="number">0</span>]) <span class="keyword">continue</span>;</div><div class="line">        fa[op][<span class="number">0</span>] = x;</div><div class="line">        d[op] = d[x] + <span class="number">1</span>;</div><div class="line">        DFS(op);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> x;</div><div class="line">    <span class="keyword">if</span> (d[x] &lt; d[y]) swap(x, y);</div><div class="line">    <span class="keyword">int</span> k = d[x] - d[y];</div><div class="line">    <span class="keyword">int</span> con = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (k)&#123;</div><div class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) x = fa[x][con];</div><div class="line">        con++;</div><div class="line">        k &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> y;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</div><div class="line">        <span class="keyword">int</span> s = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (fa[x][s] != fa[y][s]) s++;</div><div class="line">        <span class="keyword">if</span> (s == <span class="number">0</span>) <span class="keyword">return</span> fa[x][<span class="number">0</span>];</div><div class="line">        s--;</div><div class="line">        x = fa[x][s];</div><div class="line">        y = fa[y][s];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> val[maxn];</div><div class="line"><span class="keyword">int</span> ans = -INF;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x][<span class="number">0</span>]) <span class="keyword">continue</span>;</div><div class="line">        get(op);</div><div class="line">        val[x] += val[op];</div><div class="line">    &#125;</div><div class="line">    ans = max(ans, val[x]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        Add_Edge(x, y);</div><div class="line">    &#125;</div><div class="line">    fa[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    DFS(<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        <span class="keyword">int</span> lca = get_lca(x, y);</div><div class="line">        val[lca]--, val[fa[lca][<span class="number">0</span>]]--;</div><div class="line">        val[x]++, val[y]++;</div><div class="line">    &#125;</div><div class="line">    get(<span class="number">1</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 4896. -- [Thu Summer Camp2016]补退选</title><center><h2>4896: [Thu Summer Camp2016]补退选</h2><span class="green">Time Limit: </span>20 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>512 MB<br><span class="green">Submit: </span>505&nbsp;&nbsp;<span class="green">Solved: </span>165<br>[<a href="submitpage.php?id=4896">Submit</a>][<a href="problemstatus.php?id=4896">Status</a>][<a href="bbs.php?id=4896">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>X是T大的一名老师，每年他都要教授许多学生基础的C++知识。在T大，每个学生在每学期的开学前都需要选课，每</div><p></p>
<p><div>次选课一共分为三个阶段：预选，正选，补退选；其中&quot;补退选&quot;阶段最忙碌。在补退选阶段，学生即可以选课，也</div></p>
<p><div>可以退课。对于X老师来说，在补退选阶段可能发生以下两种事件：</div></p>
<p><div>1:一个姓名为S的学生选了他的课（姓名S将出现在X的已选课学生名单中）</div></p>
<p><div>2:一个姓名为S的学生退了他的课（姓名S将从X的已选课学生名单中移除）</div></p>
<p><div>同时，X老师对于有哪些学生选了他的课非常关心，所以他会不定时的查询已选课学生名单，每次查询的格式如下</div></p>
<p><div>：最早在哪个事件之后，姓名以S为前缀的学生数量超过了vX老师看你骨骼惊奇，所以想用这个问题考考你，你当</div></p>
<p><div>然不会畏惧，所以勇敢的接下了这个任务。</div></p>
<p><div>注意1：学生的姓名可能相同，如果有p个姓名相同的学生都选了X老师的课，则他们的姓名将出现在X老师的名单上p次。</div></p>
<p><div>注意2：只有已经选了课的学生才会退课，如果姓名为S的学生退课，则在他退课之前X老师的名单上一定有姓名S。</div></p>
<p><div>注意3：选课，退课和查询都被定义为&quot;事件&quot;，&quot;事件&quot;的编号从1开始</div>&lt;/div&gt;</p><h3>Input</h3><div class="content"><div><p></p>
<p><div>第一行包含一个正整数n，表示一共发生了n个事件。</div></p>
<p><div>接下来n行，每行描述一个事件；每行第一个正整数k表示事件类型：</div></p>
<p><div>1.如果k=1，表示选课事件，接下来一个字符串S，表示一个姓名为S的学生选了X老师的课</div></p>
<p><div>2.如果k=2，表示退课事件，接下来一个字符串S，表示一个姓名为S的学生退了X老师的课</div></p>
<p><div>3.如果k=3，表示查询事件，接下来一个字符串S以及三个非负整数a,b,c，表示X老师想知道最早在第几个事件之后</div></p>
<p><div>，姓名以S为前缀的学生数量超过了(a*|ANS|+b)%c，|ANS|表示上次查询事件的答案的绝对值，如果当前是第一次</div></p>
<p><div>查询，则|ANS|=0；如果任何时刻都没有超过该值，则答案为-1。注：输入中的所有字符串均只包含小写字母。</div><br>&lt;/div&gt;</p>
<p><div></div></p></div><h3>Output</h3><div class="content"><div><p></p>
<p><div>对于每个查询事件，输出一行表示该查询答案。</div><br>&lt;/div&gt;&lt;/div&gt;</p><h3>Sample Input</h3><p></p>
<p><div class="content"><span class="sampledata">6<br>
1 lcaq<br>
3 lca 0 0 5<br>
1 lcq<br>
3 lc 0 1 5<br>
2 lcaq<br>
3 lc 0 1 5</span></div></p><h3>Sample Output</h3><p></p>
<p><div class="content"><span class="sampledata">1<br>
3<br>
3</span></div></p><h3>HINT</h3><p></p>
<p><div class="content"><p></p><p>n&lt;=100000，字符串长度 &lt;= 60，输入中的所有字符串只会包含前 10 个小写字母</p></div></p></div><h3>Source</h3><p></p>
<h2 id="鸣谢Sengxian上传"><a href="#鸣谢Sengxian上传" class="headerlink" title="鸣谢Sengxian上传"></a><div class="content"><p><a href="problemset.php?search=鸣谢Sengxian上传">鸣谢Sengxian上传</a></p></div></h2><p><strong>Tags</strong>:</p>
<ul>
<li>二分答案</li>
<li>字符串</li>
<li>可持久化Trie</li>
</ul>
<hr>
<h2 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>多版本信息维护问题</strong><br>清华夏令营好题，我们首先肯定能想到可持久化Trie对吧，实际上确实可以这样写，我们多维护一个maxval成员变量，表示这个节点的历史最大值是多少，然后直接二分查找即可</p>
<p>但是还有人好像是用vector直接暴力存储的，个人感觉不是很好。。。</p>
<h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 5000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sigma 12</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> ch[maxn][sigma];</div><div class="line"><span class="keyword">int</span> maxnum[maxn];</div><div class="line"><span class="keyword">int</span> h[maxn];</div><div class="line"><span class="keyword">int</span> val[maxn];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"><span class="keyword">int</span> len;</div><div class="line"><span class="keyword">int</span> k;</div><div class="line"><span class="keyword">int</span> ord[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> now = ++cnt; h[k] = cnt;</div><div class="line">    <span class="keyword">int</span> pre = h[k - <span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len; i++)&#123;</div><div class="line">        <span class="built_in">memcpy</span>(ch[now], ch[pre], <span class="keyword">sizeof</span>(ch[pre]));</div><div class="line">        maxnum[now] = maxnum[pre];</div><div class="line">        val[now] = val[pre];</div><div class="line"></div><div class="line">        val[now] += v;</div><div class="line">        <span class="keyword">if</span> (val[now] &gt; maxnum[now]) maxnum[now] = val[now];</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (i &lt; len)&#123;</div><div class="line">            ch[now][s[i] - <span class="string">'a'</span>] = ++cnt;</div><div class="line">            pre = ch[pre][s[i] - <span class="string">'a'</span>];</div><div class="line">            now = ch[now][s[i] - <span class="string">'a'</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">char</span> qs[maxn];</div><div class="line"><span class="keyword">int</span> lenq;</div><div class="line"><span class="keyword">int</span> qd;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> now = h[pos];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lenq; i++)&#123;</div><div class="line">        now = ch[now][qs[i] - <span class="string">'a'</span>];</div><div class="line">        <span class="keyword">if</span> (!now) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (maxnum[now] &gt; qd) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary_search</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (query(mid)) <span class="keyword">return</span> binary_search(l, mid);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> binary_search(mid + <span class="number">1</span>, r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n, a, b, c, op;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;op);</div><div class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>)&#123;</div><div class="line">            ord[++k] = i;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">            len = <span class="built_in">strlen</span>(s);</div><div class="line">            insert(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>)&#123;</div><div class="line">            ord[++k] = i;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">            len = <span class="built_in">strlen</span>(s);</div><div class="line">            insert(<span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s%d%d%d"</span>, qs, &amp;a, &amp;b, &amp;c);</div><div class="line">            lenq = <span class="built_in">strlen</span>(qs);</div><div class="line">            qd = ((<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>)a * <span class="built_in">abs</span>(ans) + b) % (<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>)c;</div><div class="line">            ans = binary_search(<span class="number">1</span>, k + <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (ans == k + <span class="number">1</span>) ans = <span class="number">-1</span>;</div><div class="line">            <span class="keyword">else</span> ans = ord[ans];</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本期题型：</p>
<ul>
<li><strong>树上链状信息统计问题</strong></li>
<li><strong>批量LCA深度和问题</strong></li>
<li><strong>区间静态最小问题</strong></li>
<li><strong>多基数整除问题</strong></li>
<li><strong>树上链状信息维护问题</strong></li>
<li><strong>多版本信息维护问题</strong></li>
</ul>
</div></div></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;I love you, really … don’t forgive me …&lt;br&gt;
    
    </summary>
    
    
      <category term="BZOJ" scheme="https://goseqh.tk/tags/BZOJ/"/>
    
      <category term="题解" scheme="https://goseqh.tk/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ阶段性汇总V</title>
    <link href="https://goseqh.tk/2017/09/07/BZOJ%E9%98%B6%E6%AE%B5%E6%80%A7%E6%B1%87%E6%80%BBV/"/>
    <id>https://goseqh.tk/2017/09/07/BZOJ阶段性汇总V/</id>
    <published>2017-09-07T10:04:36.000Z</published>
    <updated>2017-09-07T23:22:55.908Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>How can I stay with you … forever ? …<br><a id="more"></a></p>
<p><title>Problem 3400. -- [Usaco2009 Mar]Cow Frisbee Team 奶牛沙盘队</title><center><h2>3400: [Usaco2009 Mar]Cow Frisbee Team 奶牛沙盘队</h2><span class="green">Time Limit: </span>3 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>290&nbsp;&nbsp;<span class="green">Solved: </span>195<br>[<a href="submitpage.php?id=3400">Submit</a>][<a href="problemstatus.php?id=3400">Status</a>][<a href="bbs.php?id=3400">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;农夫顿因开始玩飞盘之后，约翰也打算让奶牛们享受飞盘的乐趣．他要组建一只奶牛飞盘</span></div><p></p>
<div><span style="font-size: medium">队．他的N(1&le;N&le;2000)只奶牛，每只部有一个飞盘水准指数Ri(1&le;Ri&le;100000)．约翰要选出1只或多于1只奶牛来参加他的飞盘队．由于约翰的幸运数字是F(1&le;F&le;1000)，他希望所有奶牛的飞盘水准指数之和是幸运数字的倍数．</span></div>
<div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;帮约翰算算一共有多少种组队方式．</span></div></div><h3>Input</h3><div class="content"><div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;第1行输入N和F，之后N行输入Ri．</span></div></div><h3>Output</h3><div class="content"><div>&nbsp;</div>
<div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;组队方式数模10^8取余的结果．</span></div></div><h3>Sample Input</h3>
<div class="content"><span class="sampledata">4 5<br>
1<br>
2<br>
8<br>
2</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">3</span></div><h3>HINT</h3>
<div class="content"><p></p><p class="MsoNormal" style="margin: 0cm 0cm 0pt"><font size="3"><span lang="EN-US"><font face="Times New Roman">&nbsp;&nbsp;&nbsp;&nbsp;</font></span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">组队方式有</span><span lang="EN-US"><font face="Times New Roman">(2</font></span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">，</span><span lang="EN-US"><font face="Times New Roman">3)</font></span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">，</span><span lang="EN-US"><font face="Times New Roman">(3</font></span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">，</span><span lang="EN-US"><font face="Times New Roman">4)</font></span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">，</span><span lang="EN-US"><font face="Times New Roman">(1</font></span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">，</span><span lang="EN-US"><font face="Times New Roman">2</font></span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">，</span><span lang="EN-US"><font face="Times New Roman">4)</font></span><span style="font-family: 宋体; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'">共三种</span></font></p><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search=Silver">Silver</a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>动态规划</li>
<li>数位DP</li>
</ul>
<hr>
<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>模数数位DP问题</strong></p>
<p>记录两维：当前考虑的奶牛和当前的余数，直接转移即可</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 100000000</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> dp[maxn][maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn][maxn];</div><div class="line"><span class="keyword">int</span> ski[maxn];</div><div class="line"><span class="keyword">int</span> n, f;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> rest)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (pos == n) <span class="keyword">return</span> (!rest) ? <span class="number">1</span> : <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (vis[pos][rest]) <span class="keyword">return</span> dp[pos][rest];</div><div class="line">    vis[pos][rest] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span>&amp; ans = dp[pos][rest];</div><div class="line">    <span class="keyword">return</span> ans = (DP(pos + <span class="number">1</span>, (rest + ski[pos]) % f) + DP(pos + <span class="number">1</span>, rest)) % M;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;f);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;ski[i]), ski[i] %= f;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        ans = (ans + DP(i + <span class="number">1</span>, ski[i])) % M;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 4817. -- [Sdoi2017]树点涂色</title><center><h2>4817: [Sdoi2017]树点涂色</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>481&nbsp;&nbsp;<span class="green">Solved: </span>279<br>[<a href="submitpage.php?id=4817">Submit</a>][<a href="problemstatus.php?id=4817">Status</a>][<a href="bbs.php?id=4817">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>Bob有一棵n个点的有根树，其中1号点是根节点。Bob在每个点上涂了颜色，并且每个点上的颜色不同。定义一条路</div><p></p>
<div>径的权值是：这条路径上的点（包括起点和终点）共有多少种不同的颜色。Bob可能会进行这几种操作：</div>
<div>1 x:</div>
<div>把点x到根节点的路径上所有的点染上一种没有用过的新颜色。</div>
<div>2 x y:</div>
<div>求x到y的路径的权值。</div>
<div>3 x y:</div>
<div>在以x为根的子树中选择一个点，使得这个点到根节点的路径权值最大，求最大权值。</div>
<div>Bob一共会进行m次操作</div>
<div></div></div><h3>Input</h3><div class="content"><div>第一行两个数n,m。</div>
<div>接下来n-1行，每行两个数a,b，表示a与b之间有一条边。</div>
<div>接下来m行，表示操作，格式见题目描述</div>
<div>1&lt;=n,m&lt;=100000</div>
<div></div></div><h3>Output</h3><div class="content"><div>每当出现2,3操作，输出一行。</div>
<div>如果是2操作，输出一个数表示路径的权值</div>
<div>如果是3操作，输出一个数表示权值的最大值</div>
<div></div></div><h3>Sample Input</h3>
<div class="content"><span class="sampledata">5 6<br>
1 2<br>
2 3<br>
3 4<br>
3 5<br>
2 4 5<br>
3 3<br>
1 4<br>
2 4 5<br>
1 5<br>
2 4 5</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">3<br>
4<br>
2<br>
2</span></div><h3>HINT</h3>
<div class="content"><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search=鸣谢infinityedge上传">鸣谢infinityedge上传</a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>数据结构</li>
<li>LCT</li>
<li>LCT思想</li>
</ul>
<hr>
<h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>树上动态维护问题</strong></p>
<p>本题是一个LCT类比的思路，就是用access操作类比题目中的染色操作，为什么这样类比呢？因为这样做，我们可以清楚地知道那些链是同色的，在改变颜色以及统计答案时都会比较方便，如果只是使用树链剖分，我们就不会知道一条链的哪些地方颜色发生了中断，就无法维护信息了</p>
<p>几乎是人生第一次正式的使用LCT，练习了一下，于是就发生了一个大错误，调了我一半夜，凌晨3点才调完。。。那就是每个splay的顶端并非链的顶端，我们要更新的话，要用链的顶端，这样就要在splay上一直向左跑才行。。。然而我很晚才发现这件事情。。。</p>
<p><del>直接扒自己的LOJ题解。。。</del></p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt = <span class="number">1</span>, h[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[x], y);</div><div class="line">    h[x] = cnt;</div><div class="line">    e[++cnt] = edge(h[y], x);</div><div class="line">    h[y] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> fa[maxn];</div><div class="line"><span class="keyword">int</span> son[maxn];</div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">int</span> si[maxn];</div><div class="line"><span class="keyword">int</span> top[maxn];</div><div class="line"><span class="keyword">int</span> dfs[maxn];</div><div class="line"><span class="keyword">int</span> idfs[maxn];</div><div class="line"><span class="keyword">int</span> t;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x]) <span class="keyword">continue</span>;</div><div class="line">        fa[op] = x;</div><div class="line">        d[op] = d[x] + <span class="number">1</span>;</div><div class="line">        DFS1(op);</div><div class="line">        si[x] += si[op];</div><div class="line">        <span class="keyword">if</span> (si[op] &gt; si[son[x]]) son[x] = op;</div><div class="line">    &#125;</div><div class="line">    si[x]++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> tp)</span></span>&#123;</div><div class="line">    top[x] = tp;</div><div class="line">    dfs[x] = ++t;</div><div class="line">    idfs[t] = x;</div><div class="line">    <span class="keyword">if</span> (son[x]) DFS2(son[x], tp);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == son[x] || op == fa[x]) <span class="keyword">continue</span>;</div><div class="line">        DFS2(op, op);</div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="keyword">int</span> maxnum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> add[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (add[o] != <span class="number">0</span> &amp;&amp; l != r)&#123;</div><div class="line"></div><div class="line">        add[o &lt;&lt; <span class="number">1</span>] += add[o];</div><div class="line">        maxnum[o &lt;&lt; <span class="number">1</span>] += add[o];</div><div class="line"></div><div class="line">        add[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += add[o];</div><div class="line">        maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += add[o];</div><div class="line"></div><div class="line">        add[o] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</div><div class="line">    maxnum[o] = max(maxnum[o &lt;&lt; <span class="number">1</span>], maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) &#123;</div><div class="line">        maxnum[o] = d[idfs[l]] + <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    init(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    init(mid + <span class="number">1</span>, r,  o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        maxnum[o] += qd;</div><div class="line">        add[o] += qd;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) modify(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) modify(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy) <span class="keyword">return</span> maxnum[o];</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) ans = max(ans, get(l, mid, o &lt;&lt; <span class="number">1</span>));</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) ans = max(ans, get(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>));</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"><span class="keyword">int</span> ch[maxn][<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) f[i] = fa[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (!f[x] || (ch[f[x]][<span class="number">0</span>] != x &amp;&amp; ch[f[x]][<span class="number">1</span>] != x));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(is_root(t))<span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> k=f[t];</div><div class="line">    <span class="keyword">if</span>(!is_root(k))&#123;</div><div class="line">        ch[f[k]][ch[f[k]][<span class="number">0</span>]==k?<span class="number">0</span>:<span class="number">1</span>]=t;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> d=(ch[k][<span class="number">0</span>]==t)?<span class="number">0</span>:<span class="number">1</span>;</div><div class="line">    f[t]=f[k];</div><div class="line">    ch[k][d]=ch[t][d^<span class="number">1</span>];</div><div class="line">    f[ch[k][d]]=k;</div><div class="line">    ch[t][d^<span class="number">1</span>]=k;</div><div class="line">    f[k]=t;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(!is_root(t))&#123;</div><div class="line">        <span class="keyword">int</span> fa=f[t];</div><div class="line">        <span class="keyword">if</span>(!is_root(fa))&#123;</div><div class="line">            <span class="keyword">int</span> ffa=f[fa];</div><div class="line">            <span class="keyword">int</span> f1=(ch[ffa][<span class="number">0</span>]==fa)?<span class="number">0</span>:<span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> f2=(ch[fa][<span class="number">0</span>]==t)?<span class="number">0</span>:<span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(f1^f2) rotate(t);</div><div class="line">            <span class="keyword">else</span> rotate(fa);</div><div class="line">        &#125;</div><div class="line">        rotate(t);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</div><div class="line">        splay(x);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (ch[x][<span class="number">1</span>])&#123;  </div><div class="line">            <span class="keyword">int</span> _x = ch[x][<span class="number">1</span>];</div><div class="line">            <span class="keyword">while</span> (ch[_x][<span class="number">0</span>])&#123;</div><div class="line">                _x = ch[_x][<span class="number">0</span>];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            qx = dfs[_x], qy = dfs[_x] + si[_x] - <span class="number">1</span>, qd = <span class="number">1</span>;</div><div class="line">            modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ch[x][<span class="number">1</span>] = tmp;</div><div class="line">        tmp = x;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!f[x]) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">int</span> _x = x;</div><div class="line">        <span class="keyword">while</span> (ch[_x][<span class="number">0</span>])&#123;</div><div class="line">            _x = ch[_x][<span class="number">0</span>];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        qx = dfs[_x], qy = dfs[_x] + si[_x] - <span class="number">1</span>, qd = <span class="number">-1</span>;</div><div class="line">        modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        x = f[x];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    access(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">    qx = qy = dfs[x];</div><div class="line">    <span class="keyword">int</span> a = get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    qx = qy = dfs[y];</div><div class="line">    <span class="keyword">int</span> b = get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> f1 = top[x], f2 = top[y];</div><div class="line">    <span class="keyword">while</span> (f1 != f2)&#123;</div><div class="line">        <span class="keyword">if</span> (d[f1] &gt; d[f2])&#123;</div><div class="line">            x = fa[f1];</div><div class="line">            f1 = top[x];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            y = fa[f2];</div><div class="line">            f2 = top[y];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> lca = (d[x] &gt; d[y]) ? y : x;</div><div class="line">    <span class="keyword">int</span> c = fa[lca];</div><div class="line">    </div><div class="line">    qx = qy = dfs[lca];</div><div class="line">    lca = get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line"></div><div class="line"></div><div class="line">    qx = qy = dfs[c];</div><div class="line">    <span class="keyword">if</span> (c) c = get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> c = <span class="number">0</span>; </div><div class="line"></div><div class="line">    <span class="keyword">if</span> (lca == c) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a + b - (c &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a + b - (c &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    qx = dfs[x], qy = dfs[x] + si[x] - <span class="number">1</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, get(<span class="number">1</span>, n, <span class="number">1</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_all</span><span class="params">()</span></span>&#123;</div><div class="line">    DFS1(<span class="number">1</span>);</div><div class="line">    DFS2(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    init(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    init();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">int</span> x, y, op;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        Add_Edge(x, y);</div><div class="line">    &#125;</div><div class="line">    init_all();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;op);</div><div class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            modify(x);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">            query(x, y, i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            query(x);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 3732. -- Network</title><center><h2>3732: Network</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>1900&nbsp;&nbsp;<span class="green">Solved: </span>909<br>[<a href="submitpage.php?id=3732">Submit</a>][<a href="problemstatus.php?id=3732">Status</a>][<a href="bbs.php?id=3732">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p>给你N个点的无向图 (1 &lt;= N &lt;= 15,000)，记为：1&hellip;N。 <br>
图中有M条边 (1 &lt;= M &lt;= 30,000) ，第j条边的长度为： d_j ( 1 &lt; = d_j &lt; = 1,000,000,000).</p><p></p>
<p></p><p>现在有 K个询问 (1 &lt; = K &lt; = 20,000)。 <br>
每个询问的格式是：A B，表示询问从A点走到B点的所有路径中，最长的边最小值是多少？</p>&lt;/div&gt;<h3>Input</h3><div class="content"><p>第一行： N, M, K。 <br>
第2..M+1行: 三个正整数：X, Y, and D (1 &lt;= X &lt;=N; 1 &lt;= Y &lt;= N). 表示X与Y之间有一条长度为D的边。 <br>
第M+2..M+K+1行: 每行两个整数A B,表示询问从A点走到B点的所有路径中，最长的边最小值是多少？</p></div><h3>Output</h3><div class="content"><p>&nbsp;对每个询问，输出最长的边最小值是多少。</p></div><h3>Sample Input</h3><p></p>
<div class="content"><span class="sampledata">6 6 8<br>
1 2 5<br>
2 3 4<br>
3 4 3<br>
1 4 8<br>
2 5 7<br>
4 6 2<br>
1 2<br>
1 3<br>
1 4<br>
2 3<br>
2 4<br>
5 1<br>
6 2<br>
6 1</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">5<br>
5<br>
5<br>
4<br>
4<br>
7<br>
4<br>
5</span></div><h3>HINT</h3>
<div class="content"><p></p><p>1 &lt;= N &lt;= 15,000 <br><br>
1 &lt;= M &lt;= 30,000 <br><br>
1 &lt;= d_j &lt;= 1,000,000,000 <br><br>
1 &lt;= K &lt;= 15,000 </p><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search="></a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>图论</li>
<li>瓶颈路</li>
<li>最小生成树</li>
<li>LCA</li>
</ul>
<hr>
<h2 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>图上两点瓶颈路问题</strong></p>
<p>我们先求一发最小生成树，然后直接在树上进行倍增LCA，本题即可解决</p>
<p>为什么这样是对的呢？我们可以思考Kruskal的思想，从最小的边逐个加入，那么一定满足瓶颈路这个要求</p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m, k;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x, y, len;</div><div class="line">    edge(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> len) : x(x), y(y), len(len)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> edge b) <span class="keyword">const</span>&#123;</div><div class="line">        <span class="keyword">return</span> len &lt; b.len;</div><div class="line">    &#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> len)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(x, y, len);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge2</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to, len;</div><div class="line">    edge2(<span class="keyword">int</span> next, <span class="keyword">int</span> to, <span class="keyword">int</span> len) : next(next), to(to), len(len)&#123;&#125;</div><div class="line">    edge2()&#123;&#125;</div><div class="line">&#125;e2[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt2 = <span class="number">1</span>, h[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> len)</span></span>&#123;</div><div class="line">    e2[++cnt2] = edge2(h[x], y, len);</div><div class="line">    h[x] = cnt2;</div><div class="line">    e2[++cnt2] = edge2(h[y], x, len);</div><div class="line">    h[y] = cnt2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ufs[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> ufs[x] = (ufs[x] == x) ? x : find_root(ufs[x]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">int</span> fa[maxn][<span class="number">30</span>];</div><div class="line"><span class="keyword">int</span> val[maxn][<span class="number">30</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">30</span>; i++) fa[x][i] = fa[fa[x][i - <span class="number">1</span>]][i - <span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">30</span>; i++) val[x][i] = max(val[x][i - <span class="number">1</span>], val[fa[x][i - <span class="number">1</span>]][i - <span class="number">1</span>]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e2[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e2[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x][<span class="number">0</span>]) <span class="keyword">continue</span>;</div><div class="line">        fa[op][<span class="number">0</span>] = x;</div><div class="line">        d[op] = d[x] + <span class="number">1</span>;</div><div class="line">        val[op][<span class="number">0</span>] = e2[i].len;</div><div class="line">        DFS(op);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    val[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    fa[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    DFS(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (d[x] &lt; d[y]) swap(x, y);</div><div class="line">    <span class="keyword">int</span> k = d[x] - d[y];</div><div class="line">    <span class="keyword">int</span> now = <span class="number">0</span>; </div><div class="line">    <span class="keyword">int</span> ans = -INF;</div><div class="line">    <span class="keyword">while</span> (k)&#123;</div><div class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) ans = max(ans, val[x][now]), x = fa[x][now];</div><div class="line">        now++;</div><div class="line">        k &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> ans;</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">int</span> now = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (fa[x][now] != fa[y][now]) now++;</div><div class="line">        <span class="keyword">if</span> (now == <span class="number">0</span>) <span class="keyword">return</span> ans = max(ans, max(val[x][<span class="number">0</span>], val[y][<span class="number">0</span>]));</div><div class="line">        now--;</div><div class="line">        ans = max(ans, max(val[x][now], val[y][now]));</div><div class="line">        x = fa[x][now];</div><div class="line">        y = fa[y][now];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ufs[i] = i;</div><div class="line">    sort(e + <span class="number">1</span>, e + <span class="number">1</span> + cnt);</div><div class="line">    <span class="keyword">int</span> ct = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (ct == n - <span class="number">1</span>) <span class="keyword">break</span>;</div><div class="line">        edge op = e[i];</div><div class="line">        <span class="keyword">int</span> x = find_root(op.x);</div><div class="line">        <span class="keyword">int</span> y = find_root(op.y);</div><div class="line">        <span class="keyword">if</span> (x == y) <span class="keyword">continue</span>;</div><div class="line">        ufs[x] = y;</div><div class="line">        ct++;</div><div class="line">        Add_Edge2(op.x, op.y, op.len);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    init();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, query(x, y));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y, len;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;len);</div><div class="line">        Add_Edge(x, y, len);</div><div class="line">    &#125;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 3702. -- 二叉树</title><center><h2>3702: 二叉树</h2><span class="green">Time Limit: </span>15 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>256 MB<br><span class="green">Submit: </span>561&nbsp;&nbsp;<span class="green">Solved: </span>251<br>[<a href="submitpage.php?id=3702">Submit</a>][<a href="problemstatus.php?id=3702">Status</a>][<a href="bbs.php?id=3702">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p><span style="font-size: medium">现在有一棵二叉树，所有非叶子节点都有两个孩子。在每个叶子节点上有一个权值(有n个叶子节点，满足这些权值为1..n的一个排列)。可以任意交换每个非叶子节点的左右孩子。<br>
要求进行一系列交换，使得最终所有叶子节点的权值按照中序遍历写出来，逆序对个数最少。<br>
</span></p></div><h3>Input</h3><div class="content"><p><font size="4">第一行n<br>
下面每行，一个数x<br>
如果x==0，表示这个节点非叶子节点，递归地向下读入其左孩子和右孩子的信息，<br>
如果x!=0，表示这个节点是叶子节点，权值为x。<br>
</font></p></div><h3>Output</h3><div class="content"><p><font size="4">一行，最少逆序对个数。<br>
</font></p></div><h3>Sample Input</h3><p></p>
<div class="content"><span class="sampledata">3<br>
0<br>
0<br>
3<br>
1<br>
2<br>
</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">1</span></div><h3>HINT</h3>
<div class="content"><p></p><p><span style="font-size: medium">对于100%的数据：2&lt;=n&lt;=200000。</span></p><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search="></a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>数据结构</li>
<li>线段树</li>
<li>线段树合并</li>
</ul>
<hr>
<h2 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>线段树合并问题</strong></p>
<p>我们很容易发现，逆序对最少，我们只需要对两侧分别调整，而合并的时候看看两个整体哪个放前面会使逆序对最少即可， 这就是一种<strong>整体局部无关性</strong>的思想</p>
<p>那么，我们只需要使用线段树合并，即可容易地做到这一点</p>
<h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><p>第一次写线段树合并。。。好激动(≧▽≦)/</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> ch[maxn][<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></div><div class="line">    node *l, *r;</div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    node(<span class="keyword">int</span> val) : val(val)&#123;&#125;</div><div class="line">    node()&#123;&#125;</div><div class="line">&#125;;</div><div class="line">node* save[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(node*&amp; x, node* y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (y == <span class="literal">NULL</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (x != <span class="literal">NULL</span>) x -&gt; val += y -&gt; val;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        x = y;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    merge(x -&gt; l, y -&gt; l);</div><div class="line">    merge(x -&gt; r, y -&gt; r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, node*&amp; ans, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (ans == <span class="literal">NULL</span>) ans = <span class="keyword">new</span> node(v);</div><div class="line">    <span class="keyword">else</span> ans -&gt; val += v;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (x &lt;= mid) insert(l, mid, x, ans -&gt; l, v);</div><div class="line">    <span class="keyword">else</span> insert(mid + <span class="number">1</span>, r, x, ans -&gt; r, v);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">find_rank</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, node* now)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (now == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (x &lt;= mid) <span class="keyword">return</span> find_rank(l, mid, x, now -&gt; l);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ((now -&gt; l == <span class="literal">NULL</span>) ? <span class="number">0</span> : now -&gt; l -&gt; val) + find_rank(mid + <span class="number">1</span>, r, x, now -&gt; r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>)&#123;</div><div class="line">        ch[o][<span class="number">0</span>] = ++cnt;</div><div class="line">        build(cnt);</div><div class="line">        ch[o][<span class="number">1</span>] = ++cnt;</div><div class="line">        build(cnt);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> insert(<span class="number">1</span>, n, x, save[o], <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, node* x, node* y, LL&amp; sum)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        sum += find_rank(<span class="number">1</span>, n, l, x);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (y -&gt; l != <span class="literal">NULL</span>) get_sum(l, mid, x, y -&gt; l, sum);</div><div class="line">    <span class="keyword">if</span> (y -&gt; r != <span class="literal">NULL</span>) get_sum(mid + <span class="number">1</span>, r, x, y -&gt; r, sum);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_all</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, node*&amp; x, node* y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        insert(<span class="number">1</span>, n, l, x, y -&gt; val);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (y -&gt; l != <span class="literal">NULL</span>) insert_all(l, mid, x, y -&gt; l);</div><div class="line">    <span class="keyword">if</span> (y -&gt; r != <span class="literal">NULL</span>) insert_all(mid + <span class="number">1</span>, r, x, y -&gt; r);</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL ans = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> l = ch[o][<span class="number">0</span>], r = ch[o][<span class="number">1</span>];</div><div class="line">    <span class="keyword">if</span> (l)&#123;</div><div class="line">        work(l);</div><div class="line">        work(r);</div><div class="line">        LL sl = save[l] -&gt; val, sr = save[r] -&gt; val;</div><div class="line">        LL sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (sl &lt; sr) get_sum(<span class="number">1</span>, n, save[r], save[l], sum);</div><div class="line">        <span class="keyword">else</span> get_sum(<span class="number">1</span>, n, save[l], save[r], sum);</div><div class="line">        ans += min(sum, sl * sr - sum);</div><div class="line">        <span class="keyword">if</span> (sl &lt; sr)&#123;</div><div class="line">            merge(save[r], save[l]);</div><div class="line">            save[o] = save[r];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            merge(save[l], save[r]);</div><div class="line">            save[o] = save[l];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    build(<span class="number">1</span>);</div><div class="line">    work(<span class="number">1</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 3669. -- [Noi2014]魔法森林</title><center><h2>3669: [Noi2014]魔法森林</h2><span class="green">Time Limit: </span>30 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>512 MB<br><span class="green">Submit: </span>2909&nbsp;&nbsp;<span class="green">Solved: </span>1822<br>[<a href="submitpage.php?id=3669">Submit</a>][<a href="problemstatus.php?id=3669">Status</a>][<a href="bbs.php?id=3669">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p class="p18" style="margin-top: 3.1pt; margin-bottom: 3.1pt; text-indent: 24pt"><span style="font-size: medium"><span style="font-family: '宋体'">为了</span><span style="font-family: 'Times New Roman'">得到书法大家的真传，</span><span style="font-family: '宋体'">小</span><span style="font-family: 'Times New Roman'">E<span style="font-family: 宋体">同学</span></span><span style="font-family: '宋体'">下定决心去</span><span style="font-family: 'Times New Roman'">拜访</span><span style="font-family: '宋体'">住在</span><span style="font-family: 'Times New Roman'">魔法森林中的</span><span style="font-family: '宋体'">隐士。</span><span style="font-family: 'Times New Roman'">魔法森林</span><span style="font-family: '宋体'">可以被</span><span style="font-family: 'Times New Roman'">看</span><span style="font-family: '宋体'">成</span><span style="font-family: 'Times New Roman'">一个</span><span style="font-family: '宋体'">包含</span><span style="font-family: 'Times New Roman'">个N节点M条边的无向图</span><span style="font-family: '宋体'">，</span><span style="font-family: 'Times New Roman'">节点标号为1..N</span><span style="font-family: '宋体'">，</span><span style="font-family: 'Times New Roman'">边标号为1..M</span><span style="font-family: '宋体'">。初始时</span><span style="font-family: 'Times New Roman'">小<span style="font-family: 'Times New Roman'">E</span><span style="font-family: 宋体">同学在</span></span><span style="font-family: '宋体'">号节</span><span style="font-family: 'Times New Roman'">点1</span><span style="font-family: '宋体'">，隐士则</span><span style="font-family: 'Times New Roman'">住在号节点N</span><span style="font-family: '宋体'">。小</span><span style="font-family: 'Times New Roman'">E<span style="font-family: 宋体">需要通过这一片魔法森林，才能够拜访到隐士。</span></span></span></p><p></p>
<p></p><p class="p18" style="margin-top: 3.1pt; margin-bottom: 3.1pt; text-indent: 24pt"><span style="font-size: medium"><span style="font-family: '宋体'">魔法森林</span><span style="font-family: 'Times New Roman'">中居住了</span><span style="font-family: '宋体'">一些妖怪。每当有人</span><span style="font-family: 'Times New Roman'">经过一条边</span><span style="font-family: '宋体'">的</span><span style="font-family: 'Times New Roman'">时候，这</span><span style="font-family: '宋体'">条边</span><span style="font-family: 'Times New Roman'">上的妖怪就会</span><span style="font-family: '宋体'">对其发起</span><span style="font-family: 'Times New Roman'">攻击。</span><span style="font-family: '宋体'">幸运</span><span style="font-family: 'Times New Roman'">的是，</span><span style="font-family: '宋体'">在号</span><span style="font-family: 'Times New Roman'">节点住着两种守护精灵</span><span style="font-family: '宋体'">：</span><span style="font-family: 'Times New Roman'">A<span style="font-family: 宋体">型守护精灵与</span><span style="font-family: 'Times New Roman'">B</span><span style="font-family: 宋体">型守护精灵</span></span><span style="font-family: '宋体'">。</span><span style="font-family: 'Times New Roman'">小<span style="font-family: 'Times New Roman'">E</span><span style="font-family: 宋体">可以借助</span></span><span style="font-family: '宋体'">它们</span><span style="font-family: 'Times New Roman'">的力量</span><span style="font-family: '宋体'">，达到</span><span style="font-family: 'Times New Roman'">自己的目的</span><span style="font-family: '宋体'">。</span></span></p><p></p>
<p></p><p class="p18" style="margin-top: 3.1pt; margin-bottom: 3.1pt; text-indent: 24pt"><span style="font-size: medium"><span style="font-family: '宋体'">只要</span><span style="font-family: 'Times New Roman'">小<span style="font-family: 'Times New Roman'">E</span><span style="font-family: 宋体">带上足够多的守护精灵，</span></span><span style="font-family: '宋体'">妖怪</span><span style="font-family: 'Times New Roman'">们就不会发起攻击</span><span style="font-family: '宋体'">了。具体来说</span><span style="font-family: 'Times New Roman'">，</span><span style="font-family: '宋体'">无向图中的</span><span style="font-family: 'Times New Roman'">每一条边</span><span style="font-family: '宋体'">Ei包含</span><span style="font-family: 'Times New Roman'">两个</span><span style="font-family: '宋体'">权值Ai</span><span style="font-family: 'Times New Roman'">与Bi</span><span style="font-family: '宋体'">。</span><span style="font-family: 'Times New Roman'">若</span><span style="font-family: '宋体'">身上</span><span style="font-family: 'Times New Roman'">携带的</span><span style="font-family: '宋体'">A</span><span style="font-family: 'Times New Roman'">型守护精灵</span><span style="font-family: '宋体'">个数</span><span class="15" style="font-weight: bold; font-family: '宋体'; text-decoration: underline">不少于Ai</span><span style="font-family: '宋体'">，</span><span style="font-family: 'Times New Roman'">且<span style="font-family: 'Times New Roman'">B</span><span style="font-family: 宋体">型守护精灵个数</span></span><span class="15" style="font-weight: bold; font-family: '宋体'; text-decoration: underline">不少于Bi</span><span style="font-family: '宋体'">，</span><span style="font-family: 'Times New Roman'">这条边上的妖怪</span><span style="font-family: '宋体'">就</span><span style="font-family: 'Times New Roman'">不会对</span><span style="font-family: '宋体'">通过</span><span style="font-family: 'Times New Roman'">这条边</span><span style="font-family: '宋体'">的</span><span style="font-family: 'Times New Roman'">人发起攻击</span><span style="font-family: '宋体'">。</span><span style="font-weight: bold; font-family: 'Times New Roman'; text-decoration: underline">当且仅当</span><span style="font-weight: bold; font-family: '宋体'; text-decoration: underline">通过</span><span style="font-weight: bold; font-family: 'Times New Roman'; text-decoration: underline">这</span><span style="font-weight: bold; font-family: '宋体'; text-decoration: underline">片</span><span style="font-weight: bold; font-family: 'Times New Roman'; text-decoration: underline">魔法森林</span><span style="font-weight: bold; font-family: '宋体'; text-decoration: underline">的过程中没有</span><span style="font-weight: bold; font-family: 'Times New Roman'; text-decoration: underline">任意一条边</span><span style="font-weight: bold; font-family: '宋体'; text-decoration: underline">的</span><span style="font-weight: bold; font-family: 'Times New Roman'; text-decoration: underline">妖怪</span><span style="font-weight: bold; font-family: '宋体'; text-decoration: underline">向</span><span style="font-weight: bold; font-family: 'Times New Roman'; text-decoration: underline">小<span style="font-family: 'Times New Roman'">E</span><span style="font-family: 宋体">发起攻击</span></span><span style="font-weight: bold; font-family: '宋体'; text-decoration: underline">，</span><span style="font-weight: bold; font-family: 'Times New Roman'; text-decoration: underline">他才能成功</span><span style="font-weight: bold; font-family: '宋体'; text-decoration: underline">找到</span><span style="font-weight: bold; font-family: 'Times New Roman'; text-decoration: underline">隐士。</span></span></p><p></p>
<p></p><p class="p17" style="margin-top: 0pt; margin-bottom: 0pt"><span style="font-size: medium"><span style="font-family: '宋体'">由于</span><span style="font-family: 'Times New Roman'">携带守护精灵是一件非常</span><span style="font-family: '宋体'">麻烦</span><span style="font-family: 'Times New Roman'">的事，小<span style="font-family: 'Times New Roman'">E</span><span style="font-family: 宋体">想要知道，</span></span><span style="font-family: '宋体'">要能够</span><span style="font-family: 'Times New Roman'">成功拜访到隐士，最少</span><span style="font-family: '宋体'">需要</span><span style="font-family: 'Times New Roman'">携带守护精灵</span><span style="font-family: '宋体'">的总个数</span><span style="font-family: 'Times New Roman'">。</span><span style="font-weight: bold; font-family: '宋体'; text-decoration: underline">守护精灵</span><span style="font-weight: bold; font-family: 'Times New Roman'; text-decoration: underline">的</span><span style="font-weight: bold; font-family: '宋体'; text-decoration: underline">总个数</span><span style="font-family: '宋体'">为</span><span style="font-family: 'Times New Roman'">A<span style="font-family: 宋体">型守护精灵的个数与</span><span style="font-family: 'Times New Roman'">B</span><span style="font-family: 宋体">型守护精灵的个数之和。</span></span><span style="font-weight: normal; font-family: '黑体'; mso-spacerun: 'yes'"><br>
</span></span></p>&lt;/div&gt;<h3>Input</h3><div class="content"><p><span style="font-size: medium">第1行包含两个整数N,M，表示无向图共有N个节点，M条边。 接下来M行，第行包含4个正整数Xi,Yi,Ai,Bi，描述第i条无向边。其中Xi与Yi为该边两个端点的标号，Ai与Bi的含义如题所述。 注意数据中可能包含重边与自环。 </span></p><p></p>
<p></p><p></p></div><h3>Output</h3><div class="content"><p><span style="font-size: medium">输出一行一个整数：如果小E可以成功拜访到隐士，输出小E最少需要携带的守护精灵的总个数；如果无论如何小E都无法拜访到隐士，输出&ldquo;-1&rdquo;（不含引号）。</span></p><p></p>
<p></p><p></p><p></p>
<p></p><p></p>&lt;/div&gt;<h3>Sample Input</h3><p></p>
<div class="content"><span class="sampledata">【输入样例1】<br>
4 5<br>
1 2 19 1<br>
2 3 8 12<br>
2 4 12 15<br>
1 3 17 8<br>
3 4 1 17<br>
<br>
 <br>
<br>
 <br>
<br>
【输入样例2】<br>
<br>
 <br>
3 1<br>
1 2 1 1<br>
<br>
 <br>
<br>
</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">【输出样例1】<br>
 <br>
32<br>
【样例说明1】<br>
如果小E走路径1→2→4，需要携带19+15=34个守护精灵；<br>
如果小E走路径1→3→4，需要携带17+17=34个守护精灵；<br>
如果小E走路径1→2→3→4，需要携带19+17=36个守护精灵；<br>
如果小E走路径1→3→2→4，需要携带17+15=32个守护精灵。<br>
综上所述，小E最少需要携带32个守护精灵。<br>
<br>
<br>
<br>
【输出样例2】<br>
<br>
 <br>
-1<br>
【样例说明2】<br>
小E无法从1号节点到达3号节点，故输出-1。 <br>
</span></div><h3>HINT</h3>
<div class="content"><p></p><p><span style="font-size: medium">2&lt;=n&lt;=50,000</span></p><br>
<p><span style="font-size: medium">0&lt;=m&lt;=100,000</span></p><br>
<p><span style="font-size: medium"><br><br>
1&lt;=ai ,bi&lt;=50,000<br><br>
</span></p><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search="></a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>图论</li>
<li>二维属性</li>
<li>瓶颈路</li>
<li>动点SPFA</li>
<li>LCT</li>
</ul>
<hr>
<h2 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>动点SPFA/二维瓶颈路问题</strong></p>
<p>正解显然是LCT，然而还有另一种方法，就是动点SPFA，把边按其中一维排序后逐个加入，然后只对当前存在的边跑SPFA，这样就过了。。。</p>
<h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><p>注意动点SPFA的写法<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">	<span class="keyword">int</span> x, y, a, b;</div><div class="line">	edge(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> a, <span class="keyword">int</span> b) : x(x), y(y), a(a), b(b)&#123;&#125;</div><div class="line">	edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; save[maxn];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a, edge b)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> a.a &lt; b.a;</div><div class="line">&#125;</div><div class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; spfa;</div><div class="line"><span class="keyword">int</span> now;</div><div class="line"><span class="keyword">int</span> ans = INF;</div><div class="line"><span class="keyword">bool</span> in[maxn];</div><div class="line"><span class="keyword">bool</span> have[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">while</span> (!spfa.empty())&#123;</div><div class="line">		<span class="keyword">int</span> op = spfa.front();spfa.pop();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; save[op].size(); i++)&#123;</div><div class="line"><span class="keyword">int</span> t = save[op][i];</div><div class="line"><span class="keyword">if</span> (!have[t]) <span class="keyword">continue</span>;</div><div class="line"><span class="keyword">int</span> k = (e[t].x == op) ? e[t].y : e[t].x;</div><div class="line"><span class="keyword">if</span> (e[t].a &gt; now) <span class="keyword">continue</span>;</div><div class="line"><span class="keyword">if</span> (f[k] &gt; max(f[op], e[t].b))&#123;</div><div class="line">	f[k] = max(f[op], e[t].b);</div><div class="line">	<span class="keyword">if</span> (!in[k])&#123;</div><div class="line">		spfa.push(k);</div><div class="line">		in[k] = <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (k == n) ans = min(ans, now + f[k]);</div><div class="line">&#125;</div><div class="line">		&#125;</div><div class="line">		in[op] = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">		edge op = e[i];</div><div class="line">		have[i] = <span class="number">1</span>;</div><div class="line">		<span class="keyword">int</span> a = op.x, b = op.y;</div><div class="line">		<span class="keyword">if</span> (a == b) <span class="keyword">continue</span>;</div><div class="line">		spfa.push(b);spfa.push(a);</div><div class="line">		now = op.a;</div><div class="line">		SPFA();</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; bfs;</div><div class="line">    bfs.push(<span class="number">1</span>);</div><div class="line">    vis[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!bfs.empty())&#123;</div><div class="line">        <span class="keyword">int</span> op = bfs.front();</div><div class="line">        bfs.pop();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; save[op].size(); i++)&#123;</div><div class="line">            <span class="keyword">int</span> k = save[op][i];</div><div class="line"><span class="keyword">int</span> t = (e[k].x == op) ? e[k].y : e[k].x;</div><div class="line"><span class="keyword">if</span> (vis[t]) <span class="keyword">continue</span>;</div><div class="line">vis[t] = <span class="number">1</span>;</div><div class="line">bfs.push(t);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	<span class="keyword">if</span> (!vis[n]) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) f[i] = INF;</div><div class="line">	f[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> x, y, z, w;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;x, &amp;y, &amp;z, &amp;w);</div><div class="line">		e[i] = edge(x, y, z, w);</div><div class="line">	&#125;</div><div class="line">	sort(e, e + m, cmp);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">		save[e[i].x].push_back(i);</div><div class="line">		save[e[i].y].push_back(i);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (!judge())&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"-1"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	work();</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><title>Problem 3629. -- [JLOI2014]聪明的燕姿</title><center><h2>3629: [JLOI2014]聪明的燕姿</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>1562&nbsp;&nbsp;<span class="green">Solved: </span>580<br>[<a href="submitpage.php?id=3629">Submit</a>][<a href="problemstatus.php?id=3629">Status</a>][<a href="bbs.php?id=3629">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div style="margin: 0cm 0cm 10pt"><span style="font-size: medium">阴天傍晚车窗外</span></div><p></p>
<div style="margin: 0cm 0cm 10pt"><span style="font-size: medium">未来有一个人在等待</span></div>
<div style="margin: 0cm 0cm 10pt"><span style="font-size: medium">向左向右向前看</span></div>
<div style="margin: 0cm 0cm 10pt"><span style="font-size: medium">爱要拐几个弯才来</span></div>
<div style="margin: 0cm 0cm 10pt"><span style="font-size: medium">我遇见谁会有怎样的对白</span></div>
<div style="margin: 0cm 0cm 10pt"><span style="font-size: medium">我等的人他在多远的未来</span></div>
<div style="margin: 0cm 0cm 10pt"><span style="font-size: medium">我听见风来自地铁和人海</span></div>
<div style="margin: 0cm 0cm 10pt"><span style="font-size: medium">我排着队拿着爱的号码牌</span></div>
<div style="margin: 0cm 0cm 10pt"><span style="font-size: medium">城市中人们总是拿着号码牌，不停寻找，不断匹配，可是谁也不知道自己等的那个人是谁。可是燕姿不一样，燕姿知道自己等的人是谁，因为燕姿数学学得好！燕姿发现了一个神奇的算法：假设自己的号码牌上写着数字S，那么自己等的人手上的号码牌数字的所有正约数之和必定等于S。</span></div>
<div style="margin: 0cm 0cm 10pt"><span style="font-size: medium">所以燕姿总是拿着号码牌在地铁和人海找数字（喂！这样真的靠谱吗）可是她忙着唱《绿光》，想拜托你写一个程序能够快速地找到所有自己等的人。</span></div></div><h3>Input</h3><div class="content"><div style="margin: 0cm 0cm 10pt"><span style="font-size: medium">输入包含k组数据（k&lt;=100）</span><span style="font-size: medium">对于每组数据，输入包含一个号码牌S</span></div></div><h3>Output</h3><div class="content"><div style="margin: 0cm 0cm 10pt"><span style="font-size: medium">对于每组数据，输出有两行，第一行包含一个整数m，表示有m个等的人，第二行包含相应的m个数，表示所有等的人的号码牌。注意：你输出的号码牌必须按照升序排列。</span></div></div><h3>Sample Input</h3>
<div class="content"><span class="sampledata">42</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">3<br>
20 26 41</span></div><h3>HINT</h3>
<div class="content"><p></p><p><span style="font-size: medium">对于100%的数据，有S&lt;=2*10*9<br><br>
</span></p><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search="></a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>数学</li>
<li>质因子分析</li>
<li>DFS</li>
</ul>
<hr>
<h2 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>质因子分析DFS问题</strong><br><del>省选题真是谁都能黑啊。。。</del><br><del>世道好轮回，省选绕过谁</del></p>
<p>本题即是传说中的对于质因子进行DFS暴力搜索的题目，然而我太弱，WA了无数次。。。</p>
<p>主要就是注意如何剪枝以及避免错误吧</p>
<h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> p[maxn][<span class="number">32</span>];</div><div class="line"><span class="keyword">int</span> save[maxn][<span class="number">32</span>];</div><div class="line"><span class="keyword">int</span> si[maxn];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i]) p[cnt++][<span class="number">1</span>] = i;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * p[j][<span class="number">1</span>] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * p[j][<span class="number">1</span>]] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (i % p[j][<span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i++)&#123;</div><div class="line">        save[i][<span class="number">0</span>] = p[i][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        save[i][<span class="number">1</span>] = p[i][<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; <span class="number">32</span>; j++)&#123;</div><div class="line">            <span class="keyword">if</span> ((LL)p[i][j - <span class="number">1</span>] * save[i][<span class="number">1</span>] &gt;= INF) &#123;</div><div class="line">                si[i] = j;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            save[i][j] = p[i][j] = p[i][j - <span class="number">1</span>] * save[i][<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; si[i]; j++)&#123;</div><div class="line">            <span class="keyword">if</span> ((LL)p[i][j - <span class="number">1</span>] + p[i][j] &gt;= INF)&#123;</div><div class="line">                si[i] = j;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            p[i][j] += p[i][j - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> con = (<span class="keyword">int</span>) <span class="built_in">sqrt</span>(x);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (save[i][<span class="number">1</span>] &gt; con) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span> (x % save[i][<span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> rest, <span class="keyword">int</span> now)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (rest &lt; p[pos][<span class="number">1</span>])&#123;</div><div class="line">        <span class="keyword">if</span> (rest == <span class="number">1</span>) ans.pb(now);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ((LL)rest &lt; (LL)p[pos][<span class="number">1</span>] * p[pos][<span class="number">1</span>] &amp;&amp; rest &lt; ((p[pos][<span class="number">2</span>] &gt; <span class="number">0</span>) ? p[pos][<span class="number">2</span>] : INF))&#123;</div><div class="line">        <span class="keyword">if</span> (judge(rest - <span class="number">1</span>)) ans.pb(now * (rest - <span class="number">1</span>));</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*if (pos == cnt &amp;&amp; rest - 1 &gt;= maxn)&#123;</span></div><div class="line">        if (judge(rest - 1)) ans.pb(now * (rest - 1));</div><div class="line">        return;</div><div class="line">    &#125;*/</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; si[pos]; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (p[pos][i] &gt; rest) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span> (rest % p[pos][i] == <span class="number">0</span>) DFS(pos + <span class="number">1</span>, rest / p[pos][i], now * save[pos][i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">bool</span> f = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (!f)&#123;</div><div class="line">        DFS(<span class="number">0</span>, x, <span class="number">1</span>);</div><div class="line">        sort(ans.begin(), ans.end());</div><div class="line">        <span class="keyword">if</span> (ans.size() == <span class="number">0</span>)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"0"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans.size());</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[<span class="number">0</span>]);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; ans.size(); i++) <span class="built_in">printf</span>(<span class="string">" %d"</span>, ans[i]);</div><div class="line">            ans.clear();</div><div class="line">        &#125;</div><div class="line">        f = <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    DFS(<span class="number">0</span>, x, <span class="number">1</span>);</div><div class="line">    sort(ans.begin(), ans.end());</div><div class="line">    <span class="keyword">if</span> (ans.size() == <span class="number">0</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n0"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n%d\n"</span>, ans.size());</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; ans.size(); i++) <span class="built_in">printf</span>(<span class="string">" %d"</span>, ans[i]);</div><div class="line">        ans.clear();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) work(n);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 4552. -- [Tjoi2016&Heoi2016]排序</title><center><h2>4552: [Tjoi2016&Heoi2016]排序</h2><span class="green">Time Limit: </span>60 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>256 MB<br><span class="green">Submit: </span>1187&nbsp;&nbsp;<span class="green">Solved: </span>622<br>[<a href="submitpage.php?id=4552">Submit</a>][<a href="problemstatus.php?id=4552">Status</a>][<a href="bbs.php?id=4552">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>在2016年，佳媛姐姐喜欢上了数字序列。因而他经常研究关于序列的一些奇奇怪怪的问题，现在他在研究一个难题</div><p></p>
<div>，需要你来帮助他。这个难题是这样子的：给出一个1到n的全排列，现在对这个全排列序列进行m次局部排序，排</div>
<div>序分为两种：1:(0,l,r)表示将区间[l,r]的数字升序排序2:(1,l,r)表示将区间[l,r]的数字降序排序最后询问第q</div>
<div>位置上的数字。</div></div><h3>Input</h3><div class="content"><div>输入数据的第一行为两个整数n和m。n表示序列的长度，m表示局部排序的次数。1 &lt;= n, m &lt;= 10^5第二行为n个整</div>
<div>数，表示1到n的一个全排列。接下来输入m行，每一行有三个整数op, l, r, op为0代表升序排序，op为1代表降序</div>
<div>排序, l, r 表示排序的区间。最后输入一个整数q，q表示排序完之后询问的位置, 1 &lt;= q &lt;= n。1 &lt;= n &lt;= 10^5</div>
<div>，1 &lt;= m &lt;= 10^5</div>
<div></div></div><h3>Output</h3><div class="content"><p>&nbsp;输出数据仅有一行，一个整数，表示按照顺序将全部的部分排序结束后第q位置上的数字。</p></div><h3>Sample Input</h3>
<div class="content"><span class="sampledata">6 3<br>
1 6 2 5 3 4<br>
0 1 4<br>
1 3 6<br>
0 2 4<br>
3</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">5</span></div><h3>HINT</h3>
<div class="content"><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search="></a></p></div>


<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>二分答案</li>
<li>线段树</li>
<li>线段树特殊操作</li>
</ul>
<hr>
<h2 id="题目分析-6"><a href="#题目分析-6" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>线段树特殊操作问题</strong><br>这题谁能想到是二分答案。。。虽然想到后好像挺合理的样子。。。</p>
<p>我们二分答案，然后即可把所有比它大的数看做1，其余的数看做0，然后升降序排序就变成了区间修改问题，最后根据所求位置上的数是0还是1判断左右二分</p>
<h2 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mod</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> op, l, r;</div><div class="line">    mod(<span class="keyword">int</span> op, <span class="keyword">int</span> l, <span class="keyword">int</span> r) : op(op), l(l), r(r)&#123;&#125;</div><div class="line">    mod()&#123;&#125;</div><div class="line">&#125;save[maxn];</div><div class="line"><span class="keyword">int</span> n, m, q;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> sum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> <span class="built_in">set</span>[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">set</span>[o] != <span class="number">-1</span> &amp;&amp; l != r)&#123;</div><div class="line">        <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line"></div><div class="line">        <span class="built_in">set</span>[o &lt;&lt; <span class="number">1</span>] = <span class="built_in">set</span>[o];</div><div class="line">        sum[o &lt;&lt; <span class="number">1</span>] = <span class="built_in">set</span>[o] * (mid + <span class="number">1</span> - l);</div><div class="line"></div><div class="line">        <span class="built_in">set</span>[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = <span class="built_in">set</span>[o];</div><div class="line">        sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = <span class="built_in">set</span>[o] * (r - mid);</div><div class="line"></div><div class="line">        <span class="built_in">set</span>[o] = <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</div><div class="line">    sum[o] = sum[o &lt;&lt; <span class="number">1</span>] + sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="built_in">set</span>[o] = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        <span class="keyword">if</span> (qd &lt; line[l]) sum[o] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span> sum[o] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    init(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    init(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        <span class="built_in">set</span>[o] = qd;</div><div class="line">        sum[o] = (r - l + <span class="number">1</span>) * <span class="built_in">set</span>[o];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) modify(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) modify(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy) <span class="keyword">return</span> sum[o];</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) ans += get(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) ans += get(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    qd = x;</div><div class="line">    init(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (save[i].op)&#123;</div><div class="line">            qx = save[i].l, qy = save[i].r;</div><div class="line">            <span class="keyword">int</span> num = get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">            qx = save[i].l, qy = qx + num - <span class="number">1</span>, qd = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (qx &lt;= qy) modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">            qx = qy + <span class="number">1</span>, qy = save[i].r, qd = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span> (qx &lt;= qy) modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            qx = save[i].l, qy = save[i].r;</div><div class="line">            <span class="keyword">int</span> num = get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">            qx = qy - num + <span class="number">1</span>, qy = save[i].r, qd = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (qx &lt;= qy) modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">            qx = save[i].l, qy = qy - num, qd = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span> (qx &lt;= qy) modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    qx = qy = q;</div><div class="line">    <span class="keyword">int</span> judgement = get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (judgement == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (judge(mid)) <span class="keyword">return</span> work(l, mid);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> work(mid + <span class="number">1</span>, r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> op, l, r;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;op, &amp;l, &amp;r), save[i] = mod(op, l, r);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, work(<span class="number">1</span>, n));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 4281. -- [ONTAK2015]Związek Harcerstwa Bajtockiego</title><center><h2>4281: [ONTAK2015]Związek Harcerstwa Bajtockiego</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>256 MB<br><span class="green">Submit: </span>207&nbsp;&nbsp;<span class="green">Solved: </span>87<br>[<a href="submitpage.php?id=4281">Submit</a>][<a href="problemstatus.php?id=4281">Status</a>][<a href="bbs.php?id=4281">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>给定一棵有n个点的无根树，相邻的点之间的距离为1，一开始你位于m点。之后你将依次收到k个指令，每个指令包含两个整数d和t，你需要沿着最短路在t步之内（包含t步）走到d点，如果不能走到，则停在最后到达的那个点。请在每个指令之后输出你所在的位置。</div><p></p>
<div></div>
<p></p></div><h3>Input</h3><div class="content"><div>第一行包含三个正整数n,m,k(1&lt;=m&lt;=n&lt;=1000000,1&lt;=k&lt;=1000000)。</div>
<div>接下来n-1行，每行包含两个正整数x,y(1&lt;=x,y&lt;=n)，描述一条树边。</div>
<div>接下来k行，每行两个整数d,t(1&lt;=d&lt;=n,0&lt;=t&lt;=10^9)，描述一条指令。</div>
<div></div>
<p></p></div><h3>Output</h3><div class="content"><div>输出一行，包含k个正整数，即执行每条指令后你所在的位置。</div>
<div></div>
<p></p></div><h3>Sample Input</h3>
<div class="content"><span class="sampledata">3 1 2<br>
1 2<br>
2 3<br>
3 4<br>
1 1</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">3 2</span></div><h3>HINT</h3>
<div class="content"><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search=By Claris">By Claris</a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>树</li>
<li>LCA问题</li>
<li>模拟</li>
</ul>
<hr>
<h2 id="题目分析-7"><a href="#题目分析-7" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>模拟操作问题</strong><br>我们只需要倍增预处理祖先然后直接模拟跑LCA即可。。。</p>
<h2 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m, k;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> fa[maxn][<span class="number">25</span>];</div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">25</span>; i++) fa[x][i] = fa[fa[x][i - <span class="number">1</span>]][i - <span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x][<span class="number">0</span>]) <span class="keyword">continue</span>;</div><div class="line">        fa[op][<span class="number">0</span>] = x;</div><div class="line">        d[op] = d[x] + <span class="number">1</span>;</div><div class="line">        DFS(op);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> lca;</div><div class="line">    <span class="keyword">if</span> (d[x] &lt; d[y]) swap(x, y);</div><div class="line">    <span class="keyword">int</span> k = d[x] - d[y];</div><div class="line">    <span class="keyword">int</span> now = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (k)&#123;</div><div class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) x = fa[x][now];</div><div class="line">        now++;</div><div class="line">        k &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> x;</div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>)&#123;</div><div class="line">        now = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (fa[x][now] != fa[y][now]) now++;</div><div class="line">        <span class="keyword">if</span> (now == <span class="number">0</span>) <span class="keyword">return</span> fa[x][<span class="number">0</span>];</div><div class="line">        now--;</div><div class="line">        x = fa[x][now];</div><div class="line">        y = fa[y][now];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> lca = find_lca(x, y);</div><div class="line">    <span class="keyword">int</span> all = d[x] + d[y] - <span class="number">2</span> * d[lca];</div><div class="line">    <span class="keyword">if</span> (v &gt;= all) <span class="keyword">return</span> y;</div><div class="line">    <span class="keyword">if</span> (v &lt;= d[x] - d[lca])&#123;</div><div class="line">        <span class="keyword">int</span> now = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (v)&#123;</div><div class="line">            <span class="keyword">if</span> (v &amp; <span class="number">1</span>) x = fa[x][now];</div><div class="line">            now++;</div><div class="line">            v &gt;&gt;= <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> now = <span class="number">0</span>;</div><div class="line">    v = all - v;</div><div class="line">    <span class="keyword">while</span> (v)&#123;</div><div class="line">        <span class="keyword">if</span> (v &amp; <span class="number">1</span>) y = fa[y][now];</div><div class="line">        now++;</div><div class="line">        v &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ans;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k);</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        Add_Edge(x, y);</div><div class="line">    &#125;</div><div class="line">    d[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    fa[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    DFS(<span class="number">1</span>);</div><div class="line">    ans = m;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        ans = move(ans, x, y);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 3670. -- [Noi2014]动物园</title><center><h2>3670: [Noi2014]动物园</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>512 MB<br><span class="green">Submit: </span>2935&nbsp;&nbsp;<span class="green">Solved: </span>1587<br>[<a href="submitpage.php?id=3670">Submit</a>][<a href="problemstatus.php?id=3670">Status</a>][<a href="bbs.php?id=3670">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p class="NOI" style="margin: 2.4pt 0cm; text-indent: 24pt"><span style="font-size: medium"><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">近日，园长发现动物园中好吃懒做的动物越来越多了。例如企鹅，只会卖萌向游客要吃的。为了整治动物园的不良风气，让动物们凭自己的真才实学向游客要吃的，园长决定开设算法班，让动物们学习算法。</span></span><span lang="EN-US"><o:p></o:p></span></p><p></p>
<p></p><p class="NOI" style="margin: 2.4pt 0cm; text-indent: 24pt"><span style="font-size: medium"><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">某天，园长给动物们讲解</span><span lang="EN-US">KMP</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">算法。</span></span><span lang="EN-US"><o:p></o:p></span></p><p></p>
<p></p><p class="NOI" style="margin: 2.4pt 0cm; text-indent: 24pt"><span style="font-size: medium"><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">园长：&ldquo;对于一个字符串</span><span lang="EN-US">S</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">，它的长度为</span><span lang="EN-US">L</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">。我们可以在</span><span lang="EN-US">O(L)</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">的时间内，求出一个名为</span><span lang="EN-US">next</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">的数组。有谁预习了</span><span lang="EN-US">next</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">数组的含义吗？&rdquo;</span></span><span lang="EN-US"><o:p></o:p></span></p><p></p>
<p></p><p class="NOI" style="margin: 2.4pt 0cm; text-indent: 24pt"><span style="font-size: medium"><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">熊猫：&ldquo;对于字符串</span><span lang="EN-US">S</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">的前</span><span lang="EN-US">i</span></span><span lang="EN-US" style="font-size: 10.5pt; font-family: &quot;calibri&quot;,&quot;sans-serif&quot;; position: relative; top: 5.5pt; mso-bidi-font-size: 11.0pt; mso-ascii-theme-font: minor-latin; mso-fareast-font-family: 宋体; mso-fareast-theme-font: minor-fareast; mso-hansi-theme-font: minor-latin; mso-bidi-font-family: 'timesnewroman'; mso-bidi-theme-font: minor-bidi; mso-text-raise: -5.5pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA"><v:shapetype id="_x0000_t75" coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f"><v:stroke joinstyle="miter"><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"><v:f eqn="sum @0 1 0"><v:f eqn="sum 0 0 @1"><v:f eqn="prod @2 1 2"><v:f eqn="prod @3 21600 pixelWidth"><v:f eqn="prod @3 21600 pixelHeight"><v:f eqn="sum @0 0 1"><v:f eqn="prod @6 1 2"><v:f eqn="prod @7 21600 pixelWidth"><v:f eqn="sum @8 21600 0"><v:f eqn="prod @7 21600 pixelHeight"><v:f eqn="sum @10 21600 0"></v:f></v:f></v:f></v:f></v:f></v:f></v:f></v:f></v:f></v:f></v:f></v:f></v:formulas><v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"><o:lock v:ext="edit" aspectratio="t"></o:lock></v:path></v:stroke></v:shapetype><v:shape id="_x0000_i1025" type="#_x0000_t75" style="width: 3pt; height: 18.75pt"><v:imagedata src="file:///C:%5CUsers%5C%E6%9C%8B%E9%A3%9E%5CAppData%5CLocal%5CTemp%5Cmsohtmlclip1%5C01%5Cclip_image001.png" o:title="" chromakey="white"></v:imagedata></v:shape></span><span style="font-size: medium"><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">个字符构成的子串，既是它的后缀又是它的前缀的字符串中（它本身除外），最长的长度记作</span><span lang="EN-US"><font face="宋体, MS Song">next[i]</font></span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">。&rdquo;</span></span><font size="3"><span lang="EN-US"><o:p></o:p></span></font></p><p></p>
<p></p><p class="NOI" style="margin: 2.4pt 0cm; text-indent: 24pt"><span style="font-size: medium"><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">园长：&ldquo;非常好！那你能举个例子吗？&rdquo;</span></span><span lang="EN-US"><o:p></o:p></span></p><p></p>
<p></p><p class="NOI" style="margin: 2.4pt 0cm; text-indent: 24pt"><span style="font-size: medium"><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">熊猫：&ldquo;例</span><span lang="EN-US">S</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">为</span><u><span lang="EN-US">abcababc</span></u><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">，则</span><span lang="EN-US">next[5]=2</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">。因为</span><span lang="EN-US">S</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">的前</span><span lang="EN-US">5</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">个字符为</span><u><span lang="EN-US">abcab</span></u><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">，</span><u><span lang="EN-US">ab</span></u><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">既是它的后缀又是它的前缀，并且找不到一个更长的字符串满足这个性质。同理，还可得出</span><span lang="EN-US">next[1] = next[2] = next[3] = 0</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">，</span><span lang="EN-US">next[4] = next[6] = 1</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">，</span><span lang="EN-US">next[7] = 2</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">，</span><span lang="EN-US">next[8] = 3</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">。&rdquo;</span></span><span lang="EN-US"><o:p></o:p></span></p><p></p>
<p></p><p class="NOI" style="margin: 2.4pt 0cm; text-indent: 24pt"><span style="font-size: medium"><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">园长表扬了认真预习的熊猫同学。随后，他详细讲解了如何在</span><span lang="EN-US">O(L)</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">的时间内求出</span><span lang="EN-US">next</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">数组。</span></span><span lang="EN-US"><o:p></o:p></span></p><p></p>
<p></p><p class="NOI" style="margin: 2.4pt 0cm; text-indent: 24pt"><span style="font-size: medium"><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">下课前，园长提出了一个问题：&ldquo;</span><span lang="EN-US">KMP</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">算法只能求出<span lang="EN-US">next</span>数组。我现在希望求出</span><span style="line-height: 1.5; font-family: 宋体">一</span><span style="text-indent: 24pt; line-height: 1.5; font-family: 宋体">个更强大</span><span lang="EN-US" style="text-indent: 24pt; line-height: 1.5">num</span></span><span lang="EN-US" style="font-size: 10.5pt; text-indent: 24pt; font-family: calibri, sans-serif; position: relative; top: 5.5pt"><v:shape id="_x0000_i1025" type="#_x0000_t75" style="width: 3pt; height: 18.75pt"><v:imagedata src="file:///C:%5CUsers%5C%E6%9C%8B%E9%A3%9E%5CAppData%5CLocal%5CTemp%5Cmsohtmlclip1%5C01%5Cclip_image001.png" o:title="" chromakey="white"></v:imagedata></v:shape></span><span style="font-size: medium"><span style="text-indent: 24pt; line-height: 1.5; font-family: 宋体">数组一一对于字符串S的前i个字符构成的子串，既是它的后缀同时又是它的前缀，并且该后缀与该前缀不重叠，将这种字符串的数量记作</span><span lang="EN-US" style="text-indent: 24pt; line-height: 1.5"><font face="宋体, MS Song">num[i]</font></span><span style="text-indent: 24pt; line-height: 1.5; font-family: 宋体">。例如</span><span lang="EN-US" style="text-indent: 24pt; line-height: 1.5"><font face="宋体, MS Song">S</font></span><span style="text-indent: 24pt; line-height: 1.5; font-family: 宋体">为</span><u style="text-indent: 24pt; line-height: 1.5"><span lang="EN-US"><font face="宋体, MS Song">aaaaa</font></span></u><span style="text-indent: 24pt; line-height: 1.5; font-family: 宋体">，则</span><span lang="EN-US" style="text-indent: 24pt; line-height: 1.5"><font face="宋体, MS Song">num[4] = 2</font></span><span style="text-indent: 24pt; line-height: 1.5; font-family: 宋体">。这是因为</span><span lang="EN-US" style="text-indent: 24pt; line-height: 1.5"><font face="宋体, MS Song">S</font></span><span style="text-indent: 24pt; line-height: 1.5; font-family: 宋体">的前</span><span lang="EN-US" style="text-indent: 24pt; line-height: 1.5"><font face="宋体, MS Song">4</font></span><span style="text-indent: 24pt; line-height: 1.5; font-family: 宋体">个字符为</span><u style="text-indent: 24pt; line-height: 1.5"><span lang="EN-US"><font face="宋体, MS Song">aaaa</font></span></u><span style="text-indent: 24pt; line-height: 1.5; font-family: 宋体">，其中</span><u style="text-indent: 24pt; line-height: 1.5"><span lang="EN-US"><font face="宋体, MS Song">a</font></span></u><span style="text-indent: 24pt; line-height: 1.5; font-family: 宋体">和</span><u style="text-indent: 24pt; line-height: 1.5"><span lang="EN-US"><font face="宋体, MS Song">aa</font></span></u><span style="text-indent: 24pt; line-height: 1.5; font-family: 宋体">都满足性质&lsquo;既是后缀又是前缀&rsquo;，同时保证这个后缀与这个前缀不重叠。而</span><u style="text-indent: 24pt; line-height: 1.5"><span lang="EN-US"><font face="宋体, MS Song">aaa</font></span></u><span style="text-indent: 24pt; line-height: 1.5; font-family: 宋体">虽然满足性质&lsquo;既是后缀又是前缀&rsquo;，但遗憾的是这个后缀与这个前缀重叠了，所以不能计算在内。同理，</span><span lang="EN-US" style="text-indent: 24pt; line-height: 1.5"><font face="宋体, MS Song">num[1] = 0,num[2] = num[3] = 1,num[5] = 2</font></span><span style="text-indent: 24pt; line-height: 1.5; font-family: 宋体">。&rdquo;</span></span></p><p></p>
<p></p><p class="NOI" style="margin: 2.4pt 0cm; text-indent: 24pt"><span style="font-size: medium"><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">最后，园长给出了奖励条件，第一个做对的同学奖励巧克力一盒。听了这句话，睡了一节课的企鹅立刻就醒过来了！但企鹅并不会做这道题，于是向参观动物园的你寻求帮助。你能否帮助企鹅写一个程序求出</span><span lang="EN-US">num</span></span><span lang="EN-US" style="font-size: 10.5pt; font-family: &quot;calibri&quot;,&quot;sans-serif&quot;; position: relative; top: 5.5pt; mso-bidi-font-size: 11.0pt; mso-ascii-theme-font: minor-latin; mso-fareast-font-family: 宋体; mso-fareast-theme-font: minor-fareast; mso-hansi-theme-font: minor-latin; mso-bidi-font-family: 'timesnewroman'; mso-bidi-theme-font: minor-bidi; mso-text-raise: -5.5pt; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA"><v:shape id="_x0000_i1025" type="#_x0000_t75" style="width: 3pt; height: 18.75pt"><v:imagedata src="file:///C:%5CUsers%5C%E6%9C%8B%E9%A3%9E%5CAppData%5CLocal%5CTemp%5Cmsohtmlclip1%5C01%5Cclip_image001.png" o:title="" chromakey="white"></v:imagedata></v:shape></span><span style="font-size: medium"><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">数组呢？</span></span><font size="3"><span lang="EN-US"><o:p></o:p></span></font></p><p></p>
<p></p><p class="NOI" style="margin: 2.4pt 0cm; text-indent: 24pt"><span style="font-size: medium"><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'timesnewroman'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: 'timesnewroman'; mso-ansi-language: en-us; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-font-kerning: 1.0pt">特别地，为了避免大量的输出，你不需要输出</span><span lang="EN-US" style="font-family: &quot;timesnewroman&quot;,&quot;serif&quot;; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: 宋体; mso-ansi-language: EN-US; mso-fareast-language: ZH-CN; mso-bidi-language: AR-SA; mso-font-kerning: 1.0pt">num[i]</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'timesnewroman'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: 'timesnewroman'; mso-ansi-language: EN-US; mso-fareast-language: zh-cn; mso-bidi-language: AR-SA; mso-font-kerning: 1.0pt">分别是多少，你只需要输出<img height="36" alt="" width="144" src="/JudgeOnline/upload/201407/11(4).jpg"></span><span style="font-family: 宋体">对</span><span lang="EN-US" style="font-family: 'Times New Roman', serif">1,000,000,007</span></span><span lang="EN-US" style="font-size: 10.5pt; font-family: 'Times New Roman', serif; position: relative; top: 2.5pt"><v:shapetype id="_x0000_t75" coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f"><v:stroke joinstyle="miter"><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"><v:f eqn="sum @0 1 0"><v:f eqn="sum 0 0 @1"><v:f eqn="prod @2 1 2"><v:f eqn="prod @3 21600 pixelWidth"><v:f eqn="prod @3 21600 pixelHeight"><v:f eqn="sum @0 0 1"><v:f eqn="prod @6 1 2"><v:f eqn="prod @7 21600 pixelWidth"><v:f eqn="sum @8 21600 0"><v:f eqn="prod @7 21600 pixelHeight"><v:f eqn="sum @10 21600 0"></v:f></v:f></v:f></v:f></v:f></v:f></v:f></v:f></v:f></v:f></v:f></v:f></v:formulas><v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"><o:lock v:ext="edit" aspectratio="t"></o:lock></v:path></v:stroke></v:shapetype><v:shape id="_x0000_i1025" type="#_x0000_t75" style="width: 2.25pt; height: 12pt"><v:imagedata src="file:///C:%5CUsers%5C%E6%9C%8B%E9%A3%9E%5CAppData%5CLocal%5CTemp%5Cmsohtmlclip1%5C01%5Cclip_image001.png" o:title="" chromakey="white"></v:imagedata></v:shape></span><span style="font-size: medium"><span style="font-family: 宋体">取模的结果即可。</span></span></p><p></p>
<p></p><p class="NOI" style="margin: 2.4pt 0cm; text-indent: 24pt"><span style="font-size: medium"><span style="font-family: 宋体"><img height="36" alt="" width="541" src="/JudgeOnline/upload/201407/22(2).jpg"></span></span></p>&lt;/div&gt;<h3>Input</h3><div class="content"><p><span style="font-size: medium">第1行仅包含一个正整数n ，表示测试数据的组数。随后n行，每行描述一组测试数据。每组测试数据仅含有一个字符串S，S的定义详见题目描述。数据保证S 中仅含小写字母。输入文件中不会包含多余的空行，行末不会存在多余的空格。</span></p></div><h3>Output</h3><div class="content"><p><span style="font-size: medium">包含 n 行，每行描述一组测试数据的答案，答案的顺序应与输入数据的顺序保持一致。对于每组测试数据，仅需要输出一个整数，表示这组测试数据的答案对 1,000,000,007 取模的结果。输出文件中不应包含多余的空行。 </span></p></div><h3>Sample Input</h3><p></p>
<div class="content"><span class="sampledata">3<br>
aaaaa<br>
ab<br>
abcababc</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">36<br>
1<br>
32 </span></div><h3>HINT</h3>
<div class="content"><p></p><p><span lang="EN-US">n</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">&le;</span><span lang="EN-US">5,L</span><span style="font-family: 宋体; mso-ascii-font-family: 'timesnewroman'; mso-hansi-font-family: 'Times New Roman'">&le;</span><span lang="EN-US">1,000,000</span></p><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search="></a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>字符串</li>
<li>KMP变式</li>
</ul>
<hr>
<h2 id="题目分析-8"><a href="#题目分析-8" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>KMP变式问题</strong></p>
<p>这道题其实是一道很好的题目，能加强对KMP的理解</p>
<p>其实fail函数有两种实现，一种是代表包含自己前一个位置但不含自己的最长border长度，另一种是自己也算在内的最长border长度</p>
<p>这两者的处理方式并不相同，所以一定要想清楚KMP的原理</p>
<h2 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">char</span> t[maxn];</div><div class="line"><span class="keyword">int</span> lent;</div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"><span class="keyword">int</span> f1[maxn];</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="keyword">int</span> f2[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    f[<span class="number">0</span>] = <span class="number">-1</span>;</div><div class="line">    f1[<span class="number">0</span>] = <span class="number">-1</span>;</div><div class="line">    num[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; lent; i++)&#123;</div><div class="line">        <span class="keyword">int</span> k = f[i - <span class="number">1</span>];</div><div class="line">        <span class="keyword">while</span> (k &gt; <span class="number">-1</span> &amp;&amp; t[k + <span class="number">1</span>] != t[i]) k = f[k];</div><div class="line">        f[i] = ((t[k + <span class="number">1</span>] == t[i]) ? k + <span class="number">1</span> : <span class="number">-1</span>);</div><div class="line">        num[i] = ((t[k + <span class="number">1</span>] == t[i]) ? num[k + <span class="number">1</span>] + <span class="number">1</span> : <span class="number">0</span>);</div><div class="line"></div><div class="line">        k = f1[i - <span class="number">1</span>];</div><div class="line">        <span class="keyword">while</span> (k &gt; <span class="number">-1</span> &amp;&amp; t[k + <span class="number">1</span>] != t[i]) k = f[k];</div><div class="line">        f1[i] = ((t[k + <span class="number">1</span>] == t[i]) ? k + <span class="number">1</span> : <span class="number">-1</span>);</div><div class="line">        <span class="keyword">while</span> (f1[i] &gt; <span class="number">-1</span> &amp;&amp; ((f1[i] + <span class="number">1</span>) &lt;&lt; <span class="number">1</span>) &gt; i + <span class="number">1</span>) f1[i] = f[f1[i]];</div><div class="line"></div><div class="line">        f2[i] = (f1[i] == <span class="number">-1</span>) ? <span class="number">0</span> : (num[f1[i]] + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    LL ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lent; i++) ans = ans * (f2[i] + <span class="number">1</span>) % M;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, t);</div><div class="line">        lent = <span class="built_in">strlen</span>(t);</div><div class="line">        init();</div><div class="line">        work();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 3530. -- [Sdoi2014]数数</title><center><h2>3530: [Sdoi2014]数数</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>512 MB<br><span class="green">Submit: </span>1082&nbsp;&nbsp;<span class="green">Solved: </span>555<br>[<a href="submitpage.php?id=3530">Submit</a>][<a href="problemstatus.php?id=3530">Status</a>][<a href="bbs.php?id=3530">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p><span style="font-size: medium">我们称一个正整数N是幸运数，当且仅当它的十进制表示中不包含数字串集合S中任意一个元素作为其子串。例如当S=(22，333，0233)时，233是幸运数，2333、20233、3223不是幸运数。<br>
&nbsp;&nbsp;&nbsp; 给定N和S，计算不大于N的幸运数个数。<br>
</span></p></div><h3>Input</h3><div class="content"><p><br></p>
<p><font size="4">&nbsp;&nbsp;&nbsp; 输入的第一行包含整数N。<br><br>&nbsp;&nbsp;&nbsp; 接下来一行一个整数M，表示S中元素的数量。<br><br>&nbsp;&nbsp;&nbsp; 接下来M行，每行一个数字串，表示S中的一个元素。<br>
</font>&lt;/p&gt;&lt;/div&gt;</p><h3>Output</h3><div class="content"><p><font size="4">&nbsp;&nbsp;&nbsp; 输出一行一个整数，表示答案模109+7的值。<br>
</font></p></div><h3>Sample Input</h3><p></p>
<div class="content"><span class="sampledata">    20<br>
    3<br>
    2<br>
    3<br>
    14<br>
</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">    14</span></div><h3>HINT</h3>
<div class="content"><p></p><p><span style="font-size: medium">&nbsp;下表中l表示N的长度，L表示S中所有串长度之和。</span></p><br>
<p><span style="font-size: medium">1 &lt; =l &lt; =1200&nbsp;, 1 &lt; =M &lt; =100&nbsp;,1 &lt; =L &lt; =1500</span></p><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search=Round 1 day 1">Round 1 day 1</a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>动态规划</li>
<li>数位DP</li>
<li>AC自动机</li>
</ul>
<hr>
<h2 id="题目分析-9"><a href="#题目分析-9" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>多串匹配型数位DP问题</strong></p>
<p>本题首先显然是AC自动机，然而情况多，真的很难一遍写对。。。</p>
<p>大概的坑有如下：</p>
<ul>
<li>集合中的数字开头可以为0</li>
<li>AC自动机中可能包含其他串的结点也不能走到</li>
<li>要注意开始标记的作用，为了避免，要循环累计答案</li>
</ul>
<p>另外本题LOJ数据弱，第二点没处理也能过，然而BZOJ上就过不了。。。</p>
<p>好了不说了。。。</p>
<h2 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 4005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">bool</span> val[maxn];</div><div class="line"><span class="keyword">int</span> ch[maxn][<span class="number">12</span>];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"><span class="keyword">int</span> m;</div><div class="line"><span class="keyword">char</span> num[maxn];</div><div class="line"><span class="keyword">int</span> ct = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> len;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> now = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!ch[now][s[i] - <span class="string">'0'</span>]) ch[now][s[i] - <span class="string">'0'</span>] = ++cnt;</div><div class="line">        now = ch[now][s[i] - <span class="string">'0'</span>];</div><div class="line">    &#125;</div><div class="line">    val[now] = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    f[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; bfs;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (ch[<span class="number">0</span>][i]) f[ch[<span class="number">0</span>][i]] = <span class="number">0</span>, bfs.push(ch[<span class="number">0</span>][i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (!bfs.empty())&#123;</div><div class="line">        <span class="keyword">int</span> op = bfs.front(); bfs.pop();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (!ch[op][i]) ch[op][i] = ch[f[op]][i];</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">int</span> k = f[op];</div><div class="line">                <span class="keyword">while</span> (k &amp;&amp; !ch[k][i]) k = f[k];</div><div class="line">                f[ch[op][i]] = (!ch[k][i]) ? <span class="number">0</span> : ch[k][i];</div><div class="line">                <span class="keyword">if</span> (val[f[ch[op][i]]]) val[ch[op][i]] = <span class="number">1</span>;</div><div class="line">                bfs.push(ch[op][i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ct = <span class="built_in">strlen</span>(num);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ct; i++) num[i] -= <span class="string">'0'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> dp[maxn][maxn][<span class="number">2</span>];</div><div class="line"><span class="keyword">bool</span> vis[maxn][maxn][<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> loc, <span class="keyword">int</span> op)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (val[loc]) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (pos == ct) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (vis[pos][loc][op]) <span class="keyword">return</span> dp[pos][loc][op];</div><div class="line">    vis[pos][loc][op] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span>&amp; ans = dp[pos][loc][op];</div><div class="line">    <span class="keyword">if</span> (op)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num[pos]; i++)&#123;</div><div class="line">            ans = (ans + DP(pos + <span class="number">1</span>, ch[loc][i], <span class="number">0</span>)) % M;</div><div class="line">        &#125;</div><div class="line">        ans = (ans + DP(pos + <span class="number">1</span>, ch[loc][num[pos]], <span class="number">1</span>)) % M;</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">        ans = (ans + DP(pos + <span class="number">1</span>, ch[loc][i], <span class="number">0</span>)) % M;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, num, &amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">        len = <span class="built_in">strlen</span>(s);</div><div class="line">        insert();</div><div class="line">    &#125;</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; ct; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++)&#123;</div><div class="line">            ans = (ans + DP(i + <span class="number">1</span>, ch[<span class="number">0</span>][j], <span class="number">0</span>)) % M;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; num[<span class="number">0</span>]; i++) ans = (ans + DP(<span class="number">1</span>, ch[<span class="number">0</span>][i], <span class="number">0</span>)) % M;</div><div class="line">    ans = (ans + DP(<span class="number">1</span>, ch[<span class="number">0</span>][num[<span class="number">0</span>]], <span class="number">1</span>)) % M;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本期的题型有：</p>
<ul>
<li><strong>模数数位DP问题</strong></li>
<li><strong>树上动态维护问题</strong></li>
<li><strong>图上两点瓶颈路问题</strong></li>
<li><strong>线段树合并问题</strong></li>
<li><strong>动点SPFA/二维瓶颈路问题</strong></li>
<li><strong>质因子分析DFS问题</strong></li>
<li><strong>线段树特殊操作问题</strong></li>
<li><strong>模拟操作问题</strong></li>
<li><strong>KMP变式问题</strong></li>
<li><strong>多串匹配型数位DP问题</strong></li>
</ul>
</div></div></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;How can I stay with you … forever ? …&lt;br&gt;
    
    </summary>
    
    
      <category term="BZOJ" scheme="https://goseqh.tk/tags/BZOJ/"/>
    
      <category term="题解" scheme="https://goseqh.tk/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ阶段性汇总IV</title>
    <link href="https://goseqh.tk/2017/09/07/BZOJ%E9%98%B6%E6%AE%B5%E6%80%A7%E6%B1%87%E6%80%BBIV/"/>
    <id>https://goseqh.tk/2017/09/07/BZOJ阶段性汇总IV/</id>
    <published>2017-09-07T10:04:17.000Z</published>
    <updated>2017-09-07T23:24:41.928Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>I’m alone still…<br><a id="more"></a></p>
<p><title>Problem 1339. -- [Baltic2008]Mafia</title><center><h2>1339: [Baltic2008]Mafia</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>419&nbsp;&nbsp;<span class="green">Solved: </span>263<br>[<a href="submitpage.php?id=1339">Submit</a>][<a href="problemstatus.php?id=1339">Status</a>][<a href="bbs.php?id=1339">Discuss</a>]</center></p><h3>Description</h3><div class="content">匪徒准备从一个车站转移毒品到另一个车站,警方准备进行布控. 
对于每个车站进行布控都需要一定的代价,现在警方希望使用最小的代价控制一些车站,使得去掉这些车站后，匪徒无法从原定的初始点到达目标点</div><h3>Input</h3><div class="content">第一行输入N,M代表车站的总个数,及有多少条双向边连接它们.
2<=n<=200 1="" ,="" <="m<=20000." 第二行给出两个数a,b,代表匪徒的出发点及目标点.1<="a,b<=N,a<">b.
再下来有N行,给出对第i个车站进行布控所需要的Money,其不超过10 000 000
再下来M行,用于描述图的结构.</=n<=200></div><h3>Output</h3><div class="content">最少需要多少Money</div><h3>Sample Input</h3><p></p>
<div class="content"><span class="sampledata">5 6<br>
5 3<br>
2<br>
4<br>
8<br>
3<br>
10<br>
1 5<br>
1 2<br>
2 4<br>
4 5<br>
2 3<br>
3 4</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">5</span></div><h3>HINT</h3>
<div class="content"><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search="></a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>图论</li>
<li>网络流</li>
<li>最小割</li>
</ul>
<hr>
<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>最小割基础模型</strong></p>
<p>就是一道结点容量的最小割问题。。。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m, s, t;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to, flow;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to, <span class="keyword">int</span> flow) : next(next), to(to), flow(flow)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to, <span class="keyword">int</span> flow)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to, flow);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr, <span class="number">0</span>);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; bfs;</div><div class="line">    bfs.push(s);</div><div class="line">    <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span>(d));</div><div class="line">    <span class="keyword">while</span>(!bfs.empty())&#123;</div><div class="line">        <span class="keyword">int</span> op = bfs.front(); bfs.pop();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[op]; i; i = e[i].next)&#123;</div><div class="line">            <span class="keyword">if</span> (!e[i].flow) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> k = e[i].to;</div><div class="line">            <span class="keyword">if</span> (k == s || d[k]) <span class="keyword">continue</span>;</div><div class="line">            d[k] = d[op] + <span class="number">1</span>;</div><div class="line">            bfs.push(k);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (d[t]) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> a)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == t) <span class="keyword">return</span> a;</div><div class="line">    <span class="keyword">int</span> rest = a;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span> (!e[i].flow) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (d[op] != d[x] + <span class="number">1</span>) <span class="keyword">continue</span>;</div><div class="line">        LL k = DFS(op, min(rest, e[i].flow));</div><div class="line">        e[i].flow -= k;</div><div class="line">        e[i ^ <span class="number">1</span>].flow += k;</div><div class="line">        rest -= k;</div><div class="line">        <span class="keyword">if</span> (!rest) <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a - rest;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dinic</span><span class="params">(LL&amp; maxflow)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(BFS()) maxflow += DFS(s, INF);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;s, &amp;t);</div><div class="line">    s = s &lt;&lt; <span class="number">1</span>;</div><div class="line">    t = (t &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x), Add_Edge(i &lt;&lt; <span class="number">1</span>, (i &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, x);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        Add_Edge((x &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, y &lt;&lt; <span class="number">1</span>, INF);</div><div class="line">        Add_Edge((y &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, x &lt;&lt; <span class="number">1</span>, INF);</div><div class="line">    &#125;</div><div class="line">    LL maxflow = <span class="number">0</span>;</div><div class="line">    Dinic(maxflow);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, maxflow);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 3944. -- Sum</title><center><h2>3944: Sum</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>4139&nbsp;&nbsp;<span class="green">Solved: </span>1092<br>[<a href="submitpage.php?id=3944">Submit</a>][<a href="problemstatus.php?id=3944">Status</a>][<a href="bbs.php?id=3944">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p><img src="aaa.PNG" width="424" height="129" alt=""></p><p></p>
<p></p><p></p>&lt;/div&gt;<h3>Input</h3><div class="content"><div>一共T+1行</div><p></p>
<div>第1行为数据组数T(T&lt;=10)</div>
<div>第2~T+1行每行一个<span style="color: rgb(255, 0, 0);">非负</span>整数N，代表一组询问</div>
<div></div>
<p class="MsoNormal"></p>
<p></p></div><h3>Output</h3><div class="content"><div>一共T行，每行两个用空格分隔的数ans1,ans2</div>
<div></div>
<p></p></div><h3>Sample Input</h3>
<div class="content"><span class="sampledata">6<br>
1<br>
2<br>
8<br>
13<br>
30<br>
2333</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">1 1<br>
2 0<br>
22 -2<br>
58 -3<br>
278 -3<br>
1655470 2<br>
<br>
 </span></div><h3>HINT</h3>
<div class="content"><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search="></a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>数学</li>
<li>数论</li>
<li>杜教筛</li>
</ul>
<hr>
<h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>杜教筛基础题目</strong></p>
<p>就是一道杜教筛的基础练习题，然后还卡常。。。</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 5000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">LL mu[maxn];</div><div class="line">LL phi[maxn];</div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    mu[<span class="number">1</span>] = phi[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i])&#123;</div><div class="line">            p[cnt++] = i;</div><div class="line">            mu[i] = <span class="number">-1</span>;</div><div class="line">            phi[i] = i - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * p[j] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * p[j]] = <span class="number">1</span>;</div><div class="line">            mu[i * p[j]] = -mu[i];</div><div class="line">            phi[i * p[j]] = phi[i] * (p[j] - <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>)&#123;</div><div class="line">                mu[i * p[j]] = <span class="number">0</span>;</div><div class="line">                phi[i * p[j]] = phi[i] * p[j];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) mu[i] += mu[i - <span class="number">1</span>], phi[i] += phi[i - <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"><span class="built_in">map</span>&lt;LL, LL&gt; phi2;</div><div class="line"><span class="built_in">map</span>&lt;LL, LL&gt; mu2;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">dyh</span><span class="params">(LL n)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (n &lt; maxn) <span class="keyword">return</span> mu[n];</div><div class="line">    <span class="keyword">if</span> (mu2.count(n)) <span class="keyword">return</span> mu2[n];</div><div class="line">    LL ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        LL next = n / (n / i);</div><div class="line">        ans = ans - dyh(n / i) * (next - i + <span class="number">1</span>);</div><div class="line">        i = next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> mu2[n] = ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">dyh2</span><span class="params">(LL n)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (n &lt; maxn) <span class="keyword">return</span> phi[n];</div><div class="line">    <span class="keyword">if</span> (phi2.count(n)) <span class="keyword">return</span> phi2[n];</div><div class="line">    LL ans = n * (n + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        LL next = n / (n / i);</div><div class="line">        ans = ans - dyh2(n / i) * (next - i + <span class="number">1</span>);</div><div class="line">        i = next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> phi2[n] = ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--)&#123;</div><div class="line">        LL n;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>, dyh2(n), dyh(n));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 5015. -- [Snoi2017]礼物</title><center><h2>5015: [Snoi2017]礼物</h2><span class="green">Time Limit: </span>15 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>512 MB<br><span class="green">Submit: </span>28&nbsp;&nbsp;<span class="green">Solved: </span>21<br>[<a href="submitpage.php?id=5015">Submit</a>][<a href="problemstatus.php?id=5015">Status</a>][<a href="bbs.php?id=5015">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>热情好客的请森林中的朋友们吃饭，他的朋友被编号为 1～N，每个到来的朋友都会带给他一些礼物：。其中，第</div><p></p>
<div>一个朋友会带给他 1 个，之后，每一个朋友到来以后，都会带给他之前所有人带来的礼物个数再加他的编号的 K&nbsp;</div>
<div>次方那么多个。所以，假设 K=2，前几位朋友带来的礼物个数分别是：1,5,15,37,83假设 K=3，前几位朋友带来的</div>
<div>礼物个数分别是：1,9,37,111现在，好奇自己到底能收到第 N 个朋友多少礼物，因此拜托于你了。已知 N,K请输</div>
<div>出第 N 个朋友送的礼物个数 mod1000000007。</div>
<div>PDF题面:<a href="http://www.lydsy.com/JudgeOnline/upload/gift.pdf" target="_blank" rel="external">www.lydsy.com/JudgeOnline/upload/gift.pdf</a></div>
<div></div>
<p></p></div><h3>Input</h3><div class="content"><div>第一行，两个整数 N,K</div>
<div>N&le;10^18,K&le;10</div>
<div></div>
<p></p></div><h3>Output</h3><div class="content"><div>一个整数，表示第 N 个朋友送的礼物个数 mod1000000007。&nbsp;</div>
<div></div>
<p></p></div><h3>Sample Input</h3>
<div class="content"><span class="sampledata"> 4 2</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata"> 37</span></div><h3>HINT</h3>
<div class="content"><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search="></a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>数学</li>
<li>数学归纳法计算题</li>
</ul>
<hr>
<h2 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>数学归纳法计算题</strong></p>
<p>本题可以通过递归+数学归纳法解决，首先观察规律，然后递推进行求解，边界情况手动计算即可</p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line">LL fac[maxn];</div><div class="line">LL ifac[maxn];</div><div class="line">LL inv[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    fac[<span class="number">0</span>] = fac[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++) fac[i] = fac[i - <span class="number">1</span>] * i % M;</div><div class="line">    inv[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++) inv[i] = (M - (M / i) * inv[M % i] % M) % M;</div><div class="line">    ifac[<span class="number">0</span>] = ifac[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++) ifac[i] = inv[i] * ifac[i - <span class="number">1</span>] % M;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">fast_power</span><span class="params">(LL x, LL y)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">1</span>, con = x % M;</div><div class="line">    <span class="keyword">while</span> (y)&#123;</div><div class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ans = ans * con % M;</div><div class="line">        con = con * con % M;</div><div class="line">        y &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">cal</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> fac[m] * ifac[n] % M * ifac[m - n] % M;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function">LL <span class="title">work</span><span class="params">(LL n, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (k == <span class="number">0</span>) <span class="keyword">return</span> (fast_power(<span class="number">2</span>, n) - <span class="number">1</span> + M) % M;</div><div class="line">    LL ans = (fast_power(<span class="number">2</span>, n) - fast_power(n, k) + M) % M;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)&#123;</div><div class="line">        ans = (ans + cal(k, i) * (work(n - <span class="number">1</span>, k - i) * <span class="number">2</span> % M) % M) % M;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    LL n;</div><div class="line">    <span class="keyword">int</span> k;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%d"</span>, &amp;n, &amp;k);</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"1\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, (work(n - <span class="number">1</span>, k) + fast_power(n, k)) % M);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 5029. -- 贴小广告</title><center><h2>5029: 贴小广告</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>256 MB<br><span class="green">Submit: </span>86&nbsp;&nbsp;<span class="green">Solved: </span>57<br>[<a href="submitpage.php?id=5029">Submit</a>][<a href="problemstatus.php?id=5029">Status</a>][<a href="bbs.php?id=5029">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>现在有一堵墙，墙上分为若干个单元。接下来会来n个人在墙上贴小广告。每次每个人选择墙上连续一段的单元贴</div><p></p>
<div>上自己公司与众不同的小广告。因为小广告可能会出现被覆盖的情况，由于公司之间存在竞争，后贴广告的人想让</div>
<div>别人看不见前面公司的广告，所以会将前面的广告完全覆盖。因此对于墙上的某个单元上贴的小广告中只有贴的最</div>
<div>晚的能被看见。现在想要知道n个人依次贴完后，墙上共能看到多少种小广告？</div>
<p></p></div><h3>Input</h3><div class="content"><div>输入文件第一行有一个整数 n。</div>
<div>接下来 n 行每行 2 个整数 li、ri，表示这个人在第li个单元到第ri个单元贴了小广告。</div>
<div>1 &lt;= n,m &lt;= 10^5 , 1&lt;=li&lt;=ri&lt;=10^7</div>
<p></p></div><h3>Output</h3><div class="content"><div>输出所有人贴完后墙上能看到多少种小广告？</div>
<p></p></div><h3>Sample Input</h3>
<div class="content"><span class="sampledata">5<br>
1 4<br>
2 6<br>
8 10<br>
3 4<br>
7 10</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">4</span></div><h3>HINT</h3>
<div class="content"><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search="></a></p></div>


<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>线段树</li>
</ul>
<hr>
<h2 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>线段树基础练习题</strong></p>
<p>我们直接线段树搞搞就可以。。。</p>
<h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 400005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> bound 400005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> sline[maxn];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> <span class="built_in">set</span>[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">set</span>[o] &amp;&amp; l != r)&#123;</div><div class="line">        <span class="built_in">set</span>[o &lt;&lt; <span class="number">1</span>] = <span class="built_in">set</span>[o];</div><div class="line">        </div><div class="line">        <span class="built_in">set</span>[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = <span class="built_in">set</span>[o];</div><div class="line"></div><div class="line">        <span class="built_in">set</span>[o] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> <span class="built_in">set</span>[o];</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) <span class="keyword">return</span> get(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> get(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r ,<span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        <span class="built_in">set</span>[o] = qd;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) modify(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) modify(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> l, r, n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</div><div class="line">        line[cnt++] = l;</div><div class="line">        line[cnt++] = r;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i++) sline[i] = line[i];</div><div class="line">    sort(sline, sline + cnt);</div><div class="line">    <span class="keyword">int</span> _cnt = unique(sline, sline + cnt) - sline;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i++) line[i] = lower_bound(sline, sline + _cnt, line[i]) - sline + <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        qx = line[i &lt;&lt; <span class="number">1</span>];</div><div class="line">        qy = line[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">        qd = i + <span class="number">1</span>;</div><div class="line">        modify(<span class="number">1</span>, _cnt, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> ct = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _cnt; i++)&#123;</div><div class="line">        qx = i;</div><div class="line">        <span class="keyword">int</span> a = get(<span class="number">1</span>, _cnt, <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (!a) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span> (!vis[a]) ct++, vis[a] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ct);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 5018. -- [Snoi2017]英雄联盟</title><center><h2>5018: [Snoi2017]英雄联盟</h2><span class="green">Time Limit: </span>15 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>512 MB<br><span class="green">Submit: </span>81&nbsp;&nbsp;<span class="green">Solved: </span>39<br>[<a href="submitpage.php?id=5018">Submit</a>][<a href="problemstatus.php?id=5018">Status</a>][<a href="bbs.php?id=5018">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>正在上大学的小皮球热爱英雄联盟这款游戏，而且打的很菜，被网友们戏称为「小学生」。现在，小皮球终于受不</div><p></p>
<div>了网友们的嘲讽，决定变强了，他变强的方法就是：买皮肤！小皮球只会玩N个英雄，因此，他也只准备给这N个英</div>
<div>雄买皮肤，并且决定，以后只玩有皮肤的英雄。这N个英雄中，第i个英雄有Ki款皮肤，价格是每款CiQ币（同一个</div>
<div>英雄的皮肤价格相同）。为了让自己看起来高大上一些，小皮球决定给同学们展示一下自己的皮肤，展示的思路是</div>
<div>这样的：对于有皮肤的每一个英雄，随便选一个皮肤给同学看。比如，小皮球共有5个英雄，这5个英雄分别有0,0,</div>
<div>3,2,4款皮肤，那么，小皮球就有3*2&times;4=24种展示的策略。现在，小皮球希望自己的展示策略能够至少达到M种，</div>
<div>请问，小皮球至少要花多少钱呢？</div>
<p></p></div><h3>Input</h3><div class="content"><div>第一行，两个整数N,M</div>
<div>
<div>第二行，N个整数，表示每个英雄的皮肤数量Ki</div>
<div>第三行，N个整数，表示每个英雄皮肤的价格Ci</div>
<div>共 10 组数据，第i组数据满足：N&le;max(5,(log<sub>2</sub>i)^4)&nbsp;M&le;10^17,1&le;Ki&le;10,1&le;Ci&le;199。保证有解</div>
</div>
<p></p></div><h3>Output</h3><div class="content"><div>
<div>一个整数，表示小皮球达到目标最少的花费。</div>
</div>
<p></p></div><h3>Sample Input</h3>
<div class="content"><span class="sampledata">3 24<br>
4 4 4<br>
2 2 2</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">18<br>
</span></div><h3>HINT</h3>
<div class="content"><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search="></a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>二分答案</li>
<li>动态规划</li>
<li>背包DP</li>
</ul>
<hr>
<h2 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>判断可达型背包DP</strong></p>
<p>本题我们发现，用质因子分析的方法好像不是很好做，那么转换一下思路，把本题转为判定性问题，然后直接背包DP</p>
<h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 205</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 40005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line">LL m;</div><div class="line"><span class="keyword">int</span> k[maxn];</div><div class="line"><span class="keyword">int</span> c[maxn];</div><div class="line">LL dp[maxn][maxm];</div><div class="line"><span class="keyword">bool</span> vis[maxn][maxm];</div><div class="line"><span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">DP</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> rest)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span> (pos == n + <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span> (vis[pos][rest]) <span class="keyword">return</span> dp[pos][rest];</div><div class="line">	vis[pos][rest] = <span class="number">1</span>;</div><div class="line">	LL&amp; ans = dp[pos][rest];</div><div class="line">	ans = DP(pos + <span class="number">1</span>, rest);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= k[pos]; i++)&#123;</div><div class="line">		<span class="keyword">if</span> (rest &gt;= i * c[pos]) ans = max(ans, i * DP(pos + <span class="number">1</span>, rest - i * c[pos]));</div><div class="line">		<span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (ans &gt;= m) flag = <span class="number">1</span>;</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">	<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">	flag = <span class="number">0</span>;</div><div class="line">	DP(<span class="number">1</span>, x);</div><div class="line">	<span class="keyword">return</span> flag;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</div><div class="line">	<span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">	<span class="keyword">if</span> (judge(mid)) <span class="keyword">return</span> work(l, mid);</div><div class="line">	<span class="keyword">else</span> <span class="keyword">return</span> work(mid + <span class="number">1</span>, r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>, &amp;n, &amp;m);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k[i]);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c[i]), sum += c[i] * k[i];</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>, work(<span class="number">0</span>, sum));</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 1778. -- [Usaco2010 Hol]Dotp 驱逐猪猡</title><center><h2>1778: [Usaco2010 Hol]Dotp 驱逐猪猡</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>64 MB<br><span class="green">Submit: </span>685&nbsp;&nbsp;<span class="green">Solved: </span>265<br>[<a href="submitpage.php?id=1778">Submit</a>][<a href="problemstatus.php?id=1778">Status</a>][<a href="bbs.php?id=1778">Discuss</a>]</center></p><h3>Description</h3><div class="content">奶牛们建立了一个随机化的臭气炸弹来驱逐猪猡。猪猡的文明包含1到N (2 <= 1="" 2="1/2）并且留在最后一个城市（概率为1/2）。所以在城市1结束的概率可以表示为1/2" n="" <="300)一共N个猪城。这些城市由M" (1="" n;="" 1--2="" 可知下面这些路径是炸弹可能经过的路径（最后一个城市是臭气弹爆炸的城市）：="" 1:="" 2:="" 1-2="" 3:="" 1-2-1="" 4:="" 1-2-1-2="" 5:="" 1-2-1-2-1="" ...="" 要得到炸弹在城市1终止的概率，我们可以把上面的第1，第3，第5……条路径的概率加起来，（也就是上表奇数编号的路径）。上表中第k条路径的概率正好是(1="" 2)^k，也就是必须在前k-1个回合离开所在城市（每次的概率为1="" -="" +="" 2)^3="" 2)^5="" ...。当我们无限地计算把这些项一个个加起来，我们最后会恰好得到2="" 3，也就是我们要求的概率，大约是0.666666667。这意味着最终停留在城市2的概率为1="" 3，大约为0.333333333。="" div=""><h3>Input</h3><div class="content">* 第1行: 四个由空格隔开的整数: N, M, P, 和 Q<p></p>
<ul>
<li>第2到第M+1行: 第i+1行用两个由空格隔开的整数A_j和B_j表示一条道路。<br>&lt;/div&gt;<h3>Output</h3><div class="content">* 第1到第N行: 在第i行，用一个浮点数输出城市i被摧毁的概率。误差不超过10^-6的答桉会
  被接受（注意这就是说你需要至少输出6位有效数字使得答桉有效）。
</div><h3>Sample Input</h3><div class="content"><span class="sampledata">2 1 1 2<br>
1 2<br>
<br>
<br>
</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata"><br>
0.666666667<br>
0.333333333<br>
</span></div><h3>HINT</h3>
<div class="content"><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search=Gold">Gold</a></p></div>

</li>
</ul>
<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>图论</li>
<li>数学</li>
<li>概率与期望</li>
<li>高斯消元</li>
</ul>
<hr>
<h2 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>图论概率/期望高斯消元问题</strong></p>
<p>这类题目，我们一般都需要两个函数：</p>
<ul>
<li>build_matrix()</li>
<li>Gauss()</li>
</ul>
<p>我们把Gauss消元的代码封装好，然后用上面的函数进行矩阵的建立，就可以了</p>
<p>注意，我们要判断好DP中每一项的精确定义，同时明确转移的方向，否则会产生错误</p>
<p>对于本题来说，我们为了方便定义DP为经过某个状态的期望次数（<strong>概率转期望</strong>技巧）， 那么答案就是这个期望次数乘以爆炸的概率，可以证明，最后所有点的答案加起来正好是1，想一想，为什么？（可以把矩阵建出来然后证明）</p>
<p>转移就根据定义设计就好，确定转移方向以明确点的度数用哪一个</p>
<h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-10</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">double</span> p;</div><div class="line"><span class="keyword">double</span> mat[maxn][maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; save[maxn];</div><div class="line"><span class="keyword">int</span> deg[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_matrix</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        mat[i][i] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; save[i].size(); k++)&#123;</div><div class="line">            <span class="keyword">int</span> j = save[i][k];</div><div class="line">            mat[i][j] -= ((<span class="number">1</span> - p) / deg[j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    mat[<span class="number">1</span>][n + <span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Gauss</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> _n = n, _m = n + <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= _n; i++)&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">double</span> maxnum = mat[i][i];</div><div class="line">        <span class="keyword">int</span> flag = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= _n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (mat[j][i] - maxnum &gt; eps)&#123;</div><div class="line">                maxnum = mat[j][i];</div><div class="line">                flag = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (flag != <span class="number">-1</span>) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= _m; j++) swap(mat[i][j], mat[flag][j]);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= _n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">double</span> d = mat[j][i] / mat[i][i];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt;= _m; k++)&#123;</div><div class="line">                mat[j][k] -= mat[i][k] * d;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    build_matrix();</div><div class="line">    Gauss();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.9lf\n"</span>, p * mat[i][n + <span class="number">1</span>] / mat[i][i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y, a, b;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;x, &amp;y);</div><div class="line">    p = <span class="number">1.0</span> * x / y;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</div><div class="line">        save[a].pb(b);</div><div class="line">        save[b].pb(a);</div><div class="line">        deg[a]++, deg[b]++;</div><div class="line">    &#125;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 1419. -- Red is good</title><center><h2>1419: Red is good</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>64 MB<br><span class="green">Submit: </span>969&nbsp;&nbsp;<span class="green">Solved: </span>427<br>[<a href="submitpage.php?id=1419">Submit</a>][<a href="problemstatus.php?id=1419">Status</a>][<a href="bbs.php?id=1419">Discuss</a>]</center></p><h3>Description</h3><div class="content">桌面上有R张红牌和B张黑牌，随机打乱顺序后放在桌面上，开始一张一张地翻牌，翻到红牌得到1美元，黑牌则付出1美元。可以随时停止翻牌，在最优策略下平均能得到多少钱。</div><h3>Input</h3><div class="content">一行输入两个数R,B,其值在0到5000之间</div><h3>Output</h3><div class="content">在最优策略下平均能得到多少钱。</div><h3>Sample Input</h3><p></p>
<div class="content"><span class="sampledata">5 1</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">4.166666</span></div><h3>HINT</h3>
<div class="content"><p>输出答案时,小数点后第六位后的全部去掉,不要四舍五入.</p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search="></a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>动态规划</li>
<li>概率与期望DP</li>
</ul>
<hr>
<h2 id="题目分析-6"><a href="#题目分析-6" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>最优型概率/期望DP问题</strong><br>我们直接进行DP，然后对于当前点是否停止进行抉择，而这只需要对后继状态的DP值与0取个MAX即可，这就是最优策略的含义</p>
<h2 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 5005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">double</span> dp[<span class="number">2</span>][maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> d = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt;= m; y++) dp[<span class="number">0</span>][y] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; x++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt;= m; y++)&#123;</div><div class="line">            <span class="keyword">if</span> (y == <span class="number">0</span>) dp[d][y] = x;</div><div class="line">            <span class="keyword">else</span> dp[d][y] = max(<span class="number">0.0</span>, (<span class="number">1.0</span> * x / (x + y) * (dp[d ^ <span class="number">1</span>][y] + <span class="number">1</span>)) + (<span class="number">1.0</span> * y / (x + y) * (dp[d][y - <span class="number">1</span>] - <span class="number">1</span>)));</div><div class="line">        &#125;</div><div class="line">        d ^= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> d ^ <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">int</span> d = DP();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.6lf"</span>, dp[d][m] - <span class="number">5e-7</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 3270. -- 博物馆</title><center><h2>3270: 博物馆</h2><span class="green">Time Limit: </span>30 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>549&nbsp;&nbsp;<span class="green">Solved: </span>301<br>[<a href="submitpage.php?id=3270">Submit</a>][<a href="problemstatus.php?id=3270">Status</a>][<a href="bbs.php?id=3270">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div style="margin: 0cm 0cm 6pt"><p></p>
<div>有一天Petya和他的朋友Vasya在进行他们众多旅行中的一次旅行，他们决定去参观一座城堡博物馆。这座博物馆有着特别的样式。它包含由m条走廊连接的n间房间，并且满足可以从任何一间房间到任何一间别的房间。</div>
<div>两个人在博物馆里逛了一会儿后两人决定分头行动，去看各自感兴趣的艺术品。他们约定在下午六点到一间房间会合。然而他们忘记了一件重要的事：他们并没有选好在哪儿碰面。等时间到六点，他们开始在博物馆里到处乱跑来找到对方（他们没法给对方打电话因为电话漫游费是很贵的）</div>
<div>不过，尽管他们到处乱跑，但他们还没有看完足够的艺术品，因此他们每个人采取如下的行动方法：每一分钟做决定往哪里走，有Pi 的概率在这分钟内不去其他地方（即呆在房间不动），有1-Pi 的概率他会在相邻的房间中等可能的选择一间并沿着走廊过去。这里的i指的是当期所在房间的序号。在古代建造是一件花费非常大的事，因此每条走廊会连接两个不同的房间，并且任意两个房间至多被一条走廊连接。</div>
<div>两个男孩同时行动。由于走廊很暗，两人不可能在走廊碰面，不过他们可以从走廊的两个方向通行。（此外，两个男孩可以同时地穿过同一条走廊却不会相遇）两个男孩按照上述方法行动直到他们碰面为止。更进一步地说，当两个人在某个时刻选择前往同一间房间，那么他们就会在那个房间相遇。</div>
<div>两个男孩现在分别处在a，b两个房间，求两人在每间房间相遇的概率。</div>
</div></div><h3>Input</h3><div class="content"><div>第一行包含四个整数，n表示房间的个数;m表示走廊的数目;a,b (1&thinsp;&le;&thinsp;a,&thinsp;b&thinsp;&le;&thinsp;n),表示两个男孩的初始位置。</div>
<div>之后m行每行包含两个整数，表示走廊所连接的两个房间。</div>
<div>之后n行每行一个至多精确到小数点后四位的实数 表示待在每间房间的概率。</div>
<div>题目保证每个房间都可以由其他任何房间通过走廊走到。</div></div><h3>Output</h3><div class="content"><div>输出一行包含n个由空格分隔的数字，注意最后一个数字后也有空格，第i个数字代表两个人在第i间房间碰面的概率（输出保留6位小数）</div>
<div>注意最后一个数字后面也有一个空格</div></div><h3>Sample Input</h3>
<div class="content"><span class="sampledata">2 1 1 2<br>
1 2<br>
0.5<br>
0.5<br>
</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">0.500000 0.500000<br>
</span></div><h3>HINT</h3>
<div class="content"><p></p><p>对于100%的数据有 n &lt;= 20，n-1 &lt;= m &lt;= n(n-1)/2</p><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search=高斯消元">高斯消元</a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>图论</li>
<li>数学</li>
<li>概率与期望</li>
<li>高斯消元</li>
</ul>
<hr>
<h2 id="题目分析-7"><a href="#题目分析-7" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>图论概率/期望高斯消元问题</strong></p>
<p>几乎和上面那道题一样的套路，直接造DP矩阵然后消元即可，注意我们要表示的是二维状态， 同时为了方便定义DP为经过某个状态的期望次数即可（<strong>概率转期望</strong>技巧）</p>
<h2 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 605</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, a, b;</div><div class="line"><span class="keyword">double</span> p[maxn];</div><div class="line"><span class="keyword">double</span> mat[maxn][maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; save[maxn];</div><div class="line"><span class="keyword">int</span> deg[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_matrix</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line"></div><div class="line">            <span class="keyword">int</span> op = (i - <span class="number">1</span>) * n + j - <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> x = i, y = j;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (x == a &amp;&amp; y == b) &#123;</div><div class="line">                mat[op][op] = <span class="number">1</span> - p[x] * p[y];</div><div class="line">                mat[op][n * n] = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">if</span> (x != y) mat[op][op] = <span class="number">1</span> - p[x] * p[y];</div><div class="line">                <span class="keyword">else</span> mat[op][op] = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; save[x].size(); k++)&#123;</div><div class="line">                </div><div class="line">                <span class="keyword">int</span> _x = save[x][k];</div><div class="line">                <span class="keyword">int</span> _op = (_x - <span class="number">1</span>) * n + y - <span class="number">1</span>;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (_x != y) mat[op][_op] -= (<span class="number">1</span> - p[_x]) * p[y] / deg[_x];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; save[y].size(); k++)&#123;</div><div class="line"></div><div class="line">                <span class="keyword">int</span> _y = save[y][k];</div><div class="line">                <span class="keyword">int</span> _op = (x - <span class="number">1</span>) * n + _y - <span class="number">1</span>;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (x != _y) mat[op][_op] -= (<span class="number">1</span> - p[_y]) * p[x] / deg[_y];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; save[x].size(); s++)&#123;</div><div class="line"></div><div class="line">                <span class="keyword">int</span> _x = save[x][s];</div><div class="line"></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; save[y].size(); t++)&#123;</div><div class="line"></div><div class="line">                    <span class="keyword">int</span> _y = save[y][t];</div><div class="line">                    <span class="keyword">int</span> _op = (_x - <span class="number">1</span>) * n + _y - <span class="number">1</span>;</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (_x != _y) mat[op][_op] -= (<span class="number">1</span> - p[_x]) * (<span class="number">1</span> - p[_y]) / (deg[_x] * deg[_y]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Gauss</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> _n = n * n, _m = n * n + <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _n; i++)&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">double</span> maxnum = mat[i][i];</div><div class="line">        <span class="keyword">int</span> flag = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; _n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (mat[j][i] - maxnum &gt; eps)&#123;</div><div class="line">                maxnum = mat[j][i];</div><div class="line">                flag = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (flag != <span class="number">-1</span>) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; _m; j++) swap(mat[i][j], mat[flag][j]);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; _n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">double</span> d = mat[j][i] / mat[i][i];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt; _m; k++)&#123;</div><div class="line">                mat[j][k] -= mat[i][k] * d;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DP</span><span class="params">()</span></span>&#123;</div><div class="line">    build_matrix();</div><div class="line">    Gauss();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> op = (i - <span class="number">1</span>) * n + i - <span class="number">1</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%.6lf "</span>, mat[op][n * n] / mat[op][op]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;a, &amp;b);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        save[x].pb(y);</div><div class="line">        save[y].pb(x);</div><div class="line">        deg[x]++;</div><div class="line">        deg[y]++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;p[i]);</div><div class="line">    &#125;</div><div class="line">    DP();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 4551. -- [Tjoi2016&Heoi2016]树</title><center><h2>4551: [Tjoi2016&Heoi2016]树</h2><span class="green">Time Limit: </span>20 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>1294&nbsp;&nbsp;<span class="green">Solved: </span>643<br>[<a href="submitpage.php?id=4551">Submit</a>][<a href="problemstatus.php?id=4551">Status</a>][<a href="bbs.php?id=4551">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>在2016年，佳媛姐姐刚刚学习了树，非常开心。现在他想解决这样一个问题：给定一颗有根树（根为1），有以下</div><p></p>
<div>两种操作：1. 标记操作：对某个结点打上标记（在最开始，只有结点1有标记，其他结点均无标记，而且对于某个</div>
<div>结点，可以打多次标记。）2. 询问操作：询问某个结点最近的一个打了标记的祖先（这个结点本身也算自己的祖</div>
<div>先）你能帮帮他吗?</div></div><h3>Input</h3><div class="content"><div>
<div>输入第一行两个正整数N和Q分别表示节点个数和操作次数接下来N-1行，每行两个正整数u,v(1&le;u,v&le;n)表示u到v</div>
<div>有一条有向边接下来Q行，形如&ldquo;opernum&rdquo;oper为&ldquo;C&rdquo;时表示这是一个标记操作,oper为&ldquo;Q&rdquo;时表示这是一个询</div>
<div>问操作对于每次询问操作，1 &le; N, Q &le; 100000。</div>
</div></div><h3>Output</h3><div class="content"><p>输出一个正整数，表示结果</p></div><h3>Sample Input</h3>
<div class="content"><span class="sampledata">5 5<br>
1 2<br>
1 3<br>
2 4<br>
2 5<br>
Q 2<br>
C 2<br>
Q 2<br>
Q 5<br>
Q 3</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata">1 <br>
2 <br>
2 <br>
1</span></div><h3>HINT</h3>
<div class="content"><p></p><p>&nbsp;新加数据9组(By&nbsp;<span style="font-family: Arial; font-size: 14px; line-height: 15.8666658401489px;">HFLSyzx</span>&nbsp;),未重测--2016.8.2</p><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search="></a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>树链剖分</li>
<li>线段树二分</li>
</ul>
<hr>
<h2 id="题目分析-8"><a href="#题目分析-8" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>树链剖分题目</strong></p>
<p>直接树链剖分，寻找最下端的1，而这可以通过线段树二分解决</p>
<h2 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> fa[maxn];</div><div class="line"><span class="keyword">int</span> dfs[maxn];</div><div class="line"><span class="keyword">int</span> idfs[maxn];</div><div class="line"><span class="keyword">int</span> son[maxn];</div><div class="line"><span class="keyword">int</span> si[maxn];</div><div class="line"><span class="keyword">int</span> top[maxn];</div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x]) <span class="keyword">continue</span>;</div><div class="line">        fa[op] = x;</div><div class="line">        d[op] = d[x] + <span class="number">1</span>;</div><div class="line">        DFS1(op);</div><div class="line">        si[x] += si[op];</div><div class="line">        <span class="keyword">if</span> (si[op] &gt; si[son[x]]) son[x] = op;</div><div class="line">    &#125;</div><div class="line">    si[x]++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> tp)</span></span>&#123;</div><div class="line">    top[x] = tp;</div><div class="line">    dfs[x] = ++t;</div><div class="line">    idfs[t] = x;</div><div class="line">    <span class="keyword">if</span> (son[x]) DFS2(son[x], tp);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x] || op == son[x]) <span class="keyword">continue</span>;</div><div class="line">        DFS2(op, op);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> sum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) &#123;</div><div class="line">        <span class="keyword">if</span> (!sum[o]) sum[o] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) modify(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> modify(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    sum[o] = sum[o &lt;&lt; <span class="number">1</span>] + sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (sum[o] == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        <span class="keyword">if</span> (sum[o]) <span class="keyword">return</span> idfs[l];</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) ans = get(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (ans != <span class="number">-1</span>) <span class="keyword">return</span> ans;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) ans = get(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">int</span> f1 = top[x];</div><div class="line">        qx = dfs[f1], qy = dfs[x];</div><div class="line">        <span class="keyword">int</span> k = get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (k != <span class="number">-1</span>)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, k);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        x = fa[f1];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    qx = dfs[x];</div><div class="line">    modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    DFS1(<span class="number">1</span>);</div><div class="line">    DFS2(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    qx = <span class="number">1</span>;</div><div class="line">    modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="keyword">char</span> op[<span class="number">3</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        Add_Edge(x, y);</div><div class="line">    &#125;</div><div class="line">    init();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, op, &amp;x);</div><div class="line">        <span class="keyword">if</span> (op[<span class="number">0</span>] == <span class="string">'C'</span>) modify(x);</div><div class="line">        <span class="keyword">else</span> query(x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 3300. -- [USACO2011 Feb]Best Parenthesis</title><center><h2>3300: [USACO2011 Feb]Best Parenthesis</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>209&nbsp;&nbsp;<span class="green">Solved: </span>114<br>[<a href="submitpage.php?id=3300">Submit</a>][<a href="problemstatus.php?id=3300">Status</a>][<a href="bbs.php?id=3300">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p><font size="3" face="Times New Roman">Recently, the cows have been competing with strings of balanced <br>
parentheses and comparing them with each other to see who has the <br>
best one. <br>
<br>
Such strings are scored as follows (all strings are balanced): the <br>
string &quot;()&quot; has score 1; if &quot;A&quot; has score s(A) then &quot;(A)&quot; has score <br>
2*s(A); and if &quot;A&quot; and &quot;B&quot; have scores s(A) and s(B), respectively, <br>
then &quot;AB&quot; has score s(A)+s(B). For example, s(&quot;(())()&quot;) = <br>
s(&quot;(())&quot;)+s(&quot;()&quot;) = 2*s(&quot;()&quot;)+1 = 2*1+1 = 3. <br>
<br>
Bessie wants to beat all of her fellow cows, so she needs to calculate <br>
the score of some strings. Given a string of balanced parentheses <br>
of length N (2 &lt;= N &lt;= 100,000), help Bessie compute its score. <br>
<br>
计算&ldquo;平衡字符串&rdquo;的分数，&ldquo;平衡字符串&rdquo;是指由相同数量的&lsquo;（&rsquo;和&lsquo;）&rsquo;组成， <br>
且以&lsquo;（&rsquo;开头，以&lsquo;）&rsquo;结尾的字符串。 <br>
计算规则： <br>
字符串&ldquo;（）&rdquo;的得分是1. <br>
如果，平衡字符串&ldquo;A&rdquo;的得分是是S(A)，那么字符串&ldquo;（A）&rdquo;得分是2*S(A) ； <br>
如果，&ldquo;A&rdquo;，&ldquo;B&rdquo; 得分分别是S(A)和S(B)，那么平衡字符串&ldquo;AB&rdquo;得分为S(A)+S(B) <br>
例如：s(&quot;(())()&quot;) =s(&quot;(())&quot;)+s(&quot;()&quot;) = 2*s(&quot;()&quot;)+1 = 2*1+1 = 3.</font></p></div><h3>Input</h3><div class="content"><p><font size="3" face="Times New Roman">* Line 1: A single integer: N <br><br><br></font></p>
<ul>
<li>Lines 2..N + 1: Line i+1 will contain 1 integer: 0 if the ith <br><br>character of the string is ‘(‘, and 1 if the ith character of <br><br>the string is ‘)’ <br><br>第1行：N，平衡字符串长度 <br><br>第2至N+1行：Linei+1 整数0或1,0代表字符&lsquo;（&rsquo;，1代表&lsquo;）&rsquo;&lt;/font&gt;&lt;/p&gt;&lt;/div&gt;<h3>Output</h3><div class="content"><p><font size="3" face="Times New Roman">* Line 1: The score of the string. Since this number can get quite <br>
large, output the score modulo 12345678910. <br>
计算字符串得分，结果对12345678910取模</font></p></div><h3>Sample Input</h3><div class="content"><span class="sampledata">6<br>
0<br>
0<br>
1<br>
1<br>
0<br>
1<br>
INPUT DETAILS:<br>
<br>
This corresponds to the string "(())()".<br>
<br>
</span></div><h3>Sample Output</h3>
<div class="content"><span class="sampledata"><br>
3<br>
</span></div><h3>HINT</h3>
<div class="content"><p></p></div><h3>Source</h3>
<div class="content"><p><a href="problemset.php?search=Silver">Silver</a></p></div>

</li>
</ul>
<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>括号序列问题</li>
<li>模拟</li>
</ul>
<hr>
<h2 id="题目分析-9"><a href="#题目分析-9" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>模拟计算问题</strong></p>
<p>直接按照定义来算就好。。。</p>
<h2 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 12345678910</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="function">LL <span class="title">work</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> pre = <span class="number">0</span>, suf = <span class="number">0</span>;</div><div class="line">    LL sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> now = l;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!line[i]) pre++;</div><div class="line">        <span class="keyword">else</span> suf++;</div><div class="line">        <span class="keyword">if</span> (pre == suf)&#123;</div><div class="line">            <span class="keyword">if</span> (now + <span class="number">1</span> &lt; i - <span class="number">1</span>) sum = (sum + work(now + <span class="number">1</span>, i - <span class="number">1</span>) * <span class="number">2</span> % M) % M;</div><div class="line">            <span class="keyword">else</span> sum = (sum + <span class="number">1</span>) % M;</div><div class="line">            now = i + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, work(<span class="number">1</span>, n));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本期有如下题型：</p>
<ul>
<li><strong>最小割基础模型</strong></li>
<li><strong>杜教筛基础题目</strong></li>
<li><strong>数学归纳法计算题</strong> (<strong>重点</strong>）</li>
<li><strong>线段树基础练习题</strong></li>
<li><strong>判断可达型背包DP</strong></li>
<li><strong>图论概率/期望高斯消元问题</strong></li>
<li><strong>最优型概率/期望DP问题</strong></li>
<li><strong>树链剖分题目</strong></li>
<li><strong>模拟计算问题</strong></li>
</ul>
</div></div></=></div></div>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;I’m alone still…&lt;br&gt;
    
    </summary>
    
    
      <category term="BZOJ" scheme="https://goseqh.tk/tags/BZOJ/"/>
    
      <category term="题解" scheme="https://goseqh.tk/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ阶段性汇总III</title>
    <link href="https://goseqh.tk/2017/09/07/BZOJ%E9%98%B6%E6%AE%B5%E6%80%A7%E6%B1%87%E6%80%BBIII/"/>
    <id>https://goseqh.tk/2017/09/07/BZOJ阶段性汇总III/</id>
    <published>2017-09-07T10:03:55.000Z</published>
    <updated>2017-09-07T12:51:17.151Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>Time passes so fast, but…<br><a id="more"></a></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p><title>Problem 4726. -- [POI2017]Sabota?</title><center><h2>4726: [POI2017]Sabota?</h2><span class="green">Time Limit: </span>20 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MBSec&nbsp;&nbsp;<span class="red">Special Judge</span><br><span class="green">Submit: </span>576&nbsp;&nbsp;<span class="green">Solved: </span>241<br>[<a href="submitpage.php?id=4726">Submit</a>][<a href="problemstatus.php?id=4726">Status</a>][<a href="bbs.php?id=4726">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>某个公司有n个人, 上下级关系构成了一个有根树。其中有个人是叛徒(这个人不知道是谁)。对于一个人, 如果他</div><p></p>
<div>下属(直接或者间接, 不包括他自己)中叛徒占的比例超过x，那么这个人也会变成叛徒，并且他的所有下属都会变</div>
<div>成叛徒。你要求出一个最小的x，使得最坏情况下，叛徒的个数不会超过k。</div>
<div></div>
<p></p></div><h3>Input</h3><div class="content"><div>第一行包含两个正整数n,k(1&lt;=k&lt;=n&lt;=500000)。</div>
<div>接下来n-1行，第i行包含一个正整数p[i+1]，表示i+1的父亲是p[i+1](1&lt;=p[i+1]&lt;=i)。</div>
<div></div>
<p></p></div><h3>Output</h3><div class="content"><div>输出一行一个实数x，误差在10^-6以内都被认为是正确的。</div>
<div></div>
<p></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">9 3<br>
1<br>
1<br>
2<br>
2<br>
2<br>
3<br>
7<br>
3</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">0.6666666667</span></div><h3>HINT</h3>
            <div class="content"><p><div>答案中的x实际上是一个无限趋近于2/3但是小于2/3的数</div><br>
<div>因为当x取2/3时，最坏情况下3，7，8，9都是叛徒，超过了k=3。</div><br>
</p><p></p><p></p></div><h3>Source</h3>
            <div class="content"><p><a href="problemset.php?search=鸣谢Claris上传">鸣谢Claris上传</a></p></div>


<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>树型DP</li>
<li>限制性问题</li>
</ul>
<hr>
<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>树型DP问题</strong></p>
<p>比较经典的树型DP，一种比较容易想到的方法就是使用二分法，但是这种方法比较卡常，因为正解不是这个。。。</p>
<p>正解就是直接DP一次，求出当前结点在刚好被占领（即自己成为叛徒）的前提下，它的比例最大是多少，因为我们要考虑最坏情况，然后对所有绝对不能被占领（即子树大小大于k）的结点取一个DP值的MAX即为答案</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line">  </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">   </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">500050</span>;</div><div class="line">   </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> to,nxt;  </div><div class="line">&#125;e[maxn&lt;&lt;<span class="number">1</span>];</div><div class="line">   </div><div class="line"><span class="keyword">int</span> head[maxn],cnt,n,K,size[maxn];</div><div class="line">   </div><div class="line"><span class="keyword">double</span> dp[maxn];</div><div class="line">   </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    e[++cnt].to=y;  </div><div class="line">    e[cnt].nxt=head[x];  </div><div class="line">    head[x]=cnt;  </div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">&#123;</div><div class="line">    size[x]++;  </div><div class="line">    <span class="keyword">bool</span> flag=<span class="literal">false</span>;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt) dfs(e[i].to),size[x]+=size[e[i].to],flag=<span class="literal">true</span>;  </div><div class="line">    <span class="keyword">if</span>(!flag) &#123; dp[x]=<span class="number">1</span>; <span class="keyword">return</span> ; &#125;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].nxt)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">int</span> y=e[i].to;  </div><div class="line">        dp[x]=max(dp[x],min(dp[y],(<span class="keyword">double</span>)size[y]/(<span class="keyword">double</span>)(size[x]<span class="number">-1</span>)));  </div><div class="line">    &#125;  </div><div class="line"><span class="comment">//  printf("%d %.7lf\n",x,dp[x]);</span></div><div class="line">&#125;</div><div class="line">   </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;K);  </div><div class="line">    <span class="keyword">int</span> x;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)  </div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x),addedge(x,i);  </div><div class="line">    dfs(<span class="number">1</span>);  </div><div class="line">    <span class="keyword">double</span> ans=<span class="number">0</span>;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)  </div><div class="line">        <span class="keyword">if</span>(size[i]&gt;K&amp;&amp;ans&lt;dp[i])  </div><div class="line">            ans=dp[i];  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.7lf"</span>,ans);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 500010</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 2147483647</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> llinf 4000000000000000000ll</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> For(i, x, y) for(int i = (x); i &lt; (y); i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, x, y) for(int i = (x); i &lt;= (y); i ++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i, x, y) for(int i = (x); i &gt;= (y); i --)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> ch=getchar();<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">llread</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> ch=getchar();LL x=<span class="number">0</span>,f=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(<span class="string">'0'</span>&lt;=ch&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[M];</div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line"><span class="keyword">int</span> Size[M], fa[M], mx[M];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    G[x].push_back(y);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">get_size</span><span class="params">()</span></span>&#123;</div><div class="line">    rep(i, <span class="number">1</span>, n) Size[i] = <span class="number">1</span>;</div><div class="line">    drep(i, n, <span class="number">1</span>) Size[fa[i]] += Size[i];</div><div class="line">    rep(i, <span class="number">1</span>, n) Size[i] --;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</div><div class="line">    rep(i, <span class="number">1</span>, n) mx[i] = <span class="number">0</span>;</div><div class="line">    drep(i, n, <span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(Size[i]) <span class="keyword">if</span>(mx[i] / (<span class="keyword">double</span>)Size[i] - x &gt; eps) mx[i] = Size[i] + <span class="number">1</span>;</div><div class="line">        mx[i] = max(mx[i], <span class="number">1</span>);</div><div class="line">        mx[fa[i]] = max(mx[fa[i]], mx[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(mx[<span class="number">1</span>] &lt;= k) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//freopen("0input.in", "r", stdin);</span></div><div class="line">    n = read(), k = read();</div><div class="line">    rep(i, <span class="number">2</span>, n) add(fa[i] = read(), i);</div><div class="line">    get_size();<span class="comment">// rep(i, 1, n) printf("%d\n", Size[i]);</span></div><div class="line">    <span class="keyword">double</span> l = <span class="number">0.0</span>, r = <span class="number">1.0</span>, ans;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">abs</span>(r - l) &gt; eps)&#123;</div><div class="line">        <span class="keyword">double</span> mid = (l + r) / <span class="number">2.0</span>;</div><div class="line">        <span class="keyword">if</span>(check(mid)) r = (ans = mid);</div><div class="line">        <span class="keyword">else</span> l = mid;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.9lf"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>p.s. 其实上面两个代码都不是我写的。。。我写的二分卡不过去。。。</p>
<p><title>Problem 3004. -- 吊灯</title><center><h2>3004: 吊灯</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>123&nbsp;&nbsp;<span class="green">Solved: </span>64<br>[<a href="submitpage.php?id=3004">Submit</a>][<a href="problemstatus.php?id=3004">Status</a>][<a href="bbs.php?id=3004">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Alice家里有一盏很大的吊灯。所谓吊灯，就是由很多个灯泡组成。只有一个灯泡是挂在天花板上的，剩下的灯泡都是挂在其他的灯泡上的。也就是说，整个吊灯实际上类似于一棵树。其中编号为1的灯泡是挂在天花板上的，剩下的灯泡都是挂在编号小于自己的灯泡上的。</span></div><p></p>
<div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 现在，Alice想要办一场派对，她想改造一下这盏吊灯，将灯泡换成不同的颜色。她希望相同颜色的灯泡都是相连的，并且每一种颜色的灯泡个数都是相同的。</span></div>
<div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Alice希望你能告诉她，总共有哪些方案呢？</span></div>
<div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Alice是一个贪心的孩子，如果她发现方案不够多，或者太多了，就会很不高兴，于是她会尝试调整。对于编号为x(x&ne;1)的灯泡，如果原来是挂在编号为f[x]的灯泡上，那么Alice会把第x个灯泡挂到第 ( f[x] + 19940105 ) mod (x-1) + 1 个灯泡上。</span></div>
<div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 由于九在古汉语中表示极大的数，于是，Alice决定只调整9次。对于原始状态和每一次调整过的状态，Alice希望你依次告诉她每种状态下有哪些方案。</span></div></div><h3>Input</h3><div class="content"><div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 第一行一个整数n，表示灯泡的数量。</span></div>
<div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 接下来一行，有n-1个整数Ui，第i个数字表示第i+1个灯泡挂在了Ui个的下面。保证编号为1的灯泡是挂在天花板上的。数字之间用逗号&lsquo;，&rsquo;隔开且最后一个数字后面没有逗号。</span></div></div><h3>Output</h3><div class="content"><div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 对于10种状态下的方案，需要按照顺序依次输出。</span></div>
<div style="text-indent: 21pt"><span style="font-size: medium">对于每一种状态，需要先输出单独的一行，表示状态编号，如样例所示。</span></div>
<div style="text-indent: 21pt"><span style="font-size: medium">之后若干行，每行1个整数，表示划分方案中每种颜色的灯泡个数。</span></div>
<div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 按升序输出。</span></div>
<div><span style="font-size: medium">&nbsp;</span></div></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">6<br>
1,2,3,4,5<br>
 <br>
</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">Case #1:<br>
1<br>
2<br>
3<br>
6<br>
Case #2:<br>
1<br>
2<br>
6<br>
Case #3:<br>
1<br>
3<br>
6<br>
Case #4:<br>
1<br>
3<br>
6<br>
Case #5:<br>
1<br>
3<br>
6<br>
Case #6:<br>
1<br>
2<br>
6<br>
Case #7:<br>
1<br>
2<br>
3<br>
6<br>
Case #8:<br>
1<br>
6<br>
Case #9:<br>
1<br>
2<br>
6<br>
Case #10:<br>
1<br>
3<br>
6<br>
</span></div><h3>HINT</h3>
            <div class="content"><p></p><p><br><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 对于100%的数据，n&lt;=1.2*106。</p><p></p></div><h3>Source</h3>
            <div class="content"><p><a href="problemset.php?search="></a></p></div>


<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>树</li>
<li>划分问题</li>
<li>思维题</li>
</ul>
<hr>
<h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>树上等大小划分问题</strong></p>
<p>前几天noip模拟赛几乎一毛一样的题。。。</p>
<p>首先可以知道，对于一种大小，如果可行，则只有一种安排的方案</p>
<p>然后，如果存在一个结点的所有儿子结点的子树大小模块大小的和大于这个结点的子树大小模块大小的值，那么无解</p>
<p>进一步观察，我们可以发现，如果一个结点的子树可以被正好地划分为一些大小为块大小的块，那么这个点的子树大小一定是块大小的倍数</p>
<p>所以，我们只要保证这样的结点的数量大于点等于块的数量就行了（其实不能大于），因为每一个块，都对应且仅对应一个这样的结点</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><p>注意不要使用DFS来求siz数组，否则会T。。。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1300005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m, k;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> save[maxn];</div><div class="line"><span class="keyword">int</span> ct = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">preprocess</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> con = (<span class="keyword">int</span>) <span class="built_in">sqrt</span>(n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= con; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) save[ct++] = i, save[ct++] = n / i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (con * con == n) ct--;</div><div class="line">    sort(save, save + ct);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"><span class="keyword">int</span> siz[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    siz[x] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == f[x]) <span class="keyword">continue</span>;</div><div class="line">        DFS(op);</div><div class="line">        siz[x] += siz[op];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(h, <span class="number">0</span>, <span class="keyword">sizeof</span>(h));</div><div class="line">    cnt = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) Add_Edge(i, f[i]);</div><div class="line">    <span class="comment">//DFS(1);</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) siz[i] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">2</span>; i--) siz[f[i]] += siz[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span>(num));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) num[siz[i]]++;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ct; i++)&#123;</div><div class="line">        <span class="keyword">int</span> now = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j += save[i]) now += num[j];</div><div class="line">        <span class="keyword">if</span> (now &gt;= n / save[i]) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, save[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">transform</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) </div><div class="line">        f[i] = (f[i] + <span class="number">19940105</span>) % (i - <span class="number">1</span>) + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    read(n);</div><div class="line">    preprocess();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) read(f[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, k + <span class="number">1</span>);</div><div class="line">        init();</div><div class="line">        work();</div><div class="line">        transform();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 2662. -- [BeiJing wc2012]冻结 </title><center><h2>2662: [BeiJing wc2012]冻结 </h2><span class="green">Time Limit: </span>3 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>1010&nbsp;&nbsp;<span class="green">Solved: </span>544<br>[<a href="submitpage.php?id=2662">Submit</a>][<a href="problemstatus.php?id=2662">Status</a>][<a href="bbs.php?id=2662">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p><span style="font-size: medium">&nbsp; &ldquo;我要成为魔法少女！&rdquo;&nbsp;&nbsp; <br>
&nbsp; &ldquo;那么，以灵魂为代价，你希望得到什么？&rdquo; <br>
&ldquo;我要将有关魔法和奇迹的一切，封印于卡片之中&bdquo;&bdquo;&rdquo;&nbsp;&nbsp; <br>
&nbsp;&nbsp; <br>
&nbsp; 在这个愿望被实现以后的世界里，人们享受着魔法卡片（SpellCard，又名符<br>
卡）带来的便捷。 <br>
&nbsp;<br>
现在，不需要立下契约也可以使用魔法了！你还不来试一试？ <br>
&nbsp; 比如，我们在魔法百科全书（Encyclopedia&nbsp; of&nbsp; Spells）里用&ldquo;freeze&rdquo;作为关<br>
键字来查询，会有很多有趣的结果。 <br>
例如，我们熟知的Cirno，她的冰冻魔法当然会有对应的 SpellCard 了。 当然，<br>
更加令人惊讶的是，居然有冻结时间的魔法，Cirno 的冻青蛙比起这些来真是小<br>
巫见大巫了。 <br>
这说明之前的世界中有很多魔法少女曾许下控制时间的愿望，比如 Akemi <br>
Homura、Sakuya Izayoi、&bdquo;&bdquo; <br>
当然，在本题中我们并不是要来研究历史的，而是研究魔法的应用。 <br>
&nbsp;<br>
我们考虑最简单的旅行问题吧：&nbsp; 现在这个大陆上有 N 个城市，M 条双向的<br>
道路。城市编号为 1~N，我们在 1 号城市，需要到 N 号城市，怎样才能最快地<br>
到达呢？ <br>
&nbsp; 这不就是最短路问题吗？我们都知道可以用 Dijkstra、Bellman-Ford、<br>
Floyd-Warshall等算法来解决。 <br>
&nbsp; 现在，我们一共有 K 张可以使时间变慢 50%的 SpellCard，也就是说，在通<br>
过某条路径时，我们可以选择使用一张卡片，这样，我们通过这一条道路的时间<br>
就可以减少到原先的一半。需要注意的是： <br>
&nbsp; 1. 在一条道路上最多只能使用一张 SpellCard。 <br>
&nbsp; 2. 使用一张SpellCard 只在一条道路上起作用。 <br>
&nbsp; 3. 你不必使用完所有的 SpellCard。 <br>
&nbsp;&nbsp; <br>
&nbsp; 给定以上的信息，你的任务是：求出在可以使用这不超过 K 张时间减速的<br>
SpellCard 之情形下，从城市1 到城市N最少需要多长时间。 </span></p><p></p>
<p></p><p></p></div><h3>Input</h3><div class="content"><p><span style="font-size: medium"><br>
第一行包含三个整数：N、M、K。 <br>
接下来 M 行，每行包含三个整数：Ai、Bi、Timei，表示存在一条 Ai与 Bi之<br>
间的双向道路，在不使用 SpellCard 之前提下，通过它需要 Timei的时间。 </span></p><p></p>
<p></p><p></p></div><h3>Output</h3><div class="content"><p><span style="font-size: medium">输出一个整数，表示从1 号城市到 N号城市的最小用时。 </span></p><p></p>
<p></p><p></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">4 4 1 <br>
1 2 4 <br>
4 2 6 <br>
1 3 8 <br>
3 4 8 <br>
</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">7 <br>
【样例1 解释】 <br>
  在不使用 SpellCard 时，最短路为 1à2à4，总时间为 10。现在我们可<br>
以使用 1 次 SpellCard，那么我们将通过 2à4 这条道路的时间减半，此时总<br>
时间为7。 <br>
</span></div><h3>HINT</h3>
            <div class="content"><p></p><p>对于100%的数据：1&nbsp; &le;&nbsp; K&nbsp; &le;&nbsp; N &le;&nbsp; 50，M&nbsp; &le;&nbsp; 1000。 <br><br>
&nbsp; 1&le;&nbsp; Ai，Bi &le;&nbsp; N，2 &le;&nbsp; Timei&nbsp; &le;&nbsp; 2000。 <br><br>
为保证答案为整数，保证所有的 Timei均为偶数。 <br><br>
所有数据中的无向图保证无自环、重边，且是连通的。&nbsp;&nbsp;&nbsp;<br><br>
&nbsp;</p>&lt;/p&gt;&lt;/div&gt;<h3>Source</h3><br>            <div class="content"><p><a href="problemset.php?search="></a></p></div><p></p>
<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>图论</li>
<li>最短路</li>
<li>拆点法</li>
</ul>
<hr>
<h2 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>拆点/边法问题</strong></p>
<p>这道题一开始SB直接写的最短路，然后把最短路上的边由大到小进行处理，很显然这样是错的对吧。。。</p>
<p>但是不知为什么，刚发现这样是错误的，就想到了正解。。。可能突然发现边减半以后就是那个样子，不受其他条件影响，所以突然想这样搞，看数据范围好像也确实是这样搞的。。。</p>
<p>正解就是我们把点拆开，使点拥有当前经过了多少减半边的信息，这样就会有（$n * ( k + 1)$)个点，然后随便连一下边，本题就搞定了。。。</p>
<p>所以有的时候灵感就在于一瞬间。。。</p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m, k;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to, len;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to, <span class="keyword">int</span> len) : next(next), to(to), len(len)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to, <span class="keyword">int</span> len)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to, len);</div><div class="line">    h[fr] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">add</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x, y, len;</div><div class="line">    add(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> len) : x(x), y(y), len(len)&#123;&#125;</div><div class="line">    add()&#123;&#125;</div><div class="line">&#125;save[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; spfa;</div><div class="line">    spfa.push(<span class="number">0</span>);</div><div class="line">    vis[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    d[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n * (k + <span class="number">1</span>); i++) d[i] = INF;</div><div class="line">    <span class="keyword">while</span> (!spfa.empty())&#123;</div><div class="line">        <span class="keyword">int</span> op = spfa.front(); spfa.pop();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[op]; i; i = e[i].next)&#123;</div><div class="line">            <span class="keyword">int</span> k = e[i].to;</div><div class="line">            <span class="keyword">if</span> (d[k] &gt; d[op] + e[i].len)&#123;</div><div class="line">                d[k] = d[op] + e[i].len;</div><div class="line">                <span class="keyword">if</span> (!vis[k]) spfa.push(k), vis[k] = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        vis[op] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> minnum = INF;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; i++) minnum = min(minnum, d[(n - <span class="number">1</span>) * (k + <span class="number">1</span>) + i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, minnum);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="keyword">int</span> op1 = (save[i].x - <span class="number">1</span>) * (k + <span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> op2 = (save[i].y - <span class="number">1</span>) * (k + <span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num = <span class="number">0</span>; num &lt; k; num++)&#123;</div><div class="line">            Add_Edge(op1 + num, op2 + num + <span class="number">1</span>, save[i].len &gt;&gt; <span class="number">1</span>);</div><div class="line">            Add_Edge(op2 + num, op1 + num + <span class="number">1</span>, save[i].len &gt;&gt; <span class="number">1</span>);</div><div class="line">            Add_Edge(op1 + num, op2 + num, save[i].len);</div><div class="line">            Add_Edge(op2 + num, op1 + num, save[i].len);</div><div class="line">        &#125;</div><div class="line">        Add_Edge(op1 + k, op2 + k, save[i].len);</div><div class="line">        Add_Edge(op2 + k, op1 + k, save[i].len);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y, w;</div><div class="line">    read(n), read(m), read(k);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        read(x), read(y), read(w);</div><div class="line">        save[i] = add(x, y, w);</div><div class="line">    &#125;</div><div class="line">    build();</div><div class="line">    SPFA();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 4723. -- [POI2017]Flappy Bird</title><center><h2>4723: [POI2017]Flappy Bird</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>394&nbsp;&nbsp;<span class="green">Solved: </span>160<br>[<a href="submitpage.php?id=4723">Submit</a>][<a href="problemstatus.php?id=4723">Status</a>][<a href="bbs.php?id=4723">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>《飞扬的小鸟》是一款风靡的小游戏。在游戏中，小鸟一开始位于(0,0)处，它的目标是飞到横坐标为X的某个位置</div><p></p>
<div>上。每一秒，你可以选择点击屏幕，那么小鸟会从(x,y)飞到(x+1,y+1)，或者不点击，那么小鸟会飞到(x+1,y-1)</div>
<div>。在游戏中还有n个障碍物，用三元组(x[i],a[i],b[i])描述，表示在直线x=x[i]上，y&lt;=a[i]或者y&gt;=b[i]的部分</div>
<div>都是障碍物，碰到或者擦边都算游戏失败。请求出小鸟从(0,0)飞到目的地最少需要点击多少次屏幕。</div>
<div></div>
<p></p></div><h3>Input</h3><div class="content"><div>第一行包含两个整数n(0&lt;=n&lt;=500000),X(1&lt;=n&lt;=10^9)。</div>
<div>接下来n行，每行三个整数x[i],a[i],b[i](0&lt;x[i]&lt;X，-10^9&lt;=a[i]&lt;b[i]&lt;=10^9)。</div>
<div>数据保证x[i]&lt;x[i+1]。</div>
<div></div>
<p></p></div><h3>Output</h3><div class="content"><div>如果无论如何都飞不到目的地，输出NIE，否则输出点击屏幕的最少次数。</div>
<div></div>
<p></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">4 11<br>
4 1 4<br>
7 -1 2<br>
8 -1 3<br>
9 0 2</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">5</span></div><h3>HINT</h3>
            <div class="content"><p></p><p><img src="/JudgeOnline/upload/201611/flahint.png" width="314" height="187" alt=""></p><br>
<p></p><p></p></div><h3>Source</h3>
            <div class="content"><p><a href="problemset.php?search=鸣谢Claris上传">鸣谢Claris上传</a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>限制性问题</li>
<li>思维题</li>
</ul>
<hr>
<h2 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>上下界最优问题</strong></p>
<p>首先%%%JCY大佬直接用手机1A  Orz。。。</p>
<p>而我这垃圾最后写不过还去要的数据。。。</p>
<p>主要是想到把问题化成解析几何问题，求出直线方程，这样会方便许多，然后直接求出大于号形的可活动的范围，然后为了使点击次数最少，直接沿着界下面的那条边一直点即可</p>
<p>注意没有障碍物的情况，这是线段树会炸。。。然而本题其实后缀极值就可以。。。</p>
<p>除此以外还有挺多的情况，比如一开始就在界的外面什么的，这些都不成立</p>
<h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><p>注意：线段树不能在$n=0$的时候使用！！！<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, X;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">obj</span>&#123;</span></div><div class="line">    LL pos, up, low;</div><div class="line">    obj(LL pos, LL up, LL low) : pos(pos), up(up) ,low(low)&#123;&#125;</div><div class="line">    obj()&#123;&#125;</div><div class="line">&#125;save[maxn];</div><div class="line"></div><div class="line"></div><div class="line">LL maxnum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line">LL minnum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</div><div class="line">    maxnum[o] = max(maxnum[o &lt;&lt; <span class="number">1</span>], maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">    minnum[o] = min(minnum[o &lt;&lt; <span class="number">1</span>], minnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) &#123;</div><div class="line">        maxnum[o] = save[l].up - save[l].pos + <span class="number">1</span>;</div><div class="line">        minnum[o] = save[l].low + save[l].pos - <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    init(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    init(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">find_min</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy) <span class="keyword">return</span> minnum[o];</div><div class="line">    <span class="keyword">int</span> mid =((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    LL ans = INF;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) ans = min(ans, find_min(l, mid, o &lt;&lt; <span class="number">1</span>));</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) ans = min(ans, find_min(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>));</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">find_max</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy) <span class="keyword">return</span> maxnum[o];</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    LL ans = -INF;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) ans = max(ans, find_max(l, mid, o &lt;&lt; <span class="number">1</span>));</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) ans = max(ans, find_max(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>));</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    LL now = <span class="number">0</span>;</div><div class="line">    LL nowy = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        qx = i, qy = n;</div><div class="line">        <span class="keyword">int</span> mx = find_max(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> mi = find_min(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (now + mx &gt; nowy || nowy &gt; -now + mi) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"NIE"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ((LL)mi - mx &lt; (save[i].pos &lt;&lt; <span class="number">1</span>)) &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"NIE"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (mi - mx == (save[i].pos &lt;&lt; <span class="number">1</span>))&#123;</div><div class="line">            <span class="keyword">if</span> ((save[i].pos + save[i].pos + mx) &amp; <span class="number">1</span>) &#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"NIE"</span>);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        LL rec = (nowy - (now + mx)) &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (now + rec &gt; save[i].pos)&#123;</div><div class="line">            nowy -= save[i].pos - now;</div><div class="line">            now = save[i].pos;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            now += rec;</div><div class="line">            nowy -= rec;</div><div class="line">            ans += save[i].pos - now;</div><div class="line">            nowy += save[i].pos - now;</div><div class="line">            now = save[i].pos;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (ch != <span class="string">'-'</span> &amp;&amp; !<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10L</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    read(n), read(X);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">       read(save[i].pos), read(save[i].up), read(save[i].low);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"0"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    init(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><title>Problem 4724. -- [POI2017]Podzielno</title><center><h2>4724: [POI2017]Podzielno</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>293&nbsp;&nbsp;<span class="green">Solved: </span>129<br>[<a href="submitpage.php?id=4724">Submit</a>][<a href="problemstatus.php?id=4724">Status</a>][<a href="bbs.php?id=4724">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>B进制数，每个数字i(i=0,1,...,B-1)有a[i]个。你要用这些数字组成一个最大的B进制数X(不能有前导零，不需要</div><p></p>
<div>用完所有数字)，使得X是B-1的倍数。q次询问，每次询问X在B进制下的第k位数字是什么(最低位是第0位)。</div>
<p></p></div><h3>Input</h3><div class="content"><div>第一行包含两个正整数B(2&lt;=B&lt;=10^6),q(1&lt;=q&lt;=10^5)。</div>
<div>第二行包含B个正整数a[0],a[1],a[2],...,a[B-1](1&lt;=a[i]&lt;=10^6)。</div>
<div>接下来q行，每行一个整数k(0&lt;=k&lt;=10^18)，表示一个询问。</div>
<p></p></div><h3>Output</h3><div class="content"><div>输出q行，每行一个整数，依次回答每个询问，如果那一位不存在，请输出-1。</div>
<p></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">3 3<br>
1 1 1<br>
0<br>
1<br>
2</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">0<br>
2<br>
-1</span></div><h3>HINT</h3>
            <div class="content"><p></p></div><h3>Source</h3>
            <div class="content"><p><a href="problemset.php?search=鸣谢Claris上传">鸣谢Claris上传</a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>进制问题</li>
<li>思维题</li>
</ul>
<hr>
<h2 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>进制问题</strong></p>
<p>初始想法，题目要求即是所有位上的数字之和为$B-1$的倍数，所以我们肯定是要先让位数最多，然后再让大的数字尽可能多，但是这样要考虑的就太多了，不好处理</p>
<p>我们先把每个数都预留一个出去，这样剩下的数就全都可以选了，因为余数可以用预留的数抵消，剩下的数字两两配对</p>
<p>这样，我们就至少可以选$n - 1$个数了，如果所有数字的和是$B-1$的倍数，那么显然全都可以选</p>
<p>所以我们也同时证明了这样选一定是最优的（构法证明），因为所有数字的和不是$B-1$的倍数时，本来就是至多选$n-1$个</p>
<p>所以数字也就随之固定了，直接前缀和处理二分查找即可回答询问</p>
<h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line">LL line[maxn];</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    LL x;</div><div class="line">    read(n), read(k);</div><div class="line">    LL sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) read(line[i]), sum = (sum + line[i] * i % (n - <span class="number">1</span>)) % (n - <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (sum) line[sum]--;</div><div class="line">    <span class="comment">/*for (int i = n - 1; i &gt;= 0; i--)&#123;</span></div><div class="line">        sline[i] = line[i] + sline[i + 1];</div><div class="line">    &#125;</div><div class="line">    reverse(sline, sline + n);</div><div class="line">    for (int i = 1; i &lt;= k; i++)&#123;</div><div class="line">        scanf("%d", &amp;x);</div><div class="line">        printf("%d\n", n - 1 - (lower_bound(sline, sline + n, x) - sline));</div><div class="line">    &#125;*/</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) line[i] += line[i - <span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</div><div class="line">        read(x);</div><div class="line">        x++;</div><div class="line">        <span class="keyword">int</span> pos = lower_bound(line, line + n, x) - line;</div><div class="line">        <span class="keyword">if</span> (pos &gt;= n) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, pos);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 4407. -- 于神之怒加强版</title><center><h2>4407: 于神之怒加强版</h2><span class="green">Time Limit: </span>80 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>512 MB<br><span class="green">Submit: </span>779&nbsp;&nbsp;<span class="green">Solved: </span>368<br>[<a href="submitpage.php?id=4407">Submit</a>][<a href="problemstatus.php?id=4407">Status</a>][<a href="bbs.php?id=4407">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>给下N,M,K.求</div><p></p>
<div><img width="500" height="54" alt="" src="/JudgeOnline/upload/201602/aa.png"></div>
<div></div>
<div></div>
<p></p></div><h3>Input</h3><div class="content"><div>输入有多组数据，输入数据的第一行两个正整数T,K，代表有T组数据，K的意义如上所示，下面第二行到第T+1行，每行为两个正整数N,M，其意义如上式所示。</div>
<p></p></div><h3>Output</h3><div class="content"><div>如题</div>
<p></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">1 2<br>
3 3 </span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">20<br>
</span></div><h3>HINT</h3>
            <div class="content"><p></p><p>1&lt;=N,M,K&lt;=5000000,1&lt;=T&lt;=2000</p><br>
<p>题解：<a href="/JudgeOnline/upload/201603/4407.rar">JudgeOnline/upload/201603/4407.rar</a></p><br>
<p></p><p></p></div><h3>Source</h3>
            <div class="content"><p><a href="problemset.php?search=命题人：成都七中张耀楠，鸣谢excited上传。">命题人：成都七中张耀楠，鸣谢excited上传。</a></p></div>

<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>数学</li>
<li>数论</li>
<li>莫比乌斯反演</li>
</ul>
<hr>
<h2 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>莫比乌斯反演基础题</strong></p>
<p>一道水题，只要直接莫比乌斯反演套路即可解决，如果觉得本题有难度，请移步<a href="https://goseqh.tk/2017/06/30/莫比乌斯反演总结/">《莫比乌斯反演总结》</a></p>
<p>其实只要想到那个大函数可以线性筛就行了，不懂的看一遍上面的总结然后自己推公式</p>
<p>然而忘了线性筛T了一发。。。</p>
<h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 5000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line">LL F[maxn];</div><div class="line">LL mi[maxn];</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">fast_power</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">1</span>, con = x;</div><div class="line">    <span class="keyword">while</span> (y)&#123;</div><div class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ans = ans * con % M;</div><div class="line">        con = con * con % M;</div><div class="line">        y &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    F[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i])&#123;</div><div class="line">            p[cnt++] = i;</div><div class="line">            F[i] = (fast_power(i, k) - <span class="number">1</span> + M) % M;</div><div class="line">            mi[i] = fast_power(i, k);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (p[j] * i &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * p[j]] = <span class="number">1</span>;</div><div class="line">            F[i * p[j]] = F[i] * F[p[j]] % M;</div><div class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) &#123;</div><div class="line">                F[i * p[j]] = F[i] * mi[p[j]] % M;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*for (int i = 1; i &lt; maxn; i++)&#123;</span></div><div class="line">        for (int j = 1; i * j &lt; maxn; j++)&#123;</div><div class="line">            F[i * j] = (F[i * j] + mu[i] * mi[j] % M) % M;</div><div class="line">        &#125;</div><div class="line">    &#125;*/</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) F[i] = (F[i] + F[i - <span class="number">1</span>]) % M;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= min(n, m); i++)&#123;</div><div class="line">        <span class="keyword">int</span> next = min(n / (n / i), m / (m / i));</div><div class="line">        ans = (ans + ((F[next] - F[i - <span class="number">1</span>]) % M + M) % M * (m / i) % M * (n / i) % M) % M;</div><div class="line">        i = next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> T, n, m;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;T, &amp;k);</div><div class="line">    init();</div><div class="line">    <span class="keyword">while</span> (T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        work(n, m);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 1922. -- [Sdoi2010]大陆争霸</title><center><h2>1922: [Sdoi2010]大陆争霸</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>64 MB<br><span class="green">Submit: </span>1965&nbsp;&nbsp;<span class="green">Solved: </span>869<br>[<a href="submitpage.php?id=1922">Submit</a>][<a href="problemstatus.php?id=1922">Status</a>][<a href="bbs.php?id=1922">Discuss</a>]</center></p><h3>Description</h3><div class="content">在一个遥远的世界里有两个国家：位于大陆西端的杰森国和位于大陆东端的
克里斯国。两个国家的人民分别信仰两个对立的神：杰森国信仰象征黑暗和毁灭
的神曾·布拉泽，而克里斯国信仰象征光明和永恒的神斯普林·布拉泽。 
幻想历 8012年 1月，杰森国正式宣布曾·布拉泽是他们唯一信仰的神，同
时开始迫害在杰森国的信仰斯普林·布拉泽的克里斯国教徒。 
幻想历 8012年 3月2日，位于杰森国东部小镇神谕镇的克里斯国教徒发动
起义。 
幻想历 8012年 3月7日，神谕镇的起义被杰森国大军以残酷手段镇压。 
幻想历 8012年 3月8日，克里斯国对杰森国宣战。由数十万大军组成的克
里斯军团开至两国边境，与杰森军团对峙。 
幻想历 8012年 4月，克里斯军团攻破杰森军团防线进入神谕镇，该镇幸存
的克里斯国教徒得到解放。 
战争随后进入胶着状态，旷日持久。战况惨烈，一时间枪林弹雨，硝烟弥漫，
民不聊生。 
幻想历 8012年 5月12日深夜，斯普林·布拉泽降下神谕：“Trust me, earn 
eternal life.”克里斯军团士气大增。作为克里斯军团的主帅，你决定利用这一机
会发动奇袭，一举击败杰森国。具体地说，杰森国有 N 个城市，由 M条单向道
路连接。神谕镇是城市 1而杰森国的首都是城市 N。你只需摧毁位于杰森国首都
的曾·布拉泽大神殿，杰森国的信仰，军队还有一切就都会土崩瓦解，灰飞烟灭。 
为了尽量减小己方的消耗，你决定使用自爆机器人完成这一任务。唯一的困
难是，杰森国的一部分城市有结界保护，不破坏掉结界就无法进入城市。而每个
城市的结界都是由分布在其他城市中的一些结界发生器维持的，如果想进入某个
城市，你就必须破坏掉维持这个城市结界的所有结界发生器。 
现在你有无限多的自爆机器人，一旦进入了某个城市，自爆机器人可以瞬间
引爆，破坏一个目标（结界发生器，或是杰森国大神殿），当然机器人本身也会
一起被破坏。你需要知道：摧毁杰森国所需的最短时间。 
 </div><h3>Input</h3><div class="content">第一行两个正整数 N, M。 
接下来 M行，每行三个正整数 ui, vi, wi，表示有一条从城市ui到城市 vi的单
向道路，自爆机器人通过这条道路需要 wi的时间。 
之后 N 行，每行描述一个城市。首先是一个正整数 li，维持这个城市结界所
使用的结界发生器数目。之后li个1~N 之间的城市编号，表示每个结界发生器的
位置。如果 Li = 0，则说明该城市没有结界保护，保证L1 = 0  。 </div><h3>Output</h3><div class="content">仅包含一个正整数 ，击败杰森国所需的最短时间。 </div><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">6 6 <br>
1 2 1 <br>
1 4 3 <br>
2 3 1 <br>
2 5 2 <br>
4 6 2 <br>
5 3 2 <br>
0 <br>
0 <br>
0 <br>
1 3 <br>
0 <br>
2 3 5 </span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">5<br>
<br>
<img border="0" src="images/1922.jpg"> </span></div><h3>HINT</h3><br>            <div class="content"><p>对于 20%的数据，满足 N≤15，M≤50； <br>
对于 50%的数据，满足 N≤500，M≤6,000； <br>
对于 100%的数据，满足 N≤3,000，M≤70,000，1≤wi≤108<br>
。 <br>
输入数据保证一定有解，且不会存在维持某个城市结界的结界发生器在这个<br>
城市内部。 <br>
连接两个城市的道路可能不止一条， 也可能存在一个城市自己到自己的道路。</p></div><h3>Source</h3><br>            <div class="content"><p><a href="problemset.php?search=第一轮Day1">第一轮Day1</a></p></div><p></p>
<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>图论</li>
<li>最短路</li>
<li>限制性问题</li>
</ul>
<hr>
<h2 id="题目分析-6"><a href="#题目分析-6" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>带限制最短路问题</strong></p>
<p>高二的小伙伴们做的题。。。</p>
<p>本题其实是不错的，可以很好地增进对各种最短路算法的深层理解</p>
<p>本题就是一个最短路，但是绝对不能用SPFA，因为SPFA会重复入队，这样用一个点更新被它搞掉结界的城市的距离的时候就不是它真正的最短距离，就会发生错误（除非每次入队都更新一遍，但是那样不太好是吧，复杂度比较玄学，反正我没写。。。）</p>
<p>所以，我们就要使用堆优化的Dijkstra解决本题，但是我们必须开两个距离数组，一个是它的可进入时间，另一个是抵达时间，这两个取MAX才是进入它的真正时间</p>
<p>如果我就是想开一个呢？为什么不行？</p>
<p>这是因为，一个城市可能它还没有被访问到，但是它的结界已经被干掉了，这时它的距离数组便是最后一个解放了它的城市的距离</p>
<p>但是在最短路更新到它的时候，我们又会把这个距离变小，并且难以维护抵达它的时间，这个问题好像很难解决，所以这样就发生了错误</p>
<p>同时，我们也能明白一个事实，Dijkstra每次更新的最短路的长度不一定是所有待更新的最短路中长度最短的</p>
<p>最后还有一点，用STL代替当作堆的时候，我们不能直接插入数字，而是要维护结构体，因为如果插入数字，那么数字的排序方法一定关联了外部数组，而外部数组又常常是变化的（比如距离数组），所以就会发生STL内部的错误，而且这样的错误很难被发现，所以一定要小心</p>
<p>总结一下，本题的知识点有如下三点：</p>
<ul>
<li>SPFA最短路更新时会重复入队，所以距离数组在算法结束之前并非真正的最短距离</li>
<li>Dijkstra算法每次更新的最短路的长度不一定是所有待更新的最短路中长度最短的</li>
<li>使用STL对数据进行维护时，尽量不要插入排序方法与外部元素关联的元素，否则会发生内部错误</li>
</ul>
<p>还是很不错的O(∩_∩)O~</p>
<h2 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 3005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000000000000005L</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Pii pair<span class="meta-string">&lt;LL, LL&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> deg[maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to, len;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to, <span class="keyword">int</span> len) : next(next), to(to), len(len)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxm &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to, <span class="keyword">int</span> len)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to, len);</div><div class="line">    h[fr] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL d[maxn];</div><div class="line">LL d2[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; save[maxn];</div><div class="line"></div><div class="line">priority_queue&lt;Pii, <span class="built_in">vector</span>&lt;Pii&gt;, greater&lt;Pii&gt; &gt; heap;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) d[i] = INF;</div><div class="line">    heap.push(Pii(<span class="number">0</span>, <span class="number">1</span>));</div><div class="line">    <span class="keyword">while</span> (!heap.empty())&#123;</div><div class="line">        <span class="keyword">int</span> op = heap.top().second;heap.pop();</div><div class="line">        <span class="keyword">if</span> (vis[op]) <span class="keyword">continue</span>;</div><div class="line">        vis[op] = <span class="number">1</span>;</div><div class="line"></div><div class="line">        LL mx = max(d[op], d2[op]);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[op]; i; i = e[i].next)&#123;</div><div class="line">            <span class="keyword">int</span> k = e[i].to;</div><div class="line">            <span class="keyword">if</span> (d[k] &gt; mx + e[i].len)&#123;</div><div class="line">                d[k] = mx + e[i].len;</div><div class="line">                <span class="keyword">if</span> (deg[k]) <span class="keyword">continue</span>;</div><div class="line">                heap.push(Pii(max(d[k], d2[k]), k));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; save[op].size(); j++)&#123;</div><div class="line">            deg[save[op][j]]--;</div><div class="line">            d2[save[op][j]] = max(d2[save[op][j]], mx);</div><div class="line">            <span class="keyword">if</span> (!deg[save[op][j]]) heap.push(Pii(max(d[save[op][j]], d2[save[op][j]]), save[op][j]));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, max(d[n], d2[n]));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y, w, op;</div><div class="line">    read(n), read(m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        read(x), read(y), read(w);</div><div class="line">        <span class="keyword">if</span> (x == y) <span class="keyword">continue</span>;</div><div class="line">        Add_Edge(x, y, w);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        read(deg[i]);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; deg[i]; j++)&#123;</div><div class="line">            read(op);</div><div class="line">            save[op].pb(i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    Dijkstra();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 1168. -- [Baltic2008]Gloves</title><center><h2>1168: [Baltic2008]Gloves</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>413&nbsp;&nbsp;<span class="green">Solved: </span>120<br>[<a href="submitpage.php?id=1168">Submit</a>][<a href="problemstatus.php?id=1168">Status</a>][<a href="bbs.php?id=1168">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p>手套被放在了两个抽屉里, 所有的左手套放在左边的抽屉里, 所有的右手套放在右边的抽屉里．手套一共有N种颜色, 已知两个抽屉每种颜色的手套各有多少只, 如果随便在左边拿一只, 右边拿一只 很可能会造成拿到一只红色的左手套和一只蓝色右手套... 现想知道应该从左边的抽屉取出多少只左手套(设为x) 右边的抽屉取出多少只右手套(设为y), 满足至少可以找到一对匹配的手套(即颜色相同), 并且x + y最小 如果有多个(x, y)满足x + y最小, 你希望满足x尽可能的小不妨设 每个抽屉里每只手套被取出的概率是等价的．输入文件输入文件第一行中有一个正整数N,表示颜色的种数．第二行有N个非负整数, 表示左抽屉中每种颜色的左手套的个数．第三行有N个非负整数, 表示右抽屉中每种颜色的右手套的个数．输出文件你需要输出满足题目条件的(x, y)．</p></div><h3>Input</h3><div class="content"><p>输入文件第一行中有一个正整数N,表示颜色的种数．第二行有N个非负整数, 表示左抽屉中每种颜色的左手套的个数．第三行有N个非负整数, 表示右抽屉中每种颜色的右手套的个数．</p></div><h3>Output</h3><div class="content"><p>输出满足题目条件的(x, y)．</p></div><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">4<br>
0 7 1 6<br>
1 5 0 6</span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">2 8</span></div><h3>HINT</h3><br>            <div class="content"><p></p><p>100%的测试数据, N &lt;= 20, 0 &lt;= ai, bi &lt;= 108．<br><br>
</p><p></p></div><h3>Source</h3><br>            <div class="content"><p><a href="problemset.php?search="></a></p></div><p></p>
<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>凸壳扫描</li>
<li>单调栈</li>
</ul>
<hr>
<h2 id="题目分析-7"><a href="#题目分析-7" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>凸壳扫描问题</strong></p>
<p>看到本题时内心一惊，这。。。这不是抽屉原理吗？？？那应该非常的水吧？？？</p>
<p>然而本题卡了半天，才知道世界上还有这么多变态的题目</p>
<p>本题题解大概就是把各种颜色分成两个集合，然后用单调栈扫描</p>
<p>但其实有着无数的细节。。。内心是崩溃的。。。需要绕好半天才能想明白</p>
<p>把题解挂上吧：<br>

	<div class="row">
    <embed src="booklet.pdf" width="120%" height="660" type="application/pdf">
	</div>


</p>
<h2 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;  </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;  </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;  </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span><span class="keyword">int</span> x,y;&#125;p[<span class="number">1</span>&lt;&lt;<span class="number">20</span>|<span class="number">1</span>];  </div><div class="line"><span class="keyword">int</span> n,a[<span class="number">21</span>],b[<span class="number">21</span>],cnt,q[<span class="number">1</span>&lt;&lt;<span class="number">20</span>|<span class="number">1</span>],t=<span class="number">1</span>,x,sa,sb;  </div><div class="line">LL s=<span class="number">1e10</span>;  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">if</span>(x==n+<span class="number">1</span>)&#123;p[++cnt].x=l,p[cnt].y=r;<span class="keyword">return</span>;&#125;  </div><div class="line">    dfs(x+<span class="number">1</span>,l+a[x],r),dfs(x+<span class="number">1</span>,l,r+b[x]);  </div><div class="line">&#125;  </div><div class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(point a,point b)&#123;<span class="keyword">return</span> a.x==b.x?a.y&gt;b.y:a.x&lt;b.x;&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);  </div><div class="line">    <span class="keyword">int</span> tot=n; n=<span class="number">0</span>;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)  </div><div class="line">    <span class="keyword">if</span>(!a[i]||!b[i]) sa+=a[i],sb+=b[i];  </div><div class="line">    <span class="keyword">else</span> a[++n]=a[i],b[n]=b[i];  </div><div class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);  </div><div class="line">    sort(p+<span class="number">1</span>,p+cnt+<span class="number">1</span>);  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">while</span>(t&amp;&amp;p[q[t]].y&lt;=p[i].y)t--;  </div><div class="line">        q[++t]=i;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t;i++)  </div><div class="line">    &#123;  </div><div class="line">        LL tmp=(LL)(p[q[i<span class="number">-1</span>]].x+p[q[i]].y+<span class="number">2</span>);  </div><div class="line">        <span class="keyword">if</span>(tmp&lt;s)s=tmp,x=p[q[i<span class="number">-1</span>]].x+<span class="number">1</span>;  </div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tmp==s&amp;&amp;p[q[i<span class="number">-1</span>]].x+<span class="number">1</span>&lt;x)x=p[q[i<span class="number">-1</span>]].x+<span class="number">1</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %lld\n"</span>,x+sa,s-(LL)x+(LL)sb);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 1340. -- [Baltic2007]Escape逃跑问题</title><center><h2>1340: [Baltic2007]Escape逃跑问题</h2><span class="green">Time Limit: </span>5 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>323&nbsp;&nbsp;<span class="green">Solved: </span>145<br>[<a href="submitpage.php?id=1340">Submit</a>][<a href="problemstatus.php?id=1340">Status</a>][<a href="bbs.php?id=1340">Discuss</a>]</center></p><h3>Description</h3><div class="content">战犯们企图逃离监狱，他们详细地计划了如何逃出监狱本身，逃出监狱之后他们希望在附近的一个村子里找到掩护。村子（下图中的B）和监狱（图中的A）中间有一个峡谷，这个峡谷也是有士兵守卫的。守卫峡谷的士兵们坐在岗哨上很少走动，每个士兵的观察范围是100米。士兵所处位置决定了战犯们能否安全通过峡谷，安全通过的条件就是在任何时刻战犯们距离最近的士兵大于100米。<br>给定峡谷的长、宽和每个士兵在峡谷中的坐标，假定士兵的位置一直保持不变，请你写一个程序计算战犯们能否不被士兵发现，顺利通过峡谷。如果不能，那么战犯们最少需要消灭几个士兵才能安全通过峡谷（无论士兵是否被另一个士兵看到，他都可以被消灭）。<p></p>
<p><img border="0" src="images/1340.jpg"><br>&lt;/div&gt;</p><h3>Input</h3><div class="content">第一行有三个整数L、W和N，分别表示峡谷的长度、宽度和士兵的人数。接下来的N行，每行两个整数Xi和Yi，表示第i个士兵在峡谷的坐标（0 <= 0="" xi="" <="L," 0)，东北角坐标为(l,="" w)，见上图。注意：通过峡谷可以从(0,="" ys)（0="" ye）（0="" ye不一定是整数。="" div=""><h3>Output</h3><div class="content">只有一行，为一个整数，即安全通过峡谷需要消灭的士兵的人数，如果不需要消灭任何士兵，则输出0。
</div><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">130 340 5<br>
10 50<br>
130 130<br>
70 170<br>
0 180<br>
60 260<br>
</span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">1</span></div><h3>HINT</h3><br>            <div class="content"><p>1 <= 1="" w="" <="50,000"></=></p></div><h3>Source</h3><br>            <div class="content"><p><a href="problemset.php?search="></a></p></div><p></p>
<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>图论</li>
<li>网络流</li>
<li>最小割</li>
</ul>
<hr>
<h2 id="题目分析-8"><a href="#题目分析-8" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>二维图上下可达性问题</strong></p>
<p>本题思路与LNOI某年的题目比较相似，就是求二维图的上下可达性问题，直接跑网络流的最小割即可解决</p>
<p>注意：观察范围100米，那么相距200米就会有视野相交部分。。。</p>
<h2 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, s, t;</div><div class="line"><span class="keyword">int</span> x[maxn];</div><div class="line"><span class="keyword">int</span> y[maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to, flow;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to, <span class="keyword">int</span> flow) : next(next), to(to), flow(flow)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxm &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> flow)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[x], y, flow);</div><div class="line">    h[x] = cnt;</div><div class="line">    e[++cnt] = edge(h[y], x, <span class="number">0</span>);</div><div class="line">    h[y] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; bfs;</div><div class="line">    bfs.push(s);</div><div class="line">    <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span>(d));</div><div class="line">    <span class="keyword">while</span> (!bfs.empty())&#123;</div><div class="line">        <span class="keyword">int</span> op = bfs.front();bfs.pop();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[op]; i; i = e[i].next)&#123;</div><div class="line">            <span class="keyword">if</span> (!e[i].flow) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> k = e[i].to;</div><div class="line">            <span class="keyword">if</span> (k == s || d[k]) <span class="keyword">continue</span>;</div><div class="line">            d[k] = d[op] + <span class="number">1</span>;</div><div class="line">            bfs.push(k);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (d[t]) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> a)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == t) <span class="keyword">return</span> a;</div><div class="line">    <span class="keyword">int</span> rest = a;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span> (!e[i].flow) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (d[op] != d[x] + <span class="number">1</span>) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> k = DFS(op, min(e[i].flow, rest));</div><div class="line">        rest -= k;</div><div class="line">        e[i].flow -= k;</div><div class="line">        e[i ^ <span class="number">1</span>].flow += k;</div><div class="line">        <span class="keyword">if</span> (!rest) <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a - rest;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dinic</span><span class="params">(<span class="keyword">int</span>&amp; maxflow)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(BFS()) maxflow += DFS(s, INF);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> L, W;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;L, &amp;W, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x[i], &amp;y[i]);</div><div class="line">        Add_Edge((i &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>, i &lt;&lt; <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    s = <span class="number">0</span>, t = (n &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (((LL)x[i] - x[j]) * ((LL)x[i] - x[j]) + ((LL)y[i] - y[j]) * ((LL)y[i] - y[j]) &lt;= <span class="number">40000L</span>)&#123;</div><div class="line">                Add_Edge(i &lt;&lt; <span class="number">1</span>, (j &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>, INF);</div><div class="line">                Add_Edge(j &lt;&lt; <span class="number">1</span>, (i &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>, INF);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (y[i] &lt;= <span class="number">100</span>) Add_Edge(s, (i &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>, INF);</div><div class="line">        <span class="keyword">if</span> (W - y[i] &lt;= <span class="number">100</span>) Add_Edge(i &lt;&lt; <span class="number">1</span>, t, INF);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> maxflow = <span class="number">0</span>;</div><div class="line">    Dinic(maxflow);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, maxflow);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 1256. -- Baltic2004Rectangles</title><center><h2>1256: Baltic2004Rectangles</h2><span class="green">Time Limit: </span>1 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>87&nbsp;&nbsp;<span class="green">Solved: </span>19<br>[<a href="submitpage.php?id=1256">Submit</a>][<a href="problemstatus.php?id=1256">Status</a>][<a href="bbs.php?id=1256">Discuss</a>]</center></p><h3>Description</h3><div class="content">平面上有N个矩形，矩形的边与坐标轴平行。这些矩形之间可以相交或覆盖。每个矩形的顶点都是非负整数，并且横坐标不超过xmax，纵坐标不超过ymax。现在你要寻找一个点B，点B为整点并在线段[(0, ymax), (xmax, ymax)]或[(xmax, 0), (xmax, ymax)]上，并且它与(0,0)的连线段与尽量多的矩形相交。如果两个几何图形有公共点，我们就认为它们相交。 
</div><h3>Input</h3><div class="content">输入文件第一行是整数xmax,ymax和N。此后N行，每行描述一个矩形，是矩形左下脚与右上角的坐标。
</div><h3>Output</h3><div class="content">输出文件仅有一行，为与矩形相交的最大数目。
</div><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">22 14 8<br>
1 8 7 11<br>
18 10 20 12<br>
17 1 19 7<br>
12 2 16 3<br>
16 7 19 9<br>
8 4 12 11<br>
7 4 9 6<br>
10 5 11 6<br>
</span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">5<br>
<img border="0" src="images/1256.jpg"></span></div><h3>HINT</h3><br>            <div class="content"><p>对于100%的数据，有0< xmax, ymax <10^9，1<=n<=10000。<br>
<br>
<br>
点B必须是整数坐标</10^9，1<=n<=10000。<br></p></div><h3>Source</h3><br>            <div class="content"><p><a href="problemset.php?search="></a></p></div><p></p>
<hr>
<p><strong>Tags</strong>:</p>
<ul>
<li>计算几何（伪）</li>
<li>转化法</li>
<li>线段覆盖问题</li>
<li>线段树</li>
</ul>
<hr>
<h2 id="题目分析-9"><a href="#题目分析-9" class="headerlink" title="题目分析"></a>题目分析</h2><p><strong>射影转化问题</strong></p>
<p>我们可以把每个矩形射影到那两条线端上，然后求出它所占据的范围，然后离散化+线段覆盖即可解决本题，注意点只在整点上运动</p>
<h2 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x &amp; -x</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-6</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> X, Y, n, m;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inter</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">    inter(<span class="keyword">int</span> l, <span class="keyword">int</span> r) : l(l), r(r)&#123;&#125;</div><div class="line">    inter()&#123;&#125;</div><div class="line">&#125;save[maxn];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">double</span> sline[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">process</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> con = (<span class="keyword">int</span>)x;</div><div class="line">    <span class="keyword">if</span> (x - con &lt;= eps) <span class="keyword">return</span> con;</div><div class="line">    <span class="keyword">return</span> con + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d)</span></span>&#123;</div><div class="line">    <span class="keyword">double</span> _a = (d == <span class="number">0</span>) ? INF : (<span class="keyword">double</span>)Y / d * a;</div><div class="line">    <span class="keyword">double</span> _b = (a == <span class="number">0</span>) ? INF : (<span class="keyword">double</span>)X / a * d;</div><div class="line">    <span class="keyword">double</span> _c = (b == <span class="number">0</span>) ? INF : (<span class="keyword">double</span>)Y / b * c;</div><div class="line">    <span class="keyword">double</span> _d = (c == <span class="number">0</span>) ? INF : (<span class="keyword">double</span>)X / c * b;</div><div class="line">    <span class="keyword">if</span> ((<span class="keyword">double</span>)X - _a &lt; eps) save[++cnt] = inter(process(X + Y - _b), (<span class="keyword">int</span>)(X + Y - _d));</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="keyword">double</span>)Y - _d &lt; eps) save[++cnt] = inter(process(_a), (<span class="keyword">int</span>)(_c));</div><div class="line">    <span class="keyword">else</span> save[++cnt] = inter(process(_a), (<span class="keyword">int</span>)(X + Y - _d));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> c[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(x &lt;= m) &#123;</div><div class="line">        c[x] += v;</div><div class="line">        x += lowbit(x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>; </div><div class="line">    <span class="keyword">while</span> (x)&#123;</div><div class="line">        ans += c[x];</div><div class="line">        x -= lowbit(x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a, b, c, d;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;X, &amp;Y, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;a, &amp;b, &amp;c, &amp;d);</div><div class="line">        init(a, b, c, d);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)&#123;</div><div class="line">        sline[++m] = save[i].l;</div><div class="line">        sline[++m] = save[i].r;</div><div class="line">    &#125;</div><div class="line">    sort(sline + <span class="number">1</span>, sline + <span class="number">1</span> + m);</div><div class="line">    m = unique(sline + <span class="number">1</span>, sline + <span class="number">1</span> + m) - sline - <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)&#123;</div><div class="line">        save[i].l = lower_bound(sline + <span class="number">1</span>, sline + <span class="number">1</span> + m, save[i].l) - sline;</div><div class="line">        save[i].r = lower_bound(sline + <span class="number">1</span>, sline + <span class="number">1</span> + m, save[i].r) - sline;</div><div class="line">        add(save[i].l, <span class="number">1</span>);</div><div class="line">        add(save[i].r + <span class="number">1</span>, <span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> maxnum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        maxnum = max(maxnum, get(i));</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, maxnum);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本期题目涉及面较广，有数论，图论，计算几何等多方面内容，大致题型如下：</p>
<ul>
<li><strong>树型DP问题</strong></li>
<li><strong>树上等大小划分问题</strong></li>
<li><strong>拆点/边法问题</strong></li>
<li><strong>上下界最优问题</strong></li>
<li><strong>进制问题</strong></li>
<li><strong>莫比乌斯反演基础题</strong></li>
<li><strong>带限制最短路问题</strong></li>
<li><strong>凸壳扫描问题</strong></li>
<li><strong>二维图上下可达性问题</strong></li>
<li><strong>射影转化问题</strong></li>
</ul>
</=></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;Time passes so fast, but…&lt;br&gt;
    
    </summary>
    
    
      <category term="BZOJ" scheme="https://goseqh.tk/tags/BZOJ/"/>
    
      <category term="题解" scheme="https://goseqh.tk/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Libre Online Judge阶段性汇总II</title>
    <link href="https://goseqh.tk/2017/09/03/Libre-Online-Judge%E9%98%B6%E6%AE%B5%E6%80%A7%E6%B1%87%E6%80%BBII/"/>
    <id>https://goseqh.tk/2017/09/03/Libre-Online-Judge阶段性汇总II/</id>
    <published>2017-09-03T12:53:29.000Z</published>
    <updated>2017-09-04T00:16:18.711Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>题解第二篇<del>MDZZ写题解太累了555</del><br><a id="more"></a></p>
<h1 id="2036-「SHOI2015」自动刷题机"><a href="#2036-「SHOI2015」自动刷题机" class="headerlink" title="#2036. 「SHOI2015」自动刷题机"></a>#2036. 「SHOI2015」自动刷题机</h1><iframe src="https://loj.ac/problem/2036" width="775" height="1620" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>应该挺容易看出来的，二分答案即可，关于二分为什么正确，请自行思考</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF (LL)4000000000000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">LL n,k;</div><div class="line">LL line[maxn];</div><div class="line">LL rec = <span class="number">-1</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge</span><span class="params">(LL x)</span></span>&#123;</div><div class="line">    LL now = <span class="number">0</span>;</div><div class="line">    LL cnt = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        now += line[i];</div><div class="line">        <span class="keyword">if</span> (now &gt;= x)&#123;</div><div class="line">            now = <span class="number">0</span>;</div><div class="line">            cnt++;</div><div class="line">        &#125;</div><div class="line">        (now &lt; <span class="number">0</span>) ? now = <span class="number">0</span> : now = now;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (k == cnt) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> cnt &lt; k ? <span class="number">-1</span> : <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function">LL <span class="title">getmax</span><span class="params">(LL l, LL r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        <span class="keyword">if</span> (judge(l) == <span class="number">0</span>) <span class="keyword">return</span> l;</div><div class="line">        <span class="keyword">return</span> rec;</div><div class="line">    &#125;</div><div class="line">    LL mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">int</span> d = judge(mid);</div><div class="line">    <span class="keyword">if</span> (d &gt;= <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">if</span> (d == <span class="number">0</span>) rec = mid;</div><div class="line">        <span class="keyword">return</span> getmax(mid + <span class="number">1</span>, r);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> getmax(l, mid);</div><div class="line">&#125;</div><div class="line"><span class="function">LL <span class="title">getmin</span><span class="params">(LL l, LL r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</div><div class="line">    LL mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (judge(mid) &lt;= <span class="number">0</span>) <span class="keyword">return</span> getmin(l, mid);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> getmin(mid + <span class="number">1</span>, r);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;k);</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;line[i]);</div><div class="line">    LL ansmin = getmin(<span class="number">1</span>, INF);</div><div class="line">    LL ansmax = getmax(<span class="number">1</span>, INF);</div><div class="line">    <span class="keyword">if</span> (ansmin == <span class="number">-1</span> || judge(ansmin)!=<span class="number">0</span> || ansmax == <span class="number">-1</span> || judge(ansmax)!=<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"-1"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld %lld"</span>, ansmin, ansmax);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="2194-「SDOI2014」数数"><a href="#2194-「SDOI2014」数数" class="headerlink" title="#2194. 「SDOI2014」数数"></a>#2194. 「SDOI2014」数数</h1><iframe src="https://loj.ac/problem/2194" width="775" height="1230" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><p>本题首先显然是AC自动机，然而情况多，真的很难一遍写对。。。</p>
<p>大概的坑有如下：</p>
<ul>
<li>集合中的数字开头可以为0</li>
<li>AC自动机中可能包含其他串的结点也不能走到</li>
<li>要注意开始标记的作用，为了避免，要循环累计答案</li>
</ul>
<p>另外本题LOJ数据弱，第二点没处理也能过，然而BZOJ上就过不了。。。</p>
<p>好了不说了。。。</p>
<h2 id="真正的AC代码"><a href="#真正的AC代码" class="headerlink" title="真正的AC代码"></a>真正的AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 4005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">bool</span> val[maxn];</div><div class="line"><span class="keyword">int</span> ch[maxn][<span class="number">12</span>];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"><span class="keyword">int</span> m;</div><div class="line"><span class="keyword">char</span> num[maxn];</div><div class="line"><span class="keyword">int</span> ct = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> len;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> now = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!ch[now][s[i] - <span class="string">'0'</span>]) ch[now][s[i] - <span class="string">'0'</span>] = ++cnt;</div><div class="line">        now = ch[now][s[i] - <span class="string">'0'</span>];</div><div class="line">    &#125;</div><div class="line">    val[now] = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    f[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; bfs;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (ch[<span class="number">0</span>][i]) f[ch[<span class="number">0</span>][i]] = <span class="number">0</span>, bfs.push(ch[<span class="number">0</span>][i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (!bfs.empty())&#123;</div><div class="line">        <span class="keyword">int</span> op = bfs.front(); bfs.pop();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (!ch[op][i]) ch[op][i] = ch[f[op]][i];</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">int</span> k = f[op];</div><div class="line">                <span class="keyword">while</span> (k &amp;&amp; !ch[k][i]) k = f[k];</div><div class="line">                f[ch[op][i]] = (!ch[k][i]) ? <span class="number">0</span> : ch[k][i];</div><div class="line">                <span class="keyword">if</span> (val[f[ch[op][i]]]) val[ch[op][i]] = <span class="number">1</span>;<span class="comment">//注意这个地方很重要！！！</span></div><div class="line">                bfs.push(ch[op][i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ct = <span class="built_in">strlen</span>(num);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ct; i++) num[i] -= <span class="string">'0'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> dp[maxn][maxn][<span class="number">2</span>];</div><div class="line"><span class="keyword">bool</span> vis[maxn][maxn][<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> loc, <span class="keyword">int</span> op)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (val[loc]) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (pos == ct) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (vis[pos][loc][op]) <span class="keyword">return</span> dp[pos][loc][op];</div><div class="line">    vis[pos][loc][op] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span>&amp; ans = dp[pos][loc][op];</div><div class="line">    <span class="keyword">if</span> (op)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num[pos]; i++)&#123;</div><div class="line">            ans = (ans + DP(pos + <span class="number">1</span>, ch[loc][i], <span class="number">0</span>)) % M;</div><div class="line">        &#125;</div><div class="line">        ans = (ans + DP(pos + <span class="number">1</span>, ch[loc][num[pos]], <span class="number">1</span>)) % M;</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">        ans = (ans + DP(pos + <span class="number">1</span>, ch[loc][i], <span class="number">0</span>)) % M;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, num, &amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">        len = <span class="built_in">strlen</span>(s);</div><div class="line">        insert();</div><div class="line">    &#125;</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; ct; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++)&#123;</div><div class="line">            ans = (ans + DP(i + <span class="number">1</span>, ch[<span class="number">0</span>][j], <span class="number">0</span>)) % M;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; num[<span class="number">0</span>]; i++) ans = (ans + DP(<span class="number">1</span>, ch[<span class="number">0</span>][i], <span class="number">0</span>)) % M;</div><div class="line">    ans = (ans + DP(<span class="number">1</span>, ch[<span class="number">0</span>][num[<span class="number">0</span>]], <span class="number">1</span>)) % M;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="2234-「JLOI2014」聪明的燕姿"><a href="#2234-「JLOI2014」聪明的燕姿" class="headerlink" title="#2234. 「JLOI2014」聪明的燕姿"></a>#2234. 「JLOI2014」聪明的燕姿</h1><iframe src="https://loj.ac/problem/2234" width="775" height="1440" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h2><p><del>省选题真是谁都能黑啊。。。</del><br><del>世道好轮回，省选绕过谁</del></p>
<p>本题即是传说中的对于质因子进行DFS暴力搜索的题目，然而我太弱，WA了无数次。。。</p>
<p>主要就是注意如何剪枝以及避免错误吧</p>
<h2 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> p[maxn][<span class="number">32</span>];</div><div class="line"><span class="keyword">int</span> save[maxn][<span class="number">32</span>];</div><div class="line"><span class="keyword">int</span> si[maxn];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i]) p[cnt++][<span class="number">1</span>] = i;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * p[j][<span class="number">1</span>] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * p[j][<span class="number">1</span>]] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (i % p[j][<span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i++)&#123;</div><div class="line">        save[i][<span class="number">0</span>] = p[i][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        save[i][<span class="number">1</span>] = p[i][<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; <span class="number">32</span>; j++)&#123;</div><div class="line">            <span class="keyword">if</span> ((LL)p[i][j - <span class="number">1</span>] * save[i][<span class="number">1</span>] &gt;= INF) &#123;</div><div class="line">                si[i] = j;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            save[i][j] = p[i][j] = p[i][j - <span class="number">1</span>] * save[i][<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; si[i]; j++)&#123;</div><div class="line">            <span class="keyword">if</span> ((LL)p[i][j - <span class="number">1</span>] + p[i][j] &gt;= INF)&#123;</div><div class="line">                si[i] = j;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            p[i][j] += p[i][j - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> con = (<span class="keyword">int</span>) <span class="built_in">sqrt</span>(x);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (save[i][<span class="number">1</span>] &gt; con) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span> (x % save[i][<span class="number">1</span>] == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> rest, <span class="keyword">int</span> now)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (rest &lt; p[pos][<span class="number">1</span>])&#123;</div><div class="line">        <span class="keyword">if</span> (rest == <span class="number">1</span>) ans.pb(now);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ((LL)rest &lt; (LL)p[pos][<span class="number">1</span>] * p[pos][<span class="number">1</span>] &amp;&amp; rest &lt; ((p[pos][<span class="number">2</span>] &gt; <span class="number">0</span>) ? p[pos][<span class="number">2</span>] : INF))&#123;</div><div class="line">        <span class="keyword">if</span> (judge(rest - <span class="number">1</span>)) ans.pb(now * (rest - <span class="number">1</span>));</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*if (pos == cnt &amp;&amp; rest - 1 &gt;= maxn)&#123;</span></div><div class="line">        if (judge(rest - 1)) ans.pb(now * (rest - 1));</div><div class="line">        return;</div><div class="line">    &#125;*/</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; si[pos]; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (p[pos][i] &gt; rest) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span> (rest % p[pos][i] == <span class="number">0</span>) DFS(pos + <span class="number">1</span>, rest / p[pos][i], now * save[pos][i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">bool</span> f = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (!f)&#123;</div><div class="line">        DFS(<span class="number">0</span>, x, <span class="number">1</span>);</div><div class="line">        sort(ans.begin(), ans.end());</div><div class="line">        <span class="keyword">if</span> (ans.size() == <span class="number">0</span>)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"0"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans.size());</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[<span class="number">0</span>]);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; ans.size(); i++) <span class="built_in">printf</span>(<span class="string">" %d"</span>, ans[i]);</div><div class="line">            ans.clear();</div><div class="line">        &#125;</div><div class="line">        f = <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    DFS(<span class="number">0</span>, x, <span class="number">1</span>);</div><div class="line">    sort(ans.begin(), ans.end());</div><div class="line">    <span class="keyword">if</span> (ans.size() == <span class="number">0</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n0"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n%d\n"</span>, ans.size());</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; ans.size(); i++) <span class="built_in">printf</span>(<span class="string">" %d"</span>, ans[i]);</div><div class="line">        ans.clear();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span>) work(n);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实细节还是很多的，可能是因为我太弱了。。。</p>
<h1 id="2236-「JLOI2014」松鼠的新家"><a href="#2236-「JLOI2014」松鼠的新家" class="headerlink" title="#2236. 「JLOI2014」松鼠的新家"></a>#2236. 「JLOI2014」松鼠的新家</h1><iframe src="https://loj.ac/problem/2236" width="775" height="1460" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h2><p>树链剖分</p>
<h2 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">int</span> fa[maxn];</div><div class="line"><span class="keyword">int</span> si[maxn];</div><div class="line"><span class="keyword">int</span> top[maxn];</div><div class="line"><span class="keyword">int</span> dfs[maxn];</div><div class="line"><span class="keyword">int</span> idfs[maxn];</div><div class="line"><span class="keyword">int</span> son[maxn];</div><div class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x]) <span class="keyword">continue</span>;</div><div class="line">        d[op] = d[x] + <span class="number">1</span>;</div><div class="line">        fa[op] = x;</div><div class="line">        DFS1(op);</div><div class="line">        si[x] += si[op];</div><div class="line">        <span class="keyword">if</span> (si[op] &gt; si[son[x]]) son[x] = op;</div><div class="line">    &#125;</div><div class="line">    si[x]++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> tp)</span></span>&#123;</div><div class="line">    dfs[x] = ++t;</div><div class="line">    idfs[t] = x;</div><div class="line">    top[x] = tp;</div><div class="line">    <span class="keyword">if</span> (son[x]) DFS2(son[x], tp);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x] || op == son[x]) <span class="keyword">continue</span>;</div><div class="line">        DFS2(op, op);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> sum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> add[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (add[o] != <span class="number">0</span> &amp;&amp; l != r)&#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">        add[o &lt;&lt; <span class="number">1</span>] += add[o];</div><div class="line">        sum[o &lt;&lt; <span class="number">1</span>] += (mid + <span class="number">1</span> - l) * add[o];</div><div class="line"></div><div class="line">        add[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += add[o];</div><div class="line">        sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += (r - mid) * add[o];</div><div class="line"></div><div class="line">        add[o] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</div><div class="line">    sum[o] = sum[o &lt;&lt; <span class="number">1</span>] + sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy) &#123;</div><div class="line">        add[o] += qd;</div><div class="line">        sum[o] += qd * (r - l + <span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) modify(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) modify(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> sum[o];</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) <span class="keyword">return</span> get(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> get(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> f1 = top[x], f2 = top[y];</div><div class="line">    qd = v;</div><div class="line">    <span class="keyword">while</span> (f1 != f2)&#123;</div><div class="line">        <span class="keyword">if</span> (d[f1] &gt; d[f2])&#123;</div><div class="line">            qx = dfs[f1], qy = dfs[x];</div><div class="line">            modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">            x = fa[f1];</div><div class="line">            f1 = top[x];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            qx = dfs[f2], qy = dfs[y];</div><div class="line">            modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">            y = fa[f2];</div><div class="line">            f2 = top[y];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (d[x] &lt; d[y]) swap(x, y);</div><div class="line">    qx = dfs[y], qy = dfs[x];</div><div class="line">    modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    Add(x, y, <span class="number">1</span>);</div><div class="line">    Add(y, y, <span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    DFS1(<span class="number">1</span>);</div><div class="line">    DFS2(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        Add_Edge(x, y);</div><div class="line">    &#125;</div><div class="line">    init();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++)&#123;</div><div class="line">        Add(line[i], line[i + <span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        qx = dfs[i];</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, get(<span class="number">1</span>, n, <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="2245-「NOI2014」魔法森林"><a href="#2245-「NOI2014」魔法森林" class="headerlink" title="#2245. 「NOI2014」魔法森林"></a>#2245. 「NOI2014」魔法森林</h1><iframe src="https://loj.ac/problem/2245" width="775" height="2000" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h2><p>正解显然是LCT，然而还有另一种方法，就是动点SPFA，把边按其中一维排序后逐个加入，然后只对当前存在的边跑SPFA，这样就过了。。。</p>
<h2 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">	<span class="keyword">int</span> x, y, a, b;</div><div class="line">	edge(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> a, <span class="keyword">int</span> b) : x(x), y(y), a(a), b(b)&#123;&#125;</div><div class="line">	edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; save[maxn];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a, edge b)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> a.a &lt; b.a;</div><div class="line">&#125;</div><div class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; spfa;</div><div class="line"><span class="keyword">int</span> now;</div><div class="line"><span class="keyword">int</span> ans = INF;</div><div class="line"><span class="keyword">bool</span> in[maxn];</div><div class="line"><span class="keyword">bool</span> have[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">while</span> (!spfa.empty())&#123;</div><div class="line">		<span class="keyword">int</span> op = spfa.front();spfa.pop();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; save[op].size(); i++)&#123;</div><div class="line">			<span class="keyword">int</span> t = save[op][i];</div><div class="line">			<span class="keyword">if</span> (!have[t]) <span class="keyword">continue</span>;</div><div class="line">			<span class="keyword">int</span> k = (e[t].x == op) ? e[t].y : e[t].x;</div><div class="line">			<span class="keyword">if</span> (e[t].a &gt; now) <span class="keyword">continue</span>;</div><div class="line">			<span class="keyword">if</span> (f[k] &gt; max(f[op], e[t].b))&#123;</div><div class="line">				f[k] = max(f[op], e[t].b);</div><div class="line">				<span class="keyword">if</span> (!in[k])&#123;</div><div class="line">					spfa.push(k);</div><div class="line">					in[k] = <span class="number">1</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> (k == n) ans = min(ans, now + f[k]);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		in[op] = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">		edge op = e[i];</div><div class="line">		have[i] = <span class="number">1</span>;</div><div class="line">		<span class="keyword">int</span> a = op.x, b = op.y;</div><div class="line">		<span class="keyword">if</span> (a == b) <span class="keyword">continue</span>;</div><div class="line">		spfa.push(b);spfa.push(a);</div><div class="line">		now = op.a;</div><div class="line">		SPFA();</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; bfs;</div><div class="line">    bfs.push(<span class="number">1</span>);</div><div class="line">    vis[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!bfs.empty())&#123;</div><div class="line">        <span class="keyword">int</span> op = bfs.front();</div><div class="line">        bfs.pop();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; save[op].size(); i++)&#123;</div><div class="line">            <span class="keyword">int</span> k = save[op][i];</div><div class="line">			<span class="keyword">int</span> t = (e[k].x == op) ? e[k].y : e[k].x;</div><div class="line">			<span class="keyword">if</span> (vis[t]) <span class="keyword">continue</span>;</div><div class="line">			vis[t] = <span class="number">1</span>;</div><div class="line">			bfs.push(t);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	<span class="keyword">if</span> (!vis[n]) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) f[i] = INF;</div><div class="line">	f[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> x, y, z, w;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;x, &amp;y, &amp;z, &amp;w);</div><div class="line">		e[i] = edge(x, y, z, w);</div><div class="line">	&#125;</div><div class="line">	sort(e, e + m, cmp);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">		save[e[i].x].push_back(i);</div><div class="line">		save[e[i].y].push_back(i);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (!judge())&#123;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"-1"</span>);</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	work();</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>动点SPFA写的。。。</p>
<h1 id="2246-「NOI2014」动物园"><a href="#2246-「NOI2014」动物园" class="headerlink" title="#2246. 「NOI2014」动物园"></a>#2246. 「NOI2014」动物园</h1><iframe src="https://loj.ac/problem/2246" width="775" height="1650" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h2><p>这道题其实是一道很好的题目，能加强对KMP的理解</p>
<p>其实fail函数有两种实现，一种是代表包含自己前一个位置但不含自己的最长border长度，另一种是自己也算在内的最长border长度</p>
<p>这两者的处理方式并不相同，所以一定要想清楚KMP的原理</p>
<h2 id="AC代码-4"><a href="#AC代码-4" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">char</span> t[maxn];</div><div class="line"><span class="keyword">int</span> lent;</div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"><span class="keyword">int</span> f1[maxn];</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="keyword">int</span> f2[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    f[<span class="number">0</span>] = <span class="number">-1</span>;</div><div class="line">    f1[<span class="number">0</span>] = <span class="number">-1</span>;</div><div class="line">    num[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; lent; i++)&#123;</div><div class="line">        <span class="keyword">int</span> k = f[i - <span class="number">1</span>];</div><div class="line">        <span class="keyword">while</span> (k &gt; <span class="number">-1</span> &amp;&amp; t[k + <span class="number">1</span>] != t[i]) k = f[k];</div><div class="line">        f[i] = ((t[k + <span class="number">1</span>] == t[i]) ? k + <span class="number">1</span> : <span class="number">-1</span>);</div><div class="line">        num[i] = ((t[k + <span class="number">1</span>] == t[i]) ? num[k + <span class="number">1</span>] + <span class="number">1</span> : <span class="number">0</span>);</div><div class="line"></div><div class="line">        k = f1[i - <span class="number">1</span>];</div><div class="line">        <span class="keyword">while</span> (k &gt; <span class="number">-1</span> &amp;&amp; t[k + <span class="number">1</span>] != t[i]) k = f[k];</div><div class="line">        f1[i] = ((t[k + <span class="number">1</span>] == t[i]) ? k + <span class="number">1</span> : <span class="number">-1</span>);</div><div class="line">        <span class="keyword">while</span> (f1[i] &gt; <span class="number">-1</span> &amp;&amp; ((f1[i] + <span class="number">1</span>) &lt;&lt; <span class="number">1</span>) &gt; i + <span class="number">1</span>) f1[i] = f[f1[i]];</div><div class="line"></div><div class="line">        f2[i] = (f1[i] == <span class="number">-1</span>) ? <span class="number">0</span> : (num[f1[i]] + <span class="number">1</span>);</div><div class="line">        <span class="comment">/*k = f[i + 1];</span></div><div class="line">        int pre = i + 1;</div><div class="line">        while (k &amp;&amp; (k &lt;&lt; 1) &gt; i + 1) k = f[k], pre = f[pre];</div><div class="line">        f2[i + 1] = num[pre];*/</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    LL ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lent; i++) ans = ans * (f2[i] + <span class="number">1</span>) % M;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, t);</div><div class="line">        lent = <span class="built_in">strlen</span>(t);</div><div class="line">        init();</div><div class="line">        work();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="6030-「雅礼集训-2017-Day1」矩阵"><a href="#6030-「雅礼集训-2017-Day1」矩阵" class="headerlink" title="#6030. 「雅礼集训 2017 Day1」矩阵"></a>#6030. 「雅礼集训 2017 Day1」矩阵</h1><iframe src="https://loj.ac/problem/6030" width="775" height="1522" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-6"><a href="#题目分析-6" class="headerlink" title="题目分析"></a>题目分析</h2><p>题目描述上类似于POI某年的tab那道题，都是一些矩阵上的思维题，本题可以发现，如果我们拥有了一个行，它里面的格子全都是黑色的，那么我们就可以随(wei)便(suo)染(yu)色(wei)了对吧，但是如果我们没有这样的一行，我们就必须要考虑如何让它出现，我们可以知道，把一整行染黑的代价是这一行中白色的个数，但是这一行所对应的列（就是转置矩阵的对应的那个行）必须要有至少一个黑格才行，如果没有就要让它再额外的染一次才行，这样就有一个额外的代价</p>
<p>而当我们把某行全染黑了以后，我们把整个矩阵染黑的代价是多少呢？那就是含有白色的列的个数</p>
<p>我们把这两部分代价合起来考虑，如果我们要让某一行全黑，那么假设一开始它不是全黑的，那么我们一定要使用它这一行里面白色格子的数量这些代价来染（仅考虑可以被全染黑的情况），此外，由于此时除了这一行外，没有全黑的行，那么刚才为了给这一行全染黑，刚才行的每个白格对应的列都会有至少一个白格，这样相当于每个白格需要耗费二的代价（1+1），但是如果原先就是黑色的，那么当且仅当这个黑格对应的列没有白格才不会产生代价，否则还是要加上一的代价（属于后半部分的代价）（0+1）</p>
<p>什么时候无解呢？回到上面提到过的：</p>
<blockquote>
<p>我们可以知道，把一整行染黑的代价是这一行中白色的个数，但是这一行所对应的列（就是转置矩阵的对应的那个行）必须要有至少一个黑格才行，如果没有就要让它再额外的染一次才行，这样就有一个额外的代价</p>
</blockquote>
<p>即，如果没有这样的黑格，我们就要想办法让这行对应的那个列出现至少一个黑格，这样就变成了，只要矩阵中有至少一个黑格，就不是无解的，想一想为什么（我们把这一个黑格对应的行直接染到需要的那个列上，再用那个列去染最开始的那一行即可）</p>
<p>所以，综上所述：</p>
<ul>
<li>当且仅当没有黑格时， 无解</li>
<li>有一行全黑时，答案等于含有白格的列的个数</li>
<li>没有任何一行全黑时，答案等于所有行的代价的最小值，行的代价的计算式是：这一行对应的额外代价（0或1）+刚才提到的黑白格分别产生的代价</li>
</ul>
<p>其实易证这样一定是最少的步数</p>
<h2 id="AC代码-5"><a href="#AC代码-5" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">char</span> geo[maxn][maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> save[maxn];</div><div class="line"><span class="keyword">int</span> if_col_full[maxn];</div><div class="line"><span class="keyword">int</span> if_col_empty[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">bool</span> have = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (geo[i][j] == <span class="string">'#'</span>)&#123;</div><div class="line">                have = <span class="number">1</span>;</div><div class="line">                <span class="keyword">goto</span> jump;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    jump : <span class="keyword">if</span> (!have) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</div><div class="line">        if_col_empty[j] = <span class="number">1</span>;</div><div class="line">        if_col_full[j] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (geo[i][j] == <span class="string">'#'</span>) if_col_empty[j] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span> if_col_full[j] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (geo[i][j] == <span class="string">'.'</span>) save[i] += <span class="number">2</span>;</div><div class="line">            <span class="keyword">else</span> save[i] += (if_col_full[j] ^ <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        save[i] += if_col_empty[i];</div><div class="line">        <span class="keyword">if</span> (save[i] == <span class="number">0</span>)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"0"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ans = INF;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        ans = min(ans, save[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%s"</span>, geo[i]);</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="6062-「2017-山东一轮集训-Day2」Pair"><a href="#6062-「2017-山东一轮集训-Day2」Pair" class="headerlink" title="#6062. 「2017 山东一轮集训 Day2」Pair"></a>#6062. 「2017 山东一轮集训 Day2」Pair</h1><iframe src="https://loj.ac/problem/6062" width="775" height="1794" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-7"><a href="#题目分析-7" class="headerlink" title="题目分析"></a>题目分析</h2><p>这题刚做的时候看错题了。。。以为只能对应位置匹配。。。</p>
<p>如果不是对应位置，本题就比较显然了，我们先把和大于等于$h$的限制转化，化为差的形式，这样就是把${b_i}$变成了${h-b_i}$，设这个新的数列为${c_i}$，我们可以想象把${a_i}$和${c_i}$放在一起排好了序，然后统计所有前缀中属于数列${a_i}$的元素个数与属于数列${c_i}$的元素个数的差（除了最后一个最大的前缀），如果这个差的最大值小于等于零，那么可以匹配（想一想为什么）</p>
<p>而这些可以使用线段树进行维护，那么本题就解决了</p>
<h2 id="AC代码-6"><a href="#AC代码-6" class="headerlink" title="AC代码"></a>AC代码</h2><p>（注意代码实现与题目分析并不一致，但本质相同）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 300005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> sum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> minnum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        sum[o] += qd;</div><div class="line">        minnum[o] += qd;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) insert(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> insert(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    sum[o] = sum[o &lt;&lt; <span class="number">1</span>] + sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">    minnum[o] = min(minnum[o &lt;&lt; <span class="number">1</span>], sum[o &lt;&lt; <span class="number">1</span>] + minnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> a[maxn];</div><div class="line"><span class="keyword">int</span> b[maxn];</div><div class="line"><span class="keyword">int</span> c[maxn];</div><div class="line"><span class="keyword">int</span> n, m, h;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;h);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) b[i] = h - b[i];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) c[i] = b[i];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) c[i + m] = a[i];</div><div class="line">    sort(c + <span class="number">1</span>, c + <span class="number">1</span> + n + m);</div><div class="line">    <span class="keyword">int</span> k = unique(c + <span class="number">1</span>, c + <span class="number">1</span> + n + m) - c;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) b[i] = lower_bound(c + <span class="number">1</span>, c + <span class="number">1</span> + k, b[i]) - c;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = lower_bound(c + <span class="number">1</span>, c + <span class="number">1</span> + k, a[i]) - c;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        qx = b[i], qd = <span class="number">1</span>;</div><div class="line">        insert(<span class="number">1</span>, k, <span class="number">1</span>);</div><div class="line">        qx = a[i], qd = <span class="number">-1</span>;</div><div class="line">        insert(<span class="number">1</span>, k, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    ans += (minnum[<span class="number">1</span>] &gt;= <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = m + <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        qx = a[i - m] , qd = <span class="number">1</span>;</div><div class="line">        insert(<span class="number">1</span>, k, <span class="number">1</span>);</div><div class="line">        qx = a[i], qd = <span class="number">-1</span>;</div><div class="line">        insert(<span class="number">1</span>, k, <span class="number">1</span>);</div><div class="line">        ans += (minnum[<span class="number">1</span>] &gt;= <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="6075-「2017-山东一轮集训-Day6」重建"><a href="#6075-「2017-山东一轮集训-Day6」重建" class="headerlink" title="#6075. 「2017 山东一轮集训 Day6」重建"></a>#6075. 「2017 山东一轮集训 Day6」重建</h1><iframe src="https://loj.ac/problem/6075" width="775" height="1830" frameborder="0" scrolling="no"></iframe>


<h2 id="题目分析-8"><a href="#题目分析-8" class="headerlink" title="题目分析"></a>题目分析</h2><p>根据题意，我们显然是要先求出经过不同边数下，每种边数的对应的最短路（关键点和全部点分别求），我们这样就可以枚举经过的边数，钦定它为真正的最短路，然后求出c的对应范围（在两个点集中）并判断是否有解即可，其实还是很巧妙的</p>
<h2 id="AC代码-7"><a href="#AC代码-7" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LD long double </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    LL cost;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to, LL cost) : next(next), to(to), cost(cost)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to, LL cost)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to, cost);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr, cost);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, s, t, k;</div><div class="line"><span class="keyword">int</span> save[maxn];</div><div class="line"><span class="keyword">int</span> ct;</div><div class="line">LL d1[maxn][<span class="number">2</span>];</div><div class="line">LL d2[maxn][<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> d = <span class="number">0</span>;</div><div class="line">LL INF;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    INF = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">18</span>; i++) INF = <span class="number">10</span> * INF;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) d1[i][<span class="number">0</span>] = d1[i][<span class="number">1</span>] = d2[i][<span class="number">0</span>] = d2[i][<span class="number">1</span>] = INF;</div><div class="line">    d1[s][<span class="number">0</span>] = d1[s][<span class="number">1</span>] = d2[s][<span class="number">0</span>] = d2[s][<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        d1[i][d ^ <span class="number">1</span>] = INF;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ct; i++)</div><div class="line">        d2[save[i]][d ^ <span class="number">1</span>] = INF;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = h[i]; j; j = e[j].next)&#123;</div><div class="line">            <span class="keyword">int</span> op = e[j].to;</div><div class="line">            <span class="keyword">if</span> (d1[op][d ^ <span class="number">1</span>] &gt; d1[i][d] + e[j].cost) d1[op][d ^ <span class="number">1</span>] = d1[i][d] + e[j].cost;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ct; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = h[save[i]]; j; j = e[j].next)&#123;</div><div class="line">            <span class="keyword">int</span> op = e[j].to;</div><div class="line">            <span class="keyword">if</span> (d2[op][d ^ <span class="number">1</span>] &gt; d2[save[i]][d] + e[j].cost) d2[op][d ^ <span class="number">1</span>] = d2[save[i]][d] + e[j].cost;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    d ^= <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL inf[maxn][<span class="number">2</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        update();</div><div class="line">        inf[i][<span class="number">0</span>] = (d1[t][d] &lt; INF) ? d1[t][d] : <span class="number">-1</span>;</div><div class="line">        inf[i][<span class="number">1</span>] = (d2[t][d] &lt; INF) ? d2[t][d] : <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">bool</span> f = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    LD ans = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (inf[i][<span class="number">0</span>] == <span class="number">-1</span>) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span> (!f)&#123;</div><div class="line">            <span class="keyword">if</span> (inf[i][<span class="number">0</span>] == inf[i][<span class="number">1</span>])&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"Infinity\n"</span>);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        f = <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (inf[i][<span class="number">1</span>] == <span class="number">-1</span> || inf[i][<span class="number">0</span>] != inf[i][<span class="number">1</span>]) <span class="keyword">continue</span>;</div><div class="line">        LD minnum = -INF;</div><div class="line">        LD maxnum = INF;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (inf[j][<span class="number">0</span>] == <span class="number">-1</span>) <span class="keyword">continue</span>;</div><div class="line">            maxnum = min(maxnum, (LD)(inf[j][<span class="number">0</span>] - inf[i][<span class="number">1</span>]) / (i - j));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (inf[j][<span class="number">0</span>] == <span class="number">-1</span>) <span class="keyword">continue</span>;</div><div class="line">            minnum = max(minnum, (LD)(inf[j][<span class="number">0</span>] - inf[i][<span class="number">1</span>]) / (i - j));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (minnum - maxnum &gt; eps) <span class="keyword">continue</span>;</div><div class="line">        ans = max(ans, maxnum);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (ans + <span class="number">1</span> &lt; eps) <span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, (LL)ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">recover</span><span class="params">()</span></span>&#123;</div><div class="line">    ct = <span class="number">0</span>;</div><div class="line">    cnt = <span class="number">1</span>;</div><div class="line">    <span class="built_in">memset</span>(h, <span class="number">0</span>, <span class="keyword">sizeof</span>(h));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span>(T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;s, &amp;t);</div><div class="line">        <span class="keyword">int</span> x, y;</div><div class="line">        LL z;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>, &amp;x, &amp;y, &amp;z);</div><div class="line">            Add_Edge(x, y, z);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            save[++ct] = x;</div><div class="line">        &#125;</div><div class="line">        work();</div><div class="line">        recover();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="6136-「2017-山东三轮集训-Day4」Left"><a href="#6136-「2017-山东三轮集训-Day4」Left" class="headerlink" title="#6136. 「2017 山东三轮集训 Day4」Left"></a>#6136. 「2017 山东三轮集训 Day4」Left</h1><iframe src="https://loj.ac/problem/6136" width="775" height="2050" frameborder="0" scrolling="no"></iframe>


<h2 id="题目分析-9"><a href="#题目分析-9" class="headerlink" title="题目分析"></a>题目分析</h2><p>我们考虑对这道题递归和分解，使得我们每次只去分析一个小过程，这样就会简便很多，我们可以观察规律，发现 $n$阶网络最后每两组中的数($k∗ 2,k∗2+1$)一定不在$n-1$阶网络的同一侧 ，这样我们可以对每层$O(2^n)$进行处理，同时使用贪心法 ，如果当前的这个组没被标记（即是否已经决定开或关），就让它关着，然后用自身的状态以及网络特征，尽可能多的更新其他的组，可以证明这样做是完全正确的，把两个排列放在一起（置换），用2-SAT的思路进行连边，同时每两组内的数($k∗2, k∗2+1$)也连边，根据题目性质，只能形成偶环，无论怎么染色都不会矛盾（即无解），所以，我们对每一层都进行这样的处理，同时更新上下的序列，就可以在$O(T∗n∗2^n)$的复杂度内解决本题，而这是完全可以接受的</p>
<h2 id="AC代码-8"><a href="#AC代码-8" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 13</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> up[<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">int</span> low[<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">int</span> ori[<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">int</span> line[<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">int</span> ans[(maxn &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>][<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">bool</span> vis[(maxn &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>][<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">int</span> temp[<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">int</span> judge[<span class="number">1</span> &lt;&lt; maxn];</div><div class="line"><span class="keyword">int</span> n, x, con, con2;  <span class="comment">//con = n - 1 - (x - 1);</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> side = line[j ^ <span class="number">1</span>];</div><div class="line">    <span class="keyword">int</span> _j = up[side];</div><div class="line">    <span class="keyword">if</span> (vis[con][_j &gt;&gt; <span class="number">1</span>]) <span class="keyword">return</span>;</div><div class="line">    vis[con][_j &gt;&gt; <span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    ans[con][_j &gt;&gt; <span class="number">1</span>] = ans[con][up[line[j]] &gt;&gt; <span class="number">1</span>] ^ ((line[j] &amp; (<span class="number">1</span> &lt;&lt; con)) &gt;&gt; con) ^ ((line[j ^ <span class="number">1</span>] &amp; (<span class="number">1</span> &lt;&lt; con)) &gt;&gt; con) ^ <span class="number">1</span>;<span class="comment">//WA的原因，原先的写法如下：</span></div><div class="line">    <span class="comment">//ans[con][_j &gt;&gt; 1] = ans[con][up[line[j]] &gt;&gt; 1] ^ (line[j] &amp; 1) ^ (line[j ^ 1] &amp; 1) ^ 1;</span></div><div class="line">    <span class="comment">//中间测试时是这样写的：</span></div><div class="line">    <span class="comment">//ans[con][_j &gt;&gt; 1] = ans[con][up[line[j]] &gt;&gt; 1] ^ (line[j] &amp; (1 &lt;&lt; con)) ^ (line[j ^ 1] &amp; (1 &lt;&lt; con)) ^ 1;</span></div><div class="line">    BFS(low[ori[_j ^ <span class="number">1</span>]]);</div><div class="line">&#125;</div><div class="line"><span class="comment">/*void BFS2(int j)&#123;</span></div><div class="line">    int side = ori[j ^ 1];</div><div class="line">    int _j = low[side];</div><div class="line">    if (vis[con2][_j &gt;&gt; 1]) return;</div><div class="line">    vis[con2][_j &gt;&gt; 1] = 1;</div><div class="line">    ans[con2][_j &gt;&gt; 1] = ans[con2][j &gt;&gt; 1] ^ 1;</div><div class="line">    BFS2(j ^ 1);</div><div class="line">&#125;*/</div><div class="line"><span class="comment">/*int shift_left(int n, int x)&#123;</span></div><div class="line">    int a = n &amp; ((1 &lt;&lt; x) - 1);</div><div class="line">    int b = n - a;</div><div class="line">    a = (a &lt;&lt; 1) | (a &gt;&gt; (x - 1)) &amp; ((1 &lt;&lt; x) - 1);</div><div class="line">    return a | b;</div><div class="line">&#125;*/</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">shift_right</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a = n &amp; ((<span class="number">1</span> &lt;&lt; x) - <span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> b = n - a;</div><div class="line">    a = (a &gt;&gt; <span class="number">1</span>) | (a &lt;&lt; (x - <span class="number">1</span>)) &amp; ((<span class="number">1</span> &lt;&lt; x) - <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> a | b;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == <span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i += <span class="number">2</span>)&#123;</div><div class="line">            ans[con][i &gt;&gt; <span class="number">1</span>] = <span class="number">1</span> ^ (line[i] == ori[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); i += <span class="number">1</span> &lt;&lt; x)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j++) low[line[j]] = j;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j++) up[ori[j]] = j;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j += <span class="number">2</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (!vis[con][j &gt;&gt; <span class="number">1</span>])&#123;</div><div class="line">                vis[con][j &gt;&gt; <span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">                ans[con][j &gt;&gt; <span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">                BFS(low[ori[j]]), BFS(low[ori[j + <span class="number">1</span>]]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j += <span class="number">2</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (ans[con][j &gt;&gt; <span class="number">1</span>])&#123;</div><div class="line">                temp[shift_right(j, x)] = ori[j ^ <span class="number">1</span>];</div><div class="line">                judge[ori[j ^ <span class="number">1</span>]] = <span class="number">0</span>;</div><div class="line">                temp[shift_right(j ^ <span class="number">1</span>, x)] = ori[j];</div><div class="line">                judge[ori[j]] = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                temp[shift_right(j, x)] = ori[j];</div><div class="line">                judge[ori[j]] = <span class="number">0</span>;</div><div class="line">                temp[shift_right(j ^ <span class="number">1</span>, x)] = ori[j ^ <span class="number">1</span>];</div><div class="line">                judge[ori[j ^ <span class="number">1</span>]] = <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j++) ori[j] = temp[j];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j += <span class="number">2</span>)</div><div class="line">            ans[con2][j &gt;&gt; <span class="number">1</span>] = judge[line[j]];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j += <span class="number">2</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (ans[con2][j &gt;&gt; <span class="number">1</span>])&#123;</div><div class="line">                temp[shift_right(j, x)] = line[j ^ <span class="number">1</span>];</div><div class="line">                temp[shift_right(j ^ <span class="number">1</span>, x)] = line[j];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                temp[shift_right(j, x)] = line[j];</div><div class="line">                temp[shift_right(j ^ <span class="number">1</span>, x)] = line[j ^ <span class="number">1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + (<span class="number">1</span> &lt;&lt; x); j++) line[j] = temp[j];</div><div class="line">        <span class="comment">/*for (int j = i; j &lt; i + (1 &lt;&lt; x); j += 2)&#123;</span></div><div class="line">            if (!vis[con2][j &gt;&gt; 1])&#123;</div><div class="line">                vis[con2][j &gt;&gt; 1] = 1;</div><div class="line">                ans[con2][j &gt;&gt; 1] = 0;</div><div class="line">                BFS2(up[line[j]]), BFS2(up[line[j + 1]]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        */</div><div class="line">    &#125;</div><div class="line">    x--;</div><div class="line">    con++;</div><div class="line">    con2--;</div><div class="line">    solve();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) == <span class="number">1</span> &amp;&amp; n != <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; i++) ori[i] = i;</div><div class="line">        con = <span class="number">0</span>;</div><div class="line">        con2 = (n - <span class="number">1</span>) &lt;&lt; <span class="number">1</span>;</div><div class="line">        x = n;</div><div class="line">        solve();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (n &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>; i++)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span> &lt;&lt; (n - <span class="number">1</span>); j++)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[i][j]);</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;题解第二篇&lt;del&gt;MDZZ写题解太累了555&lt;/del&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://goseqh.tk/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LOJ" scheme="https://goseqh.tk/tags/LOJ/"/>
    
  </entry>
  
  <entry>
    <title>常用图表汇总</title>
    <link href="https://goseqh.tk/2017/08/29/%E5%B8%B8%E7%94%A8%E5%9B%BE%E8%A1%A8%E6%B1%87%E6%80%BB/"/>
    <id>https://goseqh.tk/2017/08/29/常用图表汇总/</id>
    <published>2017-08-29T11:41:14.000Z</published>
    <updated>2017-09-04T00:16:43.903Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>存放以前编写的图表汇总，便于查找<br><a id="more"></a></p>
<h1 id="常用图表大全"><a href="#常用图表大全" class="headerlink" title="常用图表大全"></a>常用图表大全</h1><hr>
<p>首先，作为搞OI的一员，我们怎么可能会不知道大名鼎鼎的ASCII码呢？然而我就是有很多都不知道。另外普及一下，ASCII=American Standard Code for Information Interchange</p>
<p>下表中前32个（0~31）为控制字符，第33个（32）为空格，第128个（127）为DEL（delete）</p>
<p><strong>大家不妨在看表前思考两个问题：</strong></p>
<ol>
<li><p>怎么在markdown中打出下表，是手打吗？</p>
</li>
<li><p>怎么在markdown表格中打出‘|’（逻辑或）这个字符</p>
</li>
<li><p>怎么在markdown表格中打空格？</p>
<p>第一个问题显然是要编程序啦。。。</p>
<p>第二个问题如果不明白可以看这个：<a href="https://www.zhihu.com/question/37542455" target="_blank" rel="external">用Markdown写Hexo博客时如何转义竖杠 | ? - 知乎</a></p>
<p>第三个还是要参考知乎啦：<a href="https://www.zhihu.com/question/21420126" target="_blank" rel="external">在Markdown 语言中,如何实现段首空格的显示 ? - 知乎</a></p>
</li>
</ol>
<p>我想会有明白我在说什么的人</p>
<h2 id="ASCII码表（十进制）"><a href="#ASCII码表（十进制）" class="headerlink" title="ASCII码表（十进制）"></a>ASCII码表（十进制）</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">ASCII码</th>
<th style="text-align:center">字符</th>
<th style="text-align:center">ASCII码</th>
<th style="text-align:center">字符</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">^@</td>
<td style="text-align:center">64</td>
<td style="text-align:center">@</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">^A</td>
<td style="text-align:center">65</td>
<td style="text-align:center">A</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">^B</td>
<td style="text-align:center">66</td>
<td style="text-align:center">B</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">^C</td>
<td style="text-align:center">67</td>
<td style="text-align:center">C</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">^D</td>
<td style="text-align:center">68</td>
<td style="text-align:center">D</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">^E</td>
<td style="text-align:center">69</td>
<td style="text-align:center">E</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">^F</td>
<td style="text-align:center">70</td>
<td style="text-align:center">F</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">^G</td>
<td style="text-align:center">71</td>
<td style="text-align:center">G</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">^H</td>
<td style="text-align:center">72</td>
<td style="text-align:center">H</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">^I</td>
<td style="text-align:center">73</td>
<td style="text-align:center">I</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">^J</td>
<td style="text-align:center">74</td>
<td style="text-align:center">J</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">^K</td>
<td style="text-align:center">75</td>
<td style="text-align:center">K</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center">^L</td>
<td style="text-align:center">76</td>
<td style="text-align:center">L</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td style="text-align:center">^M</td>
<td style="text-align:center">77</td>
<td style="text-align:center">M</td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td style="text-align:center">^N</td>
<td style="text-align:center">78</td>
<td style="text-align:center">N</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">^O</td>
<td style="text-align:center">79</td>
<td style="text-align:center">O</td>
</tr>
<tr>
<td style="text-align:center">16</td>
<td style="text-align:center">^P</td>
<td style="text-align:center">80</td>
<td style="text-align:center">P</td>
</tr>
<tr>
<td style="text-align:center">17</td>
<td style="text-align:center">^Q</td>
<td style="text-align:center">81</td>
<td style="text-align:center">Q</td>
</tr>
<tr>
<td style="text-align:center">18</td>
<td style="text-align:center">^R</td>
<td style="text-align:center">82</td>
<td style="text-align:center">R</td>
</tr>
<tr>
<td style="text-align:center">19</td>
<td style="text-align:center">^S</td>
<td style="text-align:center">83</td>
<td style="text-align:center">S</td>
</tr>
<tr>
<td style="text-align:center">20</td>
<td style="text-align:center">^T</td>
<td style="text-align:center">84</td>
<td style="text-align:center">T</td>
</tr>
<tr>
<td style="text-align:center">21</td>
<td style="text-align:center">^U</td>
<td style="text-align:center">85</td>
<td style="text-align:center">U</td>
</tr>
<tr>
<td style="text-align:center">22</td>
<td style="text-align:center">^V</td>
<td style="text-align:center">86</td>
<td style="text-align:center">V</td>
</tr>
<tr>
<td style="text-align:center">23</td>
<td style="text-align:center">^W</td>
<td style="text-align:center">87</td>
<td style="text-align:center">W</td>
</tr>
<tr>
<td style="text-align:center">24</td>
<td style="text-align:center">^X</td>
<td style="text-align:center">88</td>
<td style="text-align:center">X</td>
</tr>
<tr>
<td style="text-align:center">25</td>
<td style="text-align:center">^Y</td>
<td style="text-align:center">89</td>
<td style="text-align:center">Y</td>
</tr>
<tr>
<td style="text-align:center">26</td>
<td style="text-align:center">^Z</td>
<td style="text-align:center">90</td>
<td style="text-align:center">Z</td>
</tr>
<tr>
<td style="text-align:center">27</td>
<td style="text-align:center">^[</td>
<td style="text-align:center">91</td>
<td style="text-align:center">[</td>
</tr>
<tr>
<td style="text-align:center">28</td>
<td style="text-align:center">^\</td>
<td style="text-align:center">92</td>
<td style="text-align:center">\</td>
</tr>
<tr>
<td style="text-align:center">29</td>
<td style="text-align:center">^]</td>
<td style="text-align:center">93</td>
<td style="text-align:center">]</td>
</tr>
<tr>
<td style="text-align:center">30</td>
<td style="text-align:center">^^</td>
<td style="text-align:center">94</td>
<td style="text-align:center">^</td>
</tr>
<tr>
<td style="text-align:center">31</td>
<td style="text-align:center">^_</td>
<td style="text-align:center">95</td>
<td style="text-align:center">_</td>
</tr>
<tr>
<td style="text-align:center">32</td>
<td style="text-align:center"></td>
<td style="text-align:center">96</td>
<td style="text-align:center">`</td>
</tr>
<tr>
<td style="text-align:center">33</td>
<td style="text-align:center">!</td>
<td style="text-align:center">97</td>
<td style="text-align:center">a</td>
</tr>
<tr>
<td style="text-align:center">34</td>
<td style="text-align:center">“</td>
<td style="text-align:center">98</td>
<td style="text-align:center">b</td>
</tr>
<tr>
<td style="text-align:center">35</td>
<td style="text-align:center">#</td>
<td style="text-align:center">99</td>
<td style="text-align:center">c</td>
</tr>
<tr>
<td style="text-align:center">36</td>
<td style="text-align:center">$</td>
<td style="text-align:center">100</td>
<td style="text-align:center">d</td>
</tr>
<tr>
<td style="text-align:center">37</td>
<td style="text-align:center">%</td>
<td style="text-align:center">101</td>
<td style="text-align:center">e</td>
</tr>
<tr>
<td style="text-align:center">38</td>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">102</td>
<td style="text-align:center">f</td>
</tr>
<tr>
<td style="text-align:center">39</td>
<td style="text-align:center">‘</td>
<td style="text-align:center">103</td>
<td style="text-align:center">g</td>
</tr>
<tr>
<td style="text-align:center">40</td>
<td style="text-align:center">(</td>
<td style="text-align:center">104</td>
<td style="text-align:center">h</td>
</tr>
<tr>
<td style="text-align:center">41</td>
<td style="text-align:center">)</td>
<td style="text-align:center">105</td>
<td style="text-align:center">i</td>
</tr>
<tr>
<td style="text-align:center">42</td>
<td style="text-align:center">*</td>
<td style="text-align:center">106</td>
<td style="text-align:center">j</td>
</tr>
<tr>
<td style="text-align:center">43</td>
<td style="text-align:center">+</td>
<td style="text-align:center">107</td>
<td style="text-align:center">k</td>
</tr>
<tr>
<td style="text-align:center">44</td>
<td style="text-align:center">,</td>
<td style="text-align:center">108</td>
<td style="text-align:center">l</td>
</tr>
<tr>
<td style="text-align:center">45</td>
<td style="text-align:center">-</td>
<td style="text-align:center">109</td>
<td style="text-align:center">m</td>
</tr>
<tr>
<td style="text-align:center">46</td>
<td style="text-align:center">.</td>
<td style="text-align:center">110</td>
<td style="text-align:center">n</td>
</tr>
<tr>
<td style="text-align:center">47</td>
<td style="text-align:center">/</td>
<td style="text-align:center">111</td>
<td style="text-align:center">o</td>
</tr>
<tr>
<td style="text-align:center">48</td>
<td style="text-align:center">0</td>
<td style="text-align:center">112</td>
<td style="text-align:center">p</td>
</tr>
<tr>
<td style="text-align:center">49</td>
<td style="text-align:center">1</td>
<td style="text-align:center">113</td>
<td style="text-align:center">q</td>
</tr>
<tr>
<td style="text-align:center">50</td>
<td style="text-align:center">2</td>
<td style="text-align:center">114</td>
<td style="text-align:center">r</td>
</tr>
<tr>
<td style="text-align:center">51</td>
<td style="text-align:center">3</td>
<td style="text-align:center">115</td>
<td style="text-align:center">s</td>
</tr>
<tr>
<td style="text-align:center">52</td>
<td style="text-align:center">4</td>
<td style="text-align:center">116</td>
<td style="text-align:center">t</td>
</tr>
<tr>
<td style="text-align:center">53</td>
<td style="text-align:center">5</td>
<td style="text-align:center">117</td>
<td style="text-align:center">u</td>
</tr>
<tr>
<td style="text-align:center">54</td>
<td style="text-align:center">6</td>
<td style="text-align:center">118</td>
<td style="text-align:center">v</td>
</tr>
<tr>
<td style="text-align:center">55</td>
<td style="text-align:center">7</td>
<td style="text-align:center">119</td>
<td style="text-align:center">w</td>
</tr>
<tr>
<td style="text-align:center">56</td>
<td style="text-align:center">8</td>
<td style="text-align:center">120</td>
<td style="text-align:center">x</td>
</tr>
<tr>
<td style="text-align:center">57</td>
<td style="text-align:center">9</td>
<td style="text-align:center">121</td>
<td style="text-align:center">y</td>
</tr>
<tr>
<td style="text-align:center">58</td>
<td style="text-align:center">:</td>
<td style="text-align:center">122</td>
<td style="text-align:center">z</td>
</tr>
<tr>
<td style="text-align:center">59</td>
<td style="text-align:center">;</td>
<td style="text-align:center">123</td>
<td style="text-align:center">{</td>
</tr>
<tr>
<td style="text-align:center">60</td>
<td style="text-align:center">&lt;</td>
<td style="text-align:center">124</td>
<td style="text-align:center">\</td>
<td></td>
</tr>
<tr>
<td style="text-align:center">61</td>
<td style="text-align:center">=</td>
<td style="text-align:center">125</td>
<td style="text-align:center">}</td>
</tr>
<tr>
<td style="text-align:center">62</td>
<td style="text-align:center">&gt;</td>
<td style="text-align:center">126</td>
<td style="text-align:center">~</td>
</tr>
<tr>
<td style="text-align:center">63</td>
<td style="text-align:center">?</td>
<td style="text-align:center">127</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>下面就是OI界的常用工具，注意是优先级越高的运算符越先结合，此处越高的含义指的是表中的位置越高（即优先级序号越小）</p>
<h2 id="运算符优先级表"><a href="#运算符优先级表" class="headerlink" title="运算符优先级表"></a>运算符优先级表</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">优先级</th>
<th style="text-align:center">运算符</th>
<th style="text-align:center">结合性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">()&nbsp;&nbsp;[]</td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">! &nbsp;&nbsp;+（正）&nbsp;&nbsp;-（负）&nbsp;&nbsp; ~&nbsp;&nbsp; ++&nbsp;&nbsp; - - &nbsp;&nbsp;</td>
<td style="text-align:center">从右到左</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">*&nbsp;&nbsp; / &nbsp;&nbsp;%</td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">+（加）&nbsp;&nbsp; -（减）</td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">&lt;&lt;&nbsp;&nbsp; &gt;&gt; &nbsp;&nbsp;&gt;&gt;&gt;</td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">&lt; &nbsp;&nbsp;&lt;= &nbsp;&nbsp;&gt;=&nbsp;&nbsp; instanceof</td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">==  &nbsp;&nbsp; !=</td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">^</td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">&#124;</td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">&amp;&amp;</td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center">&#124;&#124;</td>
<td style="text-align:center">从左到右</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td style="text-align:center">?&nbsp;&nbsp;:</td>
<td style="text-align:center">从右到左</td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td style="text-align:center">=&nbsp;&nbsp; += &nbsp;&nbsp;-= &nbsp;&nbsp;*=&nbsp;&nbsp; /= &nbsp;&nbsp;%= &nbsp;&nbsp;&amp;= &nbsp;&nbsp;&#124;=&nbsp;&nbsp; ^= &nbsp;&nbsp; ~=&nbsp;&nbsp; &lt;&lt;= &nbsp;&nbsp;&gt;&gt;=&nbsp;&nbsp; &gt;&gt;&gt;=</td>
<td style="text-align:center">从右到左</td>
</tr>
</tbody>
</table>
</div>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;存放以前编写的图表汇总，便于查找&lt;br&gt;
    
    </summary>
    
    
      <category term="图表" scheme="https://goseqh.tk/tags/%E5%9B%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Libre Online Judge模板库</title>
    <link href="https://goseqh.tk/2017/08/29/Libre-Online-Judge%E6%A8%A1%E6%9D%BF%E5%BA%93/"/>
    <id>https://goseqh.tk/2017/08/29/Libre-Online-Judge模板库/</id>
    <published>2017-08-29T10:14:06.000Z</published>
    <updated>2017-09-04T00:17:35.511Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>储存一些代码模板<br><a id="more"></a></p>
<h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 998244353</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 4000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> ufs[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find_root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> ufs[x] = (ufs[x] == x) ? x : find_root(ufs[x]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">int</span> op, x, y;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ufs[i] = i;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;op, &amp;x, &amp;y);</div><div class="line">        <span class="keyword">if</span> (op == <span class="number">0</span>) ufs[find_root(x)] = find_root(y);</div><div class="line">        <span class="keyword">else</span> ans = ((ans &lt;&lt; <span class="number">1</span>) % M + (find_root(x) == find_root(y))) % M;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="乘法逆元"><a href="#乘法逆元" class="headerlink" title="乘法逆元"></a>乘法逆元</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 3000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">LL inv[maxn];</div><div class="line">LL n, p;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    inv[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"1\n"</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        inv[i] = (p - (p / i) * inv[p % i] % p) % p;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, inv[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;p);</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="最大异或和"><a href="#最大异或和" class="headerlink" title="最大异或和"></a>最大异或和</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 55</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">LL line[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (j == i || line[i] ^ line[j] &gt; line[j]) <span class="keyword">continue</span>;</div><div class="line">            line[j] ^= line[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) ans ^= line[i];</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;line[i]);</div><div class="line">    &#125;</div><div class="line">    sort(line, line + n);</div><div class="line">    reverse(line, line + n);</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="子串查找-KMP"><a href="#子串查找-KMP" class="headerlink" title="子串查找(KMP)"></a>子串查找(KMP)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"><span class="keyword">char</span> t[maxn];</div><div class="line"><span class="keyword">int</span> lent;</div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"><span class="keyword">int</span> lens;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; lent; i++)&#123;</div><div class="line">        <span class="keyword">int</span> k = f[i];</div><div class="line">        <span class="keyword">while</span> (k &amp;&amp; t[k] != t[i]) k = f[k];</div><div class="line">        f[i + <span class="number">1</span>] = (t[k] == t[i]) ? k + <span class="number">1</span> : <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> now = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lens; i++)&#123;</div><div class="line">        <span class="keyword">while</span> (now &amp;&amp; s[i] != t[now]) now = f[now];</div><div class="line">        <span class="keyword">if</span> (s[i] == t[now]) now++;</div><div class="line">        <span class="keyword">if</span> (now == lent) ans++, now = f[now];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, s, t);</div><div class="line">    lent = <span class="built_in">strlen</span>(t);</div><div class="line">    lens = <span class="built_in">strlen</span>(s);</div><div class="line">    init();</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="普通平衡树-Treap"><a href="#普通平衡树-Treap" class="headerlink" title="普通平衡树(Treap)"></a>普通平衡树(Treap)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></div><div class="line">    node* ch[<span class="number">2</span>];</div><div class="line">    <span class="keyword">int</span> val, num, size, p;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span></span>&#123;</div><div class="line">        size = <span class="number">0</span>;</div><div class="line">        size += (ch[<span class="number">0</span>] == <span class="literal">NULL</span>) ? <span class="number">0</span> : ch[<span class="number">0</span>] -&gt; size;</div><div class="line">        size += (ch[<span class="number">1</span>] == <span class="literal">NULL</span>) ? <span class="number">0</span> : ch[<span class="number">1</span>] -&gt; size;</div><div class="line">        size += num;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> _val)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (_val == val) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        <span class="keyword">return</span> val &lt; _val;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find_pre</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> d = cmp(x);</div><div class="line">        <span class="keyword">if</span> (d == <span class="number">0</span> || d == <span class="number">-1</span>) <span class="keyword">return</span> (ch[<span class="number">0</span>] == <span class="literal">NULL</span>) ? -INF : ch[<span class="number">0</span>] -&gt; find_pre(x);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> max(val, (ch[<span class="number">1</span>] == <span class="literal">NULL</span>) ? -INF : ch[<span class="number">1</span>] -&gt; find_pre(x));</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find_suf</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> d = cmp(x);</div><div class="line">        <span class="keyword">if</span> (d == <span class="number">1</span> || d == <span class="number">-1</span>) <span class="keyword">return</span> (ch[<span class="number">1</span>] == <span class="literal">NULL</span>) ? INF : ch[<span class="number">1</span>] -&gt; find_suf(x);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> min(val, (ch[<span class="number">0</span>] == <span class="literal">NULL</span>) ? INF : ch[<span class="number">0</span>] -&gt; find_suf(x));</div><div class="line">    &#125;</div><div class="line">    node (<span class="keyword">int</span> val, <span class="keyword">int</span> num, <span class="keyword">int</span> p) : val(val), num(num), p(p), size(<span class="number">1</span>)&#123;ch[<span class="number">0</span>] = ch[<span class="number">1</span>] = <span class="literal">NULL</span>;&#125;</div><div class="line">    node()&#123;&#125;</div><div class="line">&#125;;</div><div class="line">node* root;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Rand</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> p = rand() % maxn;</div><div class="line">    <span class="keyword">while</span> (vis[p]) p = rand() % maxn;</div><div class="line">    vis[p] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> p;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(node*&amp; o, <span class="keyword">int</span> d)</span></span>&#123;</div><div class="line">    node* k = o -&gt; ch[d]; o -&gt; ch[d] = k -&gt; ch[d ^ <span class="number">1</span>]; k -&gt; ch[d ^ <span class="number">1</span>] = o;</div><div class="line">    k -&gt; maintain();</div><div class="line">    o -&gt; maintain();</div><div class="line">    o = k;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(node*&amp; now, <span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (now == <span class="literal">NULL</span>) now = <span class="keyword">new</span> node(x, <span class="number">1</span>, Rand());</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (now -&gt; val == x) now -&gt; num++;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> d = now -&gt; cmp(x);</div><div class="line">        insert(now -&gt; ch[d], x);</div><div class="line">        <span class="keyword">if</span> (now -&gt; ch[d] -&gt; p &gt; now -&gt; p) rotate(now, d);</div><div class="line">    &#125;</div><div class="line">    now -&gt; maintain();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(node*&amp; now, <span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (now == <span class="literal">NULL</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (now -&gt; val == x)&#123;</div><div class="line">        <span class="keyword">if</span> (now -&gt; num == <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (now -&gt; ch[<span class="number">0</span>] == <span class="literal">NULL</span> &amp;&amp; now -&gt; ch[<span class="number">1</span>] == <span class="literal">NULL</span>)&#123;</div><div class="line">                now = <span class="literal">NULL</span>;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span> d = ((now -&gt; ch[<span class="number">0</span>] == <span class="literal">NULL</span>) ? -INF : now -&gt; ch[<span class="number">0</span>] -&gt; p) &lt; </div><div class="line">            ((now -&gt; ch[<span class="number">1</span>] == <span class="literal">NULL</span>) ? -INF : now -&gt; ch[<span class="number">1</span>] -&gt; p);</div><div class="line">            rotate(now, d); remove(now -&gt; ch[d ^ <span class="number">1</span>], x);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> now -&gt; num--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> remove(now -&gt; ch[now -&gt; cmp(x)], x);</div><div class="line">    now -&gt; maintain();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_rank</span><span class="params">(node* now, <span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans;</div><div class="line">    <span class="keyword">if</span> (now == <span class="literal">NULL</span>) <span class="keyword">return</span> -INF;</div><div class="line">    <span class="keyword">int</span> d = now -&gt; cmp(x);</div><div class="line">    <span class="keyword">if</span> (d == <span class="number">-1</span>) ans = <span class="number">1</span> + ((now -&gt; ch[<span class="number">0</span>] == <span class="literal">NULL</span>) ? <span class="number">0</span> : now -&gt; ch[<span class="number">0</span>] -&gt; size);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (d == <span class="number">0</span>) ans = get_rank(now -&gt; ch[<span class="number">0</span>], x);</div><div class="line">    <span class="keyword">else</span> ans = now -&gt; num + get_rank(now -&gt; ch[<span class="number">1</span>], x) + ((now -&gt; ch[<span class="number">0</span>] == <span class="literal">NULL</span>) ? <span class="number">0</span> : now -&gt; ch[<span class="number">0</span>] -&gt; size);</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_by_rank</span><span class="params">(node* now, <span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (now == <span class="literal">NULL</span>) <span class="keyword">return</span> -INF;</div><div class="line">    <span class="keyword">int</span> l = (now -&gt; ch[<span class="number">0</span>] == <span class="literal">NULL</span>) ? <span class="number">0</span> : now -&gt; ch[<span class="number">0</span>] -&gt; size;</div><div class="line">    <span class="keyword">if</span> (x &gt; l &amp;&amp; x &lt;= l + now -&gt; num) <span class="keyword">return</span> now -&gt; val;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &lt;= l) <span class="keyword">return</span> find_by_rank(now -&gt; ch[<span class="number">0</span>], x);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> find_by_rank(now -&gt; ch[<span class="number">1</span>], x - l - now -&gt; num);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_pre</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> root -&gt; find_pre(x);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_suf</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> root -&gt; find_suf(x);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n, x, op;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;op);</div><div class="line">        <span class="keyword">switch</span>(op)&#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>:&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                insert(root, x);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> <span class="number">2</span>:&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                remove(root, x);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> <span class="number">3</span>:&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, get_rank(root, x));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> <span class="number">4</span>:&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, find_by_rank(root, x));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> <span class="number">5</span>:&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, get_pre(x));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> <span class="number">6</span>:&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, get_suf(x));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="最小费用流-MCMF"><a href="#最小费用流-MCMF" class="headerlink" title="最小费用流(MCMF)"></a>最小费用流(MCMF)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 405</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 15005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to, flow, cost;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to, <span class="keyword">int</span> flow, <span class="keyword">int</span> cost) : next(next), to(to), flow(flow), cost(cost)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxm &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> h[maxn], n, m, cnt = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to, <span class="keyword">int</span> flow, <span class="keyword">int</span> cost)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to, flow, cost);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr, <span class="number">0</span>, -cost);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> d[maxn], p[maxn], s, t;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; spfa;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = s; i &lt;= t; i++) d[i] = INF;</div><div class="line">    d[s] = <span class="number">0</span>;</div><div class="line">    spfa.push(s);</div><div class="line">    vis[s] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!spfa.empty())&#123;</div><div class="line">        <span class="keyword">int</span> op = spfa.front(); spfa.pop();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[op]; i; i = e[i].next)&#123;</div><div class="line">            <span class="keyword">if</span> (!e[i].flow) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> k = e[i].to;</div><div class="line">            <span class="keyword">if</span> (d[k] &gt; d[op] + e[i].cost)&#123;</div><div class="line">                p[k] = i;</div><div class="line">                d[k] = d[op] + e[i].cost;</div><div class="line">                <span class="keyword">if</span> (!vis[k])&#123;</div><div class="line">                    vis[k] = <span class="number">1</span>;</div><div class="line">                    spfa.push(k);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        vis[op] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (d[t] &gt;= INF) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Augment</span><span class="params">(<span class="keyword">int</span>&amp; maxflow, <span class="keyword">int</span>&amp; mincost)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> now = t, flow = INF;</div><div class="line">    <span class="keyword">while</span> (now != s)&#123;</div><div class="line">        <span class="keyword">int</span> k = p[now];</div><div class="line">        flow = min(flow, e[k].flow);</div><div class="line">        now = e[k ^ <span class="number">1</span>]. to;</div><div class="line">    &#125;</div><div class="line">    now = t;</div><div class="line">    <span class="keyword">while</span> (now != s)&#123;</div><div class="line">        <span class="keyword">int</span> k = p[now];</div><div class="line">        e[k].flow -= flow;</div><div class="line">        e[k ^ <span class="number">1</span>].flow += flow;</div><div class="line">        now = e[k ^ <span class="number">1</span>].to;</div><div class="line">    &#125;</div><div class="line">    maxflow += flow, mincost += (d[t] - d[s]) * flow;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MCMF</span><span class="params">(<span class="keyword">int</span>&amp; maxflow, <span class="keyword">int</span>&amp; mincost)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(SPFA()) Augment(maxflow, mincost);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">int</span> x, y, f, c;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;x, &amp;y, &amp;f, &amp;c);</div><div class="line">        Add_Edge(x, y, f, c);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> maxflow = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> mincost = <span class="number">0</span>;</div><div class="line">    s = <span class="number">1</span>, t = n;</div><div class="line">    MCMF(maxflow, mincost);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d"</span>, maxflow, mincost);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="维护全序集-Treap"><a href="#维护全序集-Treap" class="headerlink" title="维护全序集(Treap)"></a>维护全序集(Treap)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 3000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></div><div class="line">    node* ch[<span class="number">2</span>];</div><div class="line">    <span class="keyword">int</span> val, num, p, size;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> _val)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (val == _val) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        <span class="keyword">return</span> _val &gt; val;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span></span>&#123;</div><div class="line">        size = <span class="number">0</span>;</div><div class="line">        size += (ch[<span class="number">0</span>] == <span class="literal">NULL</span>) ? <span class="number">0</span> : ch[<span class="number">0</span>] -&gt; size;</div><div class="line">        size += (ch[<span class="number">1</span>] == <span class="literal">NULL</span>) ? <span class="number">0</span> : ch[<span class="number">1</span>] -&gt; size;</div><div class="line">        size += num;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find_pre</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> d = cmp(x);</div><div class="line">        <span class="keyword">if</span> (d &lt;= <span class="number">0</span>) <span class="keyword">return</span> (ch[<span class="number">0</span>] == <span class="literal">NULL</span>) ? -INF : ch[<span class="number">0</span>] -&gt; find_pre(x);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> max(val, (ch[<span class="number">1</span>] == <span class="literal">NULL</span>) ? -INF : ch[<span class="number">1</span>] -&gt; find_pre(x));</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find_suf</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> d = cmp(x);</div><div class="line">        <span class="keyword">if</span> (d == <span class="number">1</span> || d == <span class="number">-1</span>) <span class="keyword">return</span> (ch[<span class="number">1</span>] == <span class="literal">NULL</span>) ? INF : ch[<span class="number">1</span>] -&gt; find_suf(x);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> min(val, (ch[<span class="number">0</span>] == <span class="literal">NULL</span>) ? INF : ch[<span class="number">0</span>] -&gt; find_suf(x));</div><div class="line">    &#125;</div><div class="line">    node(<span class="keyword">int</span> val, <span class="keyword">int</span> num, <span class="keyword">int</span> p, <span class="keyword">int</span> size) : val(val), num(num), p(p), size(size)&#123;ch[<span class="number">0</span>] = ch[<span class="number">1</span>] = <span class="literal">NULL</span>;&#125;</div><div class="line">    node()&#123;&#125;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(node*&amp; now, <span class="keyword">int</span> d)</span></span>&#123;</div><div class="line">    node* k = now -&gt; ch[d]; now -&gt; ch[d] = k -&gt; ch[d ^ <span class="number">1</span>]; k -&gt; ch[d ^ <span class="number">1</span>] = now;</div><div class="line">    k -&gt; maintain();</div><div class="line">    now -&gt; maintain();</div><div class="line">    now = k;</div><div class="line">&#125;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Rand</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> p = rand() % maxn;</div><div class="line">    <span class="keyword">while</span> (vis[p]) p = rand() % maxn;</div><div class="line">    vis[p] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> p;</div><div class="line">&#125;</div><div class="line">node* root;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(node*&amp; now, <span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (now == <span class="literal">NULL</span>) now = <span class="keyword">new</span> node (x, <span class="number">1</span>, Rand(), <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (now -&gt; val == x) now -&gt; num++;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> d = now -&gt; cmp(x);</div><div class="line">        insert(now -&gt; ch[d], x);</div><div class="line">        <span class="keyword">if</span> (now -&gt; ch[d] -&gt; p &gt; now -&gt; p) rotate(now, d);</div><div class="line">    &#125;</div><div class="line">    now -&gt; maintain();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(node*&amp; now, <span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (now == <span class="literal">NULL</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (now -&gt; val == x)&#123;</div><div class="line">        <span class="keyword">if</span> (now -&gt; num == <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (now -&gt; ch[<span class="number">0</span>] == <span class="literal">NULL</span>) now = now -&gt; ch[<span class="number">1</span>];</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(now -&gt; ch[<span class="number">1</span>] == <span class="literal">NULL</span>) now = now -&gt; ch[<span class="number">0</span>];</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">int</span> d = now -&gt; ch[<span class="number">0</span>] -&gt; p &lt; now -&gt; ch[<span class="number">1</span>] -&gt; p;</div><div class="line">                rotate(now, d);</div><div class="line">                remove(now -&gt; ch[d ^ <span class="number">1</span>], x);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> now -&gt; num--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> remove(now -&gt; ch[now -&gt; cmp(x)], x);</div><div class="line">    <span class="keyword">if</span> (now != <span class="literal">NULL</span>) now -&gt; maintain();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_by_rank</span><span class="params">(node*&amp; now, <span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (now == <span class="literal">NULL</span>) <span class="keyword">return</span> -INF;</div><div class="line">    <span class="keyword">int</span> l = (now -&gt; ch[<span class="number">0</span>] == <span class="literal">NULL</span>) ? <span class="number">0</span> : now -&gt; ch[<span class="number">0</span>] -&gt; size;</div><div class="line">    <span class="keyword">if</span> (x &gt; l &amp;&amp; x &lt;= l + now -&gt; num) <span class="keyword">return</span> now -&gt; val;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &lt;= l) <span class="keyword">return</span> find_by_rank(now -&gt; ch[<span class="number">0</span>], x);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> find_by_rank(now -&gt; ch[<span class="number">1</span>], x - l - now -&gt; num);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_rank</span><span class="params">(node*&amp; now, <span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (now == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> d = now -&gt; cmp(x);</div><div class="line">    <span class="keyword">int</span> l = (now -&gt; ch[<span class="number">0</span>] == <span class="literal">NULL</span>) ? <span class="number">0</span> : now -&gt; ch[<span class="number">0</span>] -&gt; size;</div><div class="line">    <span class="keyword">if</span> (d == <span class="number">-1</span>) <span class="keyword">return</span> l;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (d == <span class="number">1</span>) <span class="keyword">return</span> now -&gt; num + l + get_rank(now -&gt; ch[<span class="number">1</span>], x);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> get_rank(now -&gt; ch[<span class="number">0</span>], x);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_pre</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> k = root -&gt; find_pre(x);</div><div class="line">    <span class="keyword">if</span> (k == -INF) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">return</span> k;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_suf</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> k = root -&gt; find_suf(x);</div><div class="line">    <span class="keyword">if</span> (k == INF) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">return</span> k;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n, x, op;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;op);</div><div class="line">        <span class="keyword">switch</span>(op)&#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">0</span>:&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                insert(root, x);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>:&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                remove(root, x);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> <span class="number">2</span>:&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, find_by_rank(root, x));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> <span class="number">3</span>:&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, get_rank(root, x));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> <span class="number">4</span>:&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, get_pre(x));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> <span class="number">5</span>:&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, get_suf(x));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="最大流-ISAP"><a href="#最大流-ISAP" class="headerlink" title="最大流(ISAP)"></a>最大流(ISAP)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 4000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn2 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    LL flow;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to, LL flow) : next(next), to(to), flow(flow)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> h[maxn2], cnt = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, LL z)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[x], y, z);</div><div class="line">    h[x] = cnt;</div><div class="line">    e[++cnt] = edge(h[y], x, <span class="number">0</span>);</div><div class="line">    h[y] = cnt;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> d[maxn2], p[maxn2], cur[maxn2], num[maxn2];</div><div class="line"><span class="keyword">int</span> n, m, s, t;</div><div class="line"><span class="keyword">bool</span> vis[maxn2]; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Augment</span><span class="params">(LL&amp; maxflow)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> now = t;</div><div class="line">    LL flow = (LL)INF * INF;</div><div class="line">    <span class="keyword">while</span> (now != s)&#123;</div><div class="line">        <span class="keyword">int</span> k = p[now];</div><div class="line">        flow = min(flow, e[k].flow);</div><div class="line">        now = e[k ^ <span class="number">1</span>].to;</div><div class="line">    &#125;</div><div class="line">    now = t;</div><div class="line">    <span class="keyword">while</span> (now != s)&#123;</div><div class="line">        <span class="keyword">int</span> k = p[now];</div><div class="line">        e[k].flow -= flow;</div><div class="line">        e[k ^ <span class="number">1</span>].flow += flow;</div><div class="line">        now = e[k ^ <span class="number">1</span>].to;</div><div class="line">    &#125;</div><div class="line">    maxflow += flow;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) d[i] = INF;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; bfs;</div><div class="line">    bfs.push(t);</div><div class="line">    vis[t] = <span class="number">1</span>;</div><div class="line">    d[t] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (!bfs.empty())&#123;</div><div class="line">        <span class="keyword">int</span> op = bfs.front();bfs.pop();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[op]; i; i = e[i].next)&#123;</div><div class="line">            <span class="keyword">if</span> (e[i].flow) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> k = e[i].to;</div><div class="line">            <span class="keyword">if</span> (vis[k]) <span class="keyword">continue</span>;</div><div class="line">            vis[k] = <span class="number">1</span>;</div><div class="line">            d[k] = d[op] + <span class="number">1</span>;</div><div class="line">            bfs.push(k);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (d[s] &gt;= INF) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ISAP</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!BFS())&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"0"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </div><div class="line">        <span class="keyword">if</span>(d[i] &gt;= INF) <span class="keyword">continue</span>; </div><div class="line">        <span class="keyword">else</span> num[d[i]]++, cur[i] = h[i];</div><div class="line">    LL maxflow = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> u = s;</div><div class="line">    <span class="keyword">while</span> (d[s] &lt; n)&#123;</div><div class="line">        <span class="keyword">bool</span> if_work = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (u == t)&#123;</div><div class="line">            Augment(maxflow);</div><div class="line">            u = s;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = cur[u]; i; i = e[i].next)&#123;</div><div class="line">            <span class="keyword">if</span>(!e[i].flow) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> k = e[i].to;</div><div class="line">            <span class="keyword">if</span> (d[u] - <span class="number">1</span> == d[k])&#123;</div><div class="line">                cur[u] = i;</div><div class="line">                u = k;</div><div class="line">                if_work = <span class="number">1</span>;</div><div class="line">                p[u] = i;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!if_work)&#123;</div><div class="line">            <span class="keyword">int</span> minnum = n - <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = h[u]; i; i = e[i].next)&#123;</div><div class="line">                <span class="keyword">if</span> (!e[i].flow) <span class="keyword">continue</span>;</div><div class="line">                minnum = min(minnum, d[e[i].to]);</div><div class="line">            &#125;</div><div class="line">            num[d[u]]--;</div><div class="line">            <span class="keyword">if</span> (num[d[u]] == <span class="number">0</span>)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%lld"</span>, maxflow);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            d[u] = minnum + <span class="number">1</span>;</div><div class="line">            cur[u] = h[u];</div><div class="line">            num[d[u]]++;</div><div class="line">            <span class="keyword">if</span> (u != s) u = e[p[u] ^ <span class="number">1</span>].to;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, maxflow);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    LL z;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;s, &amp;t);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>, &amp;x, &amp;y, &amp;z);</div><div class="line">        Add_Edge(x, y, z);</div><div class="line">    &#125;</div><div class="line">    ISAP();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="多项式乘法"><a href="#多项式乘法" class="headerlink" title="多项式乘法"></a>多项式乘法</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pi 3.141592653589793</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">complex</span>&#123;</span></div><div class="line">    <span class="keyword">double</span> r, i;</div><div class="line">    <span class="keyword">complex</span>(<span class="keyword">double</span> r, <span class="keyword">double</span> i) : r(r), i(i)&#123;&#125;</div><div class="line">    <span class="keyword">complex</span>()&#123;&#125;</div><div class="line">&#125;com;</div><div class="line">com <span class="keyword">operator</span> + (com a, com b)&#123;</div><div class="line">    <span class="keyword">return</span> com(a.r + b.r, a.i + b.i);</div><div class="line">&#125;</div><div class="line">com <span class="keyword">operator</span> - (com a, com b)&#123;</div><div class="line">    <span class="keyword">return</span> com(a.r - b.r, a.i - b.i);</div><div class="line">&#125;</div><div class="line">com <span class="keyword">operator</span> * (com a, com b)&#123;</div><div class="line">    <span class="keyword">return</span> com(a.r * b.r - a.i * b.i, a.r * b.i + a.i * b.r);</div><div class="line">&#125;</div><div class="line">com <span class="keyword">operator</span> / (com a, <span class="keyword">int</span> k)&#123;</div><div class="line">    <span class="keyword">return</span> com(a.r / k, a.i / k);</div><div class="line">&#125;</div><div class="line"><span class="function">com <span class="title">ex</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> com(<span class="built_in">cos</span>(x), <span class="built_in">sin</span>(x));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> rev[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> bit)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; bit); i++)&#123;</div><div class="line">        rev[i] = rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span> | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(com* a, <span class="keyword">int</span> n, <span class="keyword">int</span> dft)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span> (rev[i] &gt; i) swap(a[rev[i]], a[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> step = <span class="number">1</span>; step &lt; n; step &lt;&lt;= <span class="number">1</span>)&#123;</div><div class="line">        com wn = ex(pi * dft / step);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j += (step &lt;&lt; <span class="number">1</span>))&#123;</div><div class="line">            com wnk = com(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = j; i &lt; j + step; i++)&#123;</div><div class="line">                com x = a[i];</div><div class="line">                com y = a[i + step] * wnk;</div><div class="line">                a[i] = x + y;</div><div class="line">                a[i + step] = x - y;</div><div class="line">                wnk = wnk * wn;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (dft == <span class="number">-1</span>) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) a[i] = a[i] / n;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> s[maxn];</div><div class="line"><span class="keyword">int</span> t[maxn];</div><div class="line">com a[maxn];</div><div class="line">com b[maxn];</div><div class="line"><span class="keyword">int</span> ans[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"mul.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"mul.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;s[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) a[i] = com(s[i], <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) b[i] = com(t[i], <span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span> len = n + m + <span class="number">2</span>;</div><div class="line">    <span class="keyword">int</span> si = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (len)&#123;</div><div class="line">        len &gt;&gt;= <span class="number">1</span>;</div><div class="line">        si++;</div><div class="line">    &#125;</div><div class="line">    init(si);</div><div class="line">    len = (<span class="number">1</span> &lt;&lt; si);</div><div class="line">    FFT(a, len, <span class="number">1</span>);</div><div class="line">    FFT(b, len, <span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) a[i] = a[i] * b[i];</div><div class="line">    FFT(a, len, <span class="number">-1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) ans[i] = (<span class="keyword">int</span>) (a[i].r + <span class="number">0.5</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + m + <span class="number">1</span>; i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, ans[i]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="后缀排序"><a href="#后缀排序" class="headerlink" title="后缀排序"></a>后缀排序</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"><span class="keyword">int</span> t1[maxn];</div><div class="line"><span class="keyword">int</span> t2[maxn];</div><div class="line"><span class="keyword">int</span> sa[maxn];</div><div class="line"><span class="keyword">int</span> cnt[maxn];</div><div class="line"><span class="keyword">int</span> rank[maxn];</div><div class="line"><span class="keyword">int</span> height[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> *x = t1, *y = t2;</div><div class="line">    m = <span class="number">62</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) cnt[x[i] = s[i]]++;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) cnt[i] += cnt[i - <span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) sa[--cnt[x[i]]] = i;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k &lt;&lt;= <span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= n - k; i--) y[p++] = i;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span> (sa[i] &gt;= k) y[p++] = sa[i] - k;</div><div class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span>(cnt));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; i++) cnt[x[y[i]]]++;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) cnt[i] += cnt[i - <span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = p - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) sa[--cnt[x[y[i]]]] = y[i];</div><div class="line">        p = <span class="number">0</span>;</div><div class="line">        swap(x, y);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">            x[sa[i]] = (!i || y[sa[i]] != y[sa[i - <span class="number">1</span>]] || y[sa[i] + k] != y[sa[i - <span class="number">1</span>] + k]) ? p++ : p - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        m = p;</div><div class="line">        <span class="keyword">if</span> (m &gt;= n) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) rank[sa[i]] = i;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> h = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (h) h--;</div><div class="line">        <span class="keyword">if</span> (rank[i] == <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> j = sa[rank[i] - <span class="number">1</span>];</div><div class="line">        <span class="keyword">while</span> (s[i + h] == s[j + h]) h++;</div><div class="line">        height[rank[i]] = h;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"Suffix.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"Suffix.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">    n = <span class="built_in">strlen</span>(s);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">isdigit</span>(s[i])) s[i] = s[i] - <span class="string">'0'</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isupper</span>(s[i])) s[i] = s[i] - <span class="string">'A'</span> + <span class="number">10</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">islower</span>(s[i])) s[i] = s[i] - <span class="string">'a'</span> + <span class="number">36</span>;</div><div class="line">    &#125;</div><div class="line">    build();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, sa[i] + <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 505</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">LL a[maxn][maxn];</div><div class="line">LL b[maxn][maxn];</div><div class="line">LL c[maxn][maxn];</div><div class="line"><span class="keyword">int</span> n, m, p;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;p, &amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; p; j++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i][j]), a[i][j] = (a[i][j] + M) % M;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; i++)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;b[i][j]), b[i][j] = (b[i][j] + M) % M;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; p; k++)</div><div class="line">                c[i][j] = (c[i][j] + a[i][k] * b[k][j] % M) % M;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%lld "</span>, c[i][j]);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;储存一些代码模板&lt;br&gt;
    
    </summary>
    
    
      <category term="网络流" scheme="https://goseqh.tk/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="zkw费用流" scheme="https://goseqh.tk/tags/zkw%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>Libre Online Judge阶段性汇总I</title>
    <link href="https://goseqh.tk/2017/08/29/Libre-Online-Judge%E9%98%B6%E6%AE%B5%E6%80%A7%E6%B1%87%E6%80%BBI/"/>
    <id>https://goseqh.tk/2017/08/29/Libre-Online-Judge阶段性汇总I/</id>
    <published>2017-08-29T10:07:44.000Z</published>
    <updated>2017-09-04T00:16:23.163Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>最近也开始总结LOJ的题目啦，以前一道题一篇题解<strong>太傻了</strong>，但是以前的就那样吧，现在开始每十题一篇题解<br><a id="more"></a></p>
<h2 id="首篇说明"><a href="#首篇说明" class="headerlink" title="首篇说明"></a>首篇说明</h2><p>为了方便，以后的题目显示采用iframe框架</p>
<h1 id="507-「LibreOJ-NOI-Round-1」接竹竿"><a href="#507-「LibreOJ-NOI-Round-1」接竹竿" class="headerlink" title="#507. 「LibreOJ NOI Round #1」接竹竿"></a>#507. 「LibreOJ NOI Round #1」接竹竿</h1><iframe src="https://loj.ac/problem/507" width="775" height="2180" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>其实我们可以发现，对于这种序列DP的问题，大部分其实都是可以单调队列优化的，我们考虑对比两种可行的方案，然后进行一些数学推导，往往可以得到一些单调队列形式的公式，这样就可以使用单调队列完美地解决这样的问题了</p>
<p>本题也不例外，但是前提是本题需要抽象思考一下，那就是这题的牌的取出顺序不会造成什么影响，我们可以发现，如果我们先取出了一些，后来又取了一些，那么后面取的要么可以完全包含前面取的那些牌，要么与上次不相交，所以本题就可以使用单调队列进行优化然后解决了，单调队列层面上，就是列一列公式，对每种花色开一个单调队列，然后套用单调队列模板化代码即可（详见BZOJ题解）</p>
<p>然而实际上，经过分析以后，本题可以不使用单调队列这种方法，因为DP计算公式中与决策有关的项是与当前要求的状态没有任何关联的，这样我们只要采用打擂台的方法，维护一个最大值即可</p>
<p>这也就说明，单调队列优化的DP的出现，是为了解决与决策与当前状态有关联时的DP问题，而如果没有关联则不需要这种方法</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> c[maxn];</div><div class="line"><span class="keyword">int</span> v[maxn];</div><div class="line">LL pre[maxn];</div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    LL y;</div><div class="line">    point(<span class="keyword">int</span> x, LL y) : x(x), y(y)&#123;&#125;</div><div class="line">    point()&#123;&#125;</div><div class="line">&#125;;</div><div class="line">point save[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line">LL dp[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v[i]);</div><div class="line">        pre[i] = pre[i - <span class="number">1</span>] + v[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        dp[i] = dp[i - <span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span> (!vis[c[i]])&#123;</div><div class="line">            vis[c[i]] = <span class="number">1</span>;</div><div class="line">            save[c[i]] = point(i - <span class="number">1</span>, dp[i - <span class="number">1</span>]);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        dp[i] = max(dp[i], save[c[i]].y + pre[i] - pre[save[c[i]].x]);</div><div class="line">        <span class="keyword">if</span> (dp[i - <span class="number">1</span>] - save[c[i]].y &gt; pre[i - <span class="number">1</span>] - pre[save[c[i]].x]) save[c[i]] = point(i - <span class="number">1</span>, dp[i - <span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, dp[n]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="514-「LibreOJ-β-Round-2」模拟只会猜题意"><a href="#514-「LibreOJ-β-Round-2」模拟只会猜题意" class="headerlink" title="#514. 「LibreOJ β Round #2」模拟只会猜题意"></a>#514. 「LibreOJ β Round #2」模拟只会猜题意</h1><iframe src="https://loj.ac/problem/514" width="775" height="1680" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><p>本题只是暴力。。。好了就这样过了吧<del>本题只是用来证明LOJ评测机速度的</del></p>
<h2 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> pre[maxn];</div><div class="line"><span class="keyword">int</span> ans[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">        pre[i] = pre[i - <span class="number">1</span>] + line[i];</div><div class="line">    &#125;</div><div class="line">    ans[n + <span class="number">1</span>] = -INF;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)&#123;</div><div class="line">        ans[i] = ans[i + <span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n - i + <span class="number">1</span>; j++)&#123;</div><div class="line">            ans[i] = max(ans[i], pre[j + i - <span class="number">1</span>] - pre[j - <span class="number">1</span>]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[x]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="516-「LibreOJ-β-Round-2」DP-一般看规律"><a href="#516-「LibreOJ-β-Round-2」DP-一般看规律" class="headerlink" title="#516. 「LibreOJ β Round #2」DP 一般看规律"></a>#516. 「LibreOJ β Round #2」DP 一般看规律</h1><iframe src="https://loj.ac/problem/516" width="775" height="2300" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先这种不可逆染色问题，基本都能上来就想到是并查集，然后题目要求的就是任一两个相同的颜色间的最小距离，那么我们只需要用set维护，然后启发式合并即可</p>
<h2 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 300005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483647</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">qu</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    qu(<span class="keyword">int</span> x, <span class="keyword">int</span> y) : x(x), y(y)&#123;&#125;</div><div class="line">    qu()&#123;&#125;</div><div class="line">&#125;q[maxn];</div><div class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; save[maxn];</div><div class="line"><span class="keyword">int</span> a[maxn];</div><div class="line"><span class="keyword">int</span> c[maxn];</div><div class="line"><span class="keyword">int</span> tag[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; x)</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    read(n), read(m);</div><div class="line">    <span class="keyword">int</span> ct = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(a[i]), c[ct++] = a[i];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        read(q[i].x), read(q[i].y);</div><div class="line">        c[ct++] = q[i].x, c[ct++] = q[i].y;</div><div class="line">    &#125;</div><div class="line">    sort(c, c + ct);</div><div class="line">    ct = unique(c, c + ct) - c;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ct; i++) tag[i] = i;</div><div class="line">    <span class="keyword">int</span> ans = INF;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        a[i] =  lower_bound(c, c + ct, a[i]) - c;</div><div class="line">        save[a[i]].insert(i);</div><div class="line"></div><div class="line">        <span class="keyword">auto</span> it = save[a[i]].lower_bound(i);</div><div class="line">        <span class="comment">//auto it = lower_bound(save[a[i]].begin(), save[a[i]].end(), i);</span></div><div class="line">        <span class="keyword">if</span> (it != save[a[i]].begin()) ans = min(ans, i - *(--it));</div><div class="line">        it = save[a[i]].upper_bound(i);</div><div class="line">        <span class="comment">//it = upper_bound(save[a[i]].begin(), save[a[i]].end(), i);</span></div><div class="line">        <span class="keyword">if</span> (it != save[a[i]].end()) ans = min(ans, *it - i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123; </div><div class="line">        q[i].x = lower_bound(c, c + ct, q[i].x) - c,</div><div class="line">        q[i].y = lower_bound(c, c + ct, q[i].y) - c;</div><div class="line">        <span class="keyword">int</span> x = q[i].x, y = q[i].y;</div><div class="line">        <span class="keyword">if</span> (x == y)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (save[tag[x]].size() &gt; save[tag[y]].size()) swap(tag[x], tag[y]);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = save[tag[x]].begin(); it != save[tag[x]].end(); it++)&#123;</div><div class="line">            save[tag[y]].insert(*it);</div><div class="line"></div><div class="line">            <span class="keyword">auto</span> it2 = save[tag[y]].lower_bound(*it);</div><div class="line">            <span class="comment">//auto it2 = lower_bound(save[tag[y]].begin(), save[tag[y]].end(), *it);</span></div><div class="line">            <span class="keyword">if</span> (it2 != save[tag[y]].begin()) ans = min(ans, *it - *(--it2));</div><div class="line">            it2 = save[tag[y]].upper_bound(*it);</div><div class="line">            <span class="comment">//it2 = upper_bound(save[tag[y]].begin(), save[tag[y]].end(), *it);</span></div><div class="line">            <span class="keyword">if</span> (it2 != save[tag[y]].end()) ans = min(ans, *it2 - *it);</div><div class="line">        &#125;</div><div class="line">        save[tag[x]].clear();</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="524-「LibreOJ-β-Round-4」游戏"><a href="#524-「LibreOJ-β-Round-4」游戏" class="headerlink" title="#524. 「LibreOJ β Round #4」游戏"></a>#524. 「LibreOJ β Round #4」游戏</h1><iframe src="https://loj.ac/problem/524" width="775" height="1770" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先，我们先考虑一下极端情况：</p>
<ul>
<li>n = 1的时候，显然先手会输</li>
<li>没有’X’的时候，显然要计算逆序对数判断输赢</li>
</ul>
<p>然后，对于一般的情况，我们可以发现，谁控制了最后一个’X’，谁就一定会赢，为什么呢？我们不考虑之前他们做了什么，根据题目，所有数两两不同，所以，我们抽象思考，把所有数排序，每次令填的数产生一些微小的变换使之超过正好一个数，这样逆序对数一定会变化且仅变化1，这样奇偶性便改变了</p>
<h2 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x &amp; -x</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, line[maxn];</div><div class="line"><span class="keyword">int</span> sline[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> c[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span> (x &lt;= n)&#123;</div><div class="line">        c[x] += v;</div><div class="line">        x += lowbit(x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x)&#123;</div><div class="line">        ans += c[x];</div><div class="line">        x -= lowbit(x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"L"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">char</span> s[<span class="number">15</span>];</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'X'</span>) &#123;</div><div class="line">            i--;</div><div class="line">            n--;</div><div class="line">            sum++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'-'</span>)&#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="built_in">strlen</span>(s); j++) line[i] = <span class="number">10</span> * line[i] + s[j] - <span class="string">'0'</span>;</div><div class="line">                line[i] = -line[i];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(s); j++) line[i] = <span class="number">10</span> * line[i] + s[j] - <span class="string">'0'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (sum != <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">if</span> (sum &amp; <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"W"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"L"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> sum2 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) sline[i] = line[i];</div><div class="line">        sort(sline + <span class="number">1</span>, sline + n + <span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </div><div class="line">            line[i] = lower_bound(sline + <span class="number">1</span>, sline + <span class="number">1</span> + n, line[i]) - sline;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)&#123;</div><div class="line">            add(line[i], <span class="number">1</span>);</div><div class="line">            sum2 += get(line[i] - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (sum2 &amp; <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"W"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"L"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>忘了考虑负数的读入。。。导致WA了两次</p>
<h1 id="525-「LibreOJ-β-Round-4」多项式"><a href="#525-「LibreOJ-β-Round-4」多项式" class="headerlink" title="#525. 「LibreOJ β Round #4」多项式"></a>#525. 「LibreOJ β Round #4」多项式</h1><iframe src="https://loj.ac/problem/525" width="775" height="1250" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h2><p>本题长知识啊。。。</p>
<p>本题需要先知道一个东西：广义欧拉定理，关于其正确性，同年级数竞神犇zth,llq和wsy正在证明。。。</p>
<p>然后或者想到分治FFT，看了这道题终于明白这个是什么了</p>
<p>直接引用官方题解吧，好像想得都差不多</p>
<p>考虑广义欧拉定理：对于任何整数 $x$ 和 $n \geq \varphi(k)$，均有 $x^n \bmod k = x^{n \bmod \varphi(k)+\varphi(k)} \bmod k$。我们选择 $n=2\varphi(k)+1$,即有多项式 $x^n+(k-1)x^{n-\varphi(k)}$ 满足条件。只需要 $O(\sqrt{n})$ 或 $O(n)$ 或 $O(n\log{n})$ 计算 $\varphi(k)$。</p>
<p>此题还有一种复杂度为 $O(n\log^2(n))$ 的做法，即直接考虑多项式 $x(x−1)(x−2)(x−3)……(x−(k−1))$，明显符合条件。使用分治 + FFT 计算即可。但由于常数较大，且时限只有0.1s, 可能不能通过本题。</p>
<h2 id="AC代码-4"><a href="#AC代码-4" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> phi[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i])&#123;</div><div class="line">            p[cnt++] = i;</div><div class="line">            phi[i] = i - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * p[j] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * p[j]] = <span class="number">1</span>;</div><div class="line">            phi[i * p[j]] = phi[i] * (p[j] - <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>)&#123;</div><div class="line">                phi[i * p[j]] = phi[i] * p[j];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> k;</div><div class="line">    init();</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</div><div class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"-1"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="number">1</span> + (phi[k] &lt;&lt; <span class="number">1</span>));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; phi[k] + <span class="number">1</span>; i++) <span class="built_in">printf</span>(<span class="string">"0 "</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, k - <span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = phi[k] + <span class="number">2</span>; i &lt; (<span class="number">1</span> + (phi[k] &lt;&lt; <span class="number">1</span>)); i++) <span class="built_in">printf</span>(<span class="string">"0 "</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意这个是广义欧拉定理</p>
<h1 id="526-「LibreOJ-β-Round-4」子集"><a href="#526-「LibreOJ-β-Round-4」子集" class="headerlink" title="#526. 「LibreOJ β Round #4」子集"></a>#526. 「LibreOJ β Round #4」子集</h1><iframe src="https://loj.ac/problem/526" width="775" height="2325" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h2><p>本题的思路可以类比SDOI2016的数字配对那道题，我们可以发现本题经过图论连边转化后（不能在一起的数之间连边），可以化为一般图最大独立集问题，但是这样我们依然无法解决，我们必须再寻找性质进行处理才行</p>
<p>我们观察数字，考虑把一般图化为二分图，我们很容易发现，奇偶性相同的数字之间不可能连边，这样即为一个二分图，直接网络流跑二分图最大独立集问题即可</p>
<p>本题主要还是类比了一些成题的思路</p>
<h2 id="AC代码-5"><a href="#AC代码-5" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 300005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, s, t;</div><div class="line">LL line[maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to, flow;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to, <span class="keyword">int</span> flow) : next(next), to(to), flow(flow)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxm &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> cur[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to, <span class="keyword">int</span> flow)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to, flow);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr, <span class="number">0</span>);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; bfs;</div><div class="line">    bfs.push(s);</div><div class="line">    <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span>(d));</div><div class="line">    <span class="keyword">while</span> (!bfs.empty())&#123;</div><div class="line">        <span class="keyword">int</span> op = bfs.front();bfs.pop();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[op]; i; i = e[i].next)&#123;</div><div class="line">            <span class="keyword">if</span> (!e[i].flow) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">int</span> k = e[i].to;</div><div class="line">            <span class="keyword">if</span> (k == s || d[k]) <span class="keyword">continue</span>;</div><div class="line">            d[k] = d[op] + <span class="number">1</span>;</div><div class="line">            bfs.push(k);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = s; i &lt;= t; i++) cur[i] = h[i];</div><div class="line">    <span class="keyword">if</span> (d[t]) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> a)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == t) <span class="keyword">return</span> a;</div><div class="line">    <span class="keyword">int</span> rest = a;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>&amp; i = cur[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">if</span> (!e[i].flow) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (d[op] != d[x] + <span class="number">1</span>) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> k = DFS(op, min(rest, e[i].flow));</div><div class="line">        e[i].flow -= k;</div><div class="line">        e[i ^ <span class="number">1</span>].flow += k;</div><div class="line">        rest -= k;</div><div class="line">        <span class="keyword">if</span> (!rest) <span class="keyword">return</span> a; </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a - rest;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dinic</span><span class="params">(<span class="keyword">int</span>&amp; maxflow)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span> (BFS()) maxflow += DFS(s, INF);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL x, LL y)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (y == <span class="number">0</span>) ? x : gcd(y, x % y);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;line[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (gcd(line[i], line[j]) == <span class="number">1</span> &amp;&amp; gcd(line[i] + <span class="number">1</span>, line[j] + <span class="number">1</span>) == <span class="number">1</span>)&#123;</div><div class="line">                <span class="keyword">if</span> (line[i] &amp; <span class="number">1</span>) Add_Edge(i, j, <span class="number">1</span>);</div><div class="line">                <span class="keyword">else</span> Add_Edge(j, i, <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    s = <span class="number">0</span>, t = n + <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (line[i] &amp; <span class="number">1</span>) Add_Edge(s, i, <span class="number">1</span>);</div><div class="line">        <span class="keyword">else</span> Add_Edge(i, t, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> maxflow = <span class="number">0</span>;</div><div class="line">    Dinic(maxflow);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, n - maxflow);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>忘记清空d数组了。。。WA了一次</p>
<h1 id="528-「LibreOJ-β-Round-4」求和"><a href="#528-「LibreOJ-β-Round-4」求和" class="headerlink" title="#528. 「LibreOJ β Round #4」求和"></a>#528. 「LibreOJ β Round #4」求和</h1><iframe src="https://loj.ac/problem/528" width="775" height="1330" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-6"><a href="#题目分析-6" class="headerlink" title="题目分析"></a>题目分析</h2><p>显然是莫比乌斯反演，但是套用了常规的套路（外层枚举gcd的值然后计算）后发现需要计算$\mu^2(x)$的前缀和（不能线性筛），然而这个好像并不能办到，于是就GG了。。。</p>
<p>然而每当我们遇到$\mu^2(x)$这种东西的时候，其实可以使用它的定义，那就是所有质因子次数小于等于一的数的个数，这样，我们外层枚举$x$，内部用$x^2$来计算，公式就是这个样子的了：</p>
<script type="math/tex; mode=display">\sum_{x = 1}^n \mu(x) * \left[\frac{n}{x ^ 2}\right] * \left[\frac{m}{x ^ 2}\right]</script><p>于是我们就可以直接$O(\sqrt{n})$搞掉本题了。。。</p>
<h2 id="AC代码-6"><a href="#AC代码-6" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 998244353</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> mu[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i])&#123;</div><div class="line">            p[cnt++] = i;</div><div class="line">            mu[i] = <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * p[j] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * p[j]] = <span class="number">1</span>;</div><div class="line">            mu[i * p[j]] = mu[i] * (<span class="number">-1</span>);</div><div class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>)&#123;</div><div class="line">                mu[i * p[j]] = <span class="number">0</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(LL n, LL m)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    LL con = min((LL)<span class="built_in">sqrt</span>(n), (LL)<span class="built_in">sqrt</span>(m));</div><div class="line">    <span class="keyword">for</span> (LL x = <span class="number">1</span>; x &lt;= con; x++)&#123;</div><div class="line">        ans = (ans + (((n / (x * x)) % M) * ((m / (x * x)) % M) % M * mu[x] + M) % M) % M;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    LL n, m;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;m);</div><div class="line">    work(n, m);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="2000-「SDOI2017」数字表格"><a href="#2000-「SDOI2017」数字表格" class="headerlink" title="#2000. 「SDOI2017」数字表格"></a>#2000. 「SDOI2017」数字表格</h1><iframe src="https://loj.ac/problem/2000" width="775" height="1450" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-7"><a href="#题目分析-7" class="headerlink" title="题目分析"></a>题目分析</h2><p>其实就是一个普通的莫比乌斯反演题，直接上套路，枚举gcd的值，然后求出有多少个(i, j)的gcd是这个值，那么这个个数就是对应斐波那契数列对应项的指数，然后再采用变量整体化（积性函数提取）方法，即可解决本题，不懂的请移步<a href="https://goseqh.tk/2017/06/30/莫比乌斯反演总结/">《莫比乌斯反演总结》</a></p>
<p>公式就不贴了，上面的总结里面有对应公式（就在积性函数提取那里）</p>
<h2 id="AC代码-7"><a href="#AC代码-7" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">LL mu[maxn];</div><div class="line">LL f[maxn];</div><div class="line">LL s[maxn];</div><div class="line">LL pre[maxn];</div><div class="line">LL prime[maxn], cnt;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">getinv</span><span class="params">(LL x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (x == <span class="number">1</span>) ? <span class="number">1</span> : </div><div class="line">    ((-(M / x) * getinv(M % x)) % M + M) % M;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">power</span><span class="params">(LL x, LL y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (y == <span class="number">-1</span>) <span class="keyword">return</span> getinv(x);</div><div class="line">    LL ans = <span class="number">1</span>, con = x;</div><div class="line">    <span class="keyword">while</span> (y)&#123;</div><div class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ans = ans * con % M;</div><div class="line">        con = con * con % M;</div><div class="line">        y &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i])&#123;</div><div class="line">            prime[cnt++] = i;</div><div class="line">            mu[i] = <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * prime[j] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * prime[j]] = <span class="number">1</span>;</div><div class="line">            mu[i * prime[j]] = mu[i] * (<span class="number">-1</span>);</div><div class="line">            <span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>)&#123;</div><div class="line">                mu[i * prime[j]] = <span class="number">0</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    f[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        f[i] = (f[i - <span class="number">1</span>] + f[i - <span class="number">2</span>]) % M;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) s[i] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; i * j &lt; maxn ; j++)&#123;</div><div class="line">                s[i * j] = s[i * j] * power(f[i], mu[j]) % M;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    pre[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    pre[<span class="number">1</span>] = s[<span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        pre[i] = pre[i - <span class="number">1</span>] * s[i] % M;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= min(n, m); i++)&#123;</div><div class="line">        LL next = min(n / (n / i), m / (m / i));</div><div class="line">        ans = ans * power(pre[next] * getinv(pre[i - <span class="number">1</span>]) % M, (n / i) * (m / i)) % M;</div><div class="line">        i = next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL n, m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    LL T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;m);</div><div class="line">        work(n, m);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="2001-「SDOI2017」树点涂色"><a href="#2001-「SDOI2017」树点涂色" class="headerlink" title="#2001. 「SDOI2017」树点涂色"></a>#2001. 「SDOI2017」树点涂色</h1><iframe src="https://loj.ac/problem/2001" width="775" height="1760" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-8"><a href="#题目分析-8" class="headerlink" title="题目分析"></a>题目分析</h2><p>本题是一个LCT类比的思路，就是用access操作类比题目中的染色操作，为什么这样类比呢？因为这样做，我们可以清楚地知道那些链是同色的，在改变颜色以及统计答案时都会比较方便，如果只是使用树链剖分，我们就不会知道一条链的哪些地方颜色发生了中断，就无法维护信息了</p>
<p>几乎是人生第一次正式的使用LCT，练习了一下，于是就发生了一个大错误，调了我一半夜，凌晨3点才调完。。。那就是每个splay的顶端并非链的顶端，我们要更新的话，要用链的顶端，这样就要在splay上一直向左跑才行。。。然而我很晚才发现这件事情。。。</p>
<h2 id="AC代码-8"><a href="#AC代码-8" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt = <span class="number">1</span>, h[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[x], y);</div><div class="line">    h[x] = cnt;</div><div class="line">    e[++cnt] = edge(h[y], x);</div><div class="line">    h[y] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> fa[maxn];</div><div class="line"><span class="keyword">int</span> son[maxn];</div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">int</span> si[maxn];</div><div class="line"><span class="keyword">int</span> top[maxn];</div><div class="line"><span class="keyword">int</span> dfs[maxn];</div><div class="line"><span class="keyword">int</span> idfs[maxn];</div><div class="line"><span class="keyword">int</span> t;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x]) <span class="keyword">continue</span>;</div><div class="line">        fa[op] = x;</div><div class="line">        d[op] = d[x] + <span class="number">1</span>;</div><div class="line">        DFS1(op);</div><div class="line">        si[x] += si[op];</div><div class="line">        <span class="keyword">if</span> (si[op] &gt; si[son[x]]) son[x] = op;</div><div class="line">    &#125;</div><div class="line">    si[x]++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> tp)</span></span>&#123;</div><div class="line">    top[x] = tp;</div><div class="line">    dfs[x] = ++t;</div><div class="line">    idfs[t] = x;</div><div class="line">    <span class="keyword">if</span> (son[x]) DFS2(son[x], tp);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == son[x] || op == fa[x]) <span class="keyword">continue</span>;</div><div class="line">        DFS2(op, op);</div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="keyword">int</span> maxnum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> add[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (add[o] != <span class="number">0</span> &amp;&amp; l != r)&#123;</div><div class="line"></div><div class="line">        add[o &lt;&lt; <span class="number">1</span>] += add[o];</div><div class="line">        maxnum[o &lt;&lt; <span class="number">1</span>] += add[o];</div><div class="line"></div><div class="line">        add[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += add[o];</div><div class="line">        maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += add[o];</div><div class="line"></div><div class="line">        add[o] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</div><div class="line">    maxnum[o] = max(maxnum[o &lt;&lt; <span class="number">1</span>], maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) &#123;</div><div class="line">        maxnum[o] = d[idfs[l]] + <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    init(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    init(mid + <span class="number">1</span>, r,  o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        maxnum[o] += qd;</div><div class="line">        add[o] += qd;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) modify(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) modify(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy) <span class="keyword">return</span> maxnum[o];</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) ans = max(ans, get(l, mid, o &lt;&lt; <span class="number">1</span>));</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) ans = max(ans, get(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>));</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"><span class="keyword">int</span> ch[maxn][<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) f[i] = fa[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (!f[x] || (ch[f[x]][<span class="number">0</span>] != x &amp;&amp; ch[f[x]][<span class="number">1</span>] != x));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(is_root(t))<span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> k=f[t];</div><div class="line">    <span class="keyword">if</span>(!is_root(k))&#123;</div><div class="line">        ch[f[k]][ch[f[k]][<span class="number">0</span>]==k?<span class="number">0</span>:<span class="number">1</span>]=t;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> d=(ch[k][<span class="number">0</span>]==t)?<span class="number">0</span>:<span class="number">1</span>;</div><div class="line">    f[t]=f[k];</div><div class="line">    ch[k][d]=ch[t][d^<span class="number">1</span>];</div><div class="line">    f[ch[k][d]]=k;</div><div class="line">    ch[t][d^<span class="number">1</span>]=k;</div><div class="line">    f[k]=t;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span>(!is_root(t))&#123;</div><div class="line">        <span class="keyword">int</span> fa=f[t];</div><div class="line">        <span class="keyword">if</span>(!is_root(fa))&#123;</div><div class="line">            <span class="keyword">int</span> ffa=f[fa];</div><div class="line">            <span class="keyword">int</span> f1=(ch[ffa][<span class="number">0</span>]==fa)?<span class="number">0</span>:<span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> f2=(ch[fa][<span class="number">0</span>]==t)?<span class="number">0</span>:<span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(f1^f2) rotate(t);</div><div class="line">            <span class="keyword">else</span> rotate(fa);</div><div class="line">        &#125;</div><div class="line">        rotate(t);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</div><div class="line">        splay(x);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (ch[x][<span class="number">1</span>])&#123;  </div><div class="line">            <span class="keyword">int</span> _x = ch[x][<span class="number">1</span>];</div><div class="line">            <span class="keyword">while</span> (ch[_x][<span class="number">0</span>])&#123;</div><div class="line">                _x = ch[_x][<span class="number">0</span>];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            qx = dfs[_x], qy = dfs[_x] + si[_x] - <span class="number">1</span>, qd = <span class="number">1</span>;</div><div class="line">            modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ch[x][<span class="number">1</span>] = tmp;</div><div class="line">        tmp = x;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!f[x]) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">int</span> _x = x;</div><div class="line">        <span class="keyword">while</span> (ch[_x][<span class="number">0</span>])&#123;</div><div class="line">            _x = ch[_x][<span class="number">0</span>];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        qx = dfs[_x], qy = dfs[_x] + si[_x] - <span class="number">1</span>, qd = <span class="number">-1</span>;</div><div class="line">        modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        x = f[x];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    access(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">    qx = qy = dfs[x];</div><div class="line">    <span class="keyword">int</span> a = get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    qx = qy = dfs[y];</div><div class="line">    <span class="keyword">int</span> b = get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> f1 = top[x], f2 = top[y];</div><div class="line">    <span class="keyword">while</span> (f1 != f2)&#123;</div><div class="line">        <span class="keyword">if</span> (d[f1] &gt; d[f2])&#123;</div><div class="line">            x = fa[f1];</div><div class="line">            f1 = top[x];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            y = fa[f2];</div><div class="line">            f2 = top[y];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> lca = (d[x] &gt; d[y]) ? y : x;</div><div class="line">    <span class="keyword">int</span> c = fa[lca];</div><div class="line">    </div><div class="line">    qx = qy = dfs[lca];</div><div class="line">    lca = get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line"></div><div class="line"></div><div class="line">    qx = qy = dfs[c];</div><div class="line">    <span class="keyword">if</span> (c) c = get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> c = <span class="number">0</span>; </div><div class="line"></div><div class="line">    <span class="keyword">if</span> (lca == c) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a + b - (c &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a + b - (c &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    qx = dfs[x], qy = dfs[x] + si[x] - <span class="number">1</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, get(<span class="number">1</span>, n, <span class="number">1</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_all</span><span class="params">()</span></span>&#123;</div><div class="line">    DFS1(<span class="number">1</span>);</div><div class="line">    DFS2(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    init(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    init();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">int</span> x, y, op;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        Add_Edge(x, y);</div><div class="line">    &#125;</div><div class="line">    init_all();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;op);</div><div class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            modify(x);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">            query(x, y, i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            query(x);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>数组版的splay和LCT，感觉还是非常好的O(∩_∩)O~</p>
<h1 id="2031-「SDOI2016」数字配对"><a href="#2031-「SDOI2016」数字配对" class="headerlink" title="#2031.「SDOI2016」数字配对"></a>#2031.「SDOI2016」数字配对</h1><iframe src="https://loj.ac/problem/2031" width="775" height="1300" frameborder="0" scrolling="no"></iframe>

<h2 id="题目分析-9"><a href="#题目分析-9" class="headerlink" title="题目分析"></a>题目分析</h2><p>上面好像刚说完这道题。。。这就是用连边然后转化为二分图，然后用费用流解决的那道题，二分图的依据是含有质因子个数的奇偶性，可以想一想为什么</p>
<p>然后。。。本题好像就解决了？？？就是二分图多重最大权匹配问题，直接费用流</p>
<h2 id="AC代码-9"><a href="#AC代码-9" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">LL n, m, s, t;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    LL next, to;</div><div class="line">    LL flow, cost;</div><div class="line">    edge(LL next, LL to, LL flow, LL cost) : next(next), to(to), flow(flow), cost(cost)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line">LL h[maxn], ct = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(LL fr, LL to, LL flow, LL cost)</span></span>&#123;</div><div class="line">    e[++ct] = edge(h[fr], to, flow, cost);</div><div class="line">    h[fr] = ct;</div><div class="line">    e[++ct] = edge(h[to], fr, <span class="number">0</span>, -cost);</div><div class="line">    h[to] = ct;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*bool BFS()&#123;</span></div><div class="line">    queue&lt;LL&gt; bfs;</div><div class="line">    bfs.push(s);</div><div class="line">    memset(d, 0, sizeof(d));</div><div class="line">    while (!bfs.empty())&#123;</div><div class="line">        LL op = bfs.front();bfs.pop();</div><div class="line">        for (LL i = h[op]; i; i = e[i].next)&#123;</div><div class="line">            if (!e[i].flow) continue;</div><div class="line">            LL k = e[i].to;</div><div class="line">            if (d[k] || k == s) continue;</div><div class="line">            d[k] = d[op] + 1;</div><div class="line">            bfs.push(k);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if (!d[t]) return false;</div><div class="line">    return true;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL DFS(LL x, LL a)&#123;</div><div class="line">    if (x == t) return a;</div><div class="line">    LL rest = a;</div><div class="line">    for (LL i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        if (!e[i].flow) continue;</div><div class="line">        LL op = e[i].to;</div><div class="line">        if (d[op] != d[x] + 1) continue;</div><div class="line">        LL k = DFS(op, min(rest, e[i].flow));</div><div class="line">        e[i].flow -= k;</div><div class="line">        e[i ^ 1].flow += k;</div><div class="line">        rest -= k;</div><div class="line">        if (!rest) return a;</div><div class="line">    &#125;</div><div class="line">    return rest - a;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void Dinic(LL&amp; maxflow)&#123;</div><div class="line">    while (BFS()) maxflow += DFS(s, INF);</div><div class="line">&#125;*/</div><div class="line"></div><div class="line"><span class="keyword">bool</span> vis2[maxn];</div><div class="line">LL p2[maxn];</div><div class="line">LL d[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;LL&gt; spfa;</div><div class="line">    spfa.push(s);</div><div class="line">    <span class="keyword">for</span> (LL i = s; i &lt;= t; i++) d[i] = INF;</div><div class="line">    d[s] = <span class="number">0</span>;</div><div class="line">    vis2[s] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!spfa.empty())&#123;</div><div class="line">        LL op = spfa.front();spfa.pop();</div><div class="line">        <span class="keyword">for</span> (LL i = h[op]; i; i = e[i].next)&#123;</div><div class="line">            <span class="keyword">if</span> (!e[i].flow) <span class="keyword">continue</span>;</div><div class="line">            LL k = e[i].to;</div><div class="line">            <span class="keyword">if</span> (d[k] &gt; d[op] + e[i].cost)&#123;</div><div class="line">                d[k] = d[op] + e[i].cost;</div><div class="line">                p2[k] = i;</div><div class="line">                <span class="keyword">if</span> (!vis2[k])&#123;</div><div class="line">                    vis2[k] = <span class="number">1</span>;</div><div class="line">                    spfa.push(k);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        vis2[op] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (d[t] &gt;= INF) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Augment</span><span class="params">(LL&amp; maxflow, LL&amp; mincost)</span></span>&#123;</div><div class="line">    LL now = t, flow = INF;</div><div class="line">    <span class="keyword">while</span> (now != s)&#123;</div><div class="line">        LL k = p2[now];</div><div class="line">        flow = min(flow, e[k].flow);</div><div class="line">        now = e[k ^ <span class="number">1</span>].to;</div><div class="line">    &#125;</div><div class="line">    now = t;</div><div class="line">    <span class="keyword">while</span> (now != s)&#123;</div><div class="line">        LL k = p2[now];</div><div class="line">        e[k].flow -= flow;</div><div class="line">        e[k ^ <span class="number">1</span>].flow += flow;</div><div class="line">        now = e[k ^ <span class="number">1</span>].to;</div><div class="line">    &#125;</div><div class="line">    maxflow += flow, mincost += (d[t] - d[s]) * flow;</div><div class="line">    <span class="keyword">if</span> (mincost &gt; <span class="number">0</span>)&#123;</div><div class="line">        mincost -= (d[t] - d[s]) * flow;</div><div class="line">        maxflow -= flow;</div><div class="line">        maxflow += mincost / (d[s] - d[t]);</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MCMF</span><span class="params">(LL&amp; maxflow, LL&amp; mincost)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span> (SPFA() &amp;&amp; !Augment(maxflow, mincost))&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL p[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line">LL cnt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i]) p[cnt++] = i;</div><div class="line">        <span class="keyword">for</span> (LL j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * p[j] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * p[j]] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> side[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(LL x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">2</span>; i &lt;= (LL) <span class="built_in">sqrt</span>(x); i++)&#123;</div><div class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL a[maxn];</div><div class="line">LL b[maxn];</div><div class="line">LL c[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(LL i)</span></span>&#123;</div><div class="line">    LL x = a[i];</div><div class="line">    LL con = (LL) <span class="built_in">sqrt</span>(x);</div><div class="line">    <span class="keyword">for</span> (LL j = <span class="number">2</span>; j &lt;= con; j++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[j] &amp;&amp; x % j == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">while</span> (x % j == <span class="number">0</span>)&#123;</div><div class="line">                x /= j;</div><div class="line">                side[i] ^= <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            con = (LL) <span class="built_in">sqrt</span>(x);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (x != <span class="number">1</span>) side[i] ^= <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL left[maxn];</div><div class="line">LL cntl;</div><div class="line">LL right[maxn];</div><div class="line">LL cntr;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    s = <span class="number">0</span>, t = n + <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        process(i);</div><div class="line">        <span class="keyword">if</span> (!side[i]) left[++cntl] = i;</div><div class="line">        <span class="keyword">else</span> right[++cntr] = i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (LL j = <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i == j || a[i] % a[j] != <span class="number">0</span> || !judge(a[i] / a[j])) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span> (side[i]) Add_Edge(j, i, INF, -c[i] * c[j]);</div><div class="line">            <span class="keyword">else</span> Add_Edge(i, j, INF, -c[i] * c[j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= cntl; i++)&#123;</div><div class="line">        Add_Edge(s, left[i], b[left[i]], <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= cntr; i++)&#123;</div><div class="line">        Add_Edge(right[i], t, b[right[i]], <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    LL maxflow = <span class="number">0</span>, mincost = <span class="number">0</span>;</div><div class="line">    MCMF(maxflow, mincost);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, maxflow);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i]);</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;b[i]);</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;c[i]);</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;最近也开始总结LOJ的题目啦，以前一道题一篇题解&lt;strong&gt;太傻了&lt;/strong&gt;，但是以前的就那样吧，现在开始每十题一篇题解&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://goseqh.tk/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LOJ" scheme="https://goseqh.tk/tags/LOJ/"/>
    
  </entry>
  
  <entry>
    <title>Libre Online Judge题解目录</title>
    <link href="https://goseqh.tk/2017/08/29/Libre-Online-Judge%E9%A2%98%E8%A7%A3%E7%9B%AE%E5%BD%95/"/>
    <id>https://goseqh.tk/2017/08/29/Libre-Online-Judge题解目录/</id>
    <published>2017-08-29T10:07:12.000Z</published>
    <updated>2017-09-04T00:17:05.503Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>突然发现在Libre Online Judge上也刷了一点题，于是总结一下<br><a id="more"></a></p>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>还是采用老办法，一句话题解采用白色字体，同时每十道题一篇题解</p>
<ul>
<li>LOJ题解目录<ul>
<li>LOJ 阶段性汇总I<ul>
<li><a href="https://loj.ac/problem/507" target="_blank" rel="external">#507. 「LibreOJ NOI Round #1」接竹竿</a> <font color="#FFFFFF">1D/1D优化DP </font></li>
<li><a href="https://loj.ac/problem/514" target="_blank" rel="external">#514. 「LibreOJ β Round #2」模拟只会猜题意</a> <font color="#FFFFFF">暴力 </font></li>
<li><a href="https://loj.ac/problem/516" target="_blank" rel="external">#516. 「LibreOJ β Round #2」DP 一般看规律</a> <font color="#FFFFFF">并查集+启发式合并+stl </font></li>
<li><a href="https://loj.ac/problem/524" target="_blank" rel="external">#524. 「LibreOJ β Round #4」游戏</a> <font color="#FFFFFF">博弈+抽象思考+极端情况判断 </font></li>
<li><a href="https://loj.ac/problem/525" target="_blank" rel="external">#525. 「LibreOJ β Round #4」多项式</a> <font color="#FFFFFF">广义欧拉定理 </font></li>
<li><a href="https://loj.ac/problem/526" target="_blank" rel="external">#526. 「LibreOJ β Round #4」子集</a> <font color="#FFFFFF">网络流+二分图转化 </font></li>
<li><a href="https://loj.ac/problem/528" target="_blank" rel="external">#528. 「LibreOJ β Round #4」求和</a> <font color="#FFFFFF">莫比乌斯反演+$\mu^2(x)$定义法转化 </font></li>
<li><a href="https://loj.ac/problem/2000" target="_blank" rel="external">#2000. 「SDOI2017」数字表格</a> <font color="#FFFFFF">莫比乌斯反演 </font></li>
<li><a href="https://loj.ac/problem/2001" target="_blank" rel="external">#2001. 「SDOI2017」树点涂色</a> <font color="#FFFFFF">LCT+树链剖分 </font></li>
<li><a href="https://loj.ac/problem/2031" target="_blank" rel="external">#2031.「SDOI2016」数字配对</a> <font color="#FFFFFF">网络流+二分图转化 </font></li>
</ul>
</li>
<li>LOJ 阶段性汇总II<ul>
<li><a href="https://loj.ac/problem/2036" target="_blank" rel="external">#2036. 「SHOI2015」自动刷题机</a> <font color="#FFFFFF">二分答案 </font></li>
<li><a href="https://loj.ac/problem/2194" target="_blank" rel="external">#2194. 「SDOI2014」数数</a> <font color="#FFFFFF">AC自动机+情况讨论 </font></li>
<li><a href="https://loj.ac/problem/2234" target="_blank" rel="external">#2234. 「JLOI2014」聪明的燕姿</a> <font color="#FFFFFF"> DFS搜索质因子 </font></li>
<li><a href="https://loj.ac/problem/2236" target="_blank" rel="external">#2236. 「JLOI2014」松鼠的新家</a> <font color="#FFFFFF">树链剖分 </font></li>
<li><a href="https://loj.ac/problem/2245" target="_blank" rel="external">#2245. 「NOI2014」魔法森林</a> <font color="#FFFFFF">LCT/动点SPFA </font></li>
<li><a href="https://loj.ac/problem/2246" target="_blank" rel="external">#2246. 「NOI2014」动物园</a> <font color="#FFFFFF">KMP巧妙应用 </font></li>
<li><a href="https://loj.ac/problem/6030" target="_blank" rel="external">#6030. 「雅礼集训 2017 Day1」矩阵</a> <font color="#FFFFFF">思维题+情况讨论 </font></li>
<li><a href="https://loj.ac/problem/6062" target="_blank" rel="external">#6062. 「2017 山东一轮集训 Day2」Pair</a> <font color="#FFFFFF">转化限制+线段树维护前缀信息 </font></li>
<li><a href="https://loj.ac/problem/6075" target="_blank" rel="external">#6075. 「2017 山东一轮集训 Day6」重建</a> <font color="#FFFFFF">最短路+逐步更新思想 </font></li>
<li><a href="https://loj.ac/problem/6136" target="_blank" rel="external">#6136. 「2017 山东三轮集训 Day4」Left</a> <font color="#FFFFFF">思维题+分治+2-SAT+贪心 </font></li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;突然发现在Libre Online Judge上也刷了一点题，于是总结一下&lt;br&gt;
    
    </summary>
    
    
      <category term="题解目录" scheme="https://goseqh.tk/tags/%E9%A2%98%E8%A7%A3%E7%9B%AE%E5%BD%95/"/>
    
      <category term="LOJ" scheme="https://goseqh.tk/tags/LOJ/"/>
    
  </entry>
  
  <entry>
    <title>zkw费用流详解</title>
    <link href="https://goseqh.tk/2017/08/27/zkw%E8%B4%B9%E7%94%A8%E6%B5%81%E8%AF%A6%E8%A7%A3/"/>
    <id>https://goseqh.tk/2017/08/27/zkw费用流详解/</id>
    <published>2017-08-27T05:25:22.000Z</published>
    <updated>2017-08-27T05:41:39.285Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>还是扒了一篇老文章，感觉年轻时的我真是太强了。。。<br><a id="more"></a></p>
<h1 id="zkw费用流详解"><a href="#zkw费用流详解" class="headerlink" title="zkw费用流详解"></a>zkw费用流详解</h1><p>前排Orz一发       zkw  orz orz orz $\cdots$</p>
<p>今天看了zkw的费用流算法，感觉思路极具巧妙性，最重要的是优点是平均状态下跑得很快，编程复杂度还非常低，实在是十分优良的费用流算法</p>
<p>下面对原理进行详解：</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>zkw费用流主要采用了两大优良算法，第一个是多路增广，第二个就是KM算法的类比，与其说这是一种算法，不如说这是一种思想方法，这真的很强大</p>
<p>感觉这次应该先把代码贴上，然后再进行详解。。。</p>
<p>多路增广这个应该很好理解，就是类似于DFS一样的增广方法，我们传入两个参数，一个是当前的结点编号，另一个是当前的可改进量（这个说法沿袭了刘汝佳的风格，实际上就是当前可以容纳的最大流量），然后像DFS一样搞它就行了，为了防止有圈的出现，我们再对每个点记录一个访问标记，记录这个点是否被访问过就行啦</p>
<p>KM算法类比，不妨把这个称为扩展KM算法，主要就是在多路增广无法继续进行的时候，我们对结点进行一个重赋权操作，改变当前的结点距离标号，这种方法就是类比了KM算法后得到的</p>
<p>那么，该怎么改变呢？我们可以继续类比KM算法，考虑最后一次不能增广时跑出的<strong>残留DFS路径</strong>，然后对这条路径上的结点进行重赋权操作，具体来说，我们先求出来所有这样的差值：<script type="math/tex">D=c_{ji}+D_j-D_i</script></p>
<p>此时无法继续增广，那么对于无法增广的点来说，它的所有不在<strong>残留DFS路径</strong>上的后继结点一定满足：<script type="math/tex">D_i+c_{ij}>D_j\mbox{ ，} j是i的后继结点</script><br>这样，我们找到所有这样的差值的最小值$D_{min}$，然后，把每个在残留DFS路径上的结点的距离标号都同时减去这个值，很容易证明这样并不会破坏每个点之间的距离标号的数量关系（除了原先小于的变成了相等以外），同时还可以使得至少一条新的弧被加入到最短路网络中来，即可以继续进行增广，如果还是不行也可以继续进行扩展，而且扩展的范围会更大，因为更多的弧进入了最短路网络中</p>
<p>这样，算法就这样不停地工作下去，直到彻底不能进行增广，即距离标号也不能再修改的时候，算法结束，就可以跑出来网络中的最小费用流</p>
<p>另外，这个算法并不能直接应用于含有负权边或负权环的网络中，需要用zkw的思路进行转换，将负权边满流，然后在逐渐进行调整，总之这个地方就是一个思想上的工作，反正我还没有实践过。。。</p>
<p>下面贴上代码：<br>注意代码中所有的cost均表示的是距离标号差值，即上文的$D$，这点很重要</p>
<h2 id="zkw费用流"><a href="#zkw费用流" class="headerlink" title="zkw费用流"></a>zkw费用流</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxint=~<span class="number">0U</span>&gt;&gt;<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n,m,pi1,cost=<span class="number">0</span>;</div><div class="line"><span class="keyword">bool</span> v[<span class="number">550</span>];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">etype</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> t,c,u;</div><div class="line">    <span class="comment">//t为后继结点，c为reduced cost，这个很重要，u为当前残量</span></div><div class="line">    etype *next,*pair;</div><div class="line">    etype()&#123;&#125;</div><div class="line">    etype(<span class="keyword">int</span> t_,<span class="keyword">int</span> c_,<span class="keyword">int</span> u_,etype* next_):</div><div class="line">        t(t_),c(c_),u(u_),next(next_)&#123;&#125;</div><div class="line">    <span class="comment">//next为前向星的下一条边，pair为反向边</span></div><div class="line">    <span class="function"><span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="keyword">unsigned</span>,<span class="keyword">void</span>* p)</span></span>&#123;<span class="keyword">return</span> p;&#125;</div><div class="line">&#125; *e[<span class="number">550</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">aug</span><span class="params">(<span class="keyword">int</span> no,<span class="keyword">int</span> m)</span></span></div><div class="line"><span class="comment">//no=当前结点编号，m=可改进量</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(no==n)<span class="keyword">return</span> cost+=pi1*m,m;</div><div class="line">    <span class="comment">//考虑了减少的距离标号</span></div><div class="line">    v[no]=<span class="literal">true</span>;</div><div class="line">    <span class="comment">//记录结点访问情况</span></div><div class="line">    <span class="keyword">int</span> l=m;</div><div class="line">    <span class="keyword">for</span>(etype *i=e[no];i;i=i-&gt;next)</div><div class="line">        <span class="keyword">if</span>(i-&gt;u &amp;&amp; !i-&gt;c &amp;&amp; !v[i-&gt;t])  </div><div class="line">        <span class="comment">//每次选择存在且距离标号差值为0的边进行增广，要求后继结点不能被访问</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> d=aug(i-&gt;t,l&lt;i-&gt;u?l:i-&gt;u);</div><div class="line">            i-&gt;u-=d,i-&gt;pair-&gt;u+=d,l-=d;</div><div class="line">            <span class="comment">//更改当前的可改进量</span></div><div class="line">            <span class="keyword">if</span>(!l)<span class="keyword">return</span> m;</div><div class="line">            <span class="comment">//小优化，提前退出算法</span></div><div class="line">        &#125;</div><div class="line">    <span class="keyword">return</span> m-l;</div><div class="line">&#125;<span class="comment">//多路增广算法</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">modlabel</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> d=maxint;</div><div class="line">    <span class="comment">//d为可修改的距离标号的差值最小值</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="keyword">if</span>(v[i])</div><div class="line">        <span class="keyword">for</span>(etype *j=e[i];j;j=j-&gt;next)</div><div class="line">            <span class="keyword">if</span>(j-&gt;u &amp;&amp; !v[j-&gt;t] &amp;&amp; j-&gt;c&lt;d)d=j-&gt;c;</div><div class="line">            <span class="comment">//求出了d变量</span></div><div class="line">    <span class="keyword">if</span>(d==maxint)<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="comment">//已经无法继续修改距离标号，直接退出算法</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="keyword">if</span>(v[i])</div><div class="line">        <span class="keyword">for</span>(etype *j=e[i];j;j=j-&gt;next)</div><div class="line">            j-&gt;c-=d,j-&gt;pair-&gt;c+=d;</div><div class="line">            <span class="comment">//修改距离标号（即直接修改reduced cost），反向弧要增加</span></div><div class="line">    pi1 += d;</div><div class="line">    <span class="comment">//用于后续的增广环节</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/*freopen("costflow.in","r",stdin);</span></div><div class="line">    freopen("costflow.out","w",stdout);*/</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</div><div class="line">    etype *Pe=<span class="keyword">new</span> etype[m+m];</div><div class="line">    <span class="keyword">while</span>(m--)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> s,t,c,u;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;s,&amp;t,&amp;u,&amp;c);</div><div class="line">        e[s]=<span class="keyword">new</span>(Pe++)etype(t, c,u,e[s]);</div><div class="line">        e[t]=<span class="keyword">new</span>(Pe++)etype(s,-c,<span class="number">0</span>,e[t]);</div><div class="line">        e[s]-&gt;pair=e[t];</div><div class="line">        e[t]-&gt;pair=e[s];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(modlabel())&#123;</div><div class="line">        <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span>(v));</div><div class="line">        <span class="keyword">while</span>(aug(<span class="number">1</span>,maxint))&#123;</div><div class="line">            <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span>(v));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cost);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>原版代码，经实测编译已经通过，注释已在代码中给出，感觉唯一不太好理解的就是那个$reduced\mbox{ }cost$，别的。。。看一看应该差不多</p>
<h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><p>其实这正是我的一些小问题的所在，<del>没想到居然和我想的一样。。。</del>我错了，应该是我居然和zkw大神想的一样，希望大神原谅我。。。这几个问题就是，在重赋权一次以后，一定能出现增广路么？这个其实是并不一定的，所以会影响zkw算法的性能，下面对zkw算法与MCMF算法进行一下性能对比</p>
<p>每次，zkw算法采用的是重赋权以及多路增广，在网络的弧数较多的时候，即在稠密图上的时候，多路增广可以减少重赋权的次数，而每次重赋权操作也只是对数组进行了线性扫描，不需要SPFA的队列等复杂的操作，性能会非常好</p>
<p>而如果是在稀疏图上，每次zkw重赋权操作以后并不保证一定能出现增广路，这样就会导致反复的重赋权，同时这个时候的多路增广也不会起到多大的作用，这时MCMF中的SPFA就发挥出优势来了，所以这时zkw算法会比较慢</p>
<p>引用一段更专业的讲解与总结：</p>
<blockquote>
<p>对于最终流量较大, 而费用取值范围不大的图, 或者是增广路径比较短的图 (如二分图), zkw 算法都会比较快. 原因是充分发挥优势. 比如流多说明可以同一费用反复增广, 费用窄说明不用改太多距离标号就会有新增广路, 增广路径短可以显著改善最坏情况, 因为即使每次就只增加一条边也可以很快凑成最短路. 如果恰恰相反, 流量不大, 费用不小, 增广路还较长, 就不适合 zkw 算法了.</p>
</blockquote>
<p>所以，zkw大神考虑到了<strong>原始对偶算法</strong>的优缺点，综合了SPFA与重赋权算法的优势，进行了改进，下面贴上代码：</p>
<h2 id="改进版zkw费用流"><a href="#改进版zkw费用流" class="headerlink" title="改进版zkw费用流"></a>改进版zkw费用流</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> V=<span class="number">440</span>, E=V*<span class="number">2</span>, maxint=<span class="number">0x3F3F3F3F</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">etype</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> t, c, u;</div><div class="line">    etype *next, *pair;</div><div class="line">    etype() &#123;&#125;</div><div class="line">    etype(<span class="keyword">int</span> T, <span class="keyword">int</span> C, <span class="keyword">int</span> U, etype* N): t(T), c(C), u(U), next(N) &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="keyword">unsigned</span>, <span class="keyword">void</span>* p)</span></span>&#123;<span class="keyword">return</span> p;&#125;</div><div class="line">&#125; *e[V], Te[E+E], *Pe;</div><div class="line"></div><div class="line"><span class="keyword">int</span> S, T, n, piS, cost;</div><div class="line"><span class="keyword">bool</span> v[V];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> c, <span class="keyword">int</span> u)</span></span></div><div class="line">&#123;</div><div class="line">    e[s] = <span class="keyword">new</span>(Pe++) etype(t, +c, u, e[s]);</div><div class="line">    e[t] = <span class="keyword">new</span>(Pe++) etype(s, -c, <span class="number">0</span>, e[t]);</div><div class="line">    e[s]-&gt;pair = e[t];</div><div class="line">    e[t]-&gt;pair = e[s];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">aug</span><span class="params">(<span class="keyword">int</span> no, <span class="keyword">int</span> m)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (no == T) <span class="keyword">return</span> cost += piS * m, m;</div><div class="line">    v[no] = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">int</span> l = m;</div><div class="line">    <span class="keyword">for</span> (etype *i = e[no]; i; i = i-&gt;next)</div><div class="line">        <span class="keyword">if</span> (i-&gt;u &amp;&amp; !i-&gt;c &amp;&amp; !v[i-&gt;t])</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> d = aug(i-&gt;t, l &lt; i-&gt;u ? l : i-&gt;u);</div><div class="line">            i-&gt;u -= d, i-&gt;pair-&gt;u += d, l -= d;</div><div class="line">            <span class="keyword">if</span> (!l) <span class="keyword">return</span> m;</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">return</span> m - l;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">modlabel</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> d[V]; <span class="built_in">memset</span>(d, <span class="number">0x3F</span>, <span class="keyword">sizeof</span>(d)); d[T] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; Q; Q.push_back(T);</div><div class="line">    <span class="keyword">while</span>(Q.size())</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> dt, no = Q.front(); Q.pop_front();</div><div class="line">        <span class="keyword">for</span>(etype *i = e[no]; i; i = i-&gt;next)</div><div class="line">            <span class="keyword">if</span>(i-&gt;pair-&gt;u &amp;&amp; (dt = d[no] - i-&gt;c) &lt; d[i-&gt;t])</div><div class="line">                (d[i-&gt;t] = dt) &lt;= d[Q.size() ? Q.front() : <span class="number">0</span>]</div><div class="line">                    ? Q.push_front(i-&gt;t) : Q.push_back(i-&gt;t);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">        <span class="keyword">for</span>(etype *j = e[i]; j; j = j-&gt;next)</div><div class="line">            j-&gt;c += d[j-&gt;t] - d[i];</div><div class="line">    piS += d[S];</div><div class="line">    <span class="keyword">return</span> d[S] &lt; maxint;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ab[V], *pab[V], w[V];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lt</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span>* p1,<span class="keyword">int</span>* p2)</span> </span>&#123;<span class="keyword">return</span> *p1 &lt; *p2;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</div><div class="line">    <span class="keyword">while</span>(t--)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">memset</span>(e,<span class="number">0</span>,<span class="keyword">sizeof</span>(e));</div><div class="line">        Pe = Te;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">int</span> m, k;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;m, &amp;k);</div><div class="line">        <span class="keyword">int</span> abz = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, pab[abz] = &amp;ab[abz]), abz++;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, pab[abz] = &amp;ab[abz]), abz++;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w[i]);</div><div class="line">        &#125;</div><div class="line">        sort(&amp;pab[<span class="number">0</span>], &amp;pab[abz], lt());</div><div class="line">        <span class="keyword">int</span> c=<span class="number">0xDEADBEEF</span>; n=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; abz; ++i)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(c != *pab[i]) c = *pab[i], ++n;</div><div class="line">            *pab[i] = n;</div><div class="line">        &#125;</div><div class="line">        ++n, S = <span class="number">0</span>, T = n++;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T; ++i) addedge(i, i+<span class="number">1</span>, <span class="number">0</span>, k);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) addedge(ab[i+i], ab[i+i+<span class="number">1</span>], -w[i], <span class="number">1</span>);</div><div class="line">        piS = cost = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(modlabel())&#123;</div><div class="line">            <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span>(v));</div><div class="line">            <span class="keyword">while</span>(aug(S,maxint))&#123;</div><div class="line">                <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span>(v));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, -cost);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>。。。好像长了不少，最后再来段专业性的总结吧</p>
<blockquote>
<p>这个特殊的原始对偶算法在稠密二分费用小的图上不敌原来的 zkw 算法, 但远远胜过暴力 SPFA. 在另外的图上, 对两者都是稳胜. 比暴力 SPFA 快原因是, 多路增广, 同时使用了 Reduced Cost 缩小了费用范围, 从而利于 SPFA 算法的工作 (需要的松弛次数减少), 而且使用 Reduced Cost 后不再有负边, 使 SLF 的优化落到了实处 (回忆: SLF 优化只有当所有边均为正的时候才能发挥出最佳效果), 甚至允许用 Dijkstra 来完成后面的工作. 比 zkw 算法快的原因是, 在流小费用大距离长的图上, 一次性把距离标号改对往往比反复调整更有效率.</p>
</blockquote>
<p>那么，今天的讲解就到此为止啦，ヾ(￣▽￣)Bye~Bye~</p>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;还是扒了一篇老文章，感觉年轻时的我真是太强了。。。&lt;br&gt;
    
    </summary>
    
    
      <category term="网络流" scheme="https://goseqh.tk/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="zkw费用流" scheme="https://goseqh.tk/tags/zkw%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>进阶网络流算法</title>
    <link href="https://goseqh.tk/2017/08/27/%E8%BF%9B%E9%98%B6%E7%BD%91%E7%BB%9C%E6%B5%81%E7%AE%97%E6%B3%95/"/>
    <id>https://goseqh.tk/2017/08/27/进阶网络流算法/</id>
    <published>2017-08-27T04:48:49.000Z</published>
    <updated>2017-08-27T05:23:55.325Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>又双叒叕扒了一篇老文章，感觉年轻时的我真是太强了。。。<br><a id="more"></a></p>
<h1 id="进阶网络流算法"><a href="#进阶网络流算法" class="headerlink" title="进阶网络流算法"></a>进阶网络流算法</h1><h2 id="Catalogue"><a href="#Catalogue" class="headerlink" title="Catalogue:"></a>Catalogue:</h2><p>　　今天简单地看了一下相对高级的网络流的算法，比如无源汇的有上下界的网络流，什么的，现在就来做一个小小的总结</p>
<p>本文即将介绍的算法如下</p>
<ul>
<li>有上下界的网络流<ul>
<li>无源汇时的可行流</li>
<li>有源汇时的可行/最大/最小流</li>
</ul>
</li>
<li>基本模型<ul>
<li>最小割</li>
<li>多源多汇</li>
<li>结点容量</li>
<li>结点盈余/不足</li>
<li>棋盘问题</li>
<li>二分图最大匹配</li>
<li>位置组合问题</li>
</ul>
</li>
</ul>
<p>先来介绍一下有上下界的网络流的基本算法</p>
<h1 id="有上下界的网络流"><a href="#有上下界的网络流" class="headerlink" title="有上下界的网络流"></a>有上下界的网络流</h1><h2 id="题目概况"><a href="#题目概况" class="headerlink" title="题目概况"></a>题目概况</h2><p>　　这种问题的大致条件一般是这样的，现在对于网络流中的每一条弧，除了原先的有$u$结点，$v$结点，$cap$容量，$flow$流量以外，还增加了两个新的属性：流量的上下界，$low$代表下界，$up$代表上界（其实我们可以直接忽略掉上界$up$，把它直接作为容量$cap$来搞），要求每条弧的流量大小均必须满足<strong>在这两个界的之间</strong>，然后要求类似于最大流/最小流之类的东西</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先我们先考虑无源无汇的网络</p>
<h2 id="无源汇有上下界网络流"><a href="#无源汇有上下界网络流" class="headerlink" title="无源汇有上下界网络流"></a>无源汇有上下界网络流</h2><h2 id="题目概况-1"><a href="#题目概况-1" class="headerlink" title="题目概况"></a>题目概况</h2><p>　　首先这样的题目是什么意思。无源无汇的条件即为整个网络流为环状的情况，我们可以发现所有的流都是在这个环中循环移动的，它们就这样一直地，一直地流下去，无休无止。。。<del>直到我们开始做这道题</del></p>
<p>　　我们对于这样的题目该怎么搞呢？</p>
<p>　　我们可以尝试先让所有的弧的流量均<strong>达到下界</strong>，然后在此基础上为了保证<strong>流量平衡</strong>而继续<strong>增大</strong>某些弧的流量（想一想为什么不能减小），下面我们的目的就是构造出一组这样的方案，使得增广完以后每个结点的流量均平衡</p>
<p>　　我们可以考虑这样一种网络：附加网络，它就表示我们要加入原网络中的流量分布情况，即我们将附加网络与原网络合并以后的新网络满足流量平衡的条件，这样我们便可以求出原网络的一组可行流了</p>
<p>　　那么该怎么样考虑这个附加网络呢？</p>
<p>　　我们现在已经人为地使每一条弧都达到了它们的下界，并且导致了流量不平衡的情况（当然出于偶然性而平衡的那些情况本处不考虑），现在就要构造这个附加网络。我们可以发现，现在由于有些弧有流量，而一些没有，会导致一些结点的流入量与流出量<strong>严重不符</strong>，这样，我们可以通过<strong>“多退少补”</strong>的思想，来构造附加网络，具体如下：</p>
<h2 id="Step-1："><a href="#Step-1：" class="headerlink" title="Step 1："></a>Step 1：</h2><p>　　我们定义结点的总流入量：$In(x)$ ，结点的总流出量：$Out(x)$ ，偏移量：$R(x)$</p>
<p>　　由于流出量与流入量情况对称，所以我们先只考虑流入量</p>
<p>　　对于每一个结点的流入量，我们想把它在附加网络中平衡掉，所以我们希望在附加网络中能够想办法“补齐”这个不平衡的现象，所以我们在附加网络中创建超级源$ss$与超级汇$tt$，每次根据这个流入量，我们<strong>从源点$ss$向结点$x$连一条容量为$In(x)$的弧</strong><sup><a href="#fn_1" id="reffn_1">1</a></sup> ，表示我们希望通过这条弧来补齐不平衡量（想一想为什么要这样连弧）</p>
<p>　　下面解释这样连弧的原因</p>
<p>　　原先的网络是一个环状的网络，网络中的流就一直在里面流动，而我们这样做，是为了把原先的网络中的流<strong>导出到超级汇</strong>中，同时再使用<strong>超级源补齐</strong>，因为我们一开始已经开了许多弧的下界流量，比如一条弧$A-&gt;B$，它的流量下界为$LOW$，则现在$A-&gt;B$中已经有了$LOW$的盈余量，而在最终的平衡状态下，$B$点的出弧（实际存在的）也就必然要负担这$LOW$大小的盈余流量，所以我们<strong>从$ss$向$B$连容量为$In(B)$的弧</strong>（虚拟的），这样我们就可以通过这虚拟的弧向实际存在的弧中通流，使实际的弧达到平衡</p>
<p>　　<strong>注意！这里有一种直观的但却十分易错的连弧方法</strong>，即在上述情况下从$B$向$tt$连一条容量为$In(B)$的弧，看起来这样做，我们把多余的流量导出了，使得$B$点的流量平衡了，但仔细想想就会发现，我们是把流量导出到了<strong>一条虚拟的弧</strong>中，它最后并不能作为结果存在，而真正的$B$的那些出弧<strong>还没有流量</strong>（因为<strong>被虚拟弧导走了</strong>，在那时看起来像是平衡了一样），最后结果并不是平衡的</p>
<p>　　所以，重点就在于这个$R$值，由于会有许多重复的情况，所以我们把所有能累加的都累加起来，能得到$R$的一个计算式，如下：</p>
<p>　　　　　　　　　$R(x)=In(x)-Out(x)$<br>　　　　　　　　　　　<br>　　这样，我们先求出所有结点的偏移量，之后继续下一步的操作</p>
<h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2:"></a>Step 2:</h2><p>　　对于每个结点，考察这个结点的$R$值。这个$R$值的正负决定着很多的东西，决定着我们打算向那个方向连弧。原本一个结点它既要连超级源，也要连超级汇，但是我们发现它们可以互相抵消，这样我们只需要连一侧</p>
<p>　　根据上文的分析结果，我们可以知道当这个$R(x)$值为正的时候，我们应该从$ss$向$x$连弧，反之从$x$向$tt$连弧（想一想，如果这里不明白，请回到上文再看一遍）</p>
<p>　　然后，对于那些原来就存在于网络中的弧（实际弧），我们令它们的容量为$cap$-$low$，$flow$为$0$，这样，我们就相当于平衡掉了下界，把原问题转化为了一个普通的网络流问题，但其实还是有少许的区别，我们还要进行小小的处理，将在下一步中讲解</p>
<p>　　我们的弧是连完了，但它一定有解吗？万一还有一些流没有达到平衡条件而导致网络仍然不平衡怎么办？所以，我们只需对超级源和超级汇跑一个最大流，然后判断这个最大流是否与所有正的$R(x)$的和完全相等<sup><a href="#fn_2" id="reffn_2">2</a></sup>，然后由此得出是否无解，这样无源汇的可行流就可以被求出来啦(^o^)/</p>
<h2 id="有源汇上下界网络流"><a href="#有源汇上下界网络流" class="headerlink" title="有源汇上下界网络流"></a>有源汇上下界网络流</h2><p>　　我们可以同时处理可行流/最大流/最小流问题，前述过程中，我们只是探讨了无源汇的情况，而现在我们考虑的是有源汇上下界网络流。其实我们只是需要从原网络中的汇点向原网络中的源点连一条容量无穷大的弧，即可转化为无源无汇问题，然后就可以套用上述过程了</p>
<p>　　而在前述过程中，我们求出了一个最大流，但这个最大流仅仅用来判断答案，而可以作为答案的一部分的是那条后添加的容量无穷大的那条边，那里面的流记录了在原网络中流通的流的大小，可以用于统计答案</p>
<p>　　为了求出最大流/最小流在上述过程（Step 1，Step 2）结束后，我们还需要接下来的一步：</p>
<h2 id="Step-3："><a href="#Step-3：" class="headerlink" title="Step 3："></a>Step 3：</h2><p>　　这时候我们已经搞定了附加网络的作用，还求出了当前的$Maxflow$，下一步我们就是要继续寻找残余的可改进量了（上一步的过程相当于判断解的存在性，而当前的原网络中肯定还剩下许多的待改进量），我们此时只需要去掉超级源与超级汇，以及与它们相连的弧，这时由于原网络中带有源点与汇点，我们可以直接使用这两个点进行后续增广</p>
<h3 id="可行流"><a href="#可行流" class="headerlink" title="可行流"></a>可行流</h3><p>其实这时已经求完了，我们去掉超级源与超级汇以后，我们剩下的部分就一定是可行流</p>
<h3 id="最大流"><a href="#最大流" class="headerlink" title="最大流"></a>最大流</h3><p>　　我们可以直接在残量网络上再跑一遍最大流算法（由$s$到$t$），然后把这个答案与前述步骤答案（即上文的容量无穷大的弧的流量）相加即为最大流，这时的意义即为我们充分利用了残量网络中的残余流量</p>
<h3 id="最小流"><a href="#最小流" class="headerlink" title="最小流"></a>最小流</h3><p>　　由于每条弧都有自己的反向弧，所以我们只要跑一遍由$t$到$s$的最大流即可，这时我们充分利用了反向弧中的残余流量，把尽可能减小的部分都减掉了，所以此时用原答案（即上文的容量无穷大的弧的流量）减去这次的最大流答案即为最小流</p>
<p>下面为有上下界最小流贴上一道例题以及代码作为示范</p>
<h2 id="问题-A-摆棋子"><a href="#问题-A-摆棋子" class="headerlink" title="问题 A: 摆棋子"></a><a href="http://218.62.22.209:8080/problem.php?cid=1248&amp;pid=0" target="_blank" rel="external">问题 A: 摆棋子</a></h2><h3 id="时间限制-1-Sec-内存限制-256-MB"><a href="#时间限制-1-Sec-内存限制-256-MB" class="headerlink" title="时间限制: 1 Sec  内存限制: 256 MB"></a>时间限制: 1 Sec  内存限制: 256 MB</h3><p><img src="./2017031611.jpg" alt="Alt text"></p>
<h2 id="AC代码-ISAP最大流算法"><a href="#AC代码-ISAP最大流算法" class="headerlink" title="AC代码(ISAP最大流算法)"></a>AC代码(ISAP最大流算法)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn2 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> nex,to,cap,flow;</div><div class="line">    edge():nex(<span class="number">0</span>),to(<span class="number">0</span>),cap(<span class="number">0</span>),flow(<span class="number">0</span>)&#123;&#125;</div><div class="line">    edge(<span class="keyword">int</span> nex,<span class="keyword">int</span> to,<span class="keyword">int</span> cap,<span class="keyword">int</span> flow):</div><div class="line">    nex(nex),to(to),cap(cap),flow(flow)&#123;&#125;</div><div class="line">&#125;e[maxn2];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n,m,k,cnt=<span class="number">1</span>,tot=<span class="number">0</span>,all=<span class="number">0</span>,save1[maxn],save2[maxn],d[maxn],cur[maxn],p[maxn],h[maxn],sum[maxn],rec[maxn];<span class="comment">//s=1,t=n+m+2,ss=0,tt=n+m+3</span></div><div class="line"><span class="keyword">bool</span> broke[maxn][maxn],vis[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr,<span class="keyword">int</span> to,<span class="keyword">int</span> cap)</span></span>&#123;</div><div class="line">    e[++cnt]=edge(h[fr],to,cap,<span class="number">0</span>);</div><div class="line">    h[fr]=cnt;</div><div class="line">    e[++cnt]=edge(h[to],fr,<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">    h[to]=cnt;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">init_First</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n+<span class="number">1</span>;i++)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=n+<span class="number">2</span>;j&lt;=m+n+<span class="number">1</span>;j++)&#123;</div><div class="line">            <span class="keyword">if</span>(broke[i<span class="number">-1</span>][j-n<span class="number">-1</span>])<span class="keyword">continue</span>;</div><div class="line">            Add_Edge(i,j,<span class="number">1</span>);</div><div class="line">            sum[i]++;</div><div class="line">            sum[j]++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n+<span class="number">1</span>;i++)&#123;</div><div class="line">        Add_Edge(<span class="number">1</span>,i,sum[i]-save1[i<span class="number">-1</span>]);</div><div class="line">        <span class="keyword">if</span>(sum[i]&lt;save1[i<span class="number">-1</span>])&#123;<span class="comment">/*printf("  %d %d %d %d No_1\n",n,m,save1[i-1],sum[i]);*/</span><span class="keyword">return</span> <span class="literal">false</span>;&#125;</div><div class="line">        Add_Edge(<span class="number">0</span>,i,save1[i<span class="number">-1</span>]);</div><div class="line">        tot+=save1[i<span class="number">-1</span>];</div><div class="line">        a+=save1[i<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n+<span class="number">2</span>;i&lt;=m+n+<span class="number">1</span>;i++)&#123;</div><div class="line">        Add_Edge(i,n+m+<span class="number">2</span>,sum[i]-save2[i-n<span class="number">-1</span>]);</div><div class="line">        <span class="keyword">if</span>(sum[i]&lt;save2[i-n<span class="number">-1</span>])&#123;<span class="comment">/*printf("$$$$$$%d$%dNo_2\n",save2[i-n-1],sum[i]);*/</span><span class="keyword">return</span> <span class="literal">false</span>;&#125;</div><div class="line">        Add_Edge(i,n+m+<span class="number">3</span>,save2[i-n<span class="number">-1</span>]);</div><div class="line">        b+=save2[i<span class="number">-1</span>-n];</div><div class="line">    &#125;</div><div class="line">    tot+=b;</div><div class="line">    Add_Edge(<span class="number">0</span>,n+m+<span class="number">2</span>,b);</div><div class="line">    Add_Edge(<span class="number">1</span>,n+m+<span class="number">3</span>,a);</div><div class="line">    Add_Edge(n+m+<span class="number">2</span>,<span class="number">1</span>,INF);</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Augment</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> now=t,flow=INF;</div><div class="line">    <span class="keyword">while</span>(now!=s)&#123;</div><div class="line">        <span class="keyword">int</span> op=p[now];</div><div class="line">        flow=min(flow,e[op].cap-e[op].flow);</div><div class="line">        now=e[op^<span class="number">1</span>].to;</div><div class="line">    &#125;</div><div class="line">    now=t;</div><div class="line">    <span class="keyword">while</span>(now!=s)&#123;</div><div class="line">        <span class="keyword">int</span> op=p[now];</div><div class="line">        e[op].flow+=flow;</div><div class="line">        e[op^<span class="number">1</span>].flow-=flow;</div><div class="line">        now=e[op^<span class="number">1</span>].to;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> flow;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="built_in">memset</span>(p,<span class="number">-1</span>,<span class="keyword">sizeof</span>(p));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=all;i++)&#123;</div><div class="line">        d[i]=INF;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; bfs;</div><div class="line">    bfs.push(t);</div><div class="line">    d[t]=<span class="number">0</span>;</div><div class="line">    vis[t]=<span class="literal">true</span>;</div><div class="line">    <span class="keyword">while</span>(!bfs.empty())&#123;</div><div class="line">        <span class="keyword">int</span> op=bfs.front();bfs.pop();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=h[op];i!=<span class="number">0</span>;i=e[i].nex)&#123;</div><div class="line">            <span class="keyword">int</span> op2=e[i].to;</div><div class="line">            <span class="keyword">if</span>(!vis[op2])&#123;</div><div class="line">                vis[op2]=<span class="literal">true</span>;</div><div class="line">                d[op2]=d[op]+<span class="number">1</span>;</div><div class="line">                bfs.push(op2);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(d[s]&gt;=INF)<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ISAP</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> maxflow=<span class="number">0</span>,now=s;</div><div class="line">    <span class="keyword">if</span>(!BFS(s,t))<span class="keyword">return</span> maxflow;</div><div class="line">    <span class="built_in">memset</span>(rec,<span class="number">0</span>,<span class="keyword">sizeof</span>(rec));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=s;i&lt;=t;i++)&#123;</div><div class="line">        rec[d[i]]++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=s;i&lt;=t;i++)&#123;</div><div class="line">        cur[i]=h[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(d[s]&lt;all)&#123;</div><div class="line">        <span class="keyword">bool</span> if_ope=<span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span>(now==t)&#123;</div><div class="line">            maxflow+=Augment(s,t);</div><div class="line">            now=s;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=cur[now];i!=<span class="number">0</span>;i=e[i].nex)&#123;</div><div class="line">            <span class="keyword">int</span> op=e[i].to;</div><div class="line">            <span class="keyword">if</span>(d[now]<span class="number">-1</span>==d[op]&amp;&amp;e[i].cap&gt;e[i].flow)&#123;</div><div class="line">                cur[now]=i;</div><div class="line">                p[op]=i;</div><div class="line">                now=op;</div><div class="line">                if_ope=<span class="literal">true</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!if_ope)&#123;</div><div class="line">            <span class="keyword">int</span> minnum=all;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=h[now];i!=<span class="number">0</span>;i=e[i].nex)&#123;</div><div class="line">                <span class="keyword">if</span>(e[i].cap&gt;e[i].flow)&#123;</div><div class="line">                    minnum=min(minnum,d[e[i].to]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            rec[d[now]]--;</div><div class="line">            <span class="keyword">if</span>(rec[d[now]]==<span class="number">0</span>)<span class="keyword">break</span>;</div><div class="line">            d[now]=minnum+<span class="number">1</span>;</div><div class="line">            rec[d[now]]++;</div><div class="line">            cur[now]=h[now];</div><div class="line">            <span class="keyword">if</span>(now!=s)now=e[p[now]^<span class="number">1</span>].to;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> maxflow;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_Second</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=h[<span class="number">0</span>];i!=<span class="number">0</span>;i=e[i].nex)&#123;</div><div class="line">        e[i].cap=e[i].flow;</div><div class="line">        e[i^<span class="number">1</span>].cap=e[i^<span class="number">1</span>].flow;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=h[m+n+<span class="number">3</span>];i!=<span class="number">0</span>;i=e[i].nex)&#123;</div><div class="line">        e[i].cap=e[i].flow;</div><div class="line">        e[i^<span class="number">1</span>].cap=e[i^<span class="number">1</span>].flow;</div><div class="line">    &#125;</div><div class="line">    h[<span class="number">1</span>]=e[h[<span class="number">1</span>]].nex;</div><div class="line">    h[m+n+<span class="number">2</span>]=e[h[n+m+<span class="number">2</span>]].nex;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!init_First())&#123;<span class="built_in">printf</span>(<span class="string">"No Solution"</span>);<span class="keyword">return</span>;&#125;</div><div class="line">    <span class="keyword">int</span> maxflow=ISAP(<span class="number">0</span>,n+m+<span class="number">3</span>);</div><div class="line">    <span class="keyword">if</span>(maxflow!=tot)&#123;<span class="built_in">printf</span>(<span class="string">"No Solution"</span>);<span class="keyword">return</span>;&#125;</div><div class="line">    <span class="keyword">int</span> ans=e[cnt<span class="number">-1</span>].flow;</div><div class="line">    init_Second();</div><div class="line">    ans-=ISAP(m+n+<span class="number">2</span>,<span class="number">1</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("input.txt","r",stdin);</span></div><div class="line">    freopen("output.txt","w",stdout);*/</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</div><div class="line">    <span class="comment">/*printf(" %d %d %d",n,m,k);*/</span></div><div class="line">    all=n+m+<span class="number">4</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;save1[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;save2[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> x,y;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</div><div class="line">        broke[x][y]=<span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="注意！！！！"><a href="#注意！！！！" class="headerlink" title="注意！！！！"></a>注意！！！！</h2><p>　　我们在添加弧的时候，一定要看清弧的数量，<strong>大部分情况下弧的数量均为$O(n^2)$级别的，而不是$O(n)$的！！！</strong>请不要把弧数组大小与点数大小混为一谈！！！（就是因为这点问题卡了一天QAQ，发生了<strong>奇异错误</strong><sup><a href="#fn_3" id="reffn_3">3</a></sup>）</p>
<p>那么，到这里这几种网络流基本上就搞完了，下面我们介绍一些常见的模型</p>
<h1 id="基本模型"><a href="#基本模型" class="headerlink" title="基本模型"></a>基本模型</h1><p>　　说起模型，网络流所能产生的模型比比皆是，我们可以惊奇地发现某题竟然可以使用网络流瞬间秒过，或者豁然开朗，否则什么也搞不出来。这时就需要我们不断地总结与归纳常见的模型</p>
<h2 id="最小割"><a href="#最小割" class="headerlink" title="最小割"></a>最小割</h2><p>　　这是一个定理，即网络的最小割等于最大流，这个定力十分重要，我们可以用最大流的方法求解所有的最小割，这就是我们想要看到的</p>
<h2 id="多源多汇"><a href="#多源多汇" class="headerlink" title="多源多汇"></a>多源多汇</h2><p>　　即有不止一个源点和不止一个汇点的网络，这种情况非常简单，我们只需要添加一个超级源与超级汇，就可以将问题转化为单源单汇问题，然后该干嘛干嘛。。。</p>
<h2 id="结点容量"><a href="#结点容量" class="headerlink" title="结点容量"></a>结点容量</h2><p>　　即一种结点上有限制容量的网络，我们只需要将每个点进行拆分，然后用其中一个接受原来点的所有入弧，另一个点用来接收原来点的所有出弧，然后在这两点之间连接一条容量等于结点容量的边即可转化为普通的网络流</p>
<h2 id="结点盈余-不足"><a href="#结点盈余-不足" class="headerlink" title="结点盈余/不足"></a>结点盈余/不足</h2><p>　　这种题目有两种情况，一种是结点允许有多大的盈余/不足，另一种是结点本来就有一些盈余/不足（即流量不平衡的网络流）</p>
<p>　　对于第一种情况，我们只需要考虑添加点到源汇点的弧即可，如果一个点允许盈余$Rest$，那么我们可以从结点连一条容量为$Rest$的弧到汇点，如果是不足，我们可以由源点向这个结点连弧，这样就转化为了一个普通的网络流问题</p>
<p>　　对于第二种情况，个人的方法是，我们可以连一些上下界大小相同的弧，即强制这条弧的流量，然后套用有上下界的网络流算法即可</p>
<h2 id="棋盘问题"><a href="#棋盘问题" class="headerlink" title="棋盘问题"></a>棋盘问题</h2><p>　　棋盘应该是二分图的常用模型了，事实上几乎都被考烂了，然而二分图的问题可以很轻松地被网络流搞掉，所以我们常常使用网络流。我们把行视为结点集$X$，把列视作结点集$Y$，然后在位置$(x,y)$操作视作从结点集$X$中第$x$个向结点集$Y$中的第$y$个结点连弧，然后增加超级源与超级汇，再套用网络流模型即可</p>
<h2 id="二分图最大匹配"><a href="#二分图最大匹配" class="headerlink" title="二分图最大匹配"></a>二分图最大匹配</h2><p>　　其实有了上一个的启发，这个应该就十分地容易了，设结点集$X$中某点$A$的权值为$Value_A$，结点集$Y$中某点$B$的权值为$Value_B$，那么我们只要从超级源向$A$连一条容量为$Value_A$的弧，从$B$向超级汇连一条容量为$Value_B$的弧，然后跑一遍最大流即可解决</p>
<h2 id="位置组合问题"><a href="#位置组合问题" class="headerlink" title="位置组合问题"></a>位置组合问题</h2><p>　　这个模型来源于北京市2013年的市（省？）选题中，题目为《水晶》，题目看似与网络流毫无关联，实际上却息息相关，那道题大概是考虑两种位置组合，然后我们只需要搞一个网络，把这两种位置关系加进去，那么我们就可以通过最大流算法什么的求出网络的最小割，这样就解决了问题</p>
<p>那么，本篇详解就到此为止了，如果有什么不足与更新，会另有文章予以补充</p>
<p>那么，再见啦&lt;(￣ˇ￣)/</p>
<blockquote id="fn_1">
<sup>1</sup>. 这里十分关键，也最难理解，一定要仔细看下面的讲解！！！<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_2">
<sup>2</sup>. 注意此处是完全相等，多一点，少一点都不行，而且答案也不可能大于$\sum_{i=1}^n  R(i)$，这是因为我们之前向超级源点与超级汇点连弧的时候，所有与$ss$相连的弧的容量$SS= \sum _{e(ss,x)\in E} cap(e)$以及所有与$tt$相连的弧的容量$TT=\sum _{e(x,tt)\in E} cap(e)$满足$SS = TT $，而且这样也说明答案不可能大于$SS$或者$TT$<a href="#reffn_2" title="Jump back to footnote [2] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_3">
<sup>3</sup>. 奇异错误的定义为<strong>在修改某变量时，导致了另一个变量的值的变动</strong>，这种错误对初学者来说是致命的，因为这种错误十分奇异，变量在不进行任何运算的情况下被改变，如果不事先了解到这种错误，那么要花费很长的时间才会明白自己是<strong>因为数组越界而导致了错误</strong>（即本应该被判为$RE$却并没有），因为一定程度下<strong>系统允许数组的越界</strong><a href="#reffn_3" title="Jump back to footnote [3] in the text."> &#8617;</a>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;又双叒叕扒了一篇老文章，感觉年轻时的我真是太强了。。。&lt;br&gt;
    
    </summary>
    
    
      <category term="网络流" scheme="https://goseqh.tk/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="图论" scheme="https://goseqh.tk/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>序列莫队算法详解</title>
    <link href="https://goseqh.tk/2017/08/27/%E5%BA%8F%E5%88%97%E8%8E%AB%E9%98%9F%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <id>https://goseqh.tk/2017/08/27/序列莫队算法详解/</id>
    <published>2017-08-27T04:37:22.000Z</published>
    <updated>2017-08-27T05:23:25.645Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>又扒了一篇老文章，感觉年轻时的我真是太强了。。。<br><a id="more"></a></p>
<h1 id="序列莫队算法详解"><a href="#序列莫队算法详解" class="headerlink" title="序列莫队算法详解"></a>序列莫队算法详解</h1><hr>
<p>今天开始跑个人计划，于是这个时候我开始学习序列莫队算法，参考的是<strong>黄学长(hzwer)</strong>的小Z的袜子的那道题。莫队算法用于处理一类关于<strong>区间</strong>的问题，效果相对来说不错，可以在某些情况下作为正式算法使用，莫队算法的种类有四个，我们在这里先予以汇总，再进行详解</p>
<ul>
<li>莫队算法<ul>
<li><strong>序列莫队</strong>  &lt;—</li>
<li><strong>序列带修改莫队</strong>  &lt;—</li>
<li>树上莫队</li>
<li>树上带修改莫队</li>
</ul>
</li>
</ul>
<p>那两个是明天要搞的</p>
<h1 id="序列莫队"><a href="#序列莫队" class="headerlink" title="序列莫队"></a>序列莫队</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>这里，我们以2009年国家集训队题目《小Z的袜子》为例，进行对莫队算法的详解。这道题，我们首先很容易求出对于一个区间来说的答案，然后，我们还可以发现我们可以在$O(1)$的时间内根据当前区间$[l,r]$的答案求出$[l+1,r]$,$[l-1,r]$,$[l,r-1]$,$[l,r+1]$的答案（分别求出），于是这个时候我们就可以对询问进行适当的排序，然后用一些时间暴力转移，这就是本题的算法</p>
<p>这个时候，我们可以想到需要对查询区间进行排序，但如果直接按照$l$为第一关键字，$r$为第二关键字的方法，算法的效率将得不到保障，因为我们完全可以造出一组需要使转移时间非常大的数据。正宗的算法是采用<strong>曼哈顿距离最小生成树</strong>来达到减少低效转移的目的，然而曼哈顿距离最小生成树的代码复杂度很高，还需要使用线段树这样的数据结构来进行维护，为了简化这一过程，并保障效率，我们考虑分块方法</p>
<p>分块，我们按照$\sqrt{n}$为块的大小，将l即第一关键字进行分块，而r则不动，我们给l维护一个数组$pos[]$，表示l处于那一块中，然后对这个块的编号作为第一关键字进行排序（r不动），这样，我们可以得到一个相对高效的算法，它的时间复杂度为$O(n\sqrt{n})$，证明并不复杂</p>
<p>这样，我们就可以快乐地通过本题的数据啦 O(∩_∩)O哈哈~</p>
<p>下面贴上《小Z的袜子》题面以及代码</p>
<h2 id="2009国家集训队-小Z的袜子-hose"><a href="#2009国家集训队-小Z的袜子-hose" class="headerlink" title="[2009国家集训队]小Z的袜子(hose)"></a><a href="http://218.62.22.209:8080/problem.php?cid=1262&amp;pid=6" target="_blank" rel="external">[2009国家集训队]小Z的袜子(hose)</a></h2><p><strong>时间限制: 2 Sec  内存限制: 256 MB</strong></p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>作为一个生活散漫的人，小Z每天早上都要耗费很久从一堆五颜六色的袜子中找出一双来穿。终于有一天，小Z再也无法忍受这恼人的找袜子过程，于是他决定听天由命……<br>具体来说，小Z把这N只袜子从1到N编号，然后从编号L到R(L 尽管小Z并不在意两只袜子是不是完整的一双，甚至不在意两只袜子是否一左一右，他却很在意袜子的颜色，毕竟穿两只不同色的袜子会很尴尬。<br>你的任务便是告诉小Z，他有多大的概率抽到两只颜色相同的袜子。当然，小Z希望这个概率尽量高，所以他可能会询问多个(L,R)以方便自己选择。</p>
<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>输入文件第一行包含两个正整数N和M。N为袜子的数量，M为小Z所提的询问的数量。接下来一行包含N个正整数Ci，其中Ci表示第i只袜子的颜色，相同的颜色用相同的数字表示。再接下来M行，每行两个正整数L，R表示一个询问。</p>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>包含M行，对于每个询问在一行中输出分数A/B表示从该询问的区间$[L,R]$中随机抽出两只袜子颜色相同的概率。若该概率为0则输出0/1，否则输出的A/B必须为最简分数。（详见样例）</p>
<h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><p>6 4<br>1 2 3 3 3 2<br>2 6<br>1 3<br>3 5<br>1 6</p>
<h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><p>2/5<br>0/1<br>1/1<br>4/15</p>
<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><h3 id="【样例解释】"><a href="#【样例解释】" class="headerlink" title="【样例解释】"></a>【样例解释】</h3><p>询问1：共$\dbinom{5}{2}=10$种可能，其中抽出两个2有1种可能，抽出两个3有3种可能，概率为$(1+3)/10=4/10=2/5$。</p>
<p>询问2：共$\dbinom{3}{2}=3$种可能，无法抽到颜色相同的袜子，概率为$0/3=0/1$。</p>
<p>询问3：共$\dbinom{3}{2}=3$种可能，均为抽出两个3，概率为$3/3=1/1$。</p>
<p>注：上述$\dbinom{b}{a}$表示组合数，组合数$\dbinom{b}{a}$等价于在a个不同的物品中选取b个的选取方案数。</p>
<h3 id="【数据规模和约定】"><a href="#【数据规模和约定】" class="headerlink" title="【数据规模和约定】"></a>【数据规模和约定】</h3><p>30%的数据中 $N,M ≤ 5000$；</p>
<p>60%的数据中 $N,M ≤ 25000$；</p>
<p>100%的数据中 $N,M ≤ 50000，1 ≤ L &lt; R ≤ N，Ci ≤ N$。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> l,r,id;</div><div class="line">    LL a,b;</div><div class="line">    task():l(<span class="number">0</span>),r(<span class="number">0</span>),id(<span class="number">0</span>),a(<span class="number">0</span>),b(<span class="number">0</span>)&#123;&#125;</div><div class="line">    task(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> id):l(l),r(r),id(id),a(<span class="number">0</span>),b(<span class="number">0</span>)&#123;&#125;</div><div class="line">&#125;query[maxn];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">state</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> rec[maxn],len,l,r;</div><div class="line">    state():len(<span class="number">0</span>)&#123;<span class="built_in">memset</span>(rec,<span class="number">0</span>,<span class="keyword">sizeof</span>(rec));&#125;</div><div class="line">&#125;now;</div><div class="line"><span class="keyword">int</span> n,m,line[maxn],pos[maxn],blo,siz;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    blo=(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(n)+<span class="number">1</span>;</div><div class="line">    siz=n/blo;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">        pos[i]=i/blo;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(task a,task b)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(pos[a.l]==pos[b.l])<span class="keyword">return</span> a.r&lt;b.r;</div><div class="line">    <span class="keyword">return</span> pos[a.l]&lt;pos[b.l];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(task a,task b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a.id&lt;b.id;</div><div class="line">&#125;</div><div class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL a,LL b)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)<span class="keyword">return</span> a;</div><div class="line">    <span class="keyword">return</span> gcd(b,a%b);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(task &amp;o,<span class="keyword">int</span> pos,<span class="keyword">int</span> op)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</div><div class="line">        o.a+=<span class="number">2</span>*now.rec[line[pos]];</div><div class="line">        o.b+=<span class="number">2</span>*now.len;</div><div class="line">        now.rec[line[pos]]++;</div><div class="line">        now.len++;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        o.a-=<span class="number">2</span>*now.rec[line[pos]]<span class="number">-2</span>;</div><div class="line">        o.b-=<span class="number">2</span>*now.len<span class="number">-2</span>;</div><div class="line">        now.rec[line[pos]]--;</div><div class="line">        now.len--;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=query[<span class="number">0</span>].l;i&lt;=query[<span class="number">0</span>].r;i++)&#123;</div><div class="line">        now.rec[line[i]]++;</div><div class="line">        now.len++;</div><div class="line">    &#125;</div><div class="line">    now.l=query[<span class="number">0</span>].l;</div><div class="line">    now.r=query[<span class="number">0</span>].r;</div><div class="line">    LL sum=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</div><div class="line">        sum+=now.rec[i]*now.rec[i];</div><div class="line">    &#125;</div><div class="line">    query[<span class="number">0</span>].a=sum-now.len;</div><div class="line">    query[<span class="number">0</span>].b=now.len*now.len-now.len;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;</div><div class="line">        query[i].a=query[i<span class="number">-1</span>].a;</div><div class="line">        query[i].b=query[i<span class="number">-1</span>].b;</div><div class="line">        <span class="keyword">for</span>(;now.r&lt;query[i].r;now.r++)&#123;</div><div class="line">            update(query[i],now.r+<span class="number">1</span>,<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(;now.r&gt;query[i].r;now.r--)&#123;</div><div class="line">            update(query[i],now.r,<span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(;now.l&lt;query[i].l;now.l++)&#123;</div><div class="line">            update(query[i],now.l,<span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(;now.l&gt;query[i].l;now.l--)&#123;</div><div class="line">            update(query[i],now.l<span class="number">-1</span>,<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</div><div class="line">        LL d=gcd(max(query[i].a,query[i].b),min(query[i].a,query[i].b));</div><div class="line">        query[i].a/=d;</div><div class="line">        query[i].b/=d;</div><div class="line">        <span class="comment">//if(query[i].a==0)query[i].b=1;</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"input.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"output.txt"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;line[i]);</div><div class="line">    &#125;</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> x,y;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</div><div class="line">        query[i]=task(x<span class="number">-1</span>,y<span class="number">-1</span>,i);</div><div class="line">    &#125;</div><div class="line">    sort(query,query+m,cmp1);</div><div class="line">    work();</div><div class="line">    sort(query,query+m,cmp2);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld/%lld\n"</span>,query[i].a,query[i].b);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码即为本题AC代码，是不是与hzwer的代码很像？然而并不是</p>
<p>那么序列莫队就先到这里啦</p>
<h1 id="序列带修改莫队"><a href="#序列带修改莫队" class="headerlink" title="序列带修改莫队"></a>序列带修改莫队</h1><p>下面我们来学习一下序列莫队的升级版——<strong>序列带修改莫队</strong></p>
<h2 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h2><p>这个该怎么搞呢？我们现在加入了一个修改的操作，让人联想起当年的CDQ分治，其实感觉上比较像，实际上并不像，这是为什么呢?</p>
<p>CDQ分治实际上是对<strong>查询与修改操作的一个合理排序及分治</strong>，使得每个修改操作能够精确地对应到每一个查询操作上，而且因为它<strong>排序及分治的巧妙性</strong>，使得我们可以通过一些数据结构如Fenwick树（树状数组）来方便地进行维护，同时使得时间复杂度达到我们想要的结果</p>
<p>然而带修改序列莫队是怎么实现修改与操作的对应的呢？暴力，就是这样，我们每次通过对序列中修改与查询的分割，在查询之前把所有能够影响到它的操作暴力更新一下，其实说是暴力，其中也还是会有一些巧妙之处的</p>
<p>那么为什么我们还需要莫队算法呢？这是因为对于某些问题，我们可以发现使用常规的CDQ分治方法或者是数据结构嵌套的方法难以维护。究其本质，是因为在我们需要维护的信息之中又产生了<strong>隐性的一个维度</strong>，比如上题《小Z的袜子》，我们可以知道其中每种颜色袜子的个数也是一个需要考虑的维度，这便是一个新的维度</p>
<p>这可以概括为<strong>维护的区间信息中的离散的具体信息开始对整体答案产生影响的情况</strong><sup><a href="#fn_1" id="reffn_1">1</a></sup>.</p>
<p>因此在这时，线段树什么的就不管用了，而主席树中虽然也有这种具体化的信息（如每个元素的排名大小），但是它每次只是对其中单个元素的一种查询，可以类比为是对区间信息内部信息的<strong>单点查询</strong></p>
<p>而采用莫队算法的题，往往需要一种对这样的信息的一种<strong>整体/全部查询</strong>，而且<strong>不能化为整体</strong>来考虑，这样就十分尴尬了，所以我们利用这种情况下产生的新的性质：<strong>相邻单个元素的更新复杂度为$O(1)$</strong>的性质，来进行“暴力更新”</p>
<p>这样我们就阐明了莫队算法的意义</p>
<h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><p>接下来我们可以说一说原理</p>
<p>基本上来说，我们先把修改与查询分开处理，存入两个不同的数组中，同时使用两种结构体来进行保存，然后基本的方法与无修序列莫队基本相同，只是在处理修改的时候，我们判断一下这个修改是否在上次查询中有所作用，这个可以通过一个布尔数组来进行维护，然后我们就可以减掉原信息，加上修改后信息，然后继续更新即可，本质上并无什么太大的改变</p>
<p>下面贴上一道有关的题目《维护队列》</p>
<h2 id="问题-D-维护队列"><a href="#问题-D-维护队列" class="headerlink" title="问题 D: 维护队列"></a><a href="http://218.62.22.209:8080/problem.php?cid=1262&amp;pid=3" target="_blank" rel="external">问题 D: 维护队列</a></h2><p><strong>时间限制: 1 Sec  内存限制: 128 MB</strong></p>
<h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>你小时候玩过弹珠吗？<br>小朋友A有一些弹珠，A喜欢把它们排成队列，从左到右编号为1到N。为了整个队列鲜艳美观，小朋友想知道某一段连续弹珠中，不同颜色的弹珠有多少。当然，A有时候会依据个人喜好，替换队列中某个弹珠的颜色。但是A还没有学过编程，且觉得头脑风暴太浪费脑力了，所以向你来寻求帮助。</p>
<h2 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h2><p>输入文件第一行包含两个整数N和M。<br>第二行N个整数，表示初始队列中弹珠的颜色。<br>接下来M行，每行的形式为“Q L R”或“R x c”，“Q L R”表示A想知道从队列第L个弹珠到第R个弹珠中，一共有多少不同颜色的弹珠，“R x c”表示A把x位置上的弹珠换成了c颜色。</p>
<h2 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h2><p>对于每个Q操作，输出一行表示询问结果。</p>
<h2 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h2><p>2 3<br>1 2<br>Q 1 2<br>R 1 2<br>Q 1 2</p>
<h2 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h2><p>2<br>1</p>
<h2 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h2><p>对于100%的数据，有$1 ≤ N ≤ 10000, 1 ≤ M ≤ 10000$，小朋友A不会修改超过1000次，所有颜色均用1到$10^6$的整数表示。</p>
<p>下面贴代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">query</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> l,r,id,pre,ans;</div><div class="line">    query():l(<span class="number">0</span>),r(<span class="number">0</span>),id(<span class="number">0</span>),pre(<span class="number">0</span>),ans(<span class="number">0</span>)&#123;&#125;</div><div class="line">    query(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> id,<span class="keyword">int</span> pre):l(l),r(r),id(id),pre(pre),ans(<span class="number">0</span>)&#123;&#125;</div><div class="line">&#125;que[maxn];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">modify</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> pos,val,ori;</div><div class="line">    modify():pos(<span class="number">0</span>),val(<span class="number">0</span>),ori(<span class="number">0</span>)&#123;&#125;</div><div class="line">    modify(<span class="keyword">int</span> pos,<span class="keyword">int</span> val,<span class="keyword">int</span> ori):pos(pos),val(val),ori(ori)&#123;&#125;</div><div class="line">&#125;mod[maxn];</div><div class="line"><span class="keyword">int</span> n,m,line[maxn],sline[maxn],if_in[maxn],pos[maxn],s[maxn],blo,siz,ans=<span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    blo=(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(n)+<span class="number">1</span>;</div><div class="line">    siz=n/blo;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">        pos[i]=i/blo;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(query a,query b)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(pos[a.l]!=pos[b.l])<span class="keyword">return</span> pos[a.l]&lt;pos[b.l];</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a.r!=b.r)<span class="keyword">return</span> a.r&lt;b.r;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.pre&lt;b.pre;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(query a,query b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a.id&lt;b.id;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(if_in[p])&#123;</div><div class="line">        s[line[p]]--;</div><div class="line">        <span class="keyword">if</span>(s[line[p]]==<span class="number">0</span>)ans--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">if</span>(s[line[p]]==<span class="number">0</span>)ans++;</div><div class="line">        s[line[p]]++;</div><div class="line">    &#125;</div><div class="line">    if_in[p]^=<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> val)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(if_in[p])&#123;</div><div class="line">        update(p);</div><div class="line">        line[p]=val;</div><div class="line">        update(p);</div><div class="line">    &#125;<span class="keyword">else</span> line[p]=val;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> now=<span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,l=<span class="number">0</span>,r=<span class="number">-1</span>;i&lt;m;i++)&#123;</div><div class="line">        <span class="keyword">for</span>(;now&lt;que[i].pre;now++)change(mod[now+<span class="number">1</span>].pos,mod[now+<span class="number">1</span>].val);</div><div class="line">        <span class="keyword">for</span>(;now&gt;que[i].pre;now--)change(mod[now].pos,mod[now].ori);</div><div class="line">        <span class="keyword">for</span>(;r&lt;que[i].r;r++)update(r+<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(;r&gt;que[i].r;r--)update(r);</div><div class="line">        <span class="keyword">for</span>(;l&lt;que[i].l;l++)update(l);</div><div class="line">        <span class="keyword">for</span>(;l&gt;que[i].l;l--)update(l<span class="number">-1</span>);</div><div class="line">        que[i].ans=ans;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("input.txt","r",stdin);</span></div><div class="line">    freopen("output.txt","w",stdout);*/</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;line[i]);</div><div class="line">        sline[i]=line[i];</div><div class="line">    &#125;</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> x,y,tot=<span class="number">0</span>,cnt=<span class="number">0</span>;</div><div class="line">    <span class="keyword">char</span> ch[<span class="number">20</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%d%d\n"</span>,ch,&amp;x,&amp;y);</div><div class="line">        <span class="keyword">if</span>(ch[<span class="number">0</span>]==<span class="string">'Q'</span>)&#123;</div><div class="line">            que[tot]=query(x<span class="number">-1</span>,y<span class="number">-1</span>,tot,cnt<span class="number">-1</span>);</div><div class="line">            tot++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            mod[cnt]=modify(x<span class="number">-1</span>,y,sline[x<span class="number">-1</span>]);</div><div class="line">            sline[x<span class="number">-1</span>]=y;</div><div class="line">            cnt++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    sort(que,que+tot,cmp1);</div><div class="line">    work();</div><div class="line">    sort(que,que+tot,cmp2);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tot;i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,que[i].ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再怎么说，今天搞掉了两道题，还是颇高兴的</p>
<p>那么，序列莫队的算法到此就比较圆满啦，完结撒花(^o^)/~</p>
<blockquote id="fn_1">
<sup>1</sup>. 这句话可能不是那么容易理解，实际的意思是指我们在分析一般题目的时候，会发现我们可以很轻易地合并两个区间的信息，这个时候并不受内部元素/信息的干扰，而莫队类题目不能通过简单的区间信息合并来解决，这是因为它的<strong>具体信息对整体信息有干扰作用</strong><a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;又扒了一篇老文章，感觉年轻时的我真是太强了。。。&lt;br&gt;
    
    </summary>
    
    
      <category term="分块法" scheme="https://goseqh.tk/tags/%E5%88%86%E5%9D%97%E6%B3%95/"/>
    
      <category term="莫队" scheme="https://goseqh.tk/tags/%E8%8E%AB%E9%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ阶段性汇总II</title>
    <link href="https://goseqh.tk/2017/08/26/BZOJ%E9%98%B6%E6%AE%B5%E6%80%A7%E6%B1%87%E6%80%BBII/"/>
    <id>https://goseqh.tk/2017/08/26/BZOJ阶段性汇总II/</id>
    <published>2017-08-26T10:12:56.000Z</published>
    <updated>2017-09-04T00:10:28.839Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>第二篇。。。<br><a id="more"></a></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p><title>Problem 1207. -- [HNOI2004]打鼹鼠</title><center><h2>1207: [HNOI2004]打鼹鼠</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>3350&nbsp;&nbsp;<span class="green">Solved: </span>1610<br>[<a href="submitpage.php?id=1207">Submit</a>][<a href="problemstatus.php?id=1207">Status</a>][<a href="bbs.php?id=1207">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p>鼹鼠是一种很喜欢挖洞的动物，但每过一定的时间，它还是喜欢把头探出到地面上来透透气的。根据这个特点阿Q编写了一个打鼹鼠的游戏：在一个n*n的网格中，在某些时刻鼹鼠会在某一个网格探出头来透透气。你可以控制一个机器人来打鼹鼠，如果i时刻鼹鼠在某个网格中出现，而机器人也处于同一网格的话，那么这个鼹鼠就会被机器人打死。而机器人每一时刻只能够移动一格或停留在原地不动。机器人的移动是指从当前所处的网格移向相邻的网格，即从坐标为（i,j）的网格移向(i-1, j),(i+1, j),(i,j-1),(i,j+1)四个网格，机器人不能走出整个n*n的网格。游戏开始时，你可以自由选定机器人的初始位置。现在你知道在一段时间内，鼹鼠出现的时间和地点，希望你编写一个程序使机器人在这一段时间内打死尽可能多的鼹鼠。</p></div><h3>Input</h3><div class="content"><p>第一行为n（n&lt;=1000）, m（m&lt;=10000），其中m表示在这一段时间内出现的鼹鼠的个数，接下来的m行每行有三个数据time,x,y表示有一只鼹鼠在游戏开始后time个时刻，在第x行第y个网格里出现了一只鼹鼠。Time按递增的顺序给出。注意同一时刻可能出现多只鼹鼠，但同一时刻同一地点只可能出现一只鼹鼠。</p></div><h3>Output</h3><div class="content"><p>仅包含一个正整数，表示被打死鼹鼠的最大数目</p></div><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">2 2<br>
1 1 1<br>
2 2 2<br>
</span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">1</span></div><h3>HINT</h3><br>            <div class="content"><p></p></div><h3>Source</h3><p></p>
<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>第一眼看上去是个直接空间时间双爆的暴力DP，然而，我们发现我们无须记录当前机器人的位置，直接跑就行了。。。只需记录现在刚打完哪只鼹鼠即可，然后$O(m^2)$跑 <del>(我一直觉得会超时。。。一定是我没学过复杂度。。。)</del></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">goal</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x, y, t;</div><div class="line">&#125;save[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> dp[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(vis[x]) <span class="keyword">return</span> dp[x];</div><div class="line">    vis[x] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span>&amp; ans = dp[x];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x + <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="keyword">if</span> ((<span class="built_in">abs</span>(save[x].x - save[i].x) + <span class="built_in">abs</span>(save[x].y - save[i].y)) &lt;= save[i].t - save[x].t)&#123;</div><div class="line">            ans = max(ans, DP(i));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ++ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;save[i].t, &amp;save[i].x, &amp;save[i].y);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) ans = max(ans, DP(i));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 1513. -- [POI2006]Tet-Tetris 3D</title><center><h2>1513: [POI2006]Tet-Tetris 3D</h2><span class="green">Time Limit: </span>30 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>1146&nbsp;&nbsp;<span class="green">Solved: </span>389<br>[<a href="submitpage.php?id=1513">Submit</a>][<a href="problemstatus.php?id=1513">Status</a>][<a href="bbs.php?id=1513">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p>Task: Tetris 3D</p>
<p>“Tetris” 游戏的作者决定做一个新的游戏, 一个三维的版本, 在里面很多立方体落在平面板,一个立方体开始落下直到碰上一个以前落下的立方体或者落地即停止.<br>作者想改变一下游戏的目的使得它更大众化,在新游戏中你将知道落下的立方体信息以及位置,你的任务就是回答所有立方体落下后最高的方块的高度.所有的立方体在下落过程中都是垂直的并且不会旋转.平板左下角坐标为原点,并且平行于坐标轴. </p>
<h3>Input</h3><div class="content">第一行给出三个整数D, S and N (1<=n<=20000,1<=d,s<=1000),分别表示平板的长和宽以及下落立方体的数目.接下来n行每行描述一个立方体. 每行包含5个整数:d,s,w,x="" and="" y(1<="d,0<=x,d+x<=D,1<=s,0<=y,s+y<=S,1<=w<=100000),分别表示立方体的长\宽\高以及落下的左下角坐标,长和宽都是平行于平板坐标轴的,落下后立方体着地的四个角坐标分别为:(x,y),(x+d,y),(x,y+s)and(x+d,y+s).</p">
</=n<=20000,1<=d,s<=1000),分别表示平板的长和宽以及下落立方体的数目.接下来n行每行描述一个立方体.></div><h3>Output</h3><div class="content">一个整数表示所有立方体落下后最高的方块的高度.
</div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">7 5 4<br>
4 3 2 0 0<br>
3 3 1 3 0<br>
7 1 2 0 3<br>
2 3 3 2 2<br>
</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">6<br>
</span></div><h3>HINT</h3>
            <div class="content"><p></p></div><h3>Source</h3>

<h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><p><del>终于来了一道不是那么水的题。。。</del> 这题显然是一道树套树的题目，而且是线段树套线段树，需要你支持区间修改与查询操作，但是我们知道在树套树背景下这样并不是十分的简单，主要的问题是如何上传以及下放标记</p>
<p>而PoPoQQQ大神给出的方法是：</p>
<blockquote>
<p>既然很难上下传，那么不传不就好了</p>
</blockquote>
<p>于是我们把标记永久化，同时处理两种东西标记，一个是经过当前结点的所有标记的标记，一个是刚好覆盖在当前结点对应线段树上的标记，这是为什么呢？因为搜到我们想要的那个节点并即将返回时，我们需要处理所有经过它的标记，而从上向下寻找它时，沿路的标记我们也需要，但不是所有经过中途结点的标记（否则会多算很多东西），所以我们要把这两个东西分开处理</p>
<p>其实就是一个常规的树套树+标记永久化的方法，但是由于从来没写过标记永久化，所以不太熟练。。。</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1024</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segment_tree</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> maxnum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line">    <span class="keyword">int</span> <span class="built_in">set</span>[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line">    <span class="keyword">int</span> qx, qy, qd;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">set</span>[o] != <span class="number">0</span> &amp;&amp; l != r)&#123;</div><div class="line">            <span class="built_in">set</span>[o &lt;&lt; <span class="number">1</span>] = max(<span class="built_in">set</span>[o &lt;&lt; <span class="number">1</span>], <span class="built_in">set</span>[o]);</div><div class="line">            maxnum[o &lt;&lt; <span class="number">1</span>] = max(maxnum[o &lt;&lt; <span class="number">1</span>], <span class="built_in">set</span>[o &lt;&lt; <span class="number">1</span>]);</div><div class="line"></div><div class="line">            <span class="built_in">set</span>[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = max(<span class="built_in">set</span>[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>], <span class="built_in">set</span>[o]);</div><div class="line">            maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = max(maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>], <span class="built_in">set</span>[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line"></div><div class="line">            <span class="built_in">set</span>[o] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">        pushdown(l, r, o);</div><div class="line">        maxnum[o] = max(maxnum[o], qd);</div><div class="line">        <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">            <span class="built_in">set</span>[o] = max(<span class="built_in">set</span>[o], qd);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">        <span class="keyword">if</span> (qx &lt;= mid) modify(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (qy &gt; mid) modify(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">        pushdown(l, r, o);</div><div class="line">        <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">            <span class="keyword">return</span> maxnum[o];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans = -INF;</div><div class="line">        <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">        <span class="keyword">if</span> (qx &lt;= mid) ans = max(ans, get(l, mid, o &lt;&lt; <span class="number">1</span>));</div><div class="line">        <span class="keyword">if</span> (qy &gt; mid) ans = max(ans, get(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>));</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;save[maxn &lt;&lt; <span class="number">1</span>], save2[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> S, D, N;</div><div class="line"></div><div class="line"><span class="keyword">int</span> qx, qy, qa, qb, qd;</div><div class="line"><span class="keyword">int</span> add;</div><div class="line"></div><div class="line"><span class="comment">/*struct re&#123;</span></div><div class="line">    int qx, qy, qd;</div><div class="line">    re(int qx, int qy, int qd) : qx(qx), qy(qy), qd(qd)&#123;&#125;</div><div class="line">    re()&#123;&#125;</div><div class="line">&#125;rec[maxn &lt;&lt; 1];</div><div class="line">bool f[maxn &lt;&lt; 1];</div><div class="line"></div><div class="line">void pushdown(int l, int r, int o)&#123;</div><div class="line">    if (!f[o] || l == r) return;</div><div class="line">    int mid = ((r - l) &gt;&gt; 1) + l;</div><div class="line"></div><div class="line">    f[o] = 0;</div><div class="line"></div><div class="line">    if (f[o &lt;&lt; 1]) pushdown(l, mid, o &lt;&lt; 1);</div><div class="line">    f[o &lt;&lt; 1] = 1;</div><div class="line">    rec[o &lt;&lt; 1] = rec[o];</div><div class="line">    save[o &lt;&lt; 1].qx = rec[o].qx;</div><div class="line">    save[o &lt;&lt; 1].qy = rec[o].qy;</div><div class="line">    save[o &lt;&lt; 1].qd = rec[o].qd;</div><div class="line">    save[o &lt;&lt; 1].modify(0, S, 1);</div><div class="line"></div><div class="line">    if(f[o &lt;&lt; 1 | 1]) pushdown(mid + 1, r, o &lt;&lt; 1 | 1);</div><div class="line">    f[o &lt;&lt; 1 | 1] = 1;</div><div class="line">    rec[o &lt;&lt; 1 | 1] = rec[o];</div><div class="line">    save[o &lt;&lt; 1 | 1].qx = rec[o].qx;</div><div class="line">    save[o &lt;&lt; 1 | 1].qy = rec[o].qy;</div><div class="line">    save[o &lt;&lt; 1 | 1].qd = rec[o].qd;</div><div class="line">    save[o &lt;&lt; 1 | 1].modify(0, S, 1);</div><div class="line">&#125;*/</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">operate</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="comment">//pushdown(l, r, o);</span></div><div class="line">    save[o].qx = qy, save[o].qy = qy + qb, save[o].qd = qd;</div><div class="line">    save[o].modify(<span class="number">0</span>, S, <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qx + qa)&#123;</div><div class="line">        save2[o].qx = qy, save2[o].qy = qy + qb, save2[o].qd = qd;</div><div class="line">        save2[o].modify(<span class="number">0</span>, S, <span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) operate(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qx + qa &gt; mid) operate(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="comment">//pushdown(l, r, o);</span></div><div class="line">    save2[o].qx = qy, save2[o].qy = qy + qb;</div><div class="line">    <span class="keyword">int</span> ans = save2[o].get(<span class="number">0</span>, S, <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qx + qa)&#123;</div><div class="line">        save[o].qx = qy, save[o].qy = qy + qb;</div><div class="line">        <span class="keyword">return</span> ans = max(ans, save[o].get(<span class="number">0</span>, S, <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) ans = max(ans, get(l, mid, o &lt;&lt; <span class="number">1</span>));</div><div class="line">    <span class="keyword">if</span> (qx + qa &gt; mid) ans = max(ans, get(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>));</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))&#123;</div><div class="line">        x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>;</div><div class="line">        ch = getchar();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    read(D), read(S), read(N);</div><div class="line">    D--;</div><div class="line">    S--;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)&#123;</div><div class="line">        read(qa), read(qb), read(qd), read(qx), read(qy);</div><div class="line">        qa--;</div><div class="line">        qb--;</div><div class="line">        add = get(<span class="number">0</span>, D, <span class="number">1</span>);</div><div class="line">        qd += add;</div><div class="line">        operate(<span class="number">0</span>, D, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, save[<span class="number">1</span>].maxnum[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 2333. -- [SCOI2011]棘手的操作</title><center><h2>2333: [SCOI2011]棘手的操作</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>2551&nbsp;&nbsp;<span class="green">Solved: </span>996<br>[<a href="submitpage.php?id=2333">Submit</a>][<a href="problemstatus.php?id=2333">Status</a>][<a href="bbs.php?id=2333">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt; text-indent: 21pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">有<font face="Times New Roman">N</font><font face="宋体">个节点，标号从</font><font face="Times New Roman">1</font><font face="宋体">到</font><font face="Times New Roman">N</font><font face="宋体">，这</font><font face="Times New Roman">N</font><font face="宋体">个节点一开始相互不连通。第</font><font face="Times New Roman">i</font><font face="宋体">个节点的初始权值为</font><font face="Times New Roman">a[i]</font><font face="宋体">，接下来有如下一些操作：</font></span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><p></p>
<p></p><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">U&nbsp;x&nbsp;y:</span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"> </span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">加一条边，连接第<font face="Times New Roman">x</font><font face="宋体">个节点和第</font><font face="Times New Roman">y</font><font face="宋体">个节点</font></span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><p></p>
<p></p><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">A1&nbsp;x&nbsp;v:</span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"> </span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">将第<font face="Times New Roman">x</font><font face="宋体">个节点的权值增加</font><font face="Times New Roman">v</font></span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><p></p>
<p></p><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">A2&nbsp;x&nbsp;v:</span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"> </span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">将第<font face="Times New Roman">x</font><font face="宋体">个节点所在的</font>连通块的所有节点的权值都增加<font face="Times New Roman">v</font></span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><p></p>
<p></p><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">A3&nbsp;v:</span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"> </span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">将所有节点的权值都增加<font face="Times New Roman">v</font></span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><p></p>
<p></p><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">F1&nbsp;x:</span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"> </span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">输出第<font face="Times New Roman">x</font><font face="宋体">个节点当前的权值</font></span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><p></p>
<p></p><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">F2&nbsp;x:</span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"> </span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">输出第<font face="Times New Roman">x</font><font face="宋体">个节点所在的连通块中，权值最大的节点的权值</font></span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><p></p>
<p></p><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">F3:</span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"> </span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">输出所有节点中，权值最大的节点的权值</span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><p></p>
<p></p><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><br><!--EndFragment--><h3>Input</h3><div class="content"><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span>&nbsp;</p><p></p>
<p></p><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt; text-indent: 20.25pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">输入的第一行是一个整数<font face="Times New Roman">N</font><font face="宋体">，代表节点个数。</font></span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><p></p>
<p></p><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt; text-indent: 20.25pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">接下来一行输入<font face="Times New Roman">N</font><font face="宋体">个整数，</font><font face="Times New Roman">a[1],&nbsp;a[2],&nbsp;&hellip;,&nbsp;a[N]</font><font face="宋体">，代表</font><font face="Times New Roman">N</font><font face="宋体">个节点的初始权值。</font></span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><p></p>
<p></p><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt; text-indent: 20.25pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">再下一行输入一个整数<font face="Times New Roman">Q</font><font face="宋体">，代表接下来的操作数。</font></span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><p></p>
<p></p><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt; text-indent: 20.25pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">最后输入<font face="Times New Roman">Q</font><font face="宋体">行，每行的格式如题目描述所示。</font></span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><p></p>
<p></p><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt; text-indent: 21pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><h3>Output</h3><div class="content"><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt; text-indent: 21pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">对于操作<font face="Times New Roman">F1,&nbsp;F2,&nbsp;F3</font><font face="宋体">，输出对应的结果，每个结果占一行。</font></span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><p></p>
<p></p><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt; margin-left: 21pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">3<br>
<br>
0 0 0<br>
<br>
8<br>
<br>
A1 3 -20<br>
<br>
A1 2 20<br>
<br>
U 1 3<br>
<br>
A2 1 10<br>
<br>
F1 3<br>
<br>
F2 3<br>
<br>
A3 -10<br>
<br>
F3<br>
<br>
</span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata"><br>
-10<br>
<br>
10<br>
<br>
10<br>
<br>
</span></div><h3>HINT</h3><br>            <div class="content"><p></p><p><br><br>
&nbsp;对于30%的数据，保证 N&lt;=100，Q&lt;=10000</p><br><p></p>
<p></p><p>对于80%的数据，保证 N&lt;=100000，Q&lt;=100000</p><br><p></p>
<p></p><p>对于100%的数据，保证 N&lt;=300000，Q&lt;=300000</p><br><p></p>
<p></p><p>对于所有的数据，保证输入合法，并且 -1000&lt;=v, a[1], a[2], &hellip;, a[N]&lt;=1000<br><br>
</p>&lt;/p&gt;&lt;/div&gt;<h3>Source</h3><br>            <div class="content"><p><a href="problemset.php?search=Day2">Day2</a></p></div><p></p>
<h2 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h2><p>终于到这道题了，好开心～本题正解是可并堆，但是我发明了一个支持删除内部元素的“堆”（其实就是个暴力），就是建两个平衡树，一个用于堆操作，另一个用于查找结点，然后在堆里面搜以删除它，就是说，其中一个按权值排序，另一个按照id排序，这样就可以按照id删除堆内节点了O(∩_∩)O～</p>
<p>然后按照启发式合并的方法合并即可</p>
<p>我把这种东西称作“双平衡树”，写了一下好像还过了。。。只是跑得很慢。。。（所以我们找到了可并堆的替代品了是吗？？？）</p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> alladd;</div><div class="line"><span class="keyword">int</span> ufsadd[maxn];</div><div class="line"><span class="keyword">int</span> fa[maxn];</div><div class="line"><span class="keyword">int</span> val[maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp1</span>&#123;</span></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> a, <span class="keyword">const</span> <span class="keyword">int</span> b)</span> <span class="keyword">const</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> (val[a] == val[b]) ? a &lt; b : val[a] &gt; val[b];</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>, cmp1&gt; ufs[maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp2</span>&#123;</span></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> a, <span class="keyword">const</span> <span class="keyword">int</span> b)</span> <span class="keyword">const</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> (val[a] + ufsadd[fa[a]] == val[b] + ufsadd[fa[b]]) ? a &lt; b  : (val[a] + ufsadd[fa[a]] &gt; val[b] + ufsadd[fa[b]]);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>, cmp2&gt; all;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    x = fa[x], y = fa[y];</div><div class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (ufs[x].size() &lt; ufs[y].size()) swap(x, y);</div><div class="line">    all.erase(*(ufs[x].begin()));</div><div class="line">    all.erase(*(ufs[y].begin()));</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; :: iterator it = ufs[y].begin(); it != ufs[y].end(); it++)&#123;</div><div class="line">        val[*it] += ufsadd[y] - ufsadd[x];</div><div class="line">        fa[*it] = x;</div><div class="line">        ufs[x].insert(*it);</div><div class="line">    &#125;</div><div class="line">    all.insert(*(ufs[x].begin()));</div><div class="line">    ufs[y].clear();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_point</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    all.erase(*(ufs[fa[x]].begin()));</div><div class="line">    ufs[fa[x]].erase(x);</div><div class="line">    val[x] += v;</div><div class="line">    ufs[fa[x]].insert(x);</div><div class="line">    all.insert(*(ufs[fa[x]].begin()));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_ufs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    x = fa[x];</div><div class="line">    all.erase(*(ufs[x].begin()));</div><div class="line">    ufsadd[x] += v;</div><div class="line">    all.insert(*(ufs[x].begin()));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_all</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    alladd += v;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_point</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, val[x] + ufsadd[fa[x]] + alladd);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_ufs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    x = *(ufs[fa[x]].begin());</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, val[x] + ufsadd[fa[x]] + alladd);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_all</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x = *(all.begin());</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, val[x] + ufsadd[fa[x]] + alladd);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = getchar();x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch) &amp;&amp; ch != <span class="string">'-'</span>) ch = getchar();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = getchar();</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    read(n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        read(val[i]);</div><div class="line">        fa[i] = i;</div><div class="line">        ufs[i].insert(i);</div><div class="line">        all.insert(i);</div><div class="line">    &#125;</div><div class="line">    read(m);</div><div class="line">    <span class="keyword">char</span> s[<span class="number">10</span>];</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">        <span class="keyword">switch</span>(s[<span class="number">0</span>])&#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'U'</span>:&#123;</div><div class="line">                read(x), read(y);</div><div class="line">                merge(x, y);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> <span class="string">'A'</span>:&#123;</div><div class="line">                <span class="keyword">switch</span>(s[<span class="number">1</span>])&#123;</div><div class="line">                    <span class="keyword">case</span> <span class="string">'1'</span>:&#123;</div><div class="line">                        read(x), read(y);</div><div class="line">                        add_point(x, y);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">case</span> <span class="string">'2'</span>:&#123;</div><div class="line">                        read(x), read(y);</div><div class="line">                        add_ufs(x, y);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">case</span> <span class="string">'3'</span>:&#123;</div><div class="line">                        read(x);</div><div class="line">                        add_all(x);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> <span class="string">'F'</span>:&#123;</div><div class="line">                <span class="keyword">switch</span>(s[<span class="number">1</span>])&#123;</div><div class="line">                    <span class="keyword">case</span> <span class="string">'1'</span>:&#123;</div><div class="line">                        read(x);</div><div class="line">                        get_point(x);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">case</span> <span class="string">'2'</span>:&#123;</div><div class="line">                        read(x);</div><div class="line">                        get_ufs(x);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">case</span> <span class="string">'3'</span>:&#123;</div><div class="line">                        get_all();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 2456. -- mode</title><center><h2>2456: mode</h2><span class="green">Time Limit: </span>1 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>1 MB<br><span class="green">Submit: </span>5345&nbsp;&nbsp;<span class="green">Solved: </span>2243<br>[<a href="submitpage.php?id=2456">Submit</a>][<a href="problemstatus.php?id=2456">Status</a>][<a href="bbs.php?id=2456">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p>给你一个n个数的数列，其中某个数出现了超过n div 2次即众数，请你找出那个数。</p></div><h3>Input</h3><div class="content"><p>第1行一个正整数n。<br>
第2行n个正整数用空格隔开。</p></div><h3>Output</h3><div class="content"><p>&nbsp;&nbsp;&nbsp; 一行一个正整数表示那个众数。</p></div><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">5<br>
3 2 3 1 3<br>
</span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">3<br>
</span></div><h3>HINT</h3><br>            <div class="content"><p></p><p>100%的数据，n&lt;=500000，数列中每个数&lt;=maxlongint。</p><br><p></p>
<p></p><p></p><br><p></p>
<p></p><p><span style="font-size: medium">zju2132 The Most Frequent Number</span></p>&lt;/p&gt;&lt;/div&gt;<h3>Source</h3><br>            <div class="content"><p><a href="problemset.php?search=鸣谢 黄祎程">鸣谢 黄祎程</a></p></div><p></p>
<h2 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h2><p>思维题，这种问题被称为“绝对众数问题”，好像在UOJ上有人研究？？？</p>
<p>总之就是互相抵消就可以，空间时间复杂度都是最优的（好像无法再优化了）</p>
<h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> x;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> nowx = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> nown = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;x);</div><div class="line">        <span class="keyword">if</span> (!nown) &#123;</div><div class="line">            nowx = x;</div><div class="line">            nown = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">if</span> (nowx == x) nown++;</div><div class="line">            <span class="keyword">else</span> nown--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, nowx);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 2565. -- 最长双回文串</title><center><h2>2565: 最长双回文串</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>2480&nbsp;&nbsp;<span class="green">Solved: </span>1263<br>[<a href="submitpage.php?id=2565">Submit</a>][<a href="problemstatus.php?id=2565">Status</a>][<a href="bbs.php?id=2565">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div style="background: white" align="left"><span style="font-size: 12pt; color: #200000">顺序和逆序读起来完全一样的串叫做回文串。比如</span><span style="font-size: 12pt; color: #200000">acbca</span><span style="font-size: 12pt; color: #200000">是回文串，而</span><span style="font-size: 12pt; color: #200000">abc</span><span style="font-size: 12pt; color: #200000">不是（</span><span style="font-size: 12pt; color: #200000">abc</span><span style="font-size: 12pt; color: #200000">的顺序为</span><span style="font-size: 12pt; color: #200000">&ldquo;abc&rdquo;</span><span style="font-size: 12pt; color: #200000">，逆序为</span><span style="font-size: 12pt; color: #200000">&ldquo;cba&rdquo;</span><span style="font-size: 12pt; color: #200000">，不相同）。</span><span style="font-size: 12pt; color: #200000"><br>
</span><span style="font-size: 12pt; color: #200000">输入长度为</span><span style="font-size: 12pt; color: #200000">n</span><span style="font-size: 12pt; color: #200000">的串</span><span style="font-size: 12pt; color: #200000">S</span><span style="font-size: 12pt; color: #200000">，求</span><span style="font-size: 12pt; color: #200000">S</span><span style="font-size: 12pt; color: #200000">的最长双回文子串</span><span style="font-size: 12pt; color: #200000">T,</span><span style="font-size: 12pt; color: #200000">即可将</span><span style="font-size: 12pt; color: #200000">T</span><span style="font-size: 12pt; color: #200000">分为两部分</span><span style="font-size: 12pt; color: #200000">X</span><span style="font-size: 12pt; color: #200000">，</span><span style="font-size: 12pt; color: #200000">Y</span><span style="font-size: 12pt; color: #200000">，（</span><span style="font-size: 12pt; color: #200000">|X|,|Y|&ge;1</span><span style="font-size: 12pt; color: #200000">）且</span><span style="font-size: 12pt; color: #200000">X</span><span style="font-size: 12pt; color: #200000">和</span><span style="font-size: 12pt; color: #200000">Y</span><span style="font-size: 12pt; color: #200000">都是回文串。</span></div>&lt;/div&gt;<h3>Input</h3><div class="content"><p><font size="3"><font color="#200000">一行由小写英文字母组成的字符串<span style="font-size: 12pt; color: #200000">S</span></font></font><span style="font-size: 12pt; color: #200000">。</span></p></div><h3>Output</h3><div class="content"><div style="background: white" align="left"><span style="font-size: 12pt; color: #200000">一行一个整数，表示最长双回文子串的长度。</span></div>&lt;/div&gt;<h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">baacaabbacabb<br>
</span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">12<br>
</span></div><h3>HINT</h3><br>            <div class="content"><p></p><p>样例说明<br><br>
从第二个字符开始的字符串aacaabbacabb可分为aacaa与bbacabb两部分，且两者都是回文串。<br><br>
对于100%的数据，2&le;|S|&le;10^5</p><br><p></p>
<p></p><p>2015.4.25新加数据一组</p>&lt;/p&gt;&lt;/div&gt;<h3>Source</h3><br>            <div class="content"><p><a href="problemset.php?search=2012国家集训队Round 1 day2">2012国家集训队Round 1 day2</a></p></div><p></p>
<h2 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h2><p>写过千万遍了。。。就是个Manacher板题</p>
<h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 3000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">char</span> t[maxn];</div><div class="line"><span class="keyword">int</span> pre[maxn];</div><div class="line"><span class="keyword">int</span> suf[maxn];</div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Manacher</span><span class="params">()</span></span>&#123;</div><div class="line">    n = <span class="built_in">strlen</span>(t);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        s[i &lt;&lt; <span class="number">1</span>] = <span class="string">'@'</span>, s[(i &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>] = t[i];</div><div class="line">    &#125;</div><div class="line">    s[n &lt;&lt; <span class="number">1</span>] = <span class="string">'@'</span>;</div><div class="line">    n &lt;&lt;= <span class="number">1</span>;</div><div class="line">    n++;</div><div class="line">    <span class="keyword">int</span> a, p;</div><div class="line">    a = p = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (i &gt; p) f[i] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">else</span> f[i] = min(f[(a &lt;&lt; <span class="number">1</span>) - i], p - i);</div><div class="line">        <span class="keyword">while</span> (i + f[i] + <span class="number">1</span> &lt; n &amp;&amp; i - f[i] - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; s[i + f[i] + <span class="number">1</span>] == s[i - f[i] - <span class="number">1</span>]) f[i]++;</div><div class="line">        <span class="keyword">if</span> (i + f[i] &gt; p) &#123;</div><div class="line">            p = i + f[i];</div><div class="line">            a = i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    p = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (i + f[i] &gt; p)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = p + <span class="number">1</span>; j &lt;= i + f[i]; j++) pre[j] = j - i + <span class="number">1</span>;</div><div class="line">            p = i + f[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    p = n;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>  i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</div><div class="line">        <span class="keyword">if</span> (i - f[i] &lt; p)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = p - <span class="number">1</span>; j &gt;= i - f[i]; j--) suf[j] = i - j + <span class="number">1</span>;</div><div class="line">            p = i - f[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> maxnum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)&#123;</div><div class="line">        maxnum = max(maxnum, pre[i] + suf[i + <span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, maxnum - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, t);</div><div class="line">    Manacher();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 2916. -- [Poi1997]Monochromatic Triangles</title><center><h2>2916: [Poi1997]Monochromatic Triangles</h2><span class="green">Time Limit: </span>1 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>338&nbsp;&nbsp;<span class="green">Solved: </span>173<br>[<a href="submitpage.php?id=2916">Submit</a>][<a href="problemstatus.php?id=2916">Status</a>][<a href="bbs.php?id=2916">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div><span style="font-size: 12pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt">空间中有</span><span style="font-size: 12pt">n</span><span style="font-size: 12pt">个点，任意</span><span style="font-size: 12pt">3</span><span style="font-size: 12pt">个点不共线。每两个点用红线或者蓝线连接，如果一个三角形的三边颜色相同，那么称为同色三角形。给你一组数据，计算同色三角形的总数。</span></div><p></p>
<div>&nbsp;</div>
<div><span style="font-size: 12pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></div></div><h3>Input</h3><div class="content"><div>&nbsp;
<p><font size="3">第一行是整数<span style="font-size: 12pt">n, 3 &lt;= n &lt;= 1000,</span></font><span style="font-size: 12pt">点的个数。</span></p>
<div><span style="font-size: 12pt">第二行是整数</span><span style="font-size: 12pt">m, 0 &lt;= m &lt;= 250000,</span><span style="font-size: 12pt">红线数目。</span></div>
<div>&nbsp;</div>
<div><span style="font-size: 12pt">接下来的</span><span style="font-size: 12pt">m</span><span style="font-size: 12pt">行，每行两个数</span><span style="font-size: 12pt">p</span><span style="font-size: 12pt">和</span><span style="font-size: 12pt">k</span><span style="font-size: 12pt">，</span><span style="font-size: 12pt">1 &lt;= p &lt; k &lt;= n</span><span style="font-size: 12pt">。表示一条红线的两个端点。</span></div>
</div>
<div><span style="font-size: 12pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></div></div><h3>Output</h3><div class="content"><div><span style="font-size: medium">&nbsp;</span></div>
<p><span style="font-size: medium">&nbsp; 一个整数，单色三角形的数目。<br>
</span></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">6 <br>
9<br>
1 2<br>
2 3<br>
2 5<br>
1 4<br>
1 6<br>
3 4<br>
4 5<br>
5 6<br>
3 6<br>
</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">2</span></div><h3>HINT</h3>
            <div class="content"><p></p><p><span style="font-size: medium">数据已加强</span></p><p></p></div><h3>Source</h3>
            <div class="content"><p><a href="problemset.php?search="></a></p></div>

<h2 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h2><p>组合题，我们考虑取反，然后统计“异色角”的数量，而每个非同色三角形都会占据正好两个异色角，那么我们就知道了非单色三角形的数量，用全部的减去即可</p>
<p>好像奥林匹克小丛书里面有？？？（小蓝皮）</p>
<p><del>不说都忘了以前是打数竞的</del></p>
<h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">LL rec[maxn];</div><div class="line">LL n, m;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;m);</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        rec[x]++, rec[y]++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        ans += (n - <span class="number">1</span> - rec[i]) * rec[i];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, n * (n - <span class="number">1</span>) * (n - <span class="number">2</span>) / <span class="number">6</span> - ans / <span class="number">2</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 3038. -- 上帝造题的七分钟2</title><center><h2>3038: 上帝造题的七分钟2</h2><span class="green">Time Limit: </span>3 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>1505&nbsp;&nbsp;<span class="green">Solved: </span>647<br>[<a href="submitpage.php?id=3038">Submit</a>][<a href="problemstatus.php?id=3038">Status</a>][<a href="bbs.php?id=3038">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p><span style="font-size: medium">XLk觉得《上帝造题的七分钟》不太过瘾，于是有了第二部。<br>
&quot;第一分钟，X说，要有数列，于是便给定了一个正整数数列。<br>
第二分钟，L说，要能修改，于是便有了对一段数中每个数都开平方(下取整)的操作。<br>
第三分钟，k说，要能查询，于是便有了求一段数的和的操作。<br>
第四分钟，彩虹喵说，要是noip难度，于是便有了数据范围。<br>
第五分钟，诗人说，要有韵律，于是便有了时间限制和内存限制。<br>
第六分钟，和雪说，要省点事，于是便有了保证运算过程中及最终结果均不超过64位有符号整数类型的表示范围的限制。<br>
第七分钟，这道题终于造完了，然而，造题的神牛们再也不想写这道题的程序了。&quot;<br>
&mdash;&mdash;《上帝造题的七分钟&middot;第二部》<br>
所以这个神圣的任务就交给你了。<br>
</span></p></div><h3>Input</h3><div class="content"><p><span style="font-size: medium">第一行一个整数n，代表数列中数的个数。<br>
第二行n个正整数，表示初始状态下数列中的数。<br>
第三行一个整数m，表示有m次操作。<br>
接下来m行每行三个整数k,l,r，k=0表示给[l,r]中的每个数开平方(下取整)，k=1表示询问[l,r]中各个数的和。</span></p></div><h3>Output</h3><div class="content"><p><span style="font-size: medium">对于询问操作，每行输出一个回答。</span></p></div><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">10<br>
1 2 3 4 5 6 7 8 9 10<br>
5<br>
0 1 10<br>
1 1 10<br>
1 1 5<br>
0 5 8<br>
1 4 8<br>
</span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">19<br>
7<br>
6<br>
</span></div><h3>HINT</h3><br>            <div class="content"><p></p><p><font size="4">1：对于100%的数据，1&lt;=n&lt;=100000，1&lt;=l&lt;=r&lt;=n，数列中的数大于0，且不超过1e12。</font></p><br><p></p>
<p></p><p><font size="4">2：数据不保证L&lt;=R 若L&gt;R，请自行交换L,R，谢谢！ </font></p>&lt;/p&gt;&lt;/div&gt;<h3>Source</h3><br>            <div class="content"><p><a href="problemset.php?search=Poetize4">Poetize4</a></p></div><p></p>
<h2 id="题目分析-6"><a href="#题目分析-6" class="headerlink" title="题目分析"></a>题目分析</h2><p>平摊分析线段树。。。就是开根操作会比较少，直接暴力就好。。。</p>
<h2 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = getchar();x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL line[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line">LL maxnum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line">LL sum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        sum[o] = line[l];</div><div class="line">        maxnum[o] = line[l];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    update(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    update(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    maxnum[o] = max(maxnum[o &lt;&lt; <span class="number">1</span>], maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">    sum[o] = sum[o &lt;&lt; <span class="number">1</span>] + sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        <span class="keyword">if</span> (maxnum[o] == <span class="number">0</span> || maxnum[o] == <span class="number">1</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) line[i] = (LL) <span class="built_in">sqrt</span>(line[i]);</div><div class="line">        update(l, r, o);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) modify(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) modify(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    sum[o] = sum[o &lt;&lt; <span class="number">1</span>] + sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">    maxnum[o] = max(maxnum[o &lt;&lt; <span class="number">1</span>], maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy) <span class="keyword">return</span> sum[o];</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) ans += getsum(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) ans += getsum(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> op, l, r;</div><div class="line"></div><div class="line">    read(n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(line[i]);</div><div class="line">    update(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line"></div><div class="line">    read(m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        read(op), read(l) ,read(r);</div><div class="line">        <span class="keyword">if</span> (l &gt; r) swap(l, r);</div><div class="line">        <span class="keyword">if</span> (!op)&#123;</div><div class="line">            qx = l, qy = r;</div><div class="line">            modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            qx = l, qy = r;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, getsum(<span class="number">1</span>, n, <span class="number">1</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 3209. -- 花神的数论题</title><center><h2>3209: 花神的数论题</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>2291&nbsp;&nbsp;<span class="green">Solved: </span>1048<br>[<a href="submitpage.php?id=3209">Submit</a>][<a href="problemstatus.php?id=3209">Status</a>][<a href="bbs.php?id=3209">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p><span style="font-size: medium">背景<br>
众所周知，花神多年来凭借无边的神力狂虐各大 OJ、OI、CF、TC &hellip;&hellip; 当然也包括 CH 啦。<br>
描述<br>
话说花神这天又来讲课了。课后照例有超级难的神题啦&hellip;&hellip; 我等蒟蒻又遭殃了。<br>
花神的题目是这样的<br>
设 sum(i) 表示 i 的二进制表示中 1 的个数。给出一个正整数 N ，花神要问你<br>
派(Sum(i)),也就是 sum(1)&mdash;sum(N) 的乘积。</span></p><p></p>
<p></p><p></p></div><h3>Input</h3><div class="content"><p><span style="font-size: medium">一个正整数 N。</span></p><p></p>
<p></p><p></p></div><h3>Output</h3><div class="content"><p><span style="font-size: medium">一个数，答案模 10000007 的值。</span></p><p></p>
<p></p><p></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">样例输入一<br>
<br>
3<br>
<br>
</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">样例输出一<br>
<br>
2<br>
</span></div><h3>HINT</h3>
            <div class="content"><p></p><p><br><br>
对于样例一，1*1*2=2；</p><br><p></p>
<p></p><p>数据范围与约定</p><br><p></p>
<p></p><p>对于 100% 的数据，N&le;10^15</p>&lt;/p&gt;&lt;/div&gt;<h3>Source</h3><br>            <div class="content"><p><a href="problemset.php?search=原创 Memphis">原创 Memphis</a></p></div><p></p>
<h2 id="题目分析-7"><a href="#题目分析-7" class="headerlink" title="题目分析"></a>题目分析</h2><p>好像直接数位DP一下就好？？？求一下二进制中1的个数为x的数的个数，然后快速幂一下</p>
<h2 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M1 941</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M2 10627</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">bool</span> vis[maxn][maxn][<span class="number">2</span>][<span class="number">2</span>];</div><div class="line">LL dp[maxn][maxn][<span class="number">2</span>][<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">fast_power</span><span class="params">(<span class="keyword">int</span> x, LL y, <span class="keyword">int</span> op)</span></span>&#123;</div><div class="line">    LL M = (op) ? M2 : M1;</div><div class="line">    LL ans = <span class="number">1</span>, con = x;</div><div class="line">    <span class="keyword">while</span> (y)&#123;</div><div class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ans = ans * con % M;</div><div class="line">        y &gt;&gt;= <span class="number">1</span>;</div><div class="line">        con = con * con % M;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">DP</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> rest, <span class="keyword">int</span> op, <span class="keyword">int</span> op2)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (rest == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (pos == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (vis[pos][rest][op][op2]) <span class="keyword">return</span> dp[pos][rest][op][op2];</div><div class="line">    vis[pos][rest][op][op2] = <span class="number">1</span>;</div><div class="line">    LL&amp; ans = dp[pos][rest][op][op2];</div><div class="line">    <span class="keyword">if</span> (!op2)&#123;</div><div class="line">        <span class="keyword">if</span> (op)&#123;</div><div class="line">            <span class="keyword">if</span> (num[pos]) <span class="keyword">return</span> ans = (DP(pos - <span class="number">1</span>, rest - <span class="number">1</span>, <span class="number">1</span>, op2) + DP(pos - <span class="number">1</span>, rest, <span class="number">0</span>, op2)) % (M1 - <span class="number">1</span>);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> ans = DP(pos - <span class="number">1</span>, rest, <span class="number">1</span>, op2);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> ans = (DP(pos - <span class="number">1</span>, rest - <span class="number">1</span>, <span class="number">0</span>, op2) + DP(pos - <span class="number">1</span>, rest, <span class="number">0</span>, op2)) % (M1 - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">if</span> (op)&#123;</div><div class="line">            <span class="keyword">if</span> (num[pos]) <span class="keyword">return</span> ans = (DP(pos - <span class="number">1</span>, rest - <span class="number">1</span>, <span class="number">1</span>, op2) + DP(pos - <span class="number">1</span>, rest, <span class="number">0</span>, op2)) % (M2 - <span class="number">1</span>);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> ans = DP(pos - <span class="number">1</span>, rest, <span class="number">1</span>, op2);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> ans = (DP(pos - <span class="number">1</span>, rest - <span class="number">1</span>, <span class="number">0</span>, op2) + DP(pos - <span class="number">1</span>, rest, <span class="number">0</span>, op2)) % (M2 - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">get_inv</span><span class="params">(LL a, <span class="keyword">int</span> op)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (!op) <span class="keyword">return</span> fast_power(a, M1 - <span class="number">2</span>, <span class="number">0</span>);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> fast_power(a, M2 - <span class="number">2</span>, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    LL n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</div><div class="line">    <span class="keyword">while</span> (n)&#123;</div><div class="line">        num[cnt++] = n &amp; <span class="number">1</span>;</div><div class="line">        n &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    LL ans = <span class="number">1</span>;</div><div class="line">    LL con1 = M2 * get_inv(M2, <span class="number">0</span>) % (M2 * M1);</div><div class="line">    LL con2 = M1 * get_inv(M1, <span class="number">1</span>) % (M2 * M1);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)&#123;</div><div class="line">        LL a = fast_power(i, DP(cnt - <span class="number">1</span>, i, <span class="number">1</span>, <span class="number">0</span>), <span class="number">0</span>) * con1 % (M1 * M2);</div><div class="line">        LL b = fast_power(i, DP(cnt - <span class="number">1</span>, i, <span class="number">1</span>, <span class="number">1</span>), <span class="number">1</span>) * con2 % (M2 * M1);</div><div class="line"></div><div class="line">        ans = ans * (a + b) % (M2 * M1);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 3358. -- [Usaco2004 Jan]洪水</title><center><h2>3358: [Usaco2004 Jan]洪水</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>62&nbsp;&nbsp;<span class="green">Solved: </span>44<br>[<a href="submitpage.php?id=3358">Submit</a>][<a href="problemstatus.php?id=3358">Status</a>][<a href="bbs.php?id=3358">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div><p></p>
<div>农场面临着洪水的威胁。帮助约翰找到水的高度，他可以把他的奶牛移到安全的地方, 农场由M&times;N(1&le;M，N&le;400)</div>
<div>的单位方格组成．每格有一个海拔高度Hi，j(1&le;Hi，j&le;10000)．给出一个M&times;N的表格地图和降水量V(1&le;V&le;10^9</div>
<div>)。水总是先注入最低的方格，不管该方格在哪儿。请你算出水面高度，水面和海平面之间的陆地体积（可能为0）</div>
<div>。注意：陆地和水面高度相同时已经被淹没。</div>
<div></div>
<div></div>
</div></div><h3>Input</h3><div class="content"><div><span style="font-size: medium;">* Line 1: Three space-separated integers: M, N, &nbsp;and V</span></div>
<div><font size="3">* Lines 2...: Each line contains as many as 20 space-separated</font></div>
<div><font size="3">&nbsp; &nbsp; &nbsp; &nbsp; integers that represent the elevations of the farm. The first</font></div>
<div><font size="3">&nbsp; &nbsp; &nbsp; &nbsp; N integers are spread across line 1 and it successors, 20</font></div>
<div><font size="3">&nbsp; &nbsp; &nbsp; &nbsp; integers per line, until all N integers are laid out. The next</font></div>
<div><font size="3">&nbsp; &nbsp; &nbsp; &nbsp; N integers begin on a new line, etc.</font></div>
<div></div></div><h3>Output</h3><div class="content"><div>在一行内输出两个由空格分隔的整数：水面高度，海平面和水面之间陆地的体积（被水完全淹没的陆地体积）。</div>
<p></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">4 5 33<br>
2 2 2 2 2<br>
1 3 4 3 2<br>
2 3 5 3 2<br>
2 4 1 1 2</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">4  43<br>
</span></div><h3>HINT</h3>
            <div class="content"><p><div><br>
<div>The water will rise to a height of 4 m, submerging the blocks marked1, 2, 3, and 4.</div><br>
<div>The volume of land below the water is 1*3 + 2*10 + 3*4 +4*2 = 43.</div><br>
<div>水高4米，淹没的区域标记1，2，3，4．水下陆地的体积：1&times;3+2&times;10+3&times;4+4&times;2=43.</div><br>
</div><br>
</p><p></p><p></p></div><h3>Source</h3>
            <div class="content"><p><a href="problemset.php?search=Orange">Orange</a></p></div>

<h2 id="题目分析-8"><a href="#题目分析-8" class="headerlink" title="题目分析"></a>题目分析</h2><p>好像是一道二分水题。。。而且还不用浮点数二分</p>
<h2 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line">LL v;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> pre[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span>* k = upper_bound(line, line + n * m, x);</div><div class="line">    LL now = (LL)x * (k - line) - pre[k - line - <span class="number">1</span>];</div><div class="line">    <span class="keyword">if</span> (now &lt; v) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (now &gt; v) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">int</span> op = judge(mid);</div><div class="line">    <span class="keyword">if</span> (op == <span class="number">0</span>) <span class="keyword">return</span> mid;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">-1</span>) <span class="keyword">return</span> work(l, mid);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> work(mid + <span class="number">1</span>, r);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>, &amp;n, &amp;m, &amp;v);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n * m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">    &#125;</div><div class="line">    sort(line, line + n * m);</div><div class="line">    pre[<span class="number">0</span>] = line[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n * m; i++)&#123;</div><div class="line">        pre[i] = pre[i - <span class="number">1</span>] + line[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> hei = work(line[<span class="number">0</span>], INF);</div><div class="line">    <span class="keyword">int</span> k = upper_bound(line, line + n * m, hei) - line - <span class="number">1</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d"</span>, hei, pre[k]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 3366. -- [Usaco2004 Feb]Breeding 奶牛饲育</title><center><h2>3366: [Usaco2004 Feb]Breeding 奶牛饲育</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>32&nbsp;&nbsp;<span class="green">Solved: </span>22<br>[<a href="submitpage.php?id=3366">Submit</a>][<a href="problemstatus.php?id=3366">Status</a>][<a href="bbs.php?id=3366">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;农夫约翰正在扩增牛群．通过调整饲料的量，他可以控制牛群中每头母牛所生的小牛的数</span></div><p></p>
<div><span style="font-size: medium">量．如果他给每头奶牛喂了相同量的饲料，她们就产下了相同数量的牛犊．开始，他喂了一头母牛，希望通过若干代的饲育得到N只奶牛．假如N=&nbsp;12，那么约翰应该喂那只最初的奶牛足够的饲料，使其生3只牛犊．第二代牛长大后，他就给她们喂足够的饲料，使它们生下4只牛犊，从而最后一代中有12只牛了．牛一旦生产，约翰就把她卖了．所以，农场里只保留最新一代的牛．&nbsp;每头牛生牛犊的数量不少于2，且无上限．约翰可以通过多少种不同的方式使最络牛的总数为N(1&le;N&le;2&times;109)方法的总数量不超过2&times;10^9.</span></div></div><h3>Input</h3><div class="content"><div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;整数N.</span></div></div><h3>Output</h3><div class="content"><div>&nbsp;</div>
<div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;获得N头牛的方式总数．</span></div></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">    12<br>
</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata"> <br>
 <br>
    8<br>
样例说明<br>
    获得12头牛的方法是(2，2，3).即，第一二代都生产2头，第三代生产3头（一共12头）．其余7种方法为(2，3，2)，(3，2，2)，(3，4)，(4，3)，(12)，(2，6)，(6，2).<br>
</span></div><h3>HINT</h3>
            <div class="content"><p></p></div><h3>Source</h3>
            <div class="content"><p><a href="problemset.php?search=Orange">Orange</a></p></div>

<h2 id="题目分析-9"><a href="#题目分析-9" class="headerlink" title="题目分析"></a>题目分析</h2><p>还是一道水题，直接递归即可</p>
<p><del>我居然还WA了一次???</del></p>
<h2 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; dp;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (dp.count(x)) <span class="keyword">return</span> dp[x];</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> con = (<span class="keyword">int</span>) <span class="built_in">sqrt</span>(x);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= con; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (x / i == i) ans += work(i);</div><div class="line">            <span class="keyword">else</span> ans += work(i) + work(x / i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dp[x] = ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, work(n));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</div></div></div></div></div></div></div></div></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;第二篇。。。&lt;br&gt;
    
    </summary>
    
    
      <category term="BZOJ" scheme="https://goseqh.tk/tags/BZOJ/"/>
    
      <category term="题解" scheme="https://goseqh.tk/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ阶段性汇总I</title>
    <link href="https://goseqh.tk/2017/08/26/BZOJ%E9%98%B6%E6%AE%B5%E6%80%A7%E6%B1%87%E6%80%BBI/"/>
    <id>https://goseqh.tk/2017/08/26/BZOJ阶段性汇总I/</id>
    <published>2017-08-26T09:12:35.000Z</published>
    <updated>2017-09-04T00:10:39.311Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>第一篇BZOJ题解出现啦！<br><a id="more"></a></p>
<h1 id="首篇致辞"><a href="#首篇致辞" class="headerlink" title="首篇致辞"></a>首篇致辞</h1><p>由于每道题都写题解<strong>太傻了</strong>，于是每十道题打包在一起进行总结发布，同时为了查找方便，将会再发布一篇文章用于记录所有已完成的题目同时附上一句话题解</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p><title>Problem 1010. -- [HNOI2008]玩具装箱toy</title><center><h2>1010: [HNOI2008]玩具装箱toy</h2><span class="green">Time Limit: </span>1 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>11256&nbsp;&nbsp;<span class="green">Solved: </span>4733<br>[<a href="submitpage.php?id=1010">Submit</a>][<a href="problemstatus.php?id=1010">Status</a>][<a href="bbs.php?id=1010">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p>　　P教授要去看奥运，但是他舍不下他的玩具，于是他决定把所有的玩具运到北京。他使用自己的压缩器进行压
缩，其可以将任意物品变成一堆，再放到一种特殊的一维容器中。P教授有编号为1...N的N件玩具，第i件玩具经过
压缩后变成一维长度为Ci.为了方便整理，P教授要求在一个一维容器中的玩具编号是连续的。同时如果一个一维容
器中有多个玩具，那么两件玩具之间要加入一个单位长度的填充物，形式地说如果将第i件玩具到第j个玩具放到一
个容器中，那么容器的长度将为 x=j-i+Sigma(Ck) i&lt;=K&lt;=j 制作容器的费用与容器的长度有关，根据教授研究，
如果容器长度为x,其制作费用为(X-L)^2.其中L是一个常量。P教授不关心容器的数目，他可以制作出任意长度的容
器，甚至超过L。但他希望费用最小.</p></div><h3>Input</h3><div class="content"><p>　　第一行输入两个整数N，L.接下来N行输入Ci.1&lt;=N&lt;=50000,1&lt;=L,Ci&lt;=10^7</p></div><h3>Output</h3><div class="content"><p>　　输出最小费用</p></div><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">5 4
3<br>
4<br>
2<br>
1<br>
4<br></span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">1</span></div><h3>HINT</h3><br>            <div class="content"><p></p></div><h3>Source</h3><p></p>
<h2>题目分析</h2>
很显然是斜率优化DP，但是为了很好地解决这样的问题，以下面的代码为例，只要是斜率优化DP的题目，都可以封装斜率优化的部分，然后把细节的关于x和y以及系数，斜率，算出DP值的具体公式用宏定义的方法进行表达，这样更加具有可扩展性

注意下面代码对斜率优化的封装

<h2> 代码</h2>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> X(x) ((double)x + sum[x])</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Y(x) ((double)dp[x] + X(x) * X(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> EFF(i) (2 * i + 2 * sum[i] - 2 - 2 * L)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SLOPE(x, y) ((Y(y) - Y(x)) / (X(y) - X(x)))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_DP(i, x) (dp[i] = dp[x] + (EFF(i) / 2 - X(x)) * (EFF(i) / 2 - X(x)))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">LL save[maxn];</div><div class="line">LL h, t;</div><div class="line">LL dp[maxn];</div><div class="line">LL sum[maxn];</div><div class="line">LL c[maxn];</div><div class="line">LL L;</div><div class="line">LL n;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    h = t = <span class="number">0</span>;</div><div class="line">    save[t++] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">while</span> (t - h &gt; <span class="number">1</span> &amp;&amp; SLOPE(save[h], save[h + <span class="number">1</span>]) &lt; EFF(i)) h++;</div><div class="line">        GET_DP(i, save[h]);</div><div class="line">        <span class="keyword">while</span> (t - h &gt; <span class="number">1</span> &amp;&amp; SLOPE(save[t - <span class="number">1</span>], i) &lt; SLOPE(save[t - <span class="number">2</span>], save[t - <span class="number">1</span>])) t--;</div><div class="line">        save[t++] = i;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, dp[n]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;L);</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;c[i]);</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++) sum[i] = sum[i - <span class="number">1</span>] + c[i];</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

中间那部分（work()）是完全不受题目影响的

<title>Problem 1026. -- [SCOI2009]windy数</title><center><h2>1026: [SCOI2009]windy数</h2><span class="green">Time Limit: </span>1 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>8087&nbsp;&nbsp;<span class="green">Solved: </span>3635<br>[<a href="submitpage.php?id=1026">Submit</a>][<a href="problemstatus.php?id=1026">Status</a>][<a href="bbs.php?id=1026">Discuss</a>]</center><h3>Description</h3><div class="content"><p>　　windy定义了一种windy数。不含前导零且相邻两个数字之差至少为2的正整数被称为windy数。 windy想知道，
在A和B之间，包括A和B，总共有多少个windy数？</p></div><h3>Input</h3><div class="content"><p>　　包含两个整数，A B。</p></div><h3>Output</h3><div class="content"><p>　　一个整数</p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">【输入样例一】
1 10
【输入样例二】
25 50</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">【输出样例一】
9
【输出样例二】
20</span></div><h3>HINT</h3>
            <div class="content"><p></p><p>【数据规模和约定】
100%的数据，满足 1 &lt;= A &lt;= B &lt;= 2000000000 。</p><p></p></div><h3>Source</h3>

<h2>题目分析</h2>

<p>简单的数位DP，不用维护当前数字是否已经脱离前导零部分，只需要在统计答案时分别统计每个长度的数字即可（具体见代码统计答案部分）</p>
<h2>代码</h2>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> a, b;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> vis[maxn][maxn][<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> dp[maxn][maxn][<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> last, <span class="keyword">int</span> op)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (pos == cnt) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (vis[pos][last][op]) <span class="keyword">return</span> dp[pos][last][op];</div><div class="line">    vis[pos][last][op] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span>&amp; ans = dp[pos][last][op];</div><div class="line">    <span class="keyword">if</span> (op)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = last + <span class="number">2</span>; i &lt; num[pos]; i++) ans += DP(pos + <span class="number">1</span>, i, <span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; min(num[pos], last - <span class="number">1</span>); i++) ans += DP(pos + <span class="number">1</span>, i, <span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(num[pos] - last) &gt;= <span class="number">2</span>) ans += DP(pos + <span class="number">1</span>, num[pos], <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = last + <span class="number">2</span>; i &lt; <span class="number">10</span>; i++) ans += DP(pos + <span class="number">1</span>, i, <span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; last - <span class="number">1</span>; i++) ans += DP(pos + <span class="number">1</span>, i, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    cnt = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x)&#123;</div><div class="line">        num[cnt++] = x % <span class="number">10</span>;</div><div class="line">        x /= <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">    reverse(num, num + cnt);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</div><div class="line">    get(a - <span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> ans1 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= cnt; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++) ans1 += DP(i, j, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; num[<span class="number">0</span>]; j++) ans1 += DP(<span class="number">1</span>, j, <span class="number">0</span>);</div><div class="line">    ans1 += DP(<span class="number">1</span>, num[<span class="number">0</span>], <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line"></div><div class="line">    get(b);</div><div class="line">    <span class="keyword">int</span> ans2 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= cnt; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++) ans2 += DP(i, j, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; num[<span class="number">0</span>]; j++) ans2 += DP(<span class="number">1</span>, j, <span class="number">0</span>);</div><div class="line">    ans2 += DP(<span class="number">1</span>, num[<span class="number">0</span>], <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans2 - ans1);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

多循环几下统计答案即可省去开始标记

<title>Problem 1076. -- [SCOI2008]奖励关</title><center><h2>1076: [SCOI2008]奖励关</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>2581&nbsp;&nbsp;<span class="green">Solved: </span>1370<br>[<a href="submitpage.php?id=1076">Submit</a>][<a href="problemstatus.php?id=1076">Status</a>][<a href="bbs.php?id=1076">Discuss</a>]</center><h3>Description</h3><div class="content"><p>　　你正在玩你最喜欢的电子游戏，并且刚刚进入一个奖励关。在这个奖励关里，系统将依次随机抛出k次宝物，
每次你都可以选择吃或者不吃（必须在抛出下一个宝物之前做出选择，且现在决定不吃的宝物以后也不能再吃）。
&nbsp;宝物一共有n种，系统每次抛出这n种宝物的概率都相同且相互独立。也就是说，即使前k-1次系统都抛出宝物1（
这种情况是有可能出现的，尽管概率非常小），第k次抛出各个宝物的概率依然均为1/n。 获取第i种宝物将得到Pi
分，但并不是每种宝物都是可以随意获取的。第i种宝物有一个前提宝物集合Si。只有当Si中所有宝物都至少吃过
一次，才能吃第i种宝物（如果系统抛出了一个目前不能吃的宝物，相当于白白的损失了一次机会）。注意，Pi可
以是负数，但如果它是很多高分宝物的前提，损失短期利益而吃掉这个负分宝物将获得更大的长期利益。 假设你
采取最优策略，平均情况你一共能在奖励关得到多少分值？</p></div><h3>Input</h3><div class="content"><p>　　第一行为两个正整数k和n，即宝物的数量和种类。以下n行分别描述一种宝物，其中第一个整数代表分值，随
后的整数依次代表该宝物的各个前提宝物（各宝物编号为1到n），以0结尾。</p></div><h3>Output</h3><div class="content"><p>　　输出一个实数，保留六位小数，即在最优策略下平均情况的得分。</p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">1 2
1 0<br>
2 0<br></span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">1.500000</span></div><h3>HINT</h3>
            <div class="content"><p></p><p><span style="font-size: medium">【数据规模】
1&lt;=k&lt;=100,1&lt;=n&lt;=15，分值为[-10^6,10^6]内的整数。
</span></p><p></p></div><h3>Source</h3>

<h2>题目分析</h2>
简单的状压DP，其中最优策略的含义是让你在选和不选的DP值上取个MAX
<h2>代码</h2>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm (1 &lt;&lt; 16)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">double</span> dp[maxn][maxm];</div><div class="line"><span class="keyword">bool</span> vis[maxn][maxm];</div><div class="line"><span class="keyword">int</span> pre[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> op)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (pos == n + <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (vis[pos][op]) <span class="keyword">return</span> dp[pos][op];</div><div class="line">    vis[pos][op] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">double</span>&amp; ans = dp[pos][op];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="keyword">if</span>((op | pre[i]) == op)&#123;</div><div class="line">            ans += max(DP(pos + <span class="number">1</span>, op | (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>))) + line[i], DP(pos + <span class="number">1</span>, op)) / m;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> ans += DP(pos + <span class="number">1</span>, op) / m;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">        <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x) == <span class="number">1</span> &amp;&amp; x)&#123;</div><div class="line">            pre[i] |= (<span class="number">1</span> &lt;&lt; (x - <span class="number">1</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lf"</span>, DP(<span class="number">1</span>, <span class="number">0</span>));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<title>Problem 1087. -- [SCOI2005]互不侵犯King</title><center><h2>1087: [SCOI2005]互不侵犯King</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>4250&nbsp;&nbsp;<span class="green">Solved: </span>2455<br>[<a href="submitpage.php?id=1087">Submit</a>][<a href="problemstatus.php?id=1087">Status</a>][<a href="bbs.php?id=1087">Discuss</a>]</center><h3>Description</h3><div class="content"><p>　　在N&times;N的棋盘里面放K个国王，使他们互不攻击，共有多少种摆放方案。国王能攻击到它上下左右，以及左上
左下右上右下八个方向上附近的各一个格子，共8个格子。</p></div><h3>Input</h3><div class="content"><p>　　只有一行，包含两个数N，K （ 1 &lt;=N &lt;=9, 0 &lt;= K &lt;= N * N）</p></div><h3>Output</h3><div class="content"><p>　　方案数。</p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">3 2</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">16</span></div><h3>HINT</h3>
            <div class="content"><p></p></div><h3>Source</h3>

<h2>题目分析</h2>

<p>简单的状压DP。。。用DFS转移答案</p>
<h2>代码</h2>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 15</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxk 225</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 1024</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line">LL dp[maxn][maxk][maxm];</div><div class="line"><span class="keyword">bool</span> vis[maxn][maxk][maxm];</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">DP</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> rest, <span class="keyword">int</span> op)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> pos, <span class="keyword">int</span> rest, <span class="keyword">int</span> op, <span class="keyword">int</span> _op, LL&amp; ans)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (now == n)&#123;</div><div class="line">        ans += DP(pos + <span class="number">1</span>, rest, op);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">int</span> t = op, <span class="keyword">_t</span> = _op;</div><div class="line">        <span class="keyword">if</span> (!((_op) &amp; (<span class="number">1</span> &lt;&lt; now)))&#123;</div><div class="line">            <span class="keyword">if</span>(now == <span class="number">0</span>) op |= (<span class="number">1</span> &lt;&lt; now), op |= (<span class="number">1</span> &lt;&lt; (now + <span class="number">1</span>)), _op |= (<span class="number">1</span> &lt;&lt; now), _op |= (<span class="number">1</span> &lt;&lt; (now + <span class="number">1</span>));</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (now == n - <span class="number">1</span>) op |= (<span class="number">1</span> &lt;&lt; now), op |= (<span class="number">1</span> &lt;&lt; (now - <span class="number">1</span>)), _op |= (<span class="number">1</span> &lt;&lt; (now)), _op |= (<span class="number">1</span> &lt;&lt; (now - <span class="number">1</span>));</div><div class="line">            <span class="keyword">else</span> op |= (<span class="number">1</span> &lt;&lt; now), op |= (<span class="number">1</span> &lt;&lt; (now - <span class="number">1</span>)), op |= (<span class="number">1</span> &lt;&lt; (now + <span class="number">1</span>)),</div><div class="line">            _op |= (<span class="number">1</span> &lt;&lt; now), _op |= (<span class="number">1</span> &lt;&lt; (now - <span class="number">1</span>)), _op |= (<span class="number">1</span> &lt;&lt; (now + <span class="number">1</span>));</div><div class="line">            DFS(now + <span class="number">1</span>, pos, rest - <span class="number">1</span>, op, _op, ans);</div><div class="line">            op = t, _op = <span class="keyword">_t</span>;</div><div class="line">            DFS(now + <span class="number">1</span>, pos, rest, op, _op, ans);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> DFS(now + <span class="number">1</span>, pos, rest, op, _op, ans);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">DP</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> rest, <span class="keyword">int</span> op)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (rest == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (rest &lt; <span class="number">0</span> || pos == n) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (vis[pos][rest][op]) <span class="keyword">return</span> dp[pos][rest][op];</div><div class="line">    vis[pos][rest][op] = <span class="number">1</span>;</div><div class="line">    DFS(<span class="number">0</span>, pos, rest, <span class="number">0</span>, op, dp[pos][rest][op]);</div><div class="line">    <span class="keyword">return</span> dp[pos][rest][op];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, DP(<span class="number">0</span>, k, <span class="number">0</span>));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<title>Problem 1096. -- [ZJOI2007]仓库建设</title><center><h2>1096: [ZJOI2007]仓库建设</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>5080&nbsp;&nbsp;<span class="green">Solved: </span>2261<br>[<a href="submitpage.php?id=1096">Submit</a>][<a href="problemstatus.php?id=1096">Status</a>][<a href="bbs.php?id=1096">Discuss</a>]</center><h3>Description</h3><div class="content"><p>　　L公司有N个工厂，由高到底分布在一座山上。如图所示，工厂1在山顶，工厂N在山脚。由于这座山处于高原内
陆地区（干燥少雨），L公司一般把产品直接堆放在露天，以节省费用。突然有一天，L公司的总裁L先生接到气象
部门的电话，被告知三天之后将有一场暴雨，于是L先生决定紧急在某些工厂建立一些仓库以免产品被淋坏。由于
地形的不同，在不同工厂建立仓库的费用可能是不同的。第i个工厂目前已有成品Pi件，在第i个工厂位置建立仓库
的费用是Ci。对于没有建立仓库的工厂，其产品应被运往其他的仓库进行储藏，而由于L公司产品的对外销售处设
置在山脚的工厂N，故产品只能往山下运（即只能运往编号更大的工厂的仓库），当然运送产品也是需要费用的，
假设一件产品运送1个单位距离的费用是1。假设建立的仓库容量都都是足够大的，可以容下所有的产品。你将得到
以下数据：1：工厂i距离工厂1的距离Xi（其中X1=0）;2：工厂i目前已有成品数量Pi;:3：在工厂i建立仓库的费用
Ci;请你帮助L公司寻找一个仓库建设的方案，使得总的费用（建造费用+运输费用）最小。</p></div><h3>Input</h3><div class="content"><p>　　第一行包含一个整数N，表示工厂的个数。接下来N行每行包含两个整数Xi, Pi, Ci, 意义如题中所述。</p></div><h3>Output</h3><div class="content"><p>　　仅包含一个整数，为可以找到最优方案的费用。</p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">3
0 5 10<br>
5 3 100<br>
9 6 10<br></span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">32</span></div><h3>HINT</h3>
            <div class="content"><p></p><p><span style="font-size: medium;">在工厂1和工厂3建立仓库，建立费用为10+10=20，运输费用为(9-5)*3 = 12，总费用32。如果仅在工厂3建立仓库，建立费用为10，运输费用为(9-0)*5+(9-5)*3=57，总费用67，不如前者优。
【数据规模】
对于100%的数据， N &le;1000000。 所有的Xi, Pi, Ci均在32位带符号整数以内，保证中间计算结果不超过64位带符号整数。 
</span></p><p></p></div><h3>Source</h3>

<h2>题目分析</h2>
斜率优化DP，注意DP的方向，要按照题目中给你的方向搞，不要自作聪明反过来，否则会很麻烦，因为山脚必须有仓库而山顶不一定。同时采用斜率优化DP模板化方法
<h2>代码</h2>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> X(x) (num[x])</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Y(x) (dp[x] - s[x])</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> EFF(i) (-dis[i])</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_DP(i, x) (dp[i] = dp[x] + s[i] - s[x] - (num[i] - num[x]) * dis[i] + cost[i])</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line">LL dis[maxn];</div><div class="line">LL num[maxn];</div><div class="line">LL s[maxn];</div><div class="line">LL cost[maxn];</div><div class="line">LL n;</div><div class="line">LL dp[maxn];</div><div class="line">LL pre[maxn];</div><div class="line"></div><div class="line"><span class="built_in">deque</span>&lt;LL&gt; save;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    save.push_front(<span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">while</span> (save.size() &gt; <span class="number">1</span>)&#123;</div><div class="line">            LL op = save.back();</div><div class="line">            save.pop_back();</div><div class="line">            LL op2 = save.back();</div><div class="line">            <span class="keyword">if</span> ((Y(op2) - Y(op)) &lt; (X(op2) - X(op)) * EFF(i)) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                save.push_back(op);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        LL x = save.back();</div><div class="line">        GET_DP(i, x);</div><div class="line">        <span class="keyword">while</span> (save.size() &gt; <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">int</span> op = save.front();</div><div class="line">            save.pop_front();</div><div class="line">            <span class="keyword">int</span> op2 = save.front();</div><div class="line">            <span class="keyword">if</span> ((Y(i) - Y(op)) * (X(op) - X(op2)) &lt; (Y(op) - Y(op2)) * (X(i) - X(op))) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                save.push_front(op);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        save.push_front(i);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, dp[n]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>, &amp;dis[i], &amp;num[i], &amp;cost[i]);</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++) dis[i] = dis[n] - dis[i];</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++) s[i] = s[i - <span class="number">1</span>] + num[i] * dis[i];</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++) num[i] += num[i - <span class="number">1</span>];</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<title>Problem 1103. -- [POI2007]大都市meg</title><center><h2>1103: [POI2007]大都市meg</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>2703&nbsp;&nbsp;<span class="green">Solved: </span>1422<br>[<a href="submitpage.php?id=1103">Submit</a>][<a href="problemstatus.php?id=1103">Status</a>][<a href="bbs.php?id=1103">Discuss</a>]</center><h3>Description</h3><div class="content"><p>　　在经济全球化浪潮的影响下,习惯于漫步在清晨的乡间小路的邮递员Blue Mary也开始骑着摩托车传递邮件了。
不过，她经常回忆起以前在乡间漫步的情景。昔日，乡下有依次编号为1..n的n个小村庄，某些村庄之间有一些双
向的土路。从每个村庄都恰好有一条路径到达村庄1（即比特堡）。并且，对于每个村庄，它到比特堡的路径恰好
只经过编号比它的编号小的村庄。另外，对于所有道路而言，它们都不在除村庄以外的其他地点相遇。在这个未开
化的地方，从来没有过高架桥和地下铁道。随着时间的推移，越来越多的土路被改造成了公路。至今，Blue Mary
还清晰地记得最后一条土路被改造为公路的情景。现在，这里已经没有土路了&mdash;&mdash;所有的路都成为了公路，而昔日
的村庄已经变成了一个大都市。 Blue Mary想起了在改造期间她送信的经历。她从比特堡出发，需要去某个村庄，
并且在两次送信经历的间隔期间,有某些土路被改造成了公路.现在Blue Mary需要你的帮助：计算出每次送信她需
要走过的土路数目。（对于公路，她可以骑摩托车；而对于土路，她就只好推车了。）</p></div><h3>Input</h3><div class="content"><p>　　第一行是一个数n(1 &lt; = n &lt; = 2 50000).以下n-1行，每行两个整数a，b（1 &lt; =&nbsp; a以下一行包含一个整数m
（1 &lt; = m &lt; = 2 50000），表示Blue Mary曾经在改造期间送过m次信。以下n+m-1行，每行有两种格式的若干信息
，表示按时间先后发生过的n+m-1次事件:若这行为 A a b(a若这行为 W a, 则表示Blue Mary曾经从比特堡送信到
村庄a。</p></div><h3>Output</h3><div class="content"><p>　　有m行，每行包含一个整数，表示对应的某次送信时经过的土路数目。</p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">5
1 2<br>
1 3<br>
1 4<br>
4 5<br>
4<br>
W 5<br>
A 1 4<br>
W 5<br>
A 4 5<br>
W 5<br>
W 2<br>
A 1 2<br>
A 1 3<br>

</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">2
1
0
1</span></div><h3>HINT</h3>
            <div class="content"><p></p><p><img border="0" alt="" src="images/1103.jpg"></p><p></p></div><h3>Source</h3>

<h2>题目分析</h2>

<p>好像是树剖的板子，但是为了学点东西，本题不用树剖，而是采用DFS序+数据结构（线段树/树状数组）的方法</p>
<h2>代码</h2>

<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x &amp; -x</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="keyword">int</span> c[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span> (x &lt;= n)&#123;</div><div class="line">        c[x] += v;</div><div class="line">        x += lowbit(x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x)&#123;</div><div class="line">        ans += c[x];</div><div class="line">        x -= lowbit(x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt = <span class="number">1</span>, h[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">int</span> fa[maxn];</div><div class="line"><span class="keyword">int</span> dfs[maxn];</div><div class="line"><span class="keyword">int</span> idfs[maxn];</div><div class="line"><span class="keyword">int</span> size[maxn];</div><div class="line"><span class="keyword">int</span> ct;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    dfs[++ct] = x;</div><div class="line">    idfs[x] = ct;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x]) <span class="keyword">continue</span>;</div><div class="line">        d[op] = d[x] + <span class="number">1</span>;</div><div class="line">        fa[op] = x;</div><div class="line">        DFS(op);</div><div class="line">        size[x] += size[op];</div><div class="line">    &#125;</div><div class="line">    size[x]++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (fa[x] == y) swap(x, y);</div><div class="line">    <span class="keyword">int</span> l = idfs[y], r = l + size[y];</div><div class="line">    add(l, <span class="number">1</span>), add(r, <span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, d[x] - get(idfs[x]));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        Add_Edge(x, y);</div><div class="line">    &#125;</div><div class="line">    DFS(<span class="number">1</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</div><div class="line">    <span class="keyword">char</span> s[<span class="number">5</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + m - <span class="number">1</span>; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'A'</span>)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">            build(x, y);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            query(x);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 1113. -- [Poi2008]海报PLA</title><center><h2>1113: [Poi2008]海报PLA</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>1171&nbsp;&nbsp;<span class="green">Solved: </span>793<br>[<a href="submitpage.php?id=1113">Submit</a>][<a href="problemstatus.php?id=1113">Status</a>][<a href="bbs.php?id=1113">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p>N个矩形,排成一排. 现在希望用尽量少的矩形海报Cover住它们.</p></div><h3>Input</h3><div class="content"><p>第一行给出数字N,代表有N个矩形.N在[1,250000] 下面N行,每行给出矩形的长与宽.其值在[1,1000000000]2 1/2 Postering</p></div><h3>Output</h3><div class="content"><p>最少数量的海报数.</p></div><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">5
1 2<br>
1 3<br>
2 2<br>
2 5<br>
1 4<br>
</span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">4
</span></div><h3>HINT</h3><br>            <div class="content"><p></p></div><h3>Source</h3><p></p>
<p></p><h2>题目分析</h2><br>猜下结论，感性证明一下，然后直接单调栈扫一遍即可<p></p>
<p></p><h2>代码</h2><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; save;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n, x;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%*d%d"</span>, &amp;x);</div><div class="line">        <span class="keyword">while</span> (!save.empty() &amp;&amp; save.top() &gt; x) &#123;</div><div class="line">            save.pop();</div><div class="line">            ans++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (save.empty() || save.top() &lt; x) save.push(x);</div><div class="line">    &#125;</div><div class="line">    ans += save.size();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p><title>Problem 1115. -- [POI2009]石子游戏Kam</title><center><h2>1115: [POI2009]石子游戏Kam</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>1060&nbsp;&nbsp;<span class="green">Solved: </span>650<br>[<a href="submitpage.php?id=1115">Submit</a>][<a href="problemstatus.php?id=1115">Status</a>][<a href="bbs.php?id=1115">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p>有N堆石子，除了第一堆外，每堆石子个数都不少于前一堆的石子个数。两人轮流操作每次操作可以从一堆石子中移走任意多石子，但是要保证操作后仍然满足初始时的条件谁没有石子可移时输掉游戏。问先手是否必胜。</p></div><h3>Input</h3><div class="content"><p>第一行u表示数据组数。对于每组数据，第一行N表示石子堆数，第二行N个数ai表示第i堆石子的个数(a1&lt;=a2&lt;=&hellip;&hellip;&lt;=an)。 1&lt;=u&lt;=10 1&lt;=n&lt;=1000 0&lt;=ai&lt;=10000</p></div><h3>Output</h3><div class="content"><p>u行，若先手必胜输出TAK，否则输出NIE。</p></div><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">2
2<br>
2 2<br>
3<br>
1 2 4<br></span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">NIE
TAK</span></div><h3>HINT</h3><br>            <div class="content"><p></p><p>感谢MT大牛翻译.</p><p></p></div><h3>Source</h3><p></p>
<p></p><h2>题目分析</h2><br>Nim游戏变式，可以简单地转化为阶梯Nim问题，然后按照阶梯Nim的做法，把所有奇数号的堆的石子数异或在一起即可<p></p>
<p></p><h2>代码</h2><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--)&#123;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> n, x, y;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;ans);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i += <span class="number">2</span>)&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;y, &amp;x);</div><div class="line">                ans ^= x - y;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (ans) <span class="built_in">printf</span>(<span class="string">"TAK\n"</span>);</div><div class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NIE\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span>)&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;y, &amp;x);</div><div class="line">                ans ^= x - y;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (ans) <span class="built_in">printf</span>(<span class="string">"TAK\n"</span>);</div><div class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NIE\n"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p><title>Problem 1116. -- [POI2008]CLO</title><center><h2>1116: [POI2008]CLO</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>1068&nbsp;&nbsp;<span class="green">Solved: </span>593<br>[<a href="submitpage.php?id=1116">Submit</a>][<a href="problemstatus.php?id=1116">Status</a>][<a href="bbs.php?id=1116">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p>Byteotia城市有n个 towns m条双向roads. 每条 road 连接 两个不同的 towns ,没有重复的road. 你要把其中一些road变成单向边使得：每个town都有且只有一个入度</p></div><h3>Input</h3><div class="content"><p>第一行输入n m.1 &lt;= n&lt;= 100000,1 &lt;= m &lt;= 200000 下面M行用于描述M条边.</p></div><h3>Output</h3><div class="content"><p>TAK或者NIE 常做POI的同学,应该知道这两个单词的了...</p></div><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">4 5
1 2<br>
2 3<br>
1 3<br>
3 4<br>
1 4<br>
</span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">TAK
上图给出了一种连接方式.</span></div><h3>HINT</h3><br>            <div class="content"><p></p></div><h3>Source</h3><p></p>
<p></p><h2>题目分析</h2><br>从度数最少的点开始逐个分析，如果它的度数仅是1，那么我们肯定需要用这条边当做它的入度，如果是0，那么无解，如果大于等于2，那么后面的一定可以成环，就直接跳出即可，本题无需网络流做法<p></p>
<p></p><h2>代码</h2><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">1</span>, h[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> deg[maxn];</div><div class="line"><span class="keyword">bool</span> ex[maxn];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span>&#123;</span></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> a, <span class="keyword">const</span> <span class="keyword">int</span> b)</span> <span class="keyword">const</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> (deg[a] == deg[b]) ? a &lt; b : deg[a] &lt; deg[b];</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>, cmp&gt; s;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span> (!s.empty())&#123;</div><div class="line">        <span class="keyword">int</span> x = *(s.begin());</div><div class="line">        <span class="keyword">if</span> (deg[x] == <span class="number">0</span>)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"NIE\n"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (deg[x] == <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">                <span class="keyword">int</span> op = e[i].to;</div><div class="line">                <span class="keyword">if</span> (ex[op]) <span class="keyword">continue</span>;</div><div class="line">                s.erase(op);</div><div class="line">                s.erase(x);</div><div class="line">                deg[op]--;</div><div class="line">                s.insert(op);</div><div class="line">                ex[x] = <span class="number">1</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (deg[x] &gt;= <span class="number">2</span>)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"TAK\n"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"TAK\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n, m, x, y;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        Add_Edge(x, y);</div><div class="line">        deg[x]++;</div><div class="line">        deg[y]++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        s.insert(i);</div><div class="line">    &#125;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p><title>Problem 1142. -- [POI2009]Tab</title><center><h2>1142: [POI2009]Tab</h2><span class="green">Time Limit: </span>40 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>326&nbsp;&nbsp;<span class="green">Solved: </span>141<br>[<a href="submitpage.php?id=1142">Submit</a>][<a href="problemstatus.php?id=1142">Status</a>][<a href="bbs.php?id=1142">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>　　2个n*m矩阵，保证同一个矩阵中元素两两不同。问能否通过若干次交换两行或交换两列把第一个矩阵变成第二<p></p>
<p><div>个。</div></p><h3>Input</h3><div class="content"><div>　　第一行正整数 T (1&le;T&le;10) 表示数据组数. 每组数据包括：第一行n m （1&le;n,m&le;1000） 2个n行m列的整数</div><p></p>
<p><div>矩阵，元素绝对值均在10^6以内</div></p><h3>Output</h3><div class="content"><p>　　每组数据输出&ldquo;TAK&rdquo;/&ldquo;NIE&rdquo;表示能/不能.</p></div><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">2
4 3<br>
1 2 3<br>
4 5 6<br>
7 8 9<br>
10 11 12<br>
11 10 12<br>
8 7 9<br>
5 4 6<br>
2 1 3<br>
2 2<br>
1 2<br>
3 4<br>
5 6<br>
7 8</span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">TAK
NIE
</span></div><h3>HINT</h3><br>            <div class="content"><p></p></div><h3>Source</h3><br>            <div class="content"><p><a href="problemset.php?search=鸣谢WangTianYi制作数据">鸣谢WangTianYi制作数据</a></p></div><p></p>
<p></p><h2>题目分析</h2><br>我们发现一行或一列中有哪些元素是固定的，只是它们的顺序可变，那么我们只需要分别对两个矩阵的第一行排序，然后判断是否完全相同即可<p></p>
<p></p><h2>代码</h2><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> a[maxn][maxn];</div><div class="line"><span class="keyword">int</span> b[maxn][maxn];</div><div class="line"><span class="keyword">int</span> _a[maxn][maxn];</div><div class="line"><span class="keyword">int</span> _b[maxn][maxn];</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> b[<span class="number">0</span>][i] &lt; b[<span class="number">0</span>][j];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a[<span class="number">0</span>][i] &lt; a[<span class="number">0</span>][j];</div><div class="line">&#125;</div><div class="line"><span class="built_in">set</span>&lt;LL&gt; s;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> flag = <span class="number">-1</span>;</div><div class="line">    sort(_a[<span class="number">0</span>], _a[<span class="number">0</span>] + m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">        sort(_b[i], _b[i] + m);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (_a[<span class="number">0</span>][j] != _b[i][j])&#123;</div><div class="line">                f = <span class="number">0</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (f) &#123;</div><div class="line">            flag = i;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (flag == <span class="number">-1</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"NIE\n"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) swap(b[<span class="number">0</span>][j], b[flag][j]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) line[j] = j;</div><div class="line"></div><div class="line">    sort(line, line + m, cmp);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">            _b[i][j] = b[i][line[j]];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">            b[i][j] = _b[i][j];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sort(line, line + m, cmp2);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">            _a[i][j] = a[i][line[j]];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">            a[i][j] = _a[i][j];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        LL has = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</div><div class="line">            has = has * M + a[i][j];</div><div class="line">        &#125;</div><div class="line">        s.insert(has);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        LL has = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</div><div class="line">            has = has * M + b[i][j];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!s.count(has))&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"NIE\n"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"TAK\n"</span>);</div><div class="line">    s.clear();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</div><div class="line">                _a[i][j] = a[i][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i][j]);</div><div class="line">                _b[i][j] = b[i][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        work();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
</div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;第一篇BZOJ题解出现啦！&lt;br&gt;
    
    </summary>
    
    
      <category term="BZOJ" scheme="https://goseqh.tk/tags/BZOJ/"/>
    
      <category term="题解" scheme="https://goseqh.tk/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
</feed>
