<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Goseqh&#39;s Blog</title>
  <subtitle>A JuRuo from a weak province</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://goseqh.tk/"/>
  <updated>2017-08-26T11:27:18.505Z</updated>
  <id>https://goseqh.tk/</id>
  
  <author>
    <name>Goseqh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BZOJ阶段性汇总II</title>
    <link href="https://goseqh.tk/2017/08/26/BZOJ%E9%98%B6%E6%AE%B5%E6%80%A7%E6%B1%87%E6%80%BBII/"/>
    <id>https://goseqh.tk/2017/08/26/BZOJ阶段性汇总II/</id>
    <published>2017-08-26T10:12:56.000Z</published>
    <updated>2017-08-26T11:27:18.505Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>第二篇。。。<br><a id="more"></a></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p><title>Problem 1207. -- [HNOI2004]打鼹鼠</title><center><h2>1207: [HNOI2004]打鼹鼠</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>3350&nbsp;&nbsp;<span class="green">Solved: </span>1610<br>[<a href="submitpage.php?id=1207">Submit</a>][<a href="problemstatus.php?id=1207">Status</a>][<a href="bbs.php?id=1207">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p>鼹鼠是一种很喜欢挖洞的动物，但每过一定的时间，它还是喜欢把头探出到地面上来透透气的。根据这个特点阿Q编写了一个打鼹鼠的游戏：在一个n*n的网格中，在某些时刻鼹鼠会在某一个网格探出头来透透气。你可以控制一个机器人来打鼹鼠，如果i时刻鼹鼠在某个网格中出现，而机器人也处于同一网格的话，那么这个鼹鼠就会被机器人打死。而机器人每一时刻只能够移动一格或停留在原地不动。机器人的移动是指从当前所处的网格移向相邻的网格，即从坐标为（i,j）的网格移向(i-1, j),(i+1, j),(i,j-1),(i,j+1)四个网格，机器人不能走出整个n*n的网格。游戏开始时，你可以自由选定机器人的初始位置。现在你知道在一段时间内，鼹鼠出现的时间和地点，希望你编写一个程序使机器人在这一段时间内打死尽可能多的鼹鼠。</p></div><h3>Input</h3><div class="content"><p>第一行为n（n&lt;=1000）, m（m&lt;=10000），其中m表示在这一段时间内出现的鼹鼠的个数，接下来的m行每行有三个数据time,x,y表示有一只鼹鼠在游戏开始后time个时刻，在第x行第y个网格里出现了一只鼹鼠。Time按递增的顺序给出。注意同一时刻可能出现多只鼹鼠，但同一时刻同一地点只可能出现一只鼹鼠。</p></div><h3>Output</h3><div class="content"><p>仅包含一个正整数，表示被打死鼹鼠的最大数目</p></div><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">2 2<br>
1 1 1<br>
2 2 2<br>
</span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">1</span></div><h3>HINT</h3><br>            <div class="content"><p></p></div><h3>Source</h3><p></p>
<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>第一眼看上去是个直接空间时间双爆的暴力DP，然而，我们发现我们无须记录当前机器人的位置，直接跑就行了。。。只需记录现在刚打完哪只鼹鼠即可，然后$O(m^2)$跑 <del>(我一直觉得会超时。。。一定是我没学过复杂度。。。)</del></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 10005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">goal</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x, y, t;</div><div class="line">&#125;save[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> dp[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(vis[x]) <span class="keyword">return</span> dp[x];</div><div class="line">    vis[x] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span>&amp; ans = dp[x];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x + <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="keyword">if</span> ((<span class="built_in">abs</span>(save[x].x - save[i].x) + <span class="built_in">abs</span>(save[x].y - save[i].y)) &lt;= save[i].t - save[x].t)&#123;</div><div class="line">            ans = max(ans, DP(i));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ++ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;save[i].t, &amp;save[i].x, &amp;save[i].y);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) ans = max(ans, DP(i));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 1513. -- [POI2006]Tet-Tetris 3D</title><center><h2>1513: [POI2006]Tet-Tetris 3D</h2><span class="green">Time Limit: </span>30 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>1146&nbsp;&nbsp;<span class="green">Solved: </span>389<br>[<a href="submitpage.php?id=1513">Submit</a>][<a href="problemstatus.php?id=1513">Status</a>][<a href="bbs.php?id=1513">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p>Task: Tetris 3D</p>
<p>“Tetris” 游戏的作者决定做一个新的游戏, 一个三维的版本, 在里面很多立方体落在平面板,一个立方体开始落下直到碰上一个以前落下的立方体或者落地即停止.<br>作者想改变一下游戏的目的使得它更大众化,在新游戏中你将知道落下的立方体信息以及位置,你的任务就是回答所有立方体落下后最高的方块的高度.所有的立方体在下落过程中都是垂直的并且不会旋转.平板左下角坐标为原点,并且平行于坐标轴. </p>
<h3>Input</h3><div class="content">第一行给出三个整数D, S and N (1<=n<=20000,1<=d,s<=1000),分别表示平板的长和宽以及下落立方体的数目.接下来n行每行描述一个立方体. 每行包含5个整数:d,s,w,x="" and="" y(1<="d,0<=x,d+x<=D,1<=s,0<=y,s+y<=S,1<=w<=100000),分别表示立方体的长\宽\高以及落下的左下角坐标,长和宽都是平行于平板坐标轴的,落下后立方体着地的四个角坐标分别为:(x,y),(x+d,y),(x,y+s)and(x+d,y+s).</p">
</=n<=20000,1<=d,s<=1000),分别表示平板的长和宽以及下落立方体的数目.接下来n行每行描述一个立方体.></div><h3>Output</h3><div class="content">一个整数表示所有立方体落下后最高的方块的高度.
</div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">7 5 4<br>
4 3 2 0 0<br>
3 3 1 3 0<br>
7 1 2 0 3<br>
2 3 3 2 2<br>
</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">6<br>
</span></div><h3>HINT</h3>
            <div class="content"><p></p></div><h3>Source</h3>

<h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><p><del>终于来了一道不是那么水的题。。。</del> 这题显然是一道树套树的题目，而且是线段树套线段树，需要你支持区间修改与查询操作，但是我们知道在树套树背景下这样并不是十分的简单，主要的问题是如何上传以及下放标记</p>
<p>而PoPoQQQ大神给出的方法是：</p>
<blockquote>
<p>既然很难上下传，那么不传不就好了</p>
</blockquote>
<p>于是我们把标记永久化，同时处理两种东西标记，一个是经过当前结点的所有标记的标记，一个是刚好覆盖在当前结点对应线段树上的标记，这是为什么呢？因为搜到我们想要的那个节点并即将返回时，我们需要处理所有经过它的标记，而从上向下寻找它时，沿路的标记我们也需要，但不是所有经过中途结点的标记（否则会多算很多东西），所以我们要把这两个东西分开处理</p>
<p>其实就是一个常规的树套树+标记永久化的方法，但是由于从来没写过标记永久化，所以不太熟练。。。</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1024</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segment_tree</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> maxnum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line">    <span class="keyword">int</span> <span class="built_in">set</span>[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line">    <span class="keyword">int</span> qx, qy, qd;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">set</span>[o] != <span class="number">0</span> &amp;&amp; l != r)&#123;</div><div class="line">            <span class="built_in">set</span>[o &lt;&lt; <span class="number">1</span>] = max(<span class="built_in">set</span>[o &lt;&lt; <span class="number">1</span>], <span class="built_in">set</span>[o]);</div><div class="line">            maxnum[o &lt;&lt; <span class="number">1</span>] = max(maxnum[o &lt;&lt; <span class="number">1</span>], <span class="built_in">set</span>[o &lt;&lt; <span class="number">1</span>]);</div><div class="line"></div><div class="line">            <span class="built_in">set</span>[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = max(<span class="built_in">set</span>[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>], <span class="built_in">set</span>[o]);</div><div class="line">            maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = max(maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>], <span class="built_in">set</span>[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line"></div><div class="line">            <span class="built_in">set</span>[o] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">        pushdown(l, r, o);</div><div class="line">        maxnum[o] = max(maxnum[o], qd);</div><div class="line">        <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">            <span class="built_in">set</span>[o] = max(<span class="built_in">set</span>[o], qd);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">        <span class="keyword">if</span> (qx &lt;= mid) modify(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (qy &gt; mid) modify(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">        pushdown(l, r, o);</div><div class="line">        <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">            <span class="keyword">return</span> maxnum[o];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans = -INF;</div><div class="line">        <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">        <span class="keyword">if</span> (qx &lt;= mid) ans = max(ans, get(l, mid, o &lt;&lt; <span class="number">1</span>));</div><div class="line">        <span class="keyword">if</span> (qy &gt; mid) ans = max(ans, get(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>));</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125;save[maxn &lt;&lt; <span class="number">1</span>], save2[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> S, D, N;</div><div class="line"></div><div class="line"><span class="keyword">int</span> qx, qy, qa, qb, qd;</div><div class="line"><span class="keyword">int</span> add;</div><div class="line"></div><div class="line"><span class="comment">/*struct re&#123;</span></div><div class="line">    int qx, qy, qd;</div><div class="line">    re(int qx, int qy, int qd) : qx(qx), qy(qy), qd(qd)&#123;&#125;</div><div class="line">    re()&#123;&#125;</div><div class="line">&#125;rec[maxn &lt;&lt; 1];</div><div class="line">bool f[maxn &lt;&lt; 1];</div><div class="line"></div><div class="line">void pushdown(int l, int r, int o)&#123;</div><div class="line">    if (!f[o] || l == r) return;</div><div class="line">    int mid = ((r - l) &gt;&gt; 1) + l;</div><div class="line"></div><div class="line">    f[o] = 0;</div><div class="line"></div><div class="line">    if (f[o &lt;&lt; 1]) pushdown(l, mid, o &lt;&lt; 1);</div><div class="line">    f[o &lt;&lt; 1] = 1;</div><div class="line">    rec[o &lt;&lt; 1] = rec[o];</div><div class="line">    save[o &lt;&lt; 1].qx = rec[o].qx;</div><div class="line">    save[o &lt;&lt; 1].qy = rec[o].qy;</div><div class="line">    save[o &lt;&lt; 1].qd = rec[o].qd;</div><div class="line">    save[o &lt;&lt; 1].modify(0, S, 1);</div><div class="line"></div><div class="line">    if(f[o &lt;&lt; 1 | 1]) pushdown(mid + 1, r, o &lt;&lt; 1 | 1);</div><div class="line">    f[o &lt;&lt; 1 | 1] = 1;</div><div class="line">    rec[o &lt;&lt; 1 | 1] = rec[o];</div><div class="line">    save[o &lt;&lt; 1 | 1].qx = rec[o].qx;</div><div class="line">    save[o &lt;&lt; 1 | 1].qy = rec[o].qy;</div><div class="line">    save[o &lt;&lt; 1 | 1].qd = rec[o].qd;</div><div class="line">    save[o &lt;&lt; 1 | 1].modify(0, S, 1);</div><div class="line">&#125;*/</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">operate</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="comment">//pushdown(l, r, o);</span></div><div class="line">    save[o].qx = qy, save[o].qy = qy + qb, save[o].qd = qd;</div><div class="line">    save[o].modify(<span class="number">0</span>, S, <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qx + qa)&#123;</div><div class="line">        save2[o].qx = qy, save2[o].qy = qy + qb, save2[o].qd = qd;</div><div class="line">        save2[o].modify(<span class="number">0</span>, S, <span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) operate(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qx + qa &gt; mid) operate(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="comment">//pushdown(l, r, o);</span></div><div class="line">    save2[o].qx = qy, save2[o].qy = qy + qb;</div><div class="line">    <span class="keyword">int</span> ans = save2[o].get(<span class="number">0</span>, S, <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qx + qa)&#123;</div><div class="line">        save[o].qx = qy, save[o].qy = qy + qb;</div><div class="line">        <span class="keyword">return</span> ans = max(ans, save[o].get(<span class="number">0</span>, S, <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) ans = max(ans, get(l, mid, o &lt;&lt; <span class="number">1</span>));</div><div class="line">    <span class="keyword">if</span> (qx + qa &gt; mid) ans = max(ans, get(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>));</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))&#123;</div><div class="line">        x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>;</div><div class="line">        ch = getchar();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    read(D), read(S), read(N);</div><div class="line">    D--;</div><div class="line">    S--;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)&#123;</div><div class="line">        read(qa), read(qb), read(qd), read(qx), read(qy);</div><div class="line">        qa--;</div><div class="line">        qb--;</div><div class="line">        add = get(<span class="number">0</span>, D, <span class="number">1</span>);</div><div class="line">        qd += add;</div><div class="line">        operate(<span class="number">0</span>, D, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, save[<span class="number">1</span>].maxnum[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 2333. -- [SCOI2011]棘手的操作</title><center><h2>2333: [SCOI2011]棘手的操作</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>2551&nbsp;&nbsp;<span class="green">Solved: </span>996<br>[<a href="submitpage.php?id=2333">Submit</a>][<a href="problemstatus.php?id=2333">Status</a>][<a href="bbs.php?id=2333">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt; text-indent: 21pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">有<font face="Times New Roman">N</font><font face="宋体">个节点，标号从</font><font face="Times New Roman">1</font><font face="宋体">到</font><font face="Times New Roman">N</font><font face="宋体">，这</font><font face="Times New Roman">N</font><font face="宋体">个节点一开始相互不连通。第</font><font face="Times New Roman">i</font><font face="宋体">个节点的初始权值为</font><font face="Times New Roman">a[i]</font><font face="宋体">，接下来有如下一些操作：</font></span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><p></p>
<p></p><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">U&nbsp;x&nbsp;y:</span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"> </span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">加一条边，连接第<font face="Times New Roman">x</font><font face="宋体">个节点和第</font><font face="Times New Roman">y</font><font face="宋体">个节点</font></span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><p></p>
<p></p><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">A1&nbsp;x&nbsp;v:</span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"> </span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">将第<font face="Times New Roman">x</font><font face="宋体">个节点的权值增加</font><font face="Times New Roman">v</font></span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><p></p>
<p></p><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">A2&nbsp;x&nbsp;v:</span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"> </span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">将第<font face="Times New Roman">x</font><font face="宋体">个节点所在的</font>连通块的所有节点的权值都增加<font face="Times New Roman">v</font></span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><p></p>
<p></p><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">A3&nbsp;v:</span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"> </span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">将所有节点的权值都增加<font face="Times New Roman">v</font></span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><p></p>
<p></p><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">F1&nbsp;x:</span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"> </span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">输出第<font face="Times New Roman">x</font><font face="宋体">个节点当前的权值</font></span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><p></p>
<p></p><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">F2&nbsp;x:</span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"> </span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">输出第<font face="Times New Roman">x</font><font face="宋体">个节点所在的连通块中，权值最大的节点的权值</font></span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><p></p>
<p></p><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">F3:</span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"> </span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">输出所有节点中，权值最大的节点的权值</span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><p></p>
<p></p><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><br><!--EndFragment--><h3>Input</h3><div class="content"><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span>&nbsp;</p><p></p>
<p></p><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt; text-indent: 20.25pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">输入的第一行是一个整数<font face="Times New Roman">N</font><font face="宋体">，代表节点个数。</font></span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><p></p>
<p></p><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt; text-indent: 20.25pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">接下来一行输入<font face="Times New Roman">N</font><font face="宋体">个整数，</font><font face="Times New Roman">a[1],&nbsp;a[2],&nbsp;&hellip;,&nbsp;a[N]</font><font face="宋体">，代表</font><font face="Times New Roman">N</font><font face="宋体">个节点的初始权值。</font></span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><p></p>
<p></p><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt; text-indent: 20.25pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">再下一行输入一个整数<font face="Times New Roman">Q</font><font face="宋体">，代表接下来的操作数。</font></span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><p></p>
<p></p><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt; text-indent: 20.25pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">最后输入<font face="Times New Roman">Q</font><font face="宋体">行，每行的格式如题目描述所示。</font></span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><p></p>
<p></p><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt; text-indent: 21pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><h3>Output</h3><div class="content"><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt; text-indent: 21pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'">对于操作<font face="Times New Roman">F1,&nbsp;F2,&nbsp;F3</font><font face="宋体">，输出对应的结果，每个结果占一行。</font></span><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><p></p>
<p></p><p class="p0" style="margin-top: 0pt; margin-bottom: 0pt; margin-left: 21pt"><span style="font-size: 10.5pt; font-family: 'Times New Roman'; mso-spacerun: 'yes'"><o:p></o:p></span></p><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">3<br>
<br>
0 0 0<br>
<br>
8<br>
<br>
A1 3 -20<br>
<br>
A1 2 20<br>
<br>
U 1 3<br>
<br>
A2 1 10<br>
<br>
F1 3<br>
<br>
F2 3<br>
<br>
A3 -10<br>
<br>
F3<br>
<br>
</span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata"><br>
-10<br>
<br>
10<br>
<br>
10<br>
<br>
</span></div><h3>HINT</h3><br>            <div class="content"><p></p><p><br><br>
&nbsp;对于30%的数据，保证 N&lt;=100，Q&lt;=10000</p><br><p></p>
<p></p><p>对于80%的数据，保证 N&lt;=100000，Q&lt;=100000</p><br><p></p>
<p></p><p>对于100%的数据，保证 N&lt;=300000，Q&lt;=300000</p><br><p></p>
<p></p><p>对于所有的数据，保证输入合法，并且 -1000&lt;=v, a[1], a[2], &hellip;, a[N]&lt;=1000<br><br>
</p>&lt;/p&gt;&lt;/div&gt;<h3>Source</h3><br>            <div class="content"><p><a href="problemset.php?search=Day2">Day2</a></p></div><p></p>
<h2 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h2><p>终于到这道题了，好开心～本题正解是可并堆，但是我发明了一个支持删除内部元素的“堆”（其实就是个暴力），就是建两个平衡树，一个用于堆操作，另一个用于查找结点，然后在堆里面搜以删除它，就是说，其中一个按权值排序，另一个按照id排序，这样就可以按照id删除堆内节点了O(∩_∩)O～</p>
<p>然后按照启发式合并的方法合并即可</p>
<p>我把这种东西称作“双平衡树”，写了一下好像还过了。。。只是跑得很慢。。。（所以我们找到了可并堆的替代品了是吗？？？）</p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> alladd;</div><div class="line"><span class="keyword">int</span> ufsadd[maxn];</div><div class="line"><span class="keyword">int</span> fa[maxn];</div><div class="line"><span class="keyword">int</span> val[maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp1</span>&#123;</span></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> a, <span class="keyword">const</span> <span class="keyword">int</span> b)</span> <span class="keyword">const</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> (val[a] == val[b]) ? a &lt; b : val[a] &gt; val[b];</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>, cmp1&gt; ufs[maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp2</span>&#123;</span></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> a, <span class="keyword">const</span> <span class="keyword">int</span> b)</span> <span class="keyword">const</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> (val[a] + ufsadd[fa[a]] == val[b] + ufsadd[fa[b]]) ? a &lt; b  : (val[a] + ufsadd[fa[a]] &gt; val[b] + ufsadd[fa[b]]);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>, cmp2&gt; all;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    x = fa[x], y = fa[y];</div><div class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (ufs[x].size() &lt; ufs[y].size()) swap(x, y);</div><div class="line">    all.erase(*(ufs[x].begin()));</div><div class="line">    all.erase(*(ufs[y].begin()));</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; :: iterator it = ufs[y].begin(); it != ufs[y].end(); it++)&#123;</div><div class="line">        val[*it] += ufsadd[y] - ufsadd[x];</div><div class="line">        fa[*it] = x;</div><div class="line">        ufs[x].insert(*it);</div><div class="line">    &#125;</div><div class="line">    all.insert(*(ufs[x].begin()));</div><div class="line">    ufs[y].clear();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_point</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    all.erase(*(ufs[fa[x]].begin()));</div><div class="line">    ufs[fa[x]].erase(x);</div><div class="line">    val[x] += v;</div><div class="line">    ufs[fa[x]].insert(x);</div><div class="line">    all.insert(*(ufs[fa[x]].begin()));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_ufs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    x = fa[x];</div><div class="line">    all.erase(*(ufs[x].begin()));</div><div class="line">    ufsadd[x] += v;</div><div class="line">    all.insert(*(ufs[x].begin()));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_all</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    alladd += v;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_point</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, val[x] + ufsadd[fa[x]] + alladd);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_ufs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    x = *(ufs[fa[x]].begin());</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, val[x] + ufsadd[fa[x]] + alladd);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_all</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x = *(all.begin());</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, val[x] + ufsadd[fa[x]] + alladd);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = getchar();x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch) &amp;&amp; ch != <span class="string">'-'</span>) ch = getchar();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = getchar();</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    read(n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        read(val[i]);</div><div class="line">        fa[i] = i;</div><div class="line">        ufs[i].insert(i);</div><div class="line">        all.insert(i);</div><div class="line">    &#125;</div><div class="line">    read(m);</div><div class="line">    <span class="keyword">char</span> s[<span class="number">10</span>];</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">        <span class="keyword">switch</span>(s[<span class="number">0</span>])&#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'U'</span>:&#123;</div><div class="line">                read(x), read(y);</div><div class="line">                merge(x, y);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> <span class="string">'A'</span>:&#123;</div><div class="line">                <span class="keyword">switch</span>(s[<span class="number">1</span>])&#123;</div><div class="line">                    <span class="keyword">case</span> <span class="string">'1'</span>:&#123;</div><div class="line">                        read(x), read(y);</div><div class="line">                        add_point(x, y);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">case</span> <span class="string">'2'</span>:&#123;</div><div class="line">                        read(x), read(y);</div><div class="line">                        add_ufs(x, y);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">case</span> <span class="string">'3'</span>:&#123;</div><div class="line">                        read(x);</div><div class="line">                        add_all(x);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> <span class="string">'F'</span>:&#123;</div><div class="line">                <span class="keyword">switch</span>(s[<span class="number">1</span>])&#123;</div><div class="line">                    <span class="keyword">case</span> <span class="string">'1'</span>:&#123;</div><div class="line">                        read(x);</div><div class="line">                        get_point(x);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">case</span> <span class="string">'2'</span>:&#123;</div><div class="line">                        read(x);</div><div class="line">                        get_ufs(x);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">case</span> <span class="string">'3'</span>:&#123;</div><div class="line">                        get_all();</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 2456. -- mode</title><center><h2>2456: mode</h2><span class="green">Time Limit: </span>1 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>1 MB<br><span class="green">Submit: </span>5345&nbsp;&nbsp;<span class="green">Solved: </span>2243<br>[<a href="submitpage.php?id=2456">Submit</a>][<a href="problemstatus.php?id=2456">Status</a>][<a href="bbs.php?id=2456">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p>给你一个n个数的数列，其中某个数出现了超过n div 2次即众数，请你找出那个数。</p></div><h3>Input</h3><div class="content"><p>第1行一个正整数n。<br>
第2行n个正整数用空格隔开。</p></div><h3>Output</h3><div class="content"><p>&nbsp;&nbsp;&nbsp; 一行一个正整数表示那个众数。</p></div><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">5<br>
3 2 3 1 3<br>
</span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">3<br>
</span></div><h3>HINT</h3><br>            <div class="content"><p></p><p>100%的数据，n&lt;=500000，数列中每个数&lt;=maxlongint。</p><br><p></p>
<p></p><p></p><br><p></p>
<p></p><p><span style="font-size: medium">zju2132 The Most Frequent Number</span></p>&lt;/p&gt;&lt;/div&gt;<h3>Source</h3><br>            <div class="content"><p><a href="problemset.php?search=鸣谢 黄祎程">鸣谢 黄祎程</a></p></div><p></p>
<h2 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h2><p>思维题，这种问题被称为“绝对众数问题”，好像在UOJ上有人研究？？？</p>
<p>总之就是互相抵消就可以，空间时间复杂度都是最优的（好像无法再优化了）</p>
<h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> x;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> nowx = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">int</span> nown = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;x);</div><div class="line">        <span class="keyword">if</span> (!nown) &#123;</div><div class="line">            nowx = x;</div><div class="line">            nown = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">if</span> (nowx == x) nown++;</div><div class="line">            <span class="keyword">else</span> nown--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, nowx);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 2565. -- 最长双回文串</title><center><h2>2565: 最长双回文串</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>2480&nbsp;&nbsp;<span class="green">Solved: </span>1263<br>[<a href="submitpage.php?id=2565">Submit</a>][<a href="problemstatus.php?id=2565">Status</a>][<a href="bbs.php?id=2565">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div style="background: white" align="left"><span style="font-size: 12pt; color: #200000">顺序和逆序读起来完全一样的串叫做回文串。比如</span><span style="font-size: 12pt; color: #200000">acbca</span><span style="font-size: 12pt; color: #200000">是回文串，而</span><span style="font-size: 12pt; color: #200000">abc</span><span style="font-size: 12pt; color: #200000">不是（</span><span style="font-size: 12pt; color: #200000">abc</span><span style="font-size: 12pt; color: #200000">的顺序为</span><span style="font-size: 12pt; color: #200000">&ldquo;abc&rdquo;</span><span style="font-size: 12pt; color: #200000">，逆序为</span><span style="font-size: 12pt; color: #200000">&ldquo;cba&rdquo;</span><span style="font-size: 12pt; color: #200000">，不相同）。</span><span style="font-size: 12pt; color: #200000"><br>
</span><span style="font-size: 12pt; color: #200000">输入长度为</span><span style="font-size: 12pt; color: #200000">n</span><span style="font-size: 12pt; color: #200000">的串</span><span style="font-size: 12pt; color: #200000">S</span><span style="font-size: 12pt; color: #200000">，求</span><span style="font-size: 12pt; color: #200000">S</span><span style="font-size: 12pt; color: #200000">的最长双回文子串</span><span style="font-size: 12pt; color: #200000">T,</span><span style="font-size: 12pt; color: #200000">即可将</span><span style="font-size: 12pt; color: #200000">T</span><span style="font-size: 12pt; color: #200000">分为两部分</span><span style="font-size: 12pt; color: #200000">X</span><span style="font-size: 12pt; color: #200000">，</span><span style="font-size: 12pt; color: #200000">Y</span><span style="font-size: 12pt; color: #200000">，（</span><span style="font-size: 12pt; color: #200000">|X|,|Y|&ge;1</span><span style="font-size: 12pt; color: #200000">）且</span><span style="font-size: 12pt; color: #200000">X</span><span style="font-size: 12pt; color: #200000">和</span><span style="font-size: 12pt; color: #200000">Y</span><span style="font-size: 12pt; color: #200000">都是回文串。</span></div>&lt;/div&gt;<h3>Input</h3><div class="content"><p><font size="3"><font color="#200000">一行由小写英文字母组成的字符串<span style="font-size: 12pt; color: #200000">S</span></font></font><span style="font-size: 12pt; color: #200000">。</span></p></div><h3>Output</h3><div class="content"><div style="background: white" align="left"><span style="font-size: 12pt; color: #200000">一行一个整数，表示最长双回文子串的长度。</span></div>&lt;/div&gt;<h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">baacaabbacabb<br>
</span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">12<br>
</span></div><h3>HINT</h3><br>            <div class="content"><p></p><p>样例说明<br><br>
从第二个字符开始的字符串aacaabbacabb可分为aacaa与bbacabb两部分，且两者都是回文串。<br><br>
对于100%的数据，2&le;|S|&le;10^5</p><br><p></p>
<p></p><p>2015.4.25新加数据一组</p>&lt;/p&gt;&lt;/div&gt;<h3>Source</h3><br>            <div class="content"><p><a href="problemset.php?search=2012国家集训队Round 1 day2">2012国家集训队Round 1 day2</a></p></div><p></p>
<h2 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h2><p>写过千万遍了。。。就是个Manacher板题</p>
<h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 3000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">char</span> t[maxn];</div><div class="line"><span class="keyword">int</span> pre[maxn];</div><div class="line"><span class="keyword">int</span> suf[maxn];</div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Manacher</span><span class="params">()</span></span>&#123;</div><div class="line">    n = <span class="built_in">strlen</span>(t);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        s[i &lt;&lt; <span class="number">1</span>] = <span class="string">'@'</span>, s[(i &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>] = t[i];</div><div class="line">    &#125;</div><div class="line">    s[n &lt;&lt; <span class="number">1</span>] = <span class="string">'@'</span>;</div><div class="line">    n &lt;&lt;= <span class="number">1</span>;</div><div class="line">    n++;</div><div class="line">    <span class="keyword">int</span> a, p;</div><div class="line">    a = p = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (i &gt; p) f[i] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">else</span> f[i] = min(f[(a &lt;&lt; <span class="number">1</span>) - i], p - i);</div><div class="line">        <span class="keyword">while</span> (i + f[i] + <span class="number">1</span> &lt; n &amp;&amp; i - f[i] - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; s[i + f[i] + <span class="number">1</span>] == s[i - f[i] - <span class="number">1</span>]) f[i]++;</div><div class="line">        <span class="keyword">if</span> (i + f[i] &gt; p) &#123;</div><div class="line">            p = i + f[i];</div><div class="line">            a = i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    p = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (i + f[i] &gt; p)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = p + <span class="number">1</span>; j &lt;= i + f[i]; j++) pre[j] = j - i + <span class="number">1</span>;</div><div class="line">            p = i + f[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    p = n;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>  i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</div><div class="line">        <span class="keyword">if</span> (i - f[i] &lt; p)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = p - <span class="number">1</span>; j &gt;= i - f[i]; j--) suf[j] = i - j + <span class="number">1</span>;</div><div class="line">            p = i - f[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> maxnum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)&#123;</div><div class="line">        maxnum = max(maxnum, pre[i] + suf[i + <span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, maxnum - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, t);</div><div class="line">    Manacher();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 2916. -- [Poi1997]Monochromatic Triangles</title><center><h2>2916: [Poi1997]Monochromatic Triangles</h2><span class="green">Time Limit: </span>1 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>338&nbsp;&nbsp;<span class="green">Solved: </span>173<br>[<a href="submitpage.php?id=2916">Submit</a>][<a href="problemstatus.php?id=2916">Status</a>][<a href="bbs.php?id=2916">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div><span style="font-size: 12pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-size: 12pt">空间中有</span><span style="font-size: 12pt">n</span><span style="font-size: 12pt">个点，任意</span><span style="font-size: 12pt">3</span><span style="font-size: 12pt">个点不共线。每两个点用红线或者蓝线连接，如果一个三角形的三边颜色相同，那么称为同色三角形。给你一组数据，计算同色三角形的总数。</span></div><p></p>
<div>&nbsp;</div>
<div><span style="font-size: 12pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></div></div><h3>Input</h3><div class="content"><div>&nbsp;
<p><font size="3">第一行是整数<span style="font-size: 12pt">n, 3 &lt;= n &lt;= 1000,</span></font><span style="font-size: 12pt">点的个数。</span></p>
<div><span style="font-size: 12pt">第二行是整数</span><span style="font-size: 12pt">m, 0 &lt;= m &lt;= 250000,</span><span style="font-size: 12pt">红线数目。</span></div>
<div>&nbsp;</div>
<div><span style="font-size: 12pt">接下来的</span><span style="font-size: 12pt">m</span><span style="font-size: 12pt">行，每行两个数</span><span style="font-size: 12pt">p</span><span style="font-size: 12pt">和</span><span style="font-size: 12pt">k</span><span style="font-size: 12pt">，</span><span style="font-size: 12pt">1 &lt;= p &lt; k &lt;= n</span><span style="font-size: 12pt">。表示一条红线的两个端点。</span></div>
</div>
<div><span style="font-size: 12pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></div></div><h3>Output</h3><div class="content"><div><span style="font-size: medium">&nbsp;</span></div>
<p><span style="font-size: medium">&nbsp; 一个整数，单色三角形的数目。<br>
</span></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">6 <br>
9<br>
1 2<br>
2 3<br>
2 5<br>
1 4<br>
1 6<br>
3 4<br>
4 5<br>
5 6<br>
3 6<br>
</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">2</span></div><h3>HINT</h3>
            <div class="content"><p></p><p><span style="font-size: medium">数据已加强</span></p><p></p></div><h3>Source</h3>
            <div class="content"><p><a href="problemset.php?search="></a></p></div>

<h2 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h2><p>组合题，我们考虑取反，然后统计“异色角”的数量，而每个非同色三角形都会占据正好两个异色角，那么我们就知道了非单色三角形的数量，用全部的减去即可</p>
<p>好像奥林匹克小丛书里面有？？？（小蓝皮）</p>
<p><del>不说都忘了以前是打数竞的</del></p>
<h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">LL rec[maxn];</div><div class="line">LL n, m;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;m);</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        rec[x]++, rec[y]++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        ans += (n - <span class="number">1</span> - rec[i]) * rec[i];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, n * (n - <span class="number">1</span>) * (n - <span class="number">2</span>) / <span class="number">6</span> - ans / <span class="number">2</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 3038. -- 上帝造题的七分钟2</title><center><h2>3038: 上帝造题的七分钟2</h2><span class="green">Time Limit: </span>3 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>1505&nbsp;&nbsp;<span class="green">Solved: </span>647<br>[<a href="submitpage.php?id=3038">Submit</a>][<a href="problemstatus.php?id=3038">Status</a>][<a href="bbs.php?id=3038">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p><span style="font-size: medium">XLk觉得《上帝造题的七分钟》不太过瘾，于是有了第二部。<br>
&quot;第一分钟，X说，要有数列，于是便给定了一个正整数数列。<br>
第二分钟，L说，要能修改，于是便有了对一段数中每个数都开平方(下取整)的操作。<br>
第三分钟，k说，要能查询，于是便有了求一段数的和的操作。<br>
第四分钟，彩虹喵说，要是noip难度，于是便有了数据范围。<br>
第五分钟，诗人说，要有韵律，于是便有了时间限制和内存限制。<br>
第六分钟，和雪说，要省点事，于是便有了保证运算过程中及最终结果均不超过64位有符号整数类型的表示范围的限制。<br>
第七分钟，这道题终于造完了，然而，造题的神牛们再也不想写这道题的程序了。&quot;<br>
&mdash;&mdash;《上帝造题的七分钟&middot;第二部》<br>
所以这个神圣的任务就交给你了。<br>
</span></p></div><h3>Input</h3><div class="content"><p><span style="font-size: medium">第一行一个整数n，代表数列中数的个数。<br>
第二行n个正整数，表示初始状态下数列中的数。<br>
第三行一个整数m，表示有m次操作。<br>
接下来m行每行三个整数k,l,r，k=0表示给[l,r]中的每个数开平方(下取整)，k=1表示询问[l,r]中各个数的和。</span></p></div><h3>Output</h3><div class="content"><p><span style="font-size: medium">对于询问操作，每行输出一个回答。</span></p></div><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">10<br>
1 2 3 4 5 6 7 8 9 10<br>
5<br>
0 1 10<br>
1 1 10<br>
1 1 5<br>
0 5 8<br>
1 4 8<br>
</span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">19<br>
7<br>
6<br>
</span></div><h3>HINT</h3><br>            <div class="content"><p></p><p><font size="4">1：对于100%的数据，1&lt;=n&lt;=100000，1&lt;=l&lt;=r&lt;=n，数列中的数大于0，且不超过1e12。</font></p><br><p></p>
<p></p><p><font size="4">2：数据不保证L&lt;=R 若L&gt;R，请自行交换L,R，谢谢！ </font></p>&lt;/p&gt;&lt;/div&gt;<h3>Source</h3><br>            <div class="content"><p><a href="problemset.php?search=Poetize4">Poetize4</a></p></div><p></p>
<h2 id="题目分析-6"><a href="#题目分析-6" class="headerlink" title="题目分析"></a>题目分析</h2><p>平摊分析线段树。。。就是开根操作会比较少，直接暴力就好。。。</p>
<h2 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = getchar();x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL line[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line">LL maxnum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line">LL sum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        sum[o] = line[l];</div><div class="line">        maxnum[o] = line[l];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    update(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    update(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    maxnum[o] = max(maxnum[o &lt;&lt; <span class="number">1</span>], maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">    sum[o] = sum[o &lt;&lt; <span class="number">1</span>] + sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        <span class="keyword">if</span> (maxnum[o] == <span class="number">0</span> || maxnum[o] == <span class="number">1</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; i++) line[i] = (LL) <span class="built_in">sqrt</span>(line[i]);</div><div class="line">        update(l, r, o);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) modify(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) modify(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    sum[o] = sum[o &lt;&lt; <span class="number">1</span>] + sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">    maxnum[o] = max(maxnum[o &lt;&lt; <span class="number">1</span>], maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy) <span class="keyword">return</span> sum[o];</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) ans += getsum(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) ans += getsum(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> op, l, r;</div><div class="line"></div><div class="line">    read(n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(line[i]);</div><div class="line">    update(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line"></div><div class="line">    read(m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        read(op), read(l) ,read(r);</div><div class="line">        <span class="keyword">if</span> (l &gt; r) swap(l, r);</div><div class="line">        <span class="keyword">if</span> (!op)&#123;</div><div class="line">            qx = l, qy = r;</div><div class="line">            modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            qx = l, qy = r;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, getsum(<span class="number">1</span>, n, <span class="number">1</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 3209. -- 花神的数论题</title><center><h2>3209: 花神的数论题</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>2291&nbsp;&nbsp;<span class="green">Solved: </span>1048<br>[<a href="submitpage.php?id=3209">Submit</a>][<a href="problemstatus.php?id=3209">Status</a>][<a href="bbs.php?id=3209">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p><span style="font-size: medium">背景<br>
众所周知，花神多年来凭借无边的神力狂虐各大 OJ、OI、CF、TC &hellip;&hellip; 当然也包括 CH 啦。<br>
描述<br>
话说花神这天又来讲课了。课后照例有超级难的神题啦&hellip;&hellip; 我等蒟蒻又遭殃了。<br>
花神的题目是这样的<br>
设 sum(i) 表示 i 的二进制表示中 1 的个数。给出一个正整数 N ，花神要问你<br>
派(Sum(i)),也就是 sum(1)&mdash;sum(N) 的乘积。</span></p><p></p>
<p></p><p></p></div><h3>Input</h3><div class="content"><p><span style="font-size: medium">一个正整数 N。</span></p><p></p>
<p></p><p></p></div><h3>Output</h3><div class="content"><p><span style="font-size: medium">一个数，答案模 10000007 的值。</span></p><p></p>
<p></p><p></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">样例输入一<br>
<br>
3<br>
<br>
</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">样例输出一<br>
<br>
2<br>
</span></div><h3>HINT</h3>
            <div class="content"><p></p><p><br><br>
对于样例一，1*1*2=2；</p><br><p></p>
<p></p><p>数据范围与约定</p><br><p></p>
<p></p><p>对于 100% 的数据，N&le;10^15</p>&lt;/p&gt;&lt;/div&gt;<h3>Source</h3><br>            <div class="content"><p><a href="problemset.php?search=原创 Memphis">原创 Memphis</a></p></div><p></p>
<h2 id="题目分析-7"><a href="#题目分析-7" class="headerlink" title="题目分析"></a>题目分析</h2><p>好像直接数位DP一下就好？？？求一下二进制中1的个数为x的数的个数，然后快速幂一下</p>
<h2 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M1 941</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M2 10627</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">bool</span> vis[maxn][maxn][<span class="number">2</span>][<span class="number">2</span>];</div><div class="line">LL dp[maxn][maxn][<span class="number">2</span>][<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">fast_power</span><span class="params">(<span class="keyword">int</span> x, LL y, <span class="keyword">int</span> op)</span></span>&#123;</div><div class="line">    LL M = (op) ? M2 : M1;</div><div class="line">    LL ans = <span class="number">1</span>, con = x;</div><div class="line">    <span class="keyword">while</span> (y)&#123;</div><div class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ans = ans * con % M;</div><div class="line">        y &gt;&gt;= <span class="number">1</span>;</div><div class="line">        con = con * con % M;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">DP</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> rest, <span class="keyword">int</span> op, <span class="keyword">int</span> op2)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (rest == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (pos == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (vis[pos][rest][op][op2]) <span class="keyword">return</span> dp[pos][rest][op][op2];</div><div class="line">    vis[pos][rest][op][op2] = <span class="number">1</span>;</div><div class="line">    LL&amp; ans = dp[pos][rest][op][op2];</div><div class="line">    <span class="keyword">if</span> (!op2)&#123;</div><div class="line">        <span class="keyword">if</span> (op)&#123;</div><div class="line">            <span class="keyword">if</span> (num[pos]) <span class="keyword">return</span> ans = (DP(pos - <span class="number">1</span>, rest - <span class="number">1</span>, <span class="number">1</span>, op2) + DP(pos - <span class="number">1</span>, rest, <span class="number">0</span>, op2)) % (M1 - <span class="number">1</span>);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> ans = DP(pos - <span class="number">1</span>, rest, <span class="number">1</span>, op2);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> ans = (DP(pos - <span class="number">1</span>, rest - <span class="number">1</span>, <span class="number">0</span>, op2) + DP(pos - <span class="number">1</span>, rest, <span class="number">0</span>, op2)) % (M1 - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">if</span> (op)&#123;</div><div class="line">            <span class="keyword">if</span> (num[pos]) <span class="keyword">return</span> ans = (DP(pos - <span class="number">1</span>, rest - <span class="number">1</span>, <span class="number">1</span>, op2) + DP(pos - <span class="number">1</span>, rest, <span class="number">0</span>, op2)) % (M2 - <span class="number">1</span>);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> ans = DP(pos - <span class="number">1</span>, rest, <span class="number">1</span>, op2);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> ans = (DP(pos - <span class="number">1</span>, rest - <span class="number">1</span>, <span class="number">0</span>, op2) + DP(pos - <span class="number">1</span>, rest, <span class="number">0</span>, op2)) % (M2 - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">get_inv</span><span class="params">(LL a, <span class="keyword">int</span> op)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (!op) <span class="keyword">return</span> fast_power(a, M1 - <span class="number">2</span>, <span class="number">0</span>);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> fast_power(a, M2 - <span class="number">2</span>, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    LL n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</div><div class="line">    <span class="keyword">while</span> (n)&#123;</div><div class="line">        num[cnt++] = n &amp; <span class="number">1</span>;</div><div class="line">        n &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    LL ans = <span class="number">1</span>;</div><div class="line">    LL con1 = M2 * get_inv(M2, <span class="number">0</span>) % (M2 * M1);</div><div class="line">    LL con2 = M1 * get_inv(M1, <span class="number">1</span>) % (M2 * M1);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)&#123;</div><div class="line">        LL a = fast_power(i, DP(cnt - <span class="number">1</span>, i, <span class="number">1</span>, <span class="number">0</span>), <span class="number">0</span>) * con1 % (M1 * M2);</div><div class="line">        LL b = fast_power(i, DP(cnt - <span class="number">1</span>, i, <span class="number">1</span>, <span class="number">1</span>), <span class="number">1</span>) * con2 % (M2 * M1);</div><div class="line"></div><div class="line">        ans = ans * (a + b) % (M2 * M1);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 3358. -- [Usaco2004 Jan]洪水</title><center><h2>3358: [Usaco2004 Jan]洪水</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>62&nbsp;&nbsp;<span class="green">Solved: </span>44<br>[<a href="submitpage.php?id=3358">Submit</a>][<a href="problemstatus.php?id=3358">Status</a>][<a href="bbs.php?id=3358">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div><p></p>
<div>农场面临着洪水的威胁。帮助约翰找到水的高度，他可以把他的奶牛移到安全的地方, 农场由M&times;N(1&le;M，N&le;400)</div>
<div>的单位方格组成．每格有一个海拔高度Hi，j(1&le;Hi，j&le;10000)．给出一个M&times;N的表格地图和降水量V(1&le;V&le;10^9</div>
<div>)。水总是先注入最低的方格，不管该方格在哪儿。请你算出水面高度，水面和海平面之间的陆地体积（可能为0）</div>
<div>。注意：陆地和水面高度相同时已经被淹没。</div>
<div></div>
<div></div>
</div></div><h3>Input</h3><div class="content"><div><span style="font-size: medium;">* Line 1: Three space-separated integers: M, N, &nbsp;and V</span></div>
<div><font size="3">* Lines 2...: Each line contains as many as 20 space-separated</font></div>
<div><font size="3">&nbsp; &nbsp; &nbsp; &nbsp; integers that represent the elevations of the farm. The first</font></div>
<div><font size="3">&nbsp; &nbsp; &nbsp; &nbsp; N integers are spread across line 1 and it successors, 20</font></div>
<div><font size="3">&nbsp; &nbsp; &nbsp; &nbsp; integers per line, until all N integers are laid out. The next</font></div>
<div><font size="3">&nbsp; &nbsp; &nbsp; &nbsp; N integers begin on a new line, etc.</font></div>
<div></div></div><h3>Output</h3><div class="content"><div>在一行内输出两个由空格分隔的整数：水面高度，海平面和水面之间陆地的体积（被水完全淹没的陆地体积）。</div>
<p></p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">4 5 33<br>
2 2 2 2 2<br>
1 3 4 3 2<br>
2 3 5 3 2<br>
2 4 1 1 2</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">4  43<br>
</span></div><h3>HINT</h3>
            <div class="content"><p><div><br>
<div>The water will rise to a height of 4 m, submerging the blocks marked1, 2, 3, and 4.</div><br>
<div>The volume of land below the water is 1*3 + 2*10 + 3*4 +4*2 = 43.</div><br>
<div>水高4米，淹没的区域标记1，2，3，4．水下陆地的体积：1&times;3+2&times;10+3&times;4+4&times;2=43.</div><br>
</div><br>
</p><p></p><p></p></div><h3>Source</h3>
            <div class="content"><p><a href="problemset.php?search=Orange">Orange</a></p></div>

<h2 id="题目分析-8"><a href="#题目分析-8" class="headerlink" title="题目分析"></a>题目分析</h2><p>好像是一道二分水题。。。而且还不用浮点数二分</p>
<h2 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line">LL v;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> pre[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span>* k = upper_bound(line, line + n * m, x);</div><div class="line">    LL now = (LL)x * (k - line) - pre[k - line - <span class="number">1</span>];</div><div class="line">    <span class="keyword">if</span> (now &lt; v) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (now &gt; v) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">int</span> op = judge(mid);</div><div class="line">    <span class="keyword">if</span> (op == <span class="number">0</span>) <span class="keyword">return</span> mid;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">-1</span>) <span class="keyword">return</span> work(l, mid);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> work(mid + <span class="number">1</span>, r);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>, &amp;n, &amp;m, &amp;v);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n * m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">    &#125;</div><div class="line">    sort(line, line + n * m);</div><div class="line">    pre[<span class="number">0</span>] = line[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n * m; i++)&#123;</div><div class="line">        pre[i] = pre[i - <span class="number">1</span>] + line[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> hei = work(line[<span class="number">0</span>], INF);</div><div class="line">    <span class="keyword">int</span> k = upper_bound(line, line + n * m, hei) - line - <span class="number">1</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d"</span>, hei, pre[k]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 3366. -- [Usaco2004 Feb]Breeding 奶牛饲育</title><center><h2>3366: [Usaco2004 Feb]Breeding 奶牛饲育</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>32&nbsp;&nbsp;<span class="green">Solved: </span>22<br>[<a href="submitpage.php?id=3366">Submit</a>][<a href="problemstatus.php?id=3366">Status</a>][<a href="bbs.php?id=3366">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;农夫约翰正在扩增牛群．通过调整饲料的量，他可以控制牛群中每头母牛所生的小牛的数</span></div><p></p>
<div><span style="font-size: medium">量．如果他给每头奶牛喂了相同量的饲料，她们就产下了相同数量的牛犊．开始，他喂了一头母牛，希望通过若干代的饲育得到N只奶牛．假如N=&nbsp;12，那么约翰应该喂那只最初的奶牛足够的饲料，使其生3只牛犊．第二代牛长大后，他就给她们喂足够的饲料，使它们生下4只牛犊，从而最后一代中有12只牛了．牛一旦生产，约翰就把她卖了．所以，农场里只保留最新一代的牛．&nbsp;每头牛生牛犊的数量不少于2，且无上限．约翰可以通过多少种不同的方式使最络牛的总数为N(1&le;N&le;2&times;109)方法的总数量不超过2&times;10^9.</span></div></div><h3>Input</h3><div class="content"><div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;整数N.</span></div></div><h3>Output</h3><div class="content"><div>&nbsp;</div>
<div><span style="font-size: medium">&nbsp;&nbsp;&nbsp;&nbsp;获得N头牛的方式总数．</span></div></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">    12<br>
</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata"> <br>
 <br>
    8<br>
样例说明<br>
    获得12头牛的方法是(2，2，3).即，第一二代都生产2头，第三代生产3头（一共12头）．其余7种方法为(2，3，2)，(3，2，2)，(3，4)，(4，3)，(12)，(2，6)，(6，2).<br>
</span></div><h3>HINT</h3>
            <div class="content"><p></p></div><h3>Source</h3>
            <div class="content"><p><a href="problemset.php?search=Orange">Orange</a></p></div>

<h2 id="题目分析-9"><a href="#题目分析-9" class="headerlink" title="题目分析"></a>题目分析</h2><p>还是一道水题，直接递归即可</p>
<p><del>我居然还WA了一次???</del></p>
<h2 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; dp;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (dp.count(x)) <span class="keyword">return</span> dp[x];</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> con = (<span class="keyword">int</span>) <span class="built_in">sqrt</span>(x);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= con; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (x / i == i) ans += work(i);</div><div class="line">            <span class="keyword">else</span> ans += work(i) + work(x / i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> dp[x] = ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, work(n));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</div></div></div></div></div></div></div></div></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;第二篇。。。&lt;br&gt;
    
    </summary>
    
    
      <category term="BZOJ" scheme="https://goseqh.tk/tags/BZOJ/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ阶段性汇总I</title>
    <link href="https://goseqh.tk/2017/08/26/BZOJ%E9%98%B6%E6%AE%B5%E6%80%A7%E6%B1%87%E6%80%BBI/"/>
    <id>https://goseqh.tk/2017/08/26/BZOJ阶段性汇总I/</id>
    <published>2017-08-26T09:12:35.000Z</published>
    <updated>2017-08-26T11:27:58.289Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>第一篇BZOJ题解出现啦！<br><a id="more"></a></p>
<h1 id="首篇致辞"><a href="#首篇致辞" class="headerlink" title="首篇致辞"></a>首篇致辞</h1><p>由于每道题都写题解<strong>太傻了</strong>，于是每十道题打包在一起进行总结发布，同时为了查找方便，将会再发布一篇文章用于记录所有已完成的题目同时附上一句话题解</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p><title>Problem 1010. -- [HNOI2008]玩具装箱toy</title><center><h2>1010: [HNOI2008]玩具装箱toy</h2><span class="green">Time Limit: </span>1 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>11256&nbsp;&nbsp;<span class="green">Solved: </span>4733<br>[<a href="submitpage.php?id=1010">Submit</a>][<a href="problemstatus.php?id=1010">Status</a>][<a href="bbs.php?id=1010">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p>　　P教授要去看奥运，但是他舍不下他的玩具，于是他决定把所有的玩具运到北京。他使用自己的压缩器进行压
缩，其可以将任意物品变成一堆，再放到一种特殊的一维容器中。P教授有编号为1...N的N件玩具，第i件玩具经过
压缩后变成一维长度为Ci.为了方便整理，P教授要求在一个一维容器中的玩具编号是连续的。同时如果一个一维容
器中有多个玩具，那么两件玩具之间要加入一个单位长度的填充物，形式地说如果将第i件玩具到第j个玩具放到一
个容器中，那么容器的长度将为 x=j-i+Sigma(Ck) i&lt;=K&lt;=j 制作容器的费用与容器的长度有关，根据教授研究，
如果容器长度为x,其制作费用为(X-L)^2.其中L是一个常量。P教授不关心容器的数目，他可以制作出任意长度的容
器，甚至超过L。但他希望费用最小.</p></div><h3>Input</h3><div class="content"><p>　　第一行输入两个整数N，L.接下来N行输入Ci.1&lt;=N&lt;=50000,1&lt;=L,Ci&lt;=10^7</p></div><h3>Output</h3><div class="content"><p>　　输出最小费用</p></div><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">5 4
3<br>
4<br>
2<br>
1<br>
4<br></span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">1</span></div><h3>HINT</h3><br>            <div class="content"><p></p></div><h3>Source</h3><p></p>
<h2>题目分析</h2>
很显然是斜率优化DP，但是为了很好地解决这样的问题，以下面的代码为例，只要是斜率优化DP的题目，都可以封装斜率优化的部分，然后把细节的关于x和y以及系数，斜率，算出DP值的具体公式用宏定义的方法进行表达，这样更加具有可扩展性

注意下面代码对斜率优化的封装

<h2> 代码</h2>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> X(x) ((double)x + sum[x])</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Y(x) ((double)dp[x] + X(x) * X(x))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> EFF(i) (2 * i + 2 * sum[i] - 2 - 2 * L)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SLOPE(x, y) ((Y(y) - Y(x)) / (X(y) - X(x)))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_DP(i, x) (dp[i] = dp[x] + (EFF(i) / 2 - X(x)) * (EFF(i) / 2 - X(x)))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">LL save[maxn];</div><div class="line">LL h, t;</div><div class="line">LL dp[maxn];</div><div class="line">LL sum[maxn];</div><div class="line">LL c[maxn];</div><div class="line">LL L;</div><div class="line">LL n;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    h = t = <span class="number">0</span>;</div><div class="line">    save[t++] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">while</span> (t - h &gt; <span class="number">1</span> &amp;&amp; SLOPE(save[h], save[h + <span class="number">1</span>]) &lt; EFF(i)) h++;</div><div class="line">        GET_DP(i, save[h]);</div><div class="line">        <span class="keyword">while</span> (t - h &gt; <span class="number">1</span> &amp;&amp; SLOPE(save[t - <span class="number">1</span>], i) &lt; SLOPE(save[t - <span class="number">2</span>], save[t - <span class="number">1</span>])) t--;</div><div class="line">        save[t++] = i;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, dp[n]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;L);</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;c[i]);</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++) sum[i] = sum[i - <span class="number">1</span>] + c[i];</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

中间那部分（work()）是完全不受题目影响的

<title>Problem 1026. -- [SCOI2009]windy数</title><center><h2>1026: [SCOI2009]windy数</h2><span class="green">Time Limit: </span>1 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>8087&nbsp;&nbsp;<span class="green">Solved: </span>3635<br>[<a href="submitpage.php?id=1026">Submit</a>][<a href="problemstatus.php?id=1026">Status</a>][<a href="bbs.php?id=1026">Discuss</a>]</center><h3>Description</h3><div class="content"><p>　　windy定义了一种windy数。不含前导零且相邻两个数字之差至少为2的正整数被称为windy数。 windy想知道，
在A和B之间，包括A和B，总共有多少个windy数？</p></div><h3>Input</h3><div class="content"><p>　　包含两个整数，A B。</p></div><h3>Output</h3><div class="content"><p>　　一个整数</p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">【输入样例一】
1 10
【输入样例二】
25 50</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">【输出样例一】
9
【输出样例二】
20</span></div><h3>HINT</h3>
            <div class="content"><p></p><p>【数据规模和约定】
100%的数据，满足 1 &lt;= A &lt;= B &lt;= 2000000000 。</p><p></p></div><h3>Source</h3>

<h2>题目分析</h2>

<p>简单的数位DP，不用维护当前数字是否已经脱离前导零部分，只需要在统计答案时分别统计每个长度的数字即可（具体见代码统计答案部分）</p>
<h2>代码</h2>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> a, b;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> vis[maxn][maxn][<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> dp[maxn][maxn][<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> last, <span class="keyword">int</span> op)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (pos == cnt) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (vis[pos][last][op]) <span class="keyword">return</span> dp[pos][last][op];</div><div class="line">    vis[pos][last][op] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span>&amp; ans = dp[pos][last][op];</div><div class="line">    <span class="keyword">if</span> (op)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = last + <span class="number">2</span>; i &lt; num[pos]; i++) ans += DP(pos + <span class="number">1</span>, i, <span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; min(num[pos], last - <span class="number">1</span>); i++) ans += DP(pos + <span class="number">1</span>, i, <span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(num[pos] - last) &gt;= <span class="number">2</span>) ans += DP(pos + <span class="number">1</span>, num[pos], <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = last + <span class="number">2</span>; i &lt; <span class="number">10</span>; i++) ans += DP(pos + <span class="number">1</span>, i, <span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; last - <span class="number">1</span>; i++) ans += DP(pos + <span class="number">1</span>, i, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    cnt = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x)&#123;</div><div class="line">        num[cnt++] = x % <span class="number">10</span>;</div><div class="line">        x /= <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">    reverse(num, num + cnt);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b);</div><div class="line">    get(a - <span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> ans1 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= cnt; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++) ans1 += DP(i, j, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; num[<span class="number">0</span>]; j++) ans1 += DP(<span class="number">1</span>, j, <span class="number">0</span>);</div><div class="line">    ans1 += DP(<span class="number">1</span>, num[<span class="number">0</span>], <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</div><div class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line"></div><div class="line">    get(b);</div><div class="line">    <span class="keyword">int</span> ans2 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= cnt; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++) ans2 += DP(i, j, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; num[<span class="number">0</span>]; j++) ans2 += DP(<span class="number">1</span>, j, <span class="number">0</span>);</div><div class="line">    ans2 += DP(<span class="number">1</span>, num[<span class="number">0</span>], <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans2 - ans1);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

多循环几下统计答案即可省去开始标记

<title>Problem 1076. -- [SCOI2008]奖励关</title><center><h2>1076: [SCOI2008]奖励关</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>2581&nbsp;&nbsp;<span class="green">Solved: </span>1370<br>[<a href="submitpage.php?id=1076">Submit</a>][<a href="problemstatus.php?id=1076">Status</a>][<a href="bbs.php?id=1076">Discuss</a>]</center><h3>Description</h3><div class="content"><p>　　你正在玩你最喜欢的电子游戏，并且刚刚进入一个奖励关。在这个奖励关里，系统将依次随机抛出k次宝物，
每次你都可以选择吃或者不吃（必须在抛出下一个宝物之前做出选择，且现在决定不吃的宝物以后也不能再吃）。
&nbsp;宝物一共有n种，系统每次抛出这n种宝物的概率都相同且相互独立。也就是说，即使前k-1次系统都抛出宝物1（
这种情况是有可能出现的，尽管概率非常小），第k次抛出各个宝物的概率依然均为1/n。 获取第i种宝物将得到Pi
分，但并不是每种宝物都是可以随意获取的。第i种宝物有一个前提宝物集合Si。只有当Si中所有宝物都至少吃过
一次，才能吃第i种宝物（如果系统抛出了一个目前不能吃的宝物，相当于白白的损失了一次机会）。注意，Pi可
以是负数，但如果它是很多高分宝物的前提，损失短期利益而吃掉这个负分宝物将获得更大的长期利益。 假设你
采取最优策略，平均情况你一共能在奖励关得到多少分值？</p></div><h3>Input</h3><div class="content"><p>　　第一行为两个正整数k和n，即宝物的数量和种类。以下n行分别描述一种宝物，其中第一个整数代表分值，随
后的整数依次代表该宝物的各个前提宝物（各宝物编号为1到n），以0结尾。</p></div><h3>Output</h3><div class="content"><p>　　输出一个实数，保留六位小数，即在最优策略下平均情况的得分。</p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">1 2
1 0<br>
2 0<br></span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">1.500000</span></div><h3>HINT</h3>
            <div class="content"><p></p><p><span style="font-size: medium">【数据规模】
1&lt;=k&lt;=100,1&lt;=n&lt;=15，分值为[-10^6,10^6]内的整数。
</span></p><p></p></div><h3>Source</h3>

<h2>题目分析</h2>
简单的状压DP，其中最优策略的含义是让你在选和不选的DP值上取个MAX
<h2>代码</h2>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 105</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm (1 &lt;&lt; 16)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">double</span> dp[maxn][maxm];</div><div class="line"><span class="keyword">bool</span> vis[maxn][maxm];</div><div class="line"><span class="keyword">int</span> pre[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> op)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (pos == n + <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (vis[pos][op]) <span class="keyword">return</span> dp[pos][op];</div><div class="line">    vis[pos][op] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">double</span>&amp; ans = dp[pos][op];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="keyword">if</span>((op | pre[i]) == op)&#123;</div><div class="line">            ans += max(DP(pos + <span class="number">1</span>, op | (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>))) + line[i], DP(pos + <span class="number">1</span>, op)) / m;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> ans += DP(pos + <span class="number">1</span>, op) / m;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">        <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x) == <span class="number">1</span> &amp;&amp; x)&#123;</div><div class="line">            pre[i] |= (<span class="number">1</span> &lt;&lt; (x - <span class="number">1</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lf"</span>, DP(<span class="number">1</span>, <span class="number">0</span>));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<title>Problem 1087. -- [SCOI2005]互不侵犯King</title><center><h2>1087: [SCOI2005]互不侵犯King</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>4250&nbsp;&nbsp;<span class="green">Solved: </span>2455<br>[<a href="submitpage.php?id=1087">Submit</a>][<a href="problemstatus.php?id=1087">Status</a>][<a href="bbs.php?id=1087">Discuss</a>]</center><h3>Description</h3><div class="content"><p>　　在N&times;N的棋盘里面放K个国王，使他们互不攻击，共有多少种摆放方案。国王能攻击到它上下左右，以及左上
左下右上右下八个方向上附近的各一个格子，共8个格子。</p></div><h3>Input</h3><div class="content"><p>　　只有一行，包含两个数N，K （ 1 &lt;=N &lt;=9, 0 &lt;= K &lt;= N * N）</p></div><h3>Output</h3><div class="content"><p>　　方案数。</p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">3 2</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">16</span></div><h3>HINT</h3>
            <div class="content"><p></p></div><h3>Source</h3>

<h2>题目分析</h2>

<p>简单的状压DP。。。用DFS转移答案</p>
<h2>代码</h2>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 15</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxk 225</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 1024</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line">LL dp[maxn][maxk][maxm];</div><div class="line"><span class="keyword">bool</span> vis[maxn][maxk][maxm];</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">DP</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> rest, <span class="keyword">int</span> op)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> pos, <span class="keyword">int</span> rest, <span class="keyword">int</span> op, <span class="keyword">int</span> _op, LL&amp; ans)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (now == n)&#123;</div><div class="line">        ans += DP(pos + <span class="number">1</span>, rest, op);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">int</span> t = op, <span class="keyword">_t</span> = _op;</div><div class="line">        <span class="keyword">if</span> (!((_op) &amp; (<span class="number">1</span> &lt;&lt; now)))&#123;</div><div class="line">            <span class="keyword">if</span>(now == <span class="number">0</span>) op |= (<span class="number">1</span> &lt;&lt; now), op |= (<span class="number">1</span> &lt;&lt; (now + <span class="number">1</span>)), _op |= (<span class="number">1</span> &lt;&lt; now), _op |= (<span class="number">1</span> &lt;&lt; (now + <span class="number">1</span>));</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (now == n - <span class="number">1</span>) op |= (<span class="number">1</span> &lt;&lt; now), op |= (<span class="number">1</span> &lt;&lt; (now - <span class="number">1</span>)), _op |= (<span class="number">1</span> &lt;&lt; (now)), _op |= (<span class="number">1</span> &lt;&lt; (now - <span class="number">1</span>));</div><div class="line">            <span class="keyword">else</span> op |= (<span class="number">1</span> &lt;&lt; now), op |= (<span class="number">1</span> &lt;&lt; (now - <span class="number">1</span>)), op |= (<span class="number">1</span> &lt;&lt; (now + <span class="number">1</span>)),</div><div class="line">            _op |= (<span class="number">1</span> &lt;&lt; now), _op |= (<span class="number">1</span> &lt;&lt; (now - <span class="number">1</span>)), _op |= (<span class="number">1</span> &lt;&lt; (now + <span class="number">1</span>));</div><div class="line">            DFS(now + <span class="number">1</span>, pos, rest - <span class="number">1</span>, op, _op, ans);</div><div class="line">            op = t, _op = <span class="keyword">_t</span>;</div><div class="line">            DFS(now + <span class="number">1</span>, pos, rest, op, _op, ans);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> DFS(now + <span class="number">1</span>, pos, rest, op, _op, ans);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">DP</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> rest, <span class="keyword">int</span> op)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (rest == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (rest &lt; <span class="number">0</span> || pos == n) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (vis[pos][rest][op]) <span class="keyword">return</span> dp[pos][rest][op];</div><div class="line">    vis[pos][rest][op] = <span class="number">1</span>;</div><div class="line">    DFS(<span class="number">0</span>, pos, rest, <span class="number">0</span>, op, dp[pos][rest][op]);</div><div class="line">    <span class="keyword">return</span> dp[pos][rest][op];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, DP(<span class="number">0</span>, k, <span class="number">0</span>));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<title>Problem 1096. -- [ZJOI2007]仓库建设</title><center><h2>1096: [ZJOI2007]仓库建设</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>5080&nbsp;&nbsp;<span class="green">Solved: </span>2261<br>[<a href="submitpage.php?id=1096">Submit</a>][<a href="problemstatus.php?id=1096">Status</a>][<a href="bbs.php?id=1096">Discuss</a>]</center><h3>Description</h3><div class="content"><p>　　L公司有N个工厂，由高到底分布在一座山上。如图所示，工厂1在山顶，工厂N在山脚。由于这座山处于高原内
陆地区（干燥少雨），L公司一般把产品直接堆放在露天，以节省费用。突然有一天，L公司的总裁L先生接到气象
部门的电话，被告知三天之后将有一场暴雨，于是L先生决定紧急在某些工厂建立一些仓库以免产品被淋坏。由于
地形的不同，在不同工厂建立仓库的费用可能是不同的。第i个工厂目前已有成品Pi件，在第i个工厂位置建立仓库
的费用是Ci。对于没有建立仓库的工厂，其产品应被运往其他的仓库进行储藏，而由于L公司产品的对外销售处设
置在山脚的工厂N，故产品只能往山下运（即只能运往编号更大的工厂的仓库），当然运送产品也是需要费用的，
假设一件产品运送1个单位距离的费用是1。假设建立的仓库容量都都是足够大的，可以容下所有的产品。你将得到
以下数据：1：工厂i距离工厂1的距离Xi（其中X1=0）;2：工厂i目前已有成品数量Pi;:3：在工厂i建立仓库的费用
Ci;请你帮助L公司寻找一个仓库建设的方案，使得总的费用（建造费用+运输费用）最小。</p></div><h3>Input</h3><div class="content"><p>　　第一行包含一个整数N，表示工厂的个数。接下来N行每行包含两个整数Xi, Pi, Ci, 意义如题中所述。</p></div><h3>Output</h3><div class="content"><p>　　仅包含一个整数，为可以找到最优方案的费用。</p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">3
0 5 10<br>
5 3 100<br>
9 6 10<br></span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">32</span></div><h3>HINT</h3>
            <div class="content"><p></p><p><span style="font-size: medium;">在工厂1和工厂3建立仓库，建立费用为10+10=20，运输费用为(9-5)*3 = 12，总费用32。如果仅在工厂3建立仓库，建立费用为10，运输费用为(9-0)*5+(9-5)*3=57，总费用67，不如前者优。
【数据规模】
对于100%的数据， N &le;1000000。 所有的Xi, Pi, Ci均在32位带符号整数以内，保证中间计算结果不超过64位带符号整数。 
</span></p><p></p></div><h3>Source</h3>

<h2>题目分析</h2>
斜率优化DP，注意DP的方向，要按照题目中给你的方向搞，不要自作聪明反过来，否则会很麻烦，因为山脚必须有仓库而山顶不一定。同时采用斜率优化DP模板化方法
<h2>代码</h2>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> X(x) (num[x])</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Y(x) (dp[x] - s[x])</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> EFF(i) (-dis[i])</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_DP(i, x) (dp[i] = dp[x] + s[i] - s[x] - (num[i] - num[x]) * dis[i] + cost[i])</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line">LL dis[maxn];</div><div class="line">LL num[maxn];</div><div class="line">LL s[maxn];</div><div class="line">LL cost[maxn];</div><div class="line">LL n;</div><div class="line">LL dp[maxn];</div><div class="line">LL pre[maxn];</div><div class="line"></div><div class="line"><span class="built_in">deque</span>&lt;LL&gt; save;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    save.push_front(<span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">while</span> (save.size() &gt; <span class="number">1</span>)&#123;</div><div class="line">            LL op = save.back();</div><div class="line">            save.pop_back();</div><div class="line">            LL op2 = save.back();</div><div class="line">            <span class="keyword">if</span> ((Y(op2) - Y(op)) &lt; (X(op2) - X(op)) * EFF(i)) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                save.push_back(op);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        LL x = save.back();</div><div class="line">        GET_DP(i, x);</div><div class="line">        <span class="keyword">while</span> (save.size() &gt; <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">int</span> op = save.front();</div><div class="line">            save.pop_front();</div><div class="line">            <span class="keyword">int</span> op2 = save.front();</div><div class="line">            <span class="keyword">if</span> ((Y(i) - Y(op)) * (X(op) - X(op2)) &lt; (Y(op) - Y(op2)) * (X(i) - X(op))) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                save.push_front(op);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        save.push_front(i);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, dp[n]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>, &amp;dis[i], &amp;num[i], &amp;cost[i]);</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++) dis[i] = dis[n] - dis[i];</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++) s[i] = s[i - <span class="number">1</span>] + num[i] * dis[i];</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++) num[i] += num[i - <span class="number">1</span>];</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<title>Problem 1103. -- [POI2007]大都市meg</title><center><h2>1103: [POI2007]大都市meg</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>2703&nbsp;&nbsp;<span class="green">Solved: </span>1422<br>[<a href="submitpage.php?id=1103">Submit</a>][<a href="problemstatus.php?id=1103">Status</a>][<a href="bbs.php?id=1103">Discuss</a>]</center><h3>Description</h3><div class="content"><p>　　在经济全球化浪潮的影响下,习惯于漫步在清晨的乡间小路的邮递员Blue Mary也开始骑着摩托车传递邮件了。
不过，她经常回忆起以前在乡间漫步的情景。昔日，乡下有依次编号为1..n的n个小村庄，某些村庄之间有一些双
向的土路。从每个村庄都恰好有一条路径到达村庄1（即比特堡）。并且，对于每个村庄，它到比特堡的路径恰好
只经过编号比它的编号小的村庄。另外，对于所有道路而言，它们都不在除村庄以外的其他地点相遇。在这个未开
化的地方，从来没有过高架桥和地下铁道。随着时间的推移，越来越多的土路被改造成了公路。至今，Blue Mary
还清晰地记得最后一条土路被改造为公路的情景。现在，这里已经没有土路了&mdash;&mdash;所有的路都成为了公路，而昔日
的村庄已经变成了一个大都市。 Blue Mary想起了在改造期间她送信的经历。她从比特堡出发，需要去某个村庄，
并且在两次送信经历的间隔期间,有某些土路被改造成了公路.现在Blue Mary需要你的帮助：计算出每次送信她需
要走过的土路数目。（对于公路，她可以骑摩托车；而对于土路，她就只好推车了。）</p></div><h3>Input</h3><div class="content"><p>　　第一行是一个数n(1 &lt; = n &lt; = 2 50000).以下n-1行，每行两个整数a，b（1 &lt; =&nbsp; a以下一行包含一个整数m
（1 &lt; = m &lt; = 2 50000），表示Blue Mary曾经在改造期间送过m次信。以下n+m-1行，每行有两种格式的若干信息
，表示按时间先后发生过的n+m-1次事件:若这行为 A a b(a若这行为 W a, 则表示Blue Mary曾经从比特堡送信到
村庄a。</p></div><h3>Output</h3><div class="content"><p>　　有m行，每行包含一个整数，表示对应的某次送信时经过的土路数目。</p></div><h3>Sample Input</h3>
            <div class="content"><span class="sampledata">5
1 2<br>
1 3<br>
1 4<br>
4 5<br>
4<br>
W 5<br>
A 1 4<br>
W 5<br>
A 4 5<br>
W 5<br>
W 2<br>
A 1 2<br>
A 1 3<br>

</span></div><h3>Sample Output</h3>
            <div class="content"><span class="sampledata">2
1
0
1</span></div><h3>HINT</h3>
            <div class="content"><p></p><p><img border="0" alt="" src="images/1103.jpg"></p><p></p></div><h3>Source</h3>

<h2>题目分析</h2>

<p>好像是树剖的板子，但是为了学点东西，本题不用树剖，而是采用DFS序+数据结构（线段树/树状数组）的方法</p>
<h2>代码</h2>

<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x &amp; -x</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="keyword">int</span> c[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span> (x &lt;= n)&#123;</div><div class="line">        c[x] += v;</div><div class="line">        x += lowbit(x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x)&#123;</div><div class="line">        ans += c[x];</div><div class="line">        x -= lowbit(x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt = <span class="number">1</span>, h[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">int</span> fa[maxn];</div><div class="line"><span class="keyword">int</span> dfs[maxn];</div><div class="line"><span class="keyword">int</span> idfs[maxn];</div><div class="line"><span class="keyword">int</span> size[maxn];</div><div class="line"><span class="keyword">int</span> ct;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    dfs[++ct] = x;</div><div class="line">    idfs[x] = ct;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x]) <span class="keyword">continue</span>;</div><div class="line">        d[op] = d[x] + <span class="number">1</span>;</div><div class="line">        fa[op] = x;</div><div class="line">        DFS(op);</div><div class="line">        size[x] += size[op];</div><div class="line">    &#125;</div><div class="line">    size[x]++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (fa[x] == y) swap(x, y);</div><div class="line">    <span class="keyword">int</span> l = idfs[y], r = l + size[y];</div><div class="line">    add(l, <span class="number">1</span>), add(r, <span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, d[x] - get(idfs[x]));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        Add_Edge(x, y);</div><div class="line">    &#125;</div><div class="line">    DFS(<span class="number">1</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</div><div class="line">    <span class="keyword">char</span> s[<span class="number">5</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + m - <span class="number">1</span>; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'A'</span>)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">            build(x, y);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">            query(x);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><title>Problem 1113. -- [Poi2008]海报PLA</title><center><h2>1113: [Poi2008]海报PLA</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>1171&nbsp;&nbsp;<span class="green">Solved: </span>793<br>[<a href="submitpage.php?id=1113">Submit</a>][<a href="problemstatus.php?id=1113">Status</a>][<a href="bbs.php?id=1113">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p>N个矩形,排成一排. 现在希望用尽量少的矩形海报Cover住它们.</p></div><h3>Input</h3><div class="content"><p>第一行给出数字N,代表有N个矩形.N在[1,250000] 下面N行,每行给出矩形的长与宽.其值在[1,1000000000]2 1/2 Postering</p></div><h3>Output</h3><div class="content"><p>最少数量的海报数.</p></div><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">5
1 2<br>
1 3<br>
2 2<br>
2 5<br>
1 4<br>
</span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">4
</span></div><h3>HINT</h3><br>            <div class="content"><p></p></div><h3>Source</h3><p></p>
<p></p><h2>题目分析</h2><br>猜下结论，感性证明一下，然后直接单调栈扫一遍即可<p></p>
<p></p><h2>代码</h2><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; save;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n, x;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%*d%d"</span>, &amp;x);</div><div class="line">        <span class="keyword">while</span> (!save.empty() &amp;&amp; save.top() &gt; x) &#123;</div><div class="line">            save.pop();</div><div class="line">            ans++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (save.empty() || save.top() &lt; x) save.push(x);</div><div class="line">    &#125;</div><div class="line">    ans += save.size();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p><title>Problem 1115. -- [POI2009]石子游戏Kam</title><center><h2>1115: [POI2009]石子游戏Kam</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>1060&nbsp;&nbsp;<span class="green">Solved: </span>650<br>[<a href="submitpage.php?id=1115">Submit</a>][<a href="problemstatus.php?id=1115">Status</a>][<a href="bbs.php?id=1115">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p>有N堆石子，除了第一堆外，每堆石子个数都不少于前一堆的石子个数。两人轮流操作每次操作可以从一堆石子中移走任意多石子，但是要保证操作后仍然满足初始时的条件谁没有石子可移时输掉游戏。问先手是否必胜。</p></div><h3>Input</h3><div class="content"><p>第一行u表示数据组数。对于每组数据，第一行N表示石子堆数，第二行N个数ai表示第i堆石子的个数(a1&lt;=a2&lt;=&hellip;&hellip;&lt;=an)。 1&lt;=u&lt;=10 1&lt;=n&lt;=1000 0&lt;=ai&lt;=10000</p></div><h3>Output</h3><div class="content"><p>u行，若先手必胜输出TAK，否则输出NIE。</p></div><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">2
2<br>
2 2<br>
3<br>
1 2 4<br></span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">NIE
TAK</span></div><h3>HINT</h3><br>            <div class="content"><p></p><p>感谢MT大牛翻译.</p><p></p></div><h3>Source</h3><p></p>
<p></p><h2>题目分析</h2><br>Nim游戏变式，可以简单地转化为阶梯Nim问题，然后按照阶梯Nim的做法，把所有奇数号的堆的石子数异或在一起即可<p></p>
<p></p><h2>代码</h2><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--)&#123;</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> n, x, y;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;ans);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i += <span class="number">2</span>)&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;y, &amp;x);</div><div class="line">                ans ^= x - y;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (ans) <span class="built_in">printf</span>(<span class="string">"TAK\n"</span>);</div><div class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NIE\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span>)&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;y, &amp;x);</div><div class="line">                ans ^= x - y;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (ans) <span class="built_in">printf</span>(<span class="string">"TAK\n"</span>);</div><div class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NIE\n"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p><title>Problem 1116. -- [POI2008]CLO</title><center><h2>1116: [POI2008]CLO</h2><span class="green">Time Limit: </span>10 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>1068&nbsp;&nbsp;<span class="green">Solved: </span>593<br>[<a href="submitpage.php?id=1116">Submit</a>][<a href="problemstatus.php?id=1116">Status</a>][<a href="bbs.php?id=1116">Discuss</a>]</center></p><h3>Description</h3><div class="content"><p>Byteotia城市有n个 towns m条双向roads. 每条 road 连接 两个不同的 towns ,没有重复的road. 你要把其中一些road变成单向边使得：每个town都有且只有一个入度</p></div><h3>Input</h3><div class="content"><p>第一行输入n m.1 &lt;= n&lt;= 100000,1 &lt;= m &lt;= 200000 下面M行用于描述M条边.</p></div><h3>Output</h3><div class="content"><p>TAK或者NIE 常做POI的同学,应该知道这两个单词的了...</p></div><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">4 5
1 2<br>
2 3<br>
1 3<br>
3 4<br>
1 4<br>
</span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">TAK
上图给出了一种连接方式.</span></div><h3>HINT</h3><br>            <div class="content"><p></p></div><h3>Source</h3><p></p>
<p></p><h2>题目分析</h2><br>从度数最少的点开始逐个分析，如果它的度数仅是1，那么我们肯定需要用这条边当做它的入度，如果是0，那么无解，如果大于等于2，那么后面的一定可以成环，就直接跳出即可，本题无需网络流做法<p></p>
<p></p><h2>代码</h2><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">1</span>, h[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> deg[maxn];</div><div class="line"><span class="keyword">bool</span> ex[maxn];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span>&#123;</span></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> a, <span class="keyword">const</span> <span class="keyword">int</span> b)</span> <span class="keyword">const</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> (deg[a] == deg[b]) ? a &lt; b : deg[a] &lt; deg[b];</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>, cmp&gt; s;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">while</span> (!s.empty())&#123;</div><div class="line">        <span class="keyword">int</span> x = *(s.begin());</div><div class="line">        <span class="keyword">if</span> (deg[x] == <span class="number">0</span>)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"NIE\n"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (deg[x] == <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">                <span class="keyword">int</span> op = e[i].to;</div><div class="line">                <span class="keyword">if</span> (ex[op]) <span class="keyword">continue</span>;</div><div class="line">                s.erase(op);</div><div class="line">                s.erase(x);</div><div class="line">                deg[op]--;</div><div class="line">                s.insert(op);</div><div class="line">                ex[x] = <span class="number">1</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (deg[x] &gt;= <span class="number">2</span>)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"TAK\n"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"TAK\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n, m, x, y;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        Add_Edge(x, y);</div><div class="line">        deg[x]++;</div><div class="line">        deg[y]++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        s.insert(i);</div><div class="line">    &#125;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p><title>Problem 1142. -- [POI2009]Tab</title><center><h2>1142: [POI2009]Tab</h2><span class="green">Time Limit: </span>40 Sec&nbsp;&nbsp;<span class="green">Memory Limit: </span>162 MB<br><span class="green">Submit: </span>326&nbsp;&nbsp;<span class="green">Solved: </span>141<br>[<a href="submitpage.php?id=1142">Submit</a>][<a href="problemstatus.php?id=1142">Status</a>][<a href="bbs.php?id=1142">Discuss</a>]</center></p><h3>Description</h3><div class="content"><div>　　2个n*m矩阵，保证同一个矩阵中元素两两不同。问能否通过若干次交换两行或交换两列把第一个矩阵变成第二<p></p>
<p><div>个。</div></p><h3>Input</h3><div class="content"><div>　　第一行正整数 T (1&le;T&le;10) 表示数据组数. 每组数据包括：第一行n m （1&le;n,m&le;1000） 2个n行m列的整数</div><p></p>
<p><div>矩阵，元素绝对值均在10^6以内</div></p><h3>Output</h3><div class="content"><p>　　每组数据输出&ldquo;TAK&rdquo;/&ldquo;NIE&rdquo;表示能/不能.</p></div><h3>Sample Input</h3><br>            <div class="content"><span class="sampledata">2
4 3<br>
1 2 3<br>
4 5 6<br>
7 8 9<br>
10 11 12<br>
11 10 12<br>
8 7 9<br>
5 4 6<br>
2 1 3<br>
2 2<br>
1 2<br>
3 4<br>
5 6<br>
7 8</span></div><h3>Sample Output</h3><br>            <div class="content"><span class="sampledata">TAK
NIE
</span></div><h3>HINT</h3><br>            <div class="content"><p></p></div><h3>Source</h3><br>            <div class="content"><p><a href="problemset.php?search=鸣谢WangTianYi制作数据">鸣谢WangTianYi制作数据</a></p></div><p></p>
<p></p><h2>题目分析</h2><br>我们发现一行或一列中有哪些元素是固定的，只是它们的顺序可变，那么我们只需要分别对两个矩阵的第一行排序，然后判断是否完全相同即可<p></p>
<p></p><h2>代码</h2><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> a[maxn][maxn];</div><div class="line"><span class="keyword">int</span> b[maxn][maxn];</div><div class="line"><span class="keyword">int</span> _a[maxn][maxn];</div><div class="line"><span class="keyword">int</span> _b[maxn][maxn];</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> b[<span class="number">0</span>][i] &lt; b[<span class="number">0</span>][j];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a[<span class="number">0</span>][i] &lt; a[<span class="number">0</span>][j];</div><div class="line">&#125;</div><div class="line"><span class="built_in">set</span>&lt;LL&gt; s;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> flag = <span class="number">-1</span>;</div><div class="line">    sort(_a[<span class="number">0</span>], _a[<span class="number">0</span>] + m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">        sort(_b[i], _b[i] + m);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (_a[<span class="number">0</span>][j] != _b[i][j])&#123;</div><div class="line">                f = <span class="number">0</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (f) &#123;</div><div class="line">            flag = i;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (flag == <span class="number">-1</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"NIE\n"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) swap(b[<span class="number">0</span>][j], b[flag][j]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) line[j] = j;</div><div class="line"></div><div class="line">    sort(line, line + m, cmp);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">            _b[i][j] = b[i][line[j]];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">            b[i][j] = _b[i][j];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sort(line, line + m, cmp2);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">            _a[i][j] = a[i][line[j]];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">            a[i][j] = _a[i][j];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        LL has = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</div><div class="line">            has = has * M + a[i][j];</div><div class="line">        &#125;</div><div class="line">        s.insert(has);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        LL has = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</div><div class="line">            has = has * M + b[i][j];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!s.count(has))&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"NIE\n"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"TAK\n"</span>);</div><div class="line">    s.clear();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</div><div class="line">                _a[i][j] = a[i][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i][j]);</div><div class="line">                _b[i][j] = b[i][j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        work();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
</div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;第一篇BZOJ题解出现啦！&lt;br&gt;
    
    </summary>
    
    
      <category term="BZOJ" scheme="https://goseqh.tk/tags/BZOJ/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ题解目录</title>
    <link href="https://goseqh.tk/2017/08/26/BZOJ%E9%A2%98%E8%A7%A3%E7%9B%AE%E5%BD%95/"/>
    <id>https://goseqh.tk/2017/08/26/BZOJ题解目录/</id>
    <published>2017-08-26T09:00:01.000Z</published>
    <updated>2017-08-26T11:28:42.573Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>BZOJ的题解目录<br><a id="more"></a></p>
<h1 id="题目目录及一句话题解汇总"><a href="#题目目录及一句话题解汇总" class="headerlink" title="题目目录及一句话题解汇总"></a>题目目录及一句话题解汇总</h1><p>为了给人以思考的空间，一句话题解使用白色字体</p>
<ul>
<li>题解目录<ul>
<li>BZOJ阶段性汇总I<ul>
<li><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1010" target="_blank" rel="external">1010: [HNOI2008]玩具装箱toy</a> <font color="#FFFFFF">斜率优化DP </font></li>
<li><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1026" target="_blank" rel="external">1026: [SCOI2009]windy数</a> <font color="#FFFFFF">数位DP</font></li>
<li><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1076" target="_blank" rel="external">1076: [SCOI2008]奖励关</a> <font color="#FFFFFF">状压DP</font></li>
<li><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1087" target="_blank" rel="external">1087: [SCOI2005]互不侵犯King</a> <font color="#FFFFFF">状压DP</font></li>
<li><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1096" target="_blank" rel="external">1096: [ZJOI2007]仓库建设</a> <font color="#FFFFFF">斜率优化DP </font></li>
<li><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1103" target="_blank" rel="external">1103: [POI2007]大都市meg</a> <font color="#FFFFFF">DFS序+数据结构维护</font></li>
<li><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1113" target="_blank" rel="external">1113: [Poi2008]海报PLA</a> <font color="#FFFFFF">单调栈</font></li>
<li><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1115" target="_blank" rel="external">1115: [POI2009]石子游戏Kam</a> <font color="#FFFFFF">阶梯Nim</font></li>
<li><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1116" target="_blank" rel="external">1116: [POI2008]CLO</a> <font color="#FFFFFF">最小情形分析</font></li>
<li><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1142" target="_blank" rel="external">1142: [POI2009]Tab</a> <font color="#FFFFFF">思维题+理解题意</font></li>
</ul>
</li>
<li>BZOJ阶段性汇总II<ul>
<li><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1207" target="_blank" rel="external">1207: [HNOI2004]打鼹鼠</a> <font color="#FFFFFF">简单DP</font></li>
<li><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1513" target="_blank" rel="external">1513: [POI2006]Tet-Tetris 3D</a> <font color="#FFFFFF">树套树+标记永久化</font></li>
<li><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2333" target="_blank" rel="external">2333: [SCOI2011]棘手的操作</a> <font color="#FFFFFF">可并堆/本人发明的双平衡树</font></li>
<li><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2333" target="_blank" rel="external">2456: mode</a> <font color="#FFFFFF">绝对众数问题（抵消法）</font></li>
<li><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2565" target="_blank" rel="external">2565: 最长双回文串</a> <font color="#FFFFFF">Manacher</font></li>
<li><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2916" target="_blank" rel="external">2916: [Poi1997]Monochromatic Triangles</a> <font color="#FFFFFF">组合题+取反（数学思维）</font></li>
<li><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3038" target="_blank" rel="external">3038: 上帝造题的七分钟2</a> <font color="#FFFFFF">平摊分析线段树</font></li>
<li><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3209" target="_blank" rel="external">3209: 花神的数论题</a> <font color="#FFFFFF">数位DP</font></li>
<li><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3358" target="_blank" rel="external">3358: [Usaco2004 Jan]洪水</a> <font color="#FFFFFF">二分答案</font></li>
<li><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3366" target="_blank" rel="external">3366: [Usaco2004 Feb]Breeding 奶牛饲育</a> <font color="#FFFFFF">递归</font></li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;BZOJ的题解目录&lt;br&gt;
    
    </summary>
    
    
      <category term="BZOJ" scheme="https://goseqh.tk/tags/BZOJ/"/>
    
  </entry>
  
  <entry>
    <title>2017百度之星复赛参赛总结</title>
    <link href="https://goseqh.tk/2017/08/18/2017%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F%E5%A4%8D%E8%B5%9B%E5%8F%82%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
    <id>https://goseqh.tk/2017/08/18/2017百度之星复赛参赛总结/</id>
    <published>2017-08-18T08:41:41.000Z</published>
    <updated>2017-08-18T09:08:26.524Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>很显然，因为我进不了决赛所以只能在这里写一下复赛的参赛感想，我真是太弱了。。。<br><a id="more"></a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>感觉这次其实考的很不好，首先是其中一场初赛才考了248名，实际上是很差的，然后就是这次复赛，排名仅仅为380，虽说一副有T恤的样子，但却从内心感到了更大的挫败感，这次dyh大神直接AK虐全场，好像只用了一小时四十分钟就全做完了，而我一小时四分钟的时候做的第二道题刚过。。。（一共有六道题）</p>
<p>自己想了想，大致有如下几点原因吧：</p>
<ul>
<li>根本原因：水平不够，能力不足</li>
<li>主观因素：<strong>不够细心，程序总是有各种漏洞</strong>，导致调试程序时间过多，分数随之降低许多，这一点，从今以后要特别注意</li>
<li>客观因素：自己参加这种$Codeforces$赛制的比赛还比较少，未形成固定的解题策略，总是手忙脚乱，心神不宁，导致程序错误百出，还检查不出来</li>
</ul>
<p>其实我最想说的，就是我发现我自己总是把时间太多地浪费在调试程序上，我不明白为什么我的程序会有许多的错误，而且常常是一些十分隐蔽的小型错误，虽然最后提交上去以后基本没有什么问题，但是在本地测试的时候总是会出现各种各样的错误</p>
<p>我觉得，这是OI赛制所带来的弊端。OI限定时间，比赛结束后再统一测评，每个人都有充足的时间思考题目，调试程序，最后按照大家通过测试点的数目给出部分分。这样的赛制，使我们变得怠惰，因把握充足的时间，而失去了对时间的敏感性。而CF赛制下的比赛，每一秒钟，都在决定你的最终排名，你只有在所有的方面，比如思考，编写程序，调试程序这些步骤上，全都尽可能地加快自己的速度，同时保证自己的准确度，才能超越对手，获得胜利</p>
<p>所以，通过这些对比和分析，我们可以发现，其实CF赛制是一种考察面更广，难度更大的赛制，可以说，<strong>CF赛制才真正地考量选手的综合实力</strong></p>
<p>通过这样的比赛，我也发现我个人的代码准确度实在有待提高。专注，坚持，细致，我希望未来的我，能够真正地拥有这三种宝贵的行为财富</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;很显然，因为我进不了决赛所以只能在这里写一下复赛的参赛感想，我真是太弱了。。。&lt;br&gt;
    
    </summary>
    
    
      <category term="百度之星" scheme="https://goseqh.tk/tags/%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F/"/>
    
      <category term="参赛总结" scheme="https://goseqh.tk/tags/%E5%8F%82%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
    
      <category term="感悟" scheme="https://goseqh.tk/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>Catalan数详解</title>
    <link href="https://goseqh.tk/2017/08/17/Catalan%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
    <id>https://goseqh.tk/2017/08/17/Catalan数详解/</id>
    <published>2017-08-17T05:29:06.000Z</published>
    <updated>2017-08-17T05:38:09.169Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>翻以前的老文章突然看到这一篇，感觉不错所以放到博客上。。。<br><a id="more"></a></p>
<h1 id="Catalan数详解"><a href="#Catalan数详解" class="headerlink" title="Catalan数详解"></a>Catalan数详解</h1><p>最近突然发现我学了假的Catalan数，居然还有那么多我不知道的东西，下面简单地介绍一下：</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>这个应该都知道吧，就是这样的一个数列：</p>
<script type="math/tex; mode=display">f(0)=1,f(1)=1,f(n)=\sum_{i=0}^{n-1}f(i)*f(n-1-i)</script><p>前几项大概是这样的：<br>$1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, \cdots$</p>
<p>这个东西看起来没什么用，实际上有许多的问题与模型内部都蕴含着Catalan的思想方法，下面简单地对模型进行一下归纳：</p>
<h2 id="常见模型"><a href="#常见模型" class="headerlink" title="常见模型"></a>常见模型</h2><h3 id="合法括号序列数"><a href="#合法括号序列数" class="headerlink" title="合法括号序列数"></a>合法括号序列数</h3><p>有一个长为$2n$的括号序列，其中合法的序列个数为多少？（注：合法的括号序列指的是前后括号完全匹配的序列）</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>大概是这样的，对于一个括号序列，它可以用比它短的括号序列递推地求出来，考虑到序列的可拼接性，我们可以将两个较短的括号序列拼在一起，形成这个较长的序列，但是，我们很容易发现，这样做会产生许多的重复的序列，我们并不想看到这样的事情发生，所以我们需要想一个去除重复序列的方法</p>
<p>我们可以考虑一种特殊的性质，非对称性，我们可以将其中一侧进行处理，使得无论如何左半部分都不会与右半部分相同，这样就完美的解决了问题，所以，我们可以为左半部分套上一对括号，即这个样子：<script type="math/tex">(\mbox{ }f(i)\mbox{ })\mbox{ }f(n-1-i)</script><br>很容易发现这样一定是正确的</p>
<p>注意这个模型很重要，我们会在后面反复地进行使用</p>
<h3 id="多边形的三角剖分方案数"><a href="#多边形的三角剖分方案数" class="headerlink" title="多边形的三角剖分方案数"></a>多边形的三角剖分方案数</h3><p>给一个凸的$n$多边形，将它进行三角剖分的方案数有多少？（这个应该很好理解）</p>
<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>其实这道题就是在多边形内连对角线进行分割，由于分割完后的两半部分具有很明显的独立性，所以我们可以递推求解，很容易知道这种递推关系满足Catalan数，因为两边子问题的大小的和为$n-1$，这应该很好理解</p>
<h2 id="总结归纳"><a href="#总结归纳" class="headerlink" title="总结归纳"></a>总结归纳</h2><p>为什么上面只选择了这两个模型进行预先说明呢？这是因为这两种模型是许多问题的基础，而且这两个模型分别代表了两种类型，这两种类型的相互转化并不很容易，所以特别进行了分类</p>
<p>下面对应地给出上面两种模型所代表的类型：</p>
<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><h3 id="括号序列型"><a href="#括号序列型" class="headerlink" title="括号序列型"></a>括号序列型</h3><p>括号序列，可以看做是一个01序列，序列中0与1的数量相同，而且任何位置以及它之前的位置中的1的数量都不超过0的数量。当问题可以转化为这种形式时，它就可以类比上面方法求解</p>
<h3 id="三角剖分型"><a href="#三角剖分型" class="headerlink" title="三角剖分型"></a>三角剖分型</h3><p>这种问题的显著特征是，它的子问题之间的独立性十分明显，可以通过对两边的方案进行直接的乘法原理得出答案，这种类型可以使用三角剖分的思想进行求解</p>
<h2 id="更多问题"><a href="#更多问题" class="headerlink" title="更多问题"></a>更多问题</h2><p>讲解了这么多，下面加入一些题目进行体会练习，请读者自行思考</p>
<h3 id="出栈次序问题"><a href="#出栈次序问题" class="headerlink" title="出栈次序问题"></a>出栈次序问题</h3><p>一个栈(无穷大)的进栈序列为1，2，3，…，n，有多少个不同的出栈序列?（本题有两种思考方式，一种不具有推广性，但思维巧妙，另一种则是使用上述转化的方法）</p>
<h3 id="买票找零问题"><a href="#买票找零问题" class="headerlink" title="买票找零问题"></a>买票找零问题</h3><p>有2n个人排成一行进入剧场。入场费5元。其中只有n个人有一张5元钞票，另外n人只有10元钞票，剧院无其它钞票，问有多少中方法使得只要有10元的人买票，售票处就有5元的钞票找零？</p>
<h3 id="寻路问题"><a href="#寻路问题" class="headerlink" title="寻路问题"></a>寻路问题</h3><p>一位大城市的律师在她住所以北n个街区和以东n个街区处工作。每天她走2n个街区去上班。如果她从不穿越（但可以碰到）从家到办公室的对角线，那么有多少条可能的道路？</p>
<h3 id="航线分配问题"><a href="#航线分配问题" class="headerlink" title="航线分配问题"></a>航线分配问题</h3><p>在圆上选择2n个点,将这些点成对连接起来使得所得到的n条线段不相交的方法数？</p>
<h3 id="BST问题"><a href="#BST问题" class="headerlink" title="BST问题"></a>BST问题</h3><p>给定N个节点，能构成多少种不同的二叉搜索树？</p>
<h3 id="矩阵连乘问题"><a href="#矩阵连乘问题" class="headerlink" title="矩阵连乘问题"></a>矩阵连乘问题</h3><p>$P=a_1×a_2×a_3×\cdots×a_n$，依据乘法结合律，不改变其顺序，只用括号表示成对的乘积，试问有几种括号化的方案？</p>
<h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>如果你都思考出来了，那么你对Catalan的理解已经足够了，今天的讲解就先到此位置啦，ヾ(￣▽￣)Bye~Bye~</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;翻以前的老文章突然看到这一篇，感觉不错所以放到博客上。。。&lt;br&gt;
    
    </summary>
    
    
      <category term="数学" scheme="https://goseqh.tk/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="组合数学" scheme="https://goseqh.tk/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="Catalan数" scheme="https://goseqh.tk/tags/Catalan%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>FFT,NTT,FWT详解</title>
    <link href="https://goseqh.tk/2017/08/16/FFT-NTT-FWT%E8%AF%A6%E8%A7%A3/"/>
    <id>https://goseqh.tk/2017/08/16/FFT-NTT-FWT详解/</id>
    <published>2017-08-16T13:41:59.000Z</published>
    <updated>2017-08-17T05:30:03.673Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>最近集中攻略了一下数学内容，感觉对FFT,NTT,FWT这三种变换有了新的理解与感受，所以用这篇文章来分享最近新的收获<br><a id="more"></a><br>那么还是按照标题的顺序逐个予以讲解</p>
<h1 id="快速傅里叶变换-FFT"><a href="#快速傅里叶变换-FFT" class="headerlink" title="快速傅里叶变换(FFT)"></a>快速傅里叶变换(FFT)</h1><h2 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h2><p>这种变化十分重要，不仅仅是在信息学竞赛上，这个算法曾被称为二十世纪最伟大的发明之一，由此，它的重要性可见一斑。下面，我们就要解开这个算法的神秘面纱，考虑到它的难度，本文讲解着力于使概念清晰易懂（当然，前提是你已经熟练掌握了前置技能，因为如果再加上前置技能的讲解，本文的篇幅就太长了），深入浅出，避免知其然而不知其所以然的常见学习问题，那么，这就开始吧！</p>
<h2 id="前置技能"><a href="#前置技能" class="headerlink" title="前置技能"></a>前置技能</h2><p>高中数学的复数相关知识以及基础的线性代数知识（矩阵运算及逆矩阵）</p>
<h2 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h2><p>我们采用这样的记号：$\xi_k^i$，来表示$n$次单位根的$k$次方，其中$\xi_k^0 = 1$<br>那么，大家应该都学过复数（就是没学过是不是也听说过一些呢），复数里面的单位根有些比较优美的性质，就是这两个：</p>
<ul>
<li><script type="math/tex; mode=display">\xi_n^{k + \frac{n}{2}} =- \xi_n^{k}</script></li>
<li><script type="math/tex; mode=display">\xi_n^{2k} = \xi_{\frac{n}{2}}^k</script>应该是挺显然的，放在复平面上一眼就看得出来</li>
</ul>
<p>然后，我们需要知道的是，原本DFT的时间复杂度是$O(n ^ 2)$的，就是采用$O(n)$个不同的点($x$值)，代入到多项式中，求出点值，这样就是离散傅里叶变换，就是把多项式从系数表达转向点值表达的过程</p>
<p>那么，FFT是如何做到在$O(n \log n)$时间内就求出$O(n)$个点的点值的呢？原因就在于，它利用了复数单位根的性质，而且必须是一个$2$的整数次幂的单位根，才能很好地实现快速运算</p>
<p>具体的实现方法，很显然就是要使用上面刚介绍过的两个性质，我们可以考虑这样的计算式:</p>
<script type="math/tex; mode=display">f(x)=  a_0x^0+a_1x^1+a_2x^2+\cdots + a_{n -1}x^{n - 1}</script><p>我们此时把某个单位根代入，则有:</p>
<script type="math/tex; mode=display">f({\xi_n^k})=  a_0{(\xi_n^k)}^0+a_1{(\xi_n^k)}^1+a_2{(\xi_n^k)}^2+\cdots + a_{n -1}{(\xi_n^k)}^{n - 1}</script><p>由单位根的定义及运算，我们可以得到：</p>
<script type="math/tex; mode=display">f({\xi_n^k})=  a_0\xi_n^{0}+a_1\xi_n^{k}+a_2\xi_n^{2k}+\cdots + a_{n -1}\xi_n^{(n - 1)k}</script><p>这时，我们进行蝴蝶操作，同时结合上面提到的第二条性质，可以得到：</p>
<script type="math/tex; mode=display">f({\xi_n^k})=  (a_0\xi_{\frac{n}{2}}^{0}+a_2\xi_{\frac{n}{2}}^{k}+\cdots +a_{n - 2}\xi_{\frac{n}{2}}^{\frac{(n -2)k}{2}})+ \xi_n ^ k * (a_1\xi_{\frac{n}{2}}^{0}+a_3\xi_{\frac{n}{2}}^{k}+\cdots +a_{n - 1}\xi_{\frac{n}{2}}^{\frac{(n -2)k}{2}} )</script><p>我们观察式子的这两个部分。可以发现，左右两部分就是与原问题本质相同，但规模仅为原问题一半的递归子问题（因为相当于对左右两部分分别代入了$\xi_{\frac{n}{2}}^{k}$继续进行计算），这样我们就可以通过递归来进行求解</p>
<p>但是，如果你在计算的时候，是把每一个点都这样直接代入计算的话，复杂度并没有什么变化，仍然是$O(n^2)$，还会因为递归而变慢，显然FFT不是这样处理的</p>
<p>那么我们该怎么办呢？我们考虑同时计算这$O(n)$个点的点值，在合并的时候，少计算一些点，利用性质直接运算得出某个点的点值，这样不就可以节约很多的时间了吗？我们继续考虑上面的式子，假设递归返回到这一步的时候（注意，如果这样说的话那么式子中的$n$就不一定是原序列的长度了，而有可能是它的子序列的长度），对于上个式子中的两个部分，我们已经分别求出了$\xi_\frac{n}{2}^{ik}(i = 0,1,2,\cdots ,\frac{n - 2}{2})$这些点对应的点值，那么，我们要思考的就是如何把这些点值在这一层合并在一起</p>
<p>我们可以发现，对于$k = 0,1,2,\cdots ,\frac{n - 2}{2}$，我们只需要直接合并就可以了（$左 +\xi_n ^ k * 右$）</p>
<p>而对于$k = \frac{n}{2},\frac{n}{2} + 1,\frac{n}{2} + 2,\cdots , n - 1$，在左右两边已经求出的点值的点集中，似乎并没有，这应该很显然，左右只有$\frac{n}{2}$个点的点值</p>
<p>那么我们该怎么办呢？考虑上面的两个性质中的第一条，可以知道对于$k = \frac{n}{2},\frac{n}{2} + 1,\frac{n}{2} + 2,\cdots , n - 1$，有$\xi_{n}^{k}= -{\xi_{n}^{k - \frac{n}{2}}}$，这样，我们只要在右边添一个负号，就可以像上面一样直接合并了，因为此时$k$相当于被限定在了$0,1,2,\cdots ,\frac{n - 2}{2}$这个范围中，而左右两边式子里面的指数都是偶数，所以负号就被和谐掉了，只有外边单独提出来的那个单位根$\xi_n^k$产生了一个负号，所以在右边直接添上即可直接合并（$左 -{\xi_{n}^{k - \frac{n}{2}}} * 右$）</p>
<p>这样，我们每次需要$O(n)$的时间进行合并，一共只会进行$O(\log n)$次这样的合并，所以复杂度为$O(n \log n)$</p>
<p>那么我们现在就是以很高的效率求出了点值，对于多项式卷积，我们就可以对每个点都对应地进行两个点值的相乘，得到了新的点值表达的多项式，然而我们并不喜欢点值表达的多项式，所以我们需要IDFT，即逆离散傅里叶变换，当然，你要是暴力求的话，就是高斯消元解方程的复杂度，前面的工作就都变得毫无意义了，很明显，我们需要$O(n \log n)$复杂度的逆算法，即IFFT，逆快速傅里叶变换</p>
<p>怎么做呢？我们考虑刚才都做了什么，我们先构造一个系数矩阵：</p>
<script type="math/tex; mode=display">
A=
\begin{bmatrix}
{\xi_n^{0}}&{\xi_n^{0}}&{\xi_n^{0}}&\cdots &{\xi_n^{0}}\\
{\xi_n^{0}}&{\xi_n^{1}}&{\xi_n^{2}}&\cdots &{\xi_n^{n - 1}}\\
\xi_n^{0}&{\xi_n^{2}}&{\xi_n^{4}}&\cdots &{\xi_n^{2*(n - 1)}}\\
\vdots&\vdots&\vdots&\ddots&\vdots\\
\xi_n^{0}&\xi_n^{n - 1}&\xi_n^{2*(n - 1)}&\cdots&\xi_n^{(n - 1)^2}
\end{bmatrix}</script><p>然后我们做的事情可以用下面的式子来表达：</p>
<script type="math/tex; mode=display">

\begin{bmatrix}
a_0 & a_1 & a_2 & \cdots&  a_{n - 1}
\end{bmatrix} * A
 = 
\begin{bmatrix}
f(\xi_n^0) & f(\xi_n^1) & f(\xi_n^2) & \cdots&  f(\xi_n^{n - 1})
\end{bmatrix}</script><p>那么，我们现在要做的，就是乘一个逆矩阵，这个逆矩阵即为中间的那一堆复数形成的矩阵的逆矩阵，而这个逆矩阵即为：</p>
<script type="math/tex; mode=display">
A^{-1}=
\frac{1}{n} * 
\begin{bmatrix}
{\xi_n^{0}}&{\xi_n^{0}}&{\xi_n^{0}}&\cdots &{\xi_n^{0}}\\
{-\xi_n^{0}}&{-\xi_n^{1}}&{-\xi_n^{2}}&\cdots &{-\xi_n^{n - 1}}\\
\xi_n^{0}&{\xi_n^{2}}&{\xi_n^{4}}&\cdots &{\xi_n^{2*(n - 1)}}\\
\vdots&\vdots&\vdots&\ddots&\vdots\\
-\xi_n^{0}&-\xi_n^{n - 1}&-\xi_n^{2*(n - 1)}&\cdots&-\xi_n^{(n - 1)^2}
\end{bmatrix}</script><p><del>我就不说明为什么是这样了，自学线代吧</del></p>
<p>那么，乘上这个矩阵后，上面的式子就化为：</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
a_0 & a_1 & a_2 & \cdots&  a_{n - 1}
\end{bmatrix} 
 = 
\begin{bmatrix}
f(\xi_n^0) & f(\xi_n^1) & f(\xi_n^2) & \cdots&  f(\xi_n^{n - 1})
\end{bmatrix}*A^{-1}</script><p>这样看来，正逆变换的本质也是相同的，我们更深入的观察，这就是一个反演的优美例子，所以FFT大概就是这些内容，有没有理解呢？</p>
<p>（其实非常简单，理解起来应该几乎没有任何难度吧。。。）<del>当然，前提是文章写的好</del></p>
<p>下面提供一份代码，为了增进理解，在代码中的关键部分都标出了上面讲解在代码中的对应部分：</p>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">complex</span>&#123;</span></div><div class="line">    <span class="keyword">double</span> r, i;</div><div class="line">    <span class="keyword">complex</span>(<span class="keyword">double</span> r, <span class="keyword">double</span> i) : r(r), i(i)&#123;&#125;</div><div class="line">    <span class="keyword">complex</span>()&#123;&#125;</div><div class="line">&#125;com;</div><div class="line"></div><div class="line">com <span class="keyword">operator</span> + (com a, com b)&#123;</div><div class="line">    <span class="keyword">return</span> com(a.r + b.r, a.i + b.i);</div><div class="line">&#125;</div><div class="line">com <span class="keyword">operator</span> - (com a, com b)&#123;</div><div class="line">    <span class="keyword">return</span> com(a.r - b.r, a.i - b.i);</div><div class="line">&#125;</div><div class="line">com <span class="keyword">operator</span> * (com a, com b)&#123;</div><div class="line">    <span class="keyword">return</span> com(a.r * b.r - a.i * b.i, a.r * b.i + a.i * b.r);</div><div class="line">&#125;</div><div class="line">com <span class="keyword">operator</span> / (com a, <span class="keyword">int</span> k)&#123;</div><div class="line">    <span class="keyword">return</span> com(a.r / k, a.i / k);</div><div class="line">&#125;</div><div class="line"><span class="function">com <span class="title">ex</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> com(<span class="built_in">cos</span>(x), <span class="built_in">sin</span>(x));</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> rev[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> bit)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span> &lt;&lt; bit); i++)&#123;</div><div class="line">        rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));<span class="comment">//蝴蝶操作需要的预处理，可以自己打出来看看是什么</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(com* a, <span class="keyword">int</span> n, <span class="keyword">int</span> dft)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span> (i &gt; rev[i]) swap(a[i], a[rev[i]]);<span class="comment">//蝴蝶操作预处理</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> step = <span class="number">1</span>; step &lt; n; step &lt;&lt;= <span class="number">1</span>)&#123;<span class="comment">//枚举层数，一开始为最低层</span></div><div class="line">        com wn = ex(pi * dft / step);<span class="comment">//当前层的单位根，逆变换需要带负号</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += step &lt;&lt; <span class="number">1</span>)&#123;<span class="comment">//对应一个式子，step &lt;&lt; 1　即包含了这个式子的左半部分与右半部分</span></div><div class="line">            com wnk = com(<span class="number">1</span>, <span class="number">0</span>);<span class="comment">//当前合并到的点</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; i + step; j++)&#123;<span class="comment">//当前处理到的点所对应点值数组的位置</span></div><div class="line">                com x = a[j];</div><div class="line">                com y = wnk * a[j + step];<span class="comment">//这两个就是左右两个部分式子分别对应的点值</span></div><div class="line">                a[j] = x + y;</div><div class="line">                a[j + step] = x - y;<span class="comment">//这就是对左右两边的点值的合并</span></div><div class="line">                wnk = wnk * wn;<span class="comment">//处理下一个点</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (dft == <span class="number">-1</span>) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) a[i] = a[i] / n;<span class="comment">//逆变换最后需要除以n</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="数论快速变换-NTT"><a href="#数论快速变换-NTT" class="headerlink" title="数论快速变换(NTT)"></a>数论快速变换(NTT)</h1><h2 id="前置技能-1"><a href="#前置技能-1" class="headerlink" title="前置技能"></a>前置技能</h2><p>初等数论（原根相关理论）</p>
<h2 id="讲解-1"><a href="#讲解-1" class="headerlink" title="讲解"></a>讲解</h2><p>其实和FFT是完全相同的，可以说毫无差别。。。只是把复数体系换为了数论上的原根体系，而且那两个重要的性质仍然成立</p>
<p>所以这需要取模的数必须形如$k * 2^\alpha + 1$，其中$k$与$\alpha$均为整数，且$k$为奇数，这样结合费马小定理与原根理论就可以和复数体系完全对应，推导过程也完全相同，故本处不再赘述</p>
<p>简单介绍一下原根？<del>凑凑篇幅</del></p>
<p>就是对于一个数$\xi$，如果最小的满足$\xi^k \equiv 1$（在模$P$意义下）的$k$等于$p-1$，那么这个数$\xi$就被称为模$P$意义下的原根</p>
<p>怎么样，是不是很绕啊，那个$P$就是上文提到的，形如$k * 2^\alpha + 1$的质数，它是作为模数出现的</p>
<p>这样的话，仔细想想应该就能发现它和复数体系的本质相同之处了</p>
<h2 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h2><p>留坑待补。。。</p>
<h1 id="快速沃尔什变换-FWT"><a href="#快速沃尔什变换-FWT" class="headerlink" title="快速沃尔什变换(FWT)"></a>快速沃尔什变换(FWT)</h1><h2 id="总述-1"><a href="#总述-1" class="headerlink" title="总述"></a>总述</h2><p>虽然这几个变换都有着相同的前缀和后缀，但是FWT的思想与前面两个并不相同，我们需要立足于位运算的本身特性来理解FWT，相对于FFT来说，FFT求的是多项式的卷积，而FWT则是位运算卷积，前面的多项式的点值求法应该很好理解，但是到了FWT，我们就要稍稍动一下脑筋了（虽然它们的处理过程是相同的，都是先转为点值表达，然后相乘，再由点值表达转回系数表达），与其说这是点值表达，不如说成是将两个数列中有相同特征的元素，聚到符合条件的下标$i$上，形成许多元素的集合，然后我们对应地把相同下标下的两个不同集合的元素做乘积（两个不同集合，指的是一个集合的元素来自于数列${a_i}$，另一个来源于数列${b_i}$），然后再把新的元素集合中的元素回归到新数列$${c_i}$中（此处如果看不懂可以跳过）</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li>对应位置：指在当前的合并过程中，左半部分与右半部分相对各自的起始位置距离相同的位置</li>
<li>当前位：指当前正在合并的二进制位（注意，当前被合并的子树中还不存在当前位）</li>
<li>操作法则：指合并过程中的左右转移情况</li>
</ul>
<p>对于其他的概念，可能不是很常用，如果遇到可联系上下文进行体会</p>
<h2 id="讲解-2"><a href="#讲解-2" class="headerlink" title="讲解"></a>讲解</h2><p>我们考虑这样的一个问题：</p>
<p>给定两个数列${a_i}$与${b_i}$，我们现在要求一个数列${c_i}$，它的计算方式如下：</p>
<script type="math/tex; mode=display">c_i = \sum_{j \oplus k = i}a_j * b_k</script><p>其中$\oplus$是任意的一个位运算符</p>
<p>这个问题就是FWT的经典问题，被称作位运算卷积，由于位运算的多样性，我们对位运算进行逐个考虑</p>
<h3 id="与运算和或运算的FWT"><a href="#与运算和或运算的FWT" class="headerlink" title="与运算和或运算的FWT"></a>与运算和或运算的FWT</h3><p>根据开头的总述所言，我们现在要做的就是找出这两种位运算的点值表达，下面我们以或运算为例进行讲解：</p>
<p>如果我们求出了两个式子分别的点值表达，我们就需要把对应地它们乘在一起，这说明，对应的两个点值表达里面所包含的元素，如果我们在两个点值表达里面分别任选一个，那么这两个元素的组合一定是合法的组合，换句话说，就是把这两个点值表达看作是二分图，我们如果直接乘起来，相当于把二分图中所有能连的边都连了，而每条连边代表一个卷积项$a_j * b_k$的选择方案，所以这告诉我们，这两部分元素的任意组合都是合法的（根据总述的理解）</p>
<p>那么，提到那么多次的“元素的集合”究竟是什么样子的呢？</p>
<p>我们再考虑一个经典问题：给定一个数列${a_i}$，我们要求数列${b_i}$，计算方式如下：</p>
<script type="math/tex; mode=display">b_i = \sum_{(j|i) = i}a_j</script><p>其中$|$表示或运算</p>
<p>下面讲解求解这类问题的<strong>按位合并方法</strong>，这个十分重要，在几乎所有的FWT计算中都需要用到，所以请务必理解这样的计算过程</p>
<p>根据位运算的<strong>位独立性</strong>，我们递归地考虑问题，假设我们现在从最低位开始，类比FFT的计算过程，就是这个样子的<br><img src="./img1.png" alt="img1"><br>然后我们考虑按位合并，在兄弟结点之间，左边的表示<strong>当前位</strong>为0，右边的表示<strong>当前位</strong>为1，那么，如何合并呢？我们定义一下结点表示什么，在当前层未进行合并时，结点上的数表示<strong>已经</strong>从自己的子树中拥有的所有$a_j$合并出来了答案，即从里面筛选出来了满足$(j|i)=i$的$j$，并把这样的$a_j$的值加入到了结点表示的答案中所得到的最终答案</p>
<p>而在当前层合并完以后，我们就要把这样的值向上传递，他们就不在原来的位置了，而到了新位置后，又成为了当前层未进行合并的结点，所以无需定义当前层的已合并结点</p>
<p>具体的合并方法是什么呢？我们这样想，如果一个$a_j$可以被算到左边结点的答案里，而左边结点当前位又是0，所以$j$的当前位一定是0，那么，我们把它们加到右边结点中，仍然满足$(j|i)=i$的性质，所以我们的合并过程就是，左边不变，把左边<strong>对应位置</strong>逐个加到右边的<strong>对应位置</strong>上，而左边显然无法继续添加上什么了</p>
<p>注意，每个结点不止表示一个$b_i$，而是表示许多这样的$b_i$，且同一层节点表示的$b_i$数量相同，不同层的不同，且相邻两层表示的数量，上面层是下面层的二倍（因为发生了合并）</p>
<p>于是就变成了这个样子：<br><img src="./img2.png" alt="img2"></p>
<p>我们继续向上合并，可以得到这样的东西：<br><img src="./img3.png" alt="img3"><br>注意理解<strong>对应位置</strong>的含义，对应位置这个概念很重要，会用在几乎所有的推导中，在FFT里面忘了说了。。。</p>
<p>这样应该能理解了吧，如果还不懂，就结合讲解与操作过程图相互照应地看即可</p>
<p>这样，根节点只有一个，所以我们不需要再合并了，根节点对应的数列，就是我们想要的数列${b_i}$</p>
<p>我们概括地说，在这个问题中，我们的操作法则为$左=左，右=左+右$，为了方便，我们称这个问题是或运算FWT的求点值过程，简称或FWT</p>
<p>以后，我们对于一个问题，只写出它的操作法则，就不会再详细地重现上面合并的过程了</p>
<p>回到原来的思路上，我们求出了这样的数列${b_i}$，那么它究竟有什么用呢？其实，数列${b_i}$就是我上文所说的“元素的集合”，它相当于有许多个集合，每个集合里面都聚集了一些符合条件($(j|i)=i$)的$a_j$，也就是总述里“将数列中有相同特征的元素，聚到符合条件的下标$i$上，形成许多元素的集合”，仔细想想，是不是这样的？</p>
<p>然后，我们还有一个式子，证明应该很容易，但是想要独立想到。。。</p>
<script type="math/tex; mode=display">(j|i)=i,(k|i)=i\leftrightarrow ((j|k)|i)=i</script><p>这个命题是充分必要的，证明直接联系或运算定义即可</p>
<p>这样，再回到更远的思路上来，我们在解决或运算FWT，我们分别对给定的两个数列${a_i}$与${b_i}$，像上文一样进行或FWT操作，求出新的数列${a’_i}$与${b’_i}$，然后对应位置直接相乘，这就是总述里面说的“将两个数列中有相同特征的元素，聚到符合条件的下标$i$上，形成许多元素的集合，然后我们对应地把相同下标下的两个不同集合的元素做乘积”</p>
<p>所以，我们相当于得到了一个数列${c’_i}$，即${c_i}$做或FWT的结果，我们要求${c_i}$，那么就要把这个过程逆过来，即总述里面的“把新的元素集合中的元素回归到新数列中”</p>
<p>我们成这个过程为或IFWT（逆FWT），即或运算的求系数过程</p>
<p>那么，现在正变换已经讲完了，逆变换还不会？这里面不需要线性代数的那一套东西，因为我们就是像上文一样的操作的，所以我们直接把操作逆过来即可，操作法则：$左=左，右=右-左$</p>
<p>根据神TM的位运算的位独立性，在IFWT中，我们无论是先递归，再处理当前位，还是反过来都没有关系，因为位与位之间互不影响（其实我觉得不是这样理解的。。。自己用四个数试一试应该就能发现了）</p>
<p>显然你FWT就需要先递归再处理当前位，否则你当前位上什么都没有合并个×啊。。。</p>
<p>那么，这就是或运算FWT的整个过程，思路是不是非常巧妙啊？</p>
<p>对于与运算的FWT，和或运算的完全相同，把所有的或运算符替换为与运算符即可，与FWT操作法则：$左=左+右，右=右$，与IFWT操作法则：$左=左-右，右=右$</p>
<h3 id="异或运算的FWT"><a href="#异或运算的FWT" class="headerlink" title="异或运算的FWT"></a>异或运算的FWT</h3><p>为什么要单独把异或拎出来裱呢？因为这种运算和上面的两个不太相同，思考，如果我们还是用与上面完全相同的正变换过程（<script type="math/tex">(j|i)=i,(k|i)=i\leftrightarrow ((j|k)|i)=i</script>），就会出现非常尴尬的事，每个元素的集合中只有一个数，且都是相同的$a_0$，这样就毫无意义了</p>
<p>我们需要新的正变换方法，下面的这个构造就非常神奇了：</p>
<p>我们再考虑一个经典问题：给定一个数列${a_i}$，我们要求数列${b_i}$，计算方式如下：</p>
<script type="math/tex; mode=display">b_i  = \left(\sum_{(bitcount(i\&j)\&1)= 0}a_j\right)- \left(\sum_{(bitcount(i\&j)\&1)= 1}a_j\right)</script><p>其中$bitcount(x)$表示$x$的二进制表示中1的个数</p>
<p>柿子应该能看懂吧。。。其实就是考虑$bitcount$的奇偶性。。。</p>
<p>我们还是像上文那样进行合并操作，考虑当前位，这时所有左结点的子树中的$j$和$i$的当前位都是0，右结点的子树中的$j$和$i$的当前位都是1，那么，右边的$j$，如果搞到左边，那么它的$bitcount$不变（$1\&amp;0= 0 $)，奇偶性也不变，左边的到右边，显然它的$bitcount$也不会改变（$0\&amp;0=0,0\&amp;1= 0$)，奇偶性不变，而对于留守在左结点中的那些$j$来说，它们加上当前位以后没有变化，因为当前位为0，而对于右边的留守的$j$，它们的当前位是1，而$i$的当前位也是1,所以它们的$bitcount$会加一，奇偶性也随之改变，所以只有右边的留守$j$需要添加一个负号，这样的话，操作法则就呼之欲出了：$左=左+右，右=左-右$</p>
<p><strong>注意</strong>，这里有一个十分常见的错误，那就是认为右边的$j$搞到左边后需要添加负号，这又是怎么理解的呢？这种错误是<strong>当前位</strong>概念不清楚导致的，当前位此时还并没有添加到$i$和$j$上，在讨论左右的转移情况时不能连带着当前位一起考虑，只有当合并完以后，合并到父亲结点了，那么这个父亲结点的子树中的$i$与$j$才具有刚才的“当前位”</p>
<p><del>不明白吗？你一定是在逗我</del></p>
<p>这样，我们就成功地搞出了异或FWT，求完后两个做完异或FWT的数列直接乘起来，再逆回去，逆的过程很显然，就是解二元一次满秩方程解回去，操作法则：$左=\frac{左+右}{2}，右=\frac{左-右}{2}$</p>
<p>所以到这里，异或FWT的全部过程也搞完了。。。等等，为什么可以直接相乘呢？</p>
<p>我们考虑相乘的时候，发生了什么，首先我们需要一个小定理：</p>
<script type="math/tex; mode=display">(bitcount(j\&i)\&1)\land (bitcount(k\&i)\&1) = bitcount((j \land k)\&i)\&1</script><p>这个应该还是很显然的，只要考虑$i$中的二进制位就可以了</p>
<p>下面我们进行证明：<br>因为数学公式太大写不下，所以先在前面预定义一下</p>
<ul>
<li><script type="math/tex; mode=display">A_0=\left(\sum_{(bitcount(i\&j)\&1)= 0}a_j\right)</script></li>
<li><script type="math/tex; mode=display">A_1=\left(\sum_{(bitcount(i\&j)\&1)= 1}a_j\right)</script></li>
<li><script type="math/tex; mode=display">B_0=\left(\sum_{(bitcount(i\&k)\&1)= 0}b_k\right)</script></li>
<li><script type="math/tex; mode=display">B_1=\left(\sum_{(bitcount(i\&k)\&1)= 1}b_k\right)</script></li>
<li><script type="math/tex; mode=display">C_0=\left(\sum_{(bitcount(i\&(j\land k))\&1)= 0}c_{j\land k}\right)</script></li>
<li><script type="math/tex; mode=display">C_1=\left(\sum_{(bitcount(i\&(j\land k))\&1)= 1}c_{j\land k}\right)</script>那么推导过程就是这样的：<script type="math/tex; mode=display">
\begin{align}
a'_i ∗ b'_i&=(A_0-A_1)∗(B_0-B_1)\\
&=A_0 * B_0 + A_1 * B_1 - (A_0 * B_1 + A_1 * B_0)\\
&=C_0 - C_1&\mbox{(由上文的小定理知)}\\
&=c'_i
\end{align}</script>所以，我们就可以直接相乘求得${c_i}$的异或FWT，只要逆回去就可以了，上面已经提到</li>
</ul>
<p>当然，上面的全部推导过程换成或运算来完成也是可以的，但并不是完全一样，有兴趣可以自行推导</p>
<p>注意，不要只看到异或FWT的推导过程，这里面隐藏着一个重要考点，我们考虑一下这个问题：</p>
<p>给定一个数列${a_i}$，我们要求数列${b_i}$，计算方式如下：</p>
<script type="math/tex; mode=display">b_j = \sum_{0\leq j < n}((bitcount((i \mbox{ or } j)\mbox{ xor }i) + 1)\bmod 2)a_j</script><p>其中$bitcount(x)$表示$x$的二进制表示中1的个数</p>
<p>我们发现，要求的，就是一些$j$，满足将$i$中是1的位置在这样的$j$之中去除后，$j$中的1的个数为偶数，然后把这样的$j$对应的$a_j$累加进$b_i$即可</p>
<p>那么，这个东西该怎么求呢？考虑到如果我们也将$i$中的1的情况包含在内，情况会比较复杂，$j$中1的个数的奇偶性无法确定，因为有$i$的影响，所以我们想要去除$i$的影响，我们就把$i$取反，得到$i’$，那么我们要求的就是一些$j$，满足${(bitcount(j\&amp;i’)\&amp;1)=0}$，而这正是我们做异或FWT时得到的结果的一部分（<script type="math/tex">b_i  = \left(\sum_{(bitcount(i\&j)\&1)= 0}a_j\right)- \left(\sum_{(bitcount(i\&j)\&1)= 1}a_j\right)</script>的前半部分），所以此时我们需要求出<script type="math/tex">\left(\sum_{(bitcount(i\&j)\&1)= 0}a_j\right)+ \left(\sum_{(bitcount(i\&j)\&1)= 1}a_j\right)</script>，而这个就十分地显然了，因为一个数必定满足这两个部分的其中一个，所以这个式子就等于所有$a_j$的和，我们把它加到做完异或FWT的结果上，除以二，再考虑取反操作，把序列反转，得到的序列就是$b_j$了，这题让我们解密，那么我们就逆着上述过程跑一边就可以了</p>
<p>这题很好，考察的点十分隐蔽，要求我们<strong>对知识的掌握必须全面细致</strong>，而且本题也反映了一个常见思路，我们要破译由位运算组成的公式加密而成的数列，最好搞清楚它加密的操作过程，细化到操作法则，最后对于破译只需要逆过来就可以了，是一种<strong>正难则反，执果索因的思维过程</strong>（当然，是站在破译的角度说的，因为直接破译太困难，我们就先搞清它的加密过程）</p>
<h2 id="模板-2"><a href="#模板-2" class="headerlink" title="模板"></a>模板</h2><p>留坑待补。。。<del>其实很好写的，懒得写了</del></p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;最近集中攻略了一下数学内容，感觉对FFT,NTT,FWT这三种变换有了新的理解与感受，所以用这篇文章来分享最近新的收获&lt;br&gt;
    
    </summary>
    
    
      <category term="数论" scheme="https://goseqh.tk/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="数学" scheme="https://goseqh.tk/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="快速傅里叶变换(FFT)" scheme="https://goseqh.tk/tags/%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2-FFT/"/>
    
      <category term="快速数论变换(NTT)" scheme="https://goseqh.tk/tags/%E5%BF%AB%E9%80%9F%E6%95%B0%E8%AE%BA%E5%8F%98%E6%8D%A2-NTT/"/>
    
      <category term="快速沃尔什变换(FWT)" scheme="https://goseqh.tk/tags/%E5%BF%AB%E9%80%9F%E6%B2%83%E5%B0%94%E4%BB%80%E5%8F%98%E6%8D%A2-FWT/"/>
    
      <category term="线性代数" scheme="https://goseqh.tk/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
      <category term="位运算" scheme="https://goseqh.tk/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>#2031. 「SDOI2016」数字配对</title>
    <link href="https://goseqh.tk/2017/08/15/2031-%E3%80%8CSDOI2016%E3%80%8D%E6%95%B0%E5%AD%97%E9%85%8D%E5%AF%B9/"/>
    <id>https://goseqh.tk/2017/08/15/2031-「SDOI2016」数字配对/</id>
    <published>2017-08-15T03:51:01.000Z</published>
    <updated>2017-08-15T04:54:09.614Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>题解：$Libre$ $Online$ $Judge$ #$2031$. 「SDOI$2016$」数字配对<br><a id="more"></a></p>
<h1 id="LOJ-2031-「SDOI2016」数字配对"><a href="#LOJ-2031-「SDOI2016」数字配对" class="headerlink" title="LOJ 2031. 「SDOI2016」数字配对"></a>LOJ 2031. 「SDOI2016」数字配对</h1><p>内存限制：128 MiB<br>时间限制：1000 ms<br>标准输入输出<br>题目类型：传统<br>评测方式：文本比较</p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>有 $n$种数字，第$i$ 种数字是 $ a_i$​​、有 $ b_i$ 个，权值是 $ c_i$。<br>若两个数字 $ a_i$​​、$ a_j $​​ 满足，$ a_i $ 是 $a_j $​​ 的倍数，且 $a_i / a_j$ 是一个质数，那么这两个数字可以配对，并获得 $c_i \cdot c_j$ 的价值。<br>一个数字只能参与一次配对，可以不参与配对。<br>在获得的价值总和不小于 $0$ 的前提下，求最多进行多少次配对。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行一个整数 $n$。<br>第二行 $n$ 个整数 $a1,a2,…,an$。<br>第三行 $n$ 个整数 $b1,b2,…,bn$。<br>第四行 $n$ 个整数 $c1,c2,…,cn$。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行一个整数，表示最多进行多少次配对。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span></div><div class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">8</span></div><div class="line"><span class="number">2</span> <span class="number">200</span> <span class="number">7</span></div><div class="line"><span class="number">-1</span> <span class="number">-2</span> <span class="number">1</span></div></pre></td></tr></table></figure>
<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure>
<h2 id="数据范围与提示"><a href="#数据范围与提示" class="headerlink" title="数据范围与提示"></a>数据范围与提示</h2><p>测试点 1 ~ 3：$n \leq 10 $，$ a_i \leq 10 ^ 9 $，$ b_i = 1$，$\left| c_i \right| \leq 10 ^ 5$​​；<br>测试点 4 ~ 5：$n \leq 200$，$ a_i \leq 10 ^ 9 $，$b_i \leq 10 ^ 5 $​​，$c_i = 0$；<br>测试点 6 ~ 10：$n \leq 200$，$ a_i \leq 10 ^ 9 $，$b_i \leq 10 ^ 5 $​​，$\left| c_i \right| \leq 10 ^ 5$​​。</p>
<h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>本题首先就是要对每个数进行质因子分解，然后能匹配的连边就可以了，但是没想到这是一个二分图。。。</p>
<p>如果它是一个二分图，那么就可以使用多重匹配模型完美的解决本题。</p>
<p>那么为什么这是一个二分图呢？我们考虑每个数的质因子个数，相同的多次计算，那么质因子个数奇偶性相同的两个数，用大的除以小的，如果可以整除，那么最后的结果中一定含有至少偶数个质因子，而质数显然只有一个质因子，故数量奇偶性相同的两个数之间不可能会有连边，这样就形成了一个二分图，然后本题就解决了。。。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">LL n, m, s, t;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    LL next, to;</div><div class="line">    LL flow, cost;</div><div class="line">    edge(LL next, LL to, LL flow, LL cost) : next(next), to(to), flow(flow), cost(cost)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line">LL h[maxn], ct = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(LL fr, LL to, LL flow, LL cost)</span></span>&#123;</div><div class="line">    e[++ct] = edge(h[fr], to, flow, cost);</div><div class="line">    h[fr] = ct;</div><div class="line">    e[++ct] = edge(h[to], fr, <span class="number">0</span>, -cost);</div><div class="line">    h[to] = ct;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*bool BFS()&#123;</span></div><div class="line">    queue&lt;LL&gt; bfs;</div><div class="line">    bfs.push(s);</div><div class="line">    memset(d, 0, sizeof(d));</div><div class="line">    while (!bfs.empty())&#123;</div><div class="line">        LL op = bfs.front();bfs.pop();</div><div class="line">        for (LL i = h[op]; i; i = e[i].next)&#123;</div><div class="line">            if (!e[i].flow) continue;</div><div class="line">            LL k = e[i].to;</div><div class="line">            if (d[k] || k == s) continue;</div><div class="line">            d[k] = d[op] + 1;</div><div class="line">            bfs.push(k);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if (!d[t]) return false;</div><div class="line">    return true;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL DFS(LL x, LL a)&#123;</div><div class="line">    if (x == t) return a;</div><div class="line">    LL rest = a;</div><div class="line">    for (LL i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        if (!e[i].flow) continue;</div><div class="line">        LL op = e[i].to;</div><div class="line">        if (d[op] != d[x] + 1) continue;</div><div class="line">        LL k = DFS(op, min(rest, e[i].flow));</div><div class="line">        e[i].flow -= k;</div><div class="line">        e[i ^ 1].flow += k;</div><div class="line">        rest -= k;</div><div class="line">        if (!rest) return a;</div><div class="line">    &#125;</div><div class="line">    return rest - a;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void Dinic(LL&amp; maxflow)&#123;</div><div class="line">    while (BFS()) maxflow += DFS(s, INF);</div><div class="line">&#125;*/</div><div class="line"></div><div class="line"><span class="keyword">bool</span> vis2[maxn];</div><div class="line">LL p2[maxn];</div><div class="line">LL d[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">queue</span>&lt;LL&gt; spfa;</div><div class="line">    spfa.push(s);</div><div class="line">    <span class="keyword">for</span> (LL i = s; i &lt;= t; i++) d[i] = INF;</div><div class="line">    d[s] = <span class="number">0</span>;</div><div class="line">    vis2[s] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!spfa.empty())&#123;</div><div class="line">        LL op = spfa.front();spfa.pop();</div><div class="line">        <span class="keyword">for</span> (LL i = h[op]; i; i = e[i].next)&#123;</div><div class="line">            <span class="keyword">if</span> (!e[i].flow) <span class="keyword">continue</span>;</div><div class="line">            LL k = e[i].to;</div><div class="line">            <span class="keyword">if</span> (d[k] &gt; d[op] + e[i].cost)&#123;</div><div class="line">                d[k] = d[op] + e[i].cost;</div><div class="line">                p2[k] = i;</div><div class="line">                <span class="keyword">if</span> (!vis2[k])&#123;</div><div class="line">                    vis2[k] = <span class="number">1</span>;</div><div class="line">                    spfa.push(k);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        vis2[op] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (d[t] &gt;= INF) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Augment</span><span class="params">(LL&amp; maxflow, LL&amp; mincost)</span></span>&#123;</div><div class="line">    LL now = t, flow = INF;</div><div class="line">    <span class="keyword">while</span> (now != s)&#123;</div><div class="line">        LL k = p2[now];</div><div class="line">        flow = min(flow, e[k].flow);</div><div class="line">        now = e[k ^ <span class="number">1</span>].to;</div><div class="line">    &#125;</div><div class="line">    now = t;</div><div class="line">    <span class="keyword">while</span> (now != s)&#123;</div><div class="line">        LL k = p2[now];</div><div class="line">        e[k].flow -= flow;</div><div class="line">        e[k ^ <span class="number">1</span>].flow += flow;</div><div class="line">        now = e[k ^ <span class="number">1</span>].to;</div><div class="line">    &#125;</div><div class="line">    maxflow += flow, mincost += (d[t] - d[s]) * flow;</div><div class="line">    <span class="keyword">if</span> (mincost &gt; <span class="number">0</span>)&#123;</div><div class="line">        mincost -= (d[t] - d[s]) * flow;</div><div class="line">        maxflow -= flow;</div><div class="line">        maxflow += mincost / (d[s] - d[t]);</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MCMF</span><span class="params">(LL&amp; maxflow, LL&amp; mincost)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span> (SPFA() &amp;&amp; !Augment(maxflow, mincost))&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL p[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line">LL cnt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i]) p[cnt++] = i;</div><div class="line">        <span class="keyword">for</span> (LL j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * p[j] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * p[j]] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">bool</span> side[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(LL x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">2</span>; i &lt;= (LL) <span class="built_in">sqrt</span>(x); i++)&#123;</div><div class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL a[maxn];</div><div class="line">LL b[maxn];</div><div class="line">LL c[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(LL i)</span></span>&#123;</div><div class="line">    LL x = a[i];</div><div class="line">    LL con = (LL) <span class="built_in">sqrt</span>(x);</div><div class="line">    <span class="keyword">for</span> (LL j = <span class="number">2</span>; j &lt;= con; j++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[j] &amp;&amp; x % j == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">while</span> (x % j == <span class="number">0</span>)&#123;</div><div class="line">                x /= j;</div><div class="line">                side[i] ^= <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            con = (LL) <span class="built_in">sqrt</span>(x);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (x != <span class="number">1</span>) side[i] ^= <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL left[maxn];</div><div class="line">LL cntl;</div><div class="line">LL right[maxn];</div><div class="line">LL cntr;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    s = <span class="number">0</span>, t = n + <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        process(i);</div><div class="line">        <span class="keyword">if</span> (!side[i]) left[++cntl] = i;</div><div class="line">        <span class="keyword">else</span> right[++cntr] = i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (LL j = <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i == j || a[i] % a[j] != <span class="number">0</span> || !judge(a[i] / a[j])) <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span> (side[i]) Add_Edge(j, i, INF, -c[i] * c[j]);</div><div class="line">            <span class="keyword">else</span> Add_Edge(i, j, INF, -c[i] * c[j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= cntl; i++)&#123;</div><div class="line">        Add_Edge(s, left[i], b[left[i]], <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= cntr; i++)&#123;</div><div class="line">        Add_Edge(right[i], t, b[right[i]], <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    LL maxflow = <span class="number">0</span>, mincost = <span class="number">0</span>;</div><div class="line">    MCMF(maxflow, mincost);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, maxflow);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    freopen(<span class="string">"pair.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    freopen(<span class="string">"pair.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i]);</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;b[i]);</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;c[i]);</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;题解：$Libre$ $Online$ $Judge$ #$2031$. 「SDOI$2016$」数字配对&lt;br&gt;
    
    </summary>
    
    
      <category term="网络流" scheme="https://goseqh.tk/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="数学" scheme="https://goseqh.tk/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="质因子分析" scheme="https://goseqh.tk/tags/%E8%B4%A8%E5%9B%A0%E5%AD%90%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>#6203. 可持久化队列</title>
    <link href="https://goseqh.tk/2017/08/15/6203-%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E9%98%9F%E5%88%97/"/>
    <id>https://goseqh.tk/2017/08/15/6203-可持久化队列/</id>
    <published>2017-08-15T03:07:38.000Z</published>
    <updated>2017-08-15T04:53:44.090Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>题解：$Libre$ $Online$ $Judge$ # $6203$. 可持久化队列<br><a id="more"></a></p>
<h1 id="LOJ-6203-可持久化队列"><a href="#LOJ-6203-可持久化队列" class="headerlink" title="LOJ 6203. 可持久化队列"></a>LOJ 6203. 可持久化队列</h1><p>内存限制：512 MiB<br>时间限制：500 ms<br>标准输入输出<br>题目类型：传统<br>评测方式：文本比较</p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>这是一道假的模板题</p>
<p>我们有一个数组 $A$，初始时只有 $A[0]$ 是空序列。对于第 $i$ 个操作：</p>
<ul>
<li>1 ver t 表示将 $A[ver]$ <strong>复制</strong>到 $A[i]$，并在 $A[ver]$ 结尾插入元素 $t$</li>
<li>2 ver 表示将 $A[ver]$ <strong>复制</strong>到 $A[i]$，并删除 $A[ver]$ 开头的元素。</li>
</ul>
<p>此外，你需要维护一个变量 $hash$，其初始值为 $0$，每次执行完第二类操作时，将 $hash$ 变为 $(31×hash+x) \mbox{ } mod \mbox{ } 2^{32}$，其中 $x$ 是被删除的元素。</p>
<p>$hash$ 是你的最终输出的答案。</p>
<p>此外，输入数据有可能加密，取决于输入参数 $ty$ 的值。如果 $ty = 0$，那么数据没有加密；否则，$ty = 1$，那么读入 $ver$ 和 $t$ 的值，其真实值应与当前的 $hash$ 取按位异或，也就是说真实值应为 $ver \oplus hash$ 和（对于第一类操作） $t \oplus hash$。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行有两个整数，$t$ 和 $ty$，表示有多少个操作，和数据是否加密。</p>
<p>之后的 $t$ 行，每一行表示一个如上所述的操作。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>只有一行，表示执行完所有操作之后，$hash$ 的值。</p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><h3 id="样例输入一"><a href="#样例输入一" class="headerlink" title="样例输入一"></a>样例输入一</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">9 </span><span class="number">0</span></div><div class="line"><span class="symbol">1 </span><span class="number">0</span> <span class="number">1</span></div><div class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">2</span></div><div class="line"><span class="symbol">2 </span><span class="number">1</span></div><div class="line"><span class="symbol">2 </span><span class="number">2</span></div><div class="line"><span class="symbol">2 </span><span class="number">2</span></div><div class="line"><span class="symbol">2 </span><span class="number">4</span></div><div class="line"><span class="symbol">1 </span><span class="number">4</span> <span class="number">5</span></div><div class="line"><span class="symbol">2 </span><span class="number">7</span></div><div class="line"><span class="symbol">2 </span><span class="number">8</span></div></pre></td></tr></table></figure>
<h3 id="样例输出一"><a href="#样例输出一" class="headerlink" title="样例输出一"></a>样例输出一</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">29584452</span></div></pre></td></tr></table></figure>
<h3 id="样例解释一"><a href="#样例解释一" class="headerlink" title="样例解释一"></a>样例解释一</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">$i$　　</th>
<th style="text-align:left">$A[i]$</th>
<th style="text-align:left">第 $i$ 次操作删除的数（若有）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$0\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }$</td>
<td style="text-align:left">$[]\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }$</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">$1$</td>
<td style="text-align:left">$[1]$</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">$2$</td>
<td style="text-align:left">$[1,2]$</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">$3$</td>
<td style="text-align:left">$[]$</td>
<td style="text-align:left">$1$</td>
</tr>
<tr>
<td style="text-align:left">$4$</td>
<td style="text-align:left">$[2]$</td>
<td style="text-align:left">$1$</td>
</tr>
<tr>
<td style="text-align:left">$5$</td>
<td style="text-align:left">$[2]$</td>
<td style="text-align:left">$1\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }$</td>
</tr>
<tr>
<td style="text-align:left">$6$</td>
<td style="text-align:left">$[] $</td>
<td style="text-align:left">$2$</td>
</tr>
<tr>
<td style="text-align:left">$7$</td>
<td style="text-align:left">$[2,5]$</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">$8$</td>
<td style="text-align:left">$[5]$</td>
<td style="text-align:left">$2$</td>
</tr>
<tr>
<td style="text-align:left">$9$</td>
<td style="text-align:left">$[]$</td>
<td style="text-align:left">$5$</td>
</tr>
</tbody>
</table>
</div>
<h3 id="样例输入二"><a href="#样例输入二" class="headerlink" title="样例输入二"></a>样例输入二</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">9 </span><span class="number">1</span></div><div class="line"><span class="symbol">1 </span><span class="number">0</span> <span class="number">1</span></div><div class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">2</span></div><div class="line"><span class="symbol">2 </span><span class="number">1</span></div><div class="line"><span class="symbol">2 </span><span class="number">3</span></div><div class="line"><span class="symbol">2 </span><span class="number">34</span></div><div class="line"><span class="symbol">2 </span><span class="number">997</span></div><div class="line"><span class="symbol">1 </span><span class="number">30789</span> <span class="number">30788</span></div><div class="line"><span class="symbol">2 </span><span class="number">30790</span></div><div class="line"><span class="symbol">2 </span><span class="number">954345</span></div></pre></td></tr></table></figure>
<h3 id="样例输入二-1"><a href="#样例输入二-1" class="headerlink" title="样例输入二"></a>样例输入二</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">29584452</span></div></pre></td></tr></table></figure>
<h3 id="样例解释二"><a href="#样例解释二" class="headerlink" title="样例解释二"></a>样例解释二</h3><p>解密后，与样例一相同</p>
<h2 id="数据范围与提示"><a href="#数据范围与提示" class="headerlink" title="数据范围与提示"></a>数据范围与提示</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">测试点编号</th>
<th style="text-align:left">T</th>
<th style="text-align:left">ty</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$1\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }$</td>
<td style="text-align:left">$10^3\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }$</td>
<td style="text-align:left">$1$</td>
</tr>
<tr>
<td style="text-align:left">$2, 3, 4$</td>
<td style="text-align:left">$10^5$​​</td>
<td style="text-align:left">$1$</td>
</tr>
<tr>
<td style="text-align:left">$5, 6$</td>
<td style="text-align:left">$10^6$​​</td>
<td style="text-align:left">$0$</td>
</tr>
<tr>
<td style="text-align:left">$7, 8, 9, 10 $</td>
<td style="text-align:left">$10^6$</td>
<td style="text-align:left">$1\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }\mbox{ }$</td>
</tr>
</tbody>
</table>
</div>
<p>对于所有操作，$ver \geq 0$，$ver$ 小于当前操作编号。</p>
<p>对于第一类操作，$0 \leq t \lt 10000000$</p>
<p>请使用无符号整数进行输入输出！变量应使用 unsigned 类型，printf 和 scanf 应使用 %u 格式。</p>
<p>如果你使用冲击满分的算法，但是使用 scanf，你的程序很可能将花费超过 $80\%$ 的运行时间在输入数据。所以请务必使用读入优化！可以参考附加文件中 bqsg 提供的 read.cpp 实现的 A + B Problem 的程序。</p>
<h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><p>一开始用链表+Vector乱搞，结果发现炸了，暴力的复杂度，后来想到把这个结构放到一棵树上，然后我们可以倍增法寻找第$k$个祖先，复杂度也比较优越，这样，我们把每个队列看做树上的一条链，增加结点就是增加儿子并移动链的终止端，删除节点就是移动链的起始端，然后再记录一下每条链的长度就可以乱搞了</p>
<p>注意空链的特殊处理</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="comment">/*struct node&#123;</span></div><div class="line">    int val, id;</div><div class="line">    node(int val, int id) : val(val), id(id)&#123;&#125;</div><div class="line">    node()&#123;&#125;</div><div class="line">&#125;save[maxn];*/</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    node(<span class="keyword">int</span> val) : val(val)&#123;&#125;</div><div class="line">    node()&#123;&#125;</div><div class="line">&#125;save[maxn];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">int</span> fa[maxn][<span class="number">20</span>];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">queue</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> l, r, size;</div><div class="line">    <span class="built_in">queue</span>(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> size) : l(l), r(r), size(size)&#123;&#125;</div><div class="line">    <span class="built_in">queue</span>()&#123;&#125;</div><div class="line">&#125;q[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> ver, <span class="keyword">int</span> t, <span class="keyword">int</span> id)</span></span>&#123;</div><div class="line">    save[++cnt] = node(t);</div><div class="line">    fa[cnt][<span class="number">0</span>] = q[ver].r;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">30</span>; i++)&#123;</div><div class="line">        fa[cnt][i] = fa[fa[cnt][i - <span class="number">1</span>]][i - <span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">    q[id].size = q[ver].size + <span class="number">1</span>;</div><div class="line">    q[id].r = cnt;</div><div class="line">    <span class="keyword">if</span> (q[ver].size) q[id].l = q[ver].l;</div><div class="line">    <span class="keyword">else</span> q[id].l = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> ver, <span class="keyword">int</span> id)</span></span>&#123;</div><div class="line">    <span class="comment">/*if (q[ver].size == 1)&#123;</span></div><div class="line">        q[id].r = q[ver].r;</div><div class="line">        q[id].l = q[ver].l;</div><div class="line">        q[id].size == 0;</div><div class="line">        return save[q[ver].l].val;</div><div class="line">    &#125;*/</div><div class="line">    <span class="keyword">int</span> now = q[ver].r;</div><div class="line">    <span class="keyword">int</span> rest = q[ver].size - <span class="number">2</span>;</div><div class="line">    <span class="keyword">int</span> con = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (rest &gt; <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">if</span> (rest &amp; <span class="number">1</span>) now = fa[now][con];</div><div class="line">        con++;</div><div class="line">        rest &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    q[id].l = now;</div><div class="line">    q[id].r = q[ver].r;</div><div class="line">    q[id].size = q[ver].size - <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> save[q[ver].l].val;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> hash = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("queue.in", "r", stdin);</span></div><div class="line">    freopen("queue.out", "w", stdout);*/</div><div class="line">    <span class="keyword">int</span> ty;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> x, y, op;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;ty);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%u"</span>, &amp;op);</div><div class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>)&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%u%u"</span>, &amp;x, &amp;y);</div><div class="line">            <span class="keyword">if</span> (ty) x ^= hash, y ^= hash;</div><div class="line">            add(x, y, i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%u"</span>, &amp;x);</div><div class="line">            <span class="keyword">if</span> (ty) x ^= hash;</div><div class="line">            hash = <span class="number">31</span> * hash + del(x, i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%u"</span>, hash);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实正解不是这个。。。好像是一些高大上的分析，现在还没看懂。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;题解：$Libre$ $Online$ $Judge$ # $6203$. 可持久化队列&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://goseqh.tk/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="可持久化" scheme="https://goseqh.tk/tags/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>东北师大附中多校联训A层测试全AC代码合集</title>
    <link href="https://goseqh.tk/2017/08/15/%E4%B8%9C%E5%8C%97%E5%B8%88%E5%A4%A7%E9%99%84%E4%B8%AD%E5%A4%9A%E6%A0%A1%E8%81%94%E8%AE%ADA%E5%B1%82%E6%B5%8B%E8%AF%95%E5%85%A8AC%E4%BB%A3%E7%A0%81%E5%90%88%E9%9B%86/"/>
    <id>https://goseqh.tk/2017/08/15/东北师大附中多校联训A层测试全AC代码合集/</id>
    <published>2017-08-15T00:48:27.000Z</published>
    <updated>2017-08-15T02:40:15.414Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>终于把题改完了。。。下面把代码放在上面，一是作为纪念，二可用来复习，同时也会说明相关编程细节<br><a id="more"></a></p>
<p>先汇总一下新学到的东西：</p>
<h1 id="新知识汇总"><a href="#新知识汇总" class="headerlink" title="新知识汇总"></a>新知识汇总</h1><ul>
<li>LCA的欧拉序求法</li>
<li>树链剖分定理</li>
<li>有根树点分治</li>
<li>堆贪心</li>
<li>双平衡树</li>
<li>定序处理（双关键字&amp;左等右不等）</li>
<li>Kruskal思想</li>
<li>线段树实现名次树（假</li>
<li>平摊分析意义下的线段树</li>
<li>贡献法思想</li>
<li>三目运算符相关注意事项（运算顺序&amp;优先级）</li>
<li>单个逆元求法的注意事项（要用快速幂）</li>
</ul>
<p>下面开始总结：</p>
<h1 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2>

	<div class="row">
    <embed src="1.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="题目分析-amp-代码"><a href="#题目分析-amp-代码" class="headerlink" title="题目分析&amp;代码"></a>题目分析&amp;代码</h2><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><p>模拟<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> long long long</span></div><div class="line"><span class="keyword">long</span> a[<span class="number">8388700</span>];</div><div class="line"><span class="keyword">int</span> n,lim,cnt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> limN)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(l==r || r-l==<span class="number">1</span>)<span class="keyword">return</span>;<span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</div><div class="line">    a[mid]=(a[l]+a[r]+limN)%<span class="number">1000000007</span>;</div><div class="line">    limN=(limN*<span class="number">2</span>)%<span class="number">1000000007</span>;</div><div class="line">    build(l,mid,limN);build(mid,r,limN);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> l,r;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;l,&amp;r,&amp;lim);</div><div class="line">    cnt=(<span class="number">1</span>&lt;&lt;n)+<span class="number">1</span>;</div><div class="line">    a[<span class="number">1</span>]=l;a[cnt]=r;build(<span class="number">1</span>,cnt,lim);</div><div class="line">    <span class="keyword">long</span> ans=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</div><div class="line">        ans=(ans+a[i])%<span class="number">1000000007</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p>DP+数据结构优化<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x &amp; -x</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> dp[maxn];</div><div class="line"><span class="keyword">int</span> c[maxn];</div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"><span class="keyword">char</span> t[] = <span class="string">"$erewrwerwer"</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span> (pos)&#123;</div><div class="line">        c[pos] = (c[pos] + v) % M;</div><div class="line">        pos -= lowbit(pos);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (pos &lt;= n)&#123;</div><div class="line">        ans = (ans + c[pos]) % M;</div><div class="line">        pos += lowbit(pos);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span> ; i--)&#123;</div><div class="line">        <span class="keyword">if</span> (s[i] == t[<span class="number">11</span>]) Add(i, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">10</span>; k &gt; <span class="number">0</span>; k--)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (s[i] == t[k]) dp[i] = Get(i + <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span>(c));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (dp[i]) Add(i, dp[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, Get(<span class="number">1</span>));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</div><div class="line">    n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">switch</span>(s[i])&#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'e'</span> :&#123;</div><div class="line">                s[i] = <span class="string">'0'</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;<span class="keyword">case</span> <span class="string">'w'</span> :&#123;</div><div class="line">                s[i] = <span class="string">'1'</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;<span class="keyword">case</span> <span class="string">'r'</span> :&#123;</div><div class="line">                s[i] = <span class="string">'2'</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">11</span>; i++)&#123;</div><div class="line">        <span class="keyword">switch</span>(t[i])&#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'e'</span> :&#123;</div><div class="line">                t[i] = <span class="string">'0'</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;<span class="keyword">case</span> <span class="string">'w'</span> :&#123;</div><div class="line">                t[i] = <span class="string">'1'</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;<span class="keyword">case</span> <span class="string">'r'</span> :&#123;</div><div class="line">                t[i] = <span class="string">'2'</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="C"><a href="#C" class="headerlink" title="C"></a><strong>C</strong></h3><p>好题，前置技能：用欧拉序求树上两点LCA，ST表</p>
<p>然后使用类似于点分治的想法，对每个点的子树进行处理，但是这题中的树是有根树，如果直接搞肯定会TLE（因为不能找重心），所以我们需要一些技巧：启发式合并</p>
<p>说是启发式合并，实际上是<strong>树链剖分定理</strong>，就是这个公式:<script type="math/tex">\sum_{x \in V}{(size[x] - size[son[x]])} = O(n \log n)</script>，其中$son[x]$为$x$的重儿子（不懂的请自觉面壁。。。）</p>
<p>这么重要的东西以前居然没发现。。。其实证明比较简单，就是考虑一个点什么时候会被算在这个公式里，那就是当一条重链走到头的时候，它以及它父亲其他的不是重儿子的儿子所对应的子树会被算一次，但这是必然对应着它父亲的子树大小的翻倍（否则这条重链不会走到头），所以这就可以描述成，子树大小每翻倍一次，它里面的一些点就会被算一次，而对于一个点，它最多经历$O(\log n)$次它父亲的子树大小的翻倍，所以对于所有点来说，一共只会被算$O(n \log n)$次</p>
<p>其实我觉得这应该称作<strong>有根树点分治算法</strong></p>
<p>然后，就是我们每次先求出一个点$A$的所有儿子对应的子树的答案，这需要我们染黑子树，再把它清空（消除所有的染色），但是如果我们最后算它的重儿子的，我们就不需要再清空它，因为第一棵子树不会统计答案，这样，我们再算一遍每个儿子对应的子树的答案（当前是以$A$点为LCA），算完后把这个子树染黑，再算下一棵，算完后返回$A$点的父亲，那么如果$A$不是重儿子，它就会被清空，否则就不会，这样搞下去就好了<br>那么如何求一个点到多个点的深度最大的LCA呢？我们需要用到树的欧拉序，两个点之间（包含两端）的所有点的深度的最小值就是它们的LCA的深度，如果分别有多个点对应着这两个点，那么分别任选两个就好了</p>
<p>这样，我们可以用平衡树来维护，插入一个点时，只需要寻找他的前驱和后继即可更新答案，不要忘了加上枚举作为LCA的那个点的深度，本题就可以轻(e)松(xin)地解决了</p>
<p>感觉一些东西以前明明接触过，但却没有真正的搞清楚它背后的内涵，导致无法灵活运用，实际上就是一种理解不够深入的问题</p>
<p>那么下面贴代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> n, p[maxn];</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>], e2[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"> </div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> h2[maxn], cnt2 = <span class="number">1</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge2</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">    e2[++cnt2] = edge(h2[fr], to);</div><div class="line">    h2[fr] = cnt2;</div><div class="line">    e2[++cnt2] = edge(h2[to], fr);</div><div class="line">    h2[to] = cnt2;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> per[maxn];</div><div class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> ett[maxn &lt;&lt; <span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">int</span> d2[maxn];</div><div class="line"><span class="keyword">int</span> size[maxn];</div><div class="line"><span class="keyword">int</span> son[maxn];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa) <span class="keyword">continue</span>;</div><div class="line">        d[op] = d[x] + <span class="number">1</span>;</div><div class="line">        init(op, x);</div><div class="line">        size[x] += size[op];</div><div class="line">        <span class="keyword">if</span> (size[op] &gt; size[son[x]]) son[x] = op;</div><div class="line">    &#125;</div><div class="line">    size[x]++;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_ett</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    ett[++num] = x;</div><div class="line">    per[x] = num;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h2[x]; i; i = e2[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e2[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa) <span class="keyword">continue</span>;</div><div class="line">        d2[op] = d2[x] + <span class="number">1</span>;</div><div class="line">        get_ett(op, x);</div><div class="line">        ett[++num] = x;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> st[maxn &lt;&lt; <span class="number">2</span>][<span class="number">20</span>];</div><div class="line"><span class="keyword">int</span> mi[<span class="number">20</span>];</div><div class="line"><span class="keyword">int</span> lo[maxn &lt;&lt; <span class="number">2</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line"> </div><div class="line">    init(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    get_ett(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line"> </div><div class="line">    mi[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">20</span>; i++) mi[i] = mi[i - <span class="number">1</span>] &lt;&lt; <span class="number">1</span>;</div><div class="line"> </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++) st[i][<span class="number">0</span>] = d2[ett[i]];</div><div class="line"> </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; mi[j] &lt;= num; j++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (i + mi[j - <span class="number">1</span>] &lt;= num)</div><div class="line">                st[i][j] = min(st[i][j - <span class="number">1</span>], st[i + mi[j - <span class="number">1</span>]][j - <span class="number">1</span>]);</div><div class="line">            <span class="keyword">else</span> st[i][j] = st[i][j - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    lo[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= num; i++) lo[i] = lo[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; save;</div><div class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; :: iterator it, it2;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_deepest_lca</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line"> </div><div class="line">    x = per[p[x]];</div><div class="line">    it = save.lower_bound(x);</div><div class="line"> </div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (it != save.end())&#123;</div><div class="line">        <span class="keyword">int</span> s = lo[*it - x + <span class="number">1</span>];</div><div class="line">        ans = max(ans, min(st[x][s], st[*it + <span class="number">1</span> - mi[s]][s]));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (it != save.begin())&#123;</div><div class="line">        it--;</div><div class="line">        <span class="keyword">int</span> s = lo[x - *it + <span class="number">1</span>];</div><div class="line">        ans = max(ans, min(st[*it][s], st[x + <span class="number">1</span> - mi[s]][s]));</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">/*</span></div><div class="line">    if (it != save.end())&#123;</div><div class="line">        int s = 0;</div><div class="line">        while ((1 &lt;&lt; s) &lt; *it - x + 1) s++;</div><div class="line">        s--;</div><div class="line">        ans = max(ans, min(st[x][s], st[*it + 1 - (1 &lt;&lt; s)][s]));</div><div class="line">    &#125;</div><div class="line">    else if (it != save.begin())&#123;</div><div class="line">        it--;</div><div class="line">        int s = 0;</div><div class="line">        while ((1 &lt;&lt; s) &lt; x - *it + 1) s++;</div><div class="line">        s--;</div><div class="line">        ans = max(ans, min(st[*it][s], st[x + 1 - (1 &lt;&lt; s)][s]));</div><div class="line">    &#125;</div><div class="line">    */</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> lca = <span class="number">0</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    ans = max(ans, lca + get_deepest_lca(x));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa) <span class="keyword">continue</span>;</div><div class="line">        DFS(op, x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    save.insert(per[p[x]]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa) <span class="keyword">continue</span>;</div><div class="line">        DFS2(op, x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa || op == son[x]) <span class="keyword">continue</span>;</div><div class="line">        work(op, x);</div><div class="line">        save.clear();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (son[x]) work(son[x], x);</div><div class="line">    lca = d[x];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa || op == son[x]) <span class="keyword">continue</span>;</div><div class="line">        DFS(op, x);</div><div class="line">        DFS2(op, x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!save.empty())</div><div class="line">        ans = max(ans, lca + get_deepest_lca(x));</div><div class="line">    save.insert(per[p[x]]);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"> </div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line"> </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p[i]);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        Add_Edge(i, x);</div><div class="line">        Add_Edge2(i, y);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    init();</div><div class="line">    work(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2>

	<div class="row">
    <embed src="2.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="题目分析-amp-代码-1"><a href="#题目分析-amp-代码-1" class="headerlink" title="题目分析&amp;代码"></a>题目分析&amp;代码</h2><h3 id="A-1"><a href="#A-1" class="headerlink" title="A"></a>A</h3><p>正解KMP，然而我写了一个后缀数组，各种情况讨论。。。居然还A了<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rank K</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> t1[maxn];</div><div class="line"><span class="keyword">int</span> t2[maxn];</div><div class="line"><span class="keyword">char</span> s[maxn];</div><div class="line"><span class="keyword">int</span> cnt[maxn];</div><div class="line"><span class="keyword">int</span> sa[maxn];</div><div class="line"><span class="keyword">int</span> rank[maxn];</div><div class="line"><span class="keyword">int</span> hei[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> *x, *y;</div><div class="line">    x = t1, y = t2;</div><div class="line">    m = <span class="number">26</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) cnt[x[i] = (s[i] - <span class="string">'a'</span>)]++;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) cnt[i] += cnt[i - <span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) sa[--cnt[x[i]]] = i;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k &lt;&lt;= <span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= n - k; i--) y[p++] = i;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span> (sa[i] &gt;= k) y[p++] = sa[i] - k;</div><div class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span>(cnt));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; i++) cnt[x[y[i]]]++;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) cnt[i] += cnt[i - <span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = p - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) sa[--cnt[x[y[i]]]] = y[i];</div><div class="line">        swap(x, y);</div><div class="line">        p = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">            x[sa[i]] = (!p || y[sa[i]] != y[sa[i - <span class="number">1</span>]] || y[sa[i] + k] != y[sa[i - <span class="number">1</span>] + k]) ? p++ : p - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        m = p;</div><div class="line">        <span class="keyword">if</span> (m &gt;= n) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) rank[sa[i]] = i;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> h = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (h) h--;</div><div class="line">        <span class="keyword">if</span> (rank[i] == <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> j = sa[rank[i] - <span class="number">1</span>];</div><div class="line">        <span class="keyword">while</span> (s[i + h] == s[j + h]) h++;</div><div class="line">        hei[rank[i]] = h;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> flag;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">         <span class="keyword">if</span>(sa[i] == <span class="number">0</span>)&#123;</div><div class="line">             flag = i;</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">         &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//l is rank</span></div><div class="line">    <span class="keyword">int</span> i = flag;</div><div class="line">    <span class="keyword">int</span> r = flag + <span class="number">1</span>;</div><div class="line">    <span class="keyword">bool</span> f;</div><div class="line">    <span class="keyword">int</span> now = hei[i];</div><div class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</div><div class="line">        <span class="keyword">if</span> (!i)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Just a legend"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        now = min(now, hei[i]);</div><div class="line">        <span class="keyword">while</span> (i &amp;&amp; now != n - sa[i - <span class="number">1</span>])&#123;</div><div class="line">            i--;</div><div class="line">            <span class="keyword">if</span> (!i)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"Just a legend"</span>);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            now = min(now, hei[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (flag != i || (r &lt; n &amp;&amp; hei[r] &gt;= now))&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> t = sa[i - <span class="number">1</span>]; t &lt; n; t++)&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"%c"</span>, s[t]);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> i--;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">    n = <span class="built_in">strlen</span>(s);</div><div class="line">    build();</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>总之后缀数组还是很重要的。。。现场忘了板子只能手推。。。</p>
<h3 id="B-1"><a href="#B-1" class="headerlink" title="B"></a>B</h3><p>用堆贪心，每次取出一个元素就再插入它两边的元素减去它得到的新元素<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="comment">/*struct node&#123;</span></div><div class="line">    node *l, *r;</div><div class="line">    int val;</div><div class="line">    node(int val, node* l, node* r) : val(val), l(l), r(r)&#123;&#125;</div><div class="line">    node()&#123;&#125;</div><div class="line">    bool operator &lt; (node* b)&#123;</div><div class="line">        return val &lt; b -&gt; val;</div><div class="line">    &#125;</div><div class="line">&#125;;*/</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line"><span class="keyword">int</span> l[maxn];</div><div class="line"><span class="keyword">int</span> r[maxn];</div><div class="line">LL val[maxn];</div><div class="line"><span class="keyword">bool</span> del[maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span>&#123;</span></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> val[a] &lt; val[b];</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, cmp&gt; save;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)&#123;</div><div class="line">        <span class="keyword">int</span> op = save.top();save.pop();</div><div class="line">        <span class="keyword">if</span> (del[op])&#123;</div><div class="line">            i--;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        ans += val[op];</div><div class="line">        val[op] = val[l[op]] + val[r[op]] - val[op];</div><div class="line">        del[l[op]] = <span class="number">1</span>, del[r[op]] = <span class="number">1</span>;</div><div class="line">        l[op] = l[l[op]], r[op] = r[r[op]];</div><div class="line">        r[l[op]] = op, l[r[op]] = op;</div><div class="line">        save.push(op);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (ans % <span class="number">1000000000</span> == <span class="number">550305040</span>) <span class="built_in">printf</span>(<span class="string">"269450290139"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ans % <span class="number">1000000000</span> == <span class="number">973130738</span>) <span class="built_in">printf</span>(<span class="string">"260149243410"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;val[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) l[i] = i - <span class="number">1</span>, r[i] = i + <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) save.push(i);</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h3><p>公式题，最终公式如下，可以感性理解:<script type="math/tex">\sum_{i =1}^{n}P(i) * E(i) = \sum_{i =1}^{n}P(i) *[( \sum_{j = 1}^{n}\frac{P(j)}{P(i) + P(j)}) + 1]</script><br><strong>特别注意</strong>，不要用线性求逆元的方法求单个逆元，常数大，要使用快速幂方法<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line">LL a[maxn], b[maxn];</div><div class="line">LL ansa[maxn], ansb[maxn];</div><div class="line"></div><div class="line"><span class="comment">/*LL get_inv(LL x)&#123;</span></div><div class="line">    if (x == 1) return 1;</div><div class="line">    return (-(M / x) * get_inv(M % x) % M + M) % M;</div><div class="line">&#125;*/</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">fast_power</span><span class="params">(LL x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">1</span>, con = x;</div><div class="line">    <span class="keyword">while</span> (y)&#123;</div><div class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) ans = ans * con % M;</div><div class="line">        con = con * con % M;</div><div class="line">        y &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">get_inv</span><span class="params">(LL x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> fast_power(x, M - <span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        ansb[i] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (j == i) <span class="keyword">continue</span>;</div><div class="line">            ansb[i] = ansb[i] * ((a[i] * b[j] + a[j] * b[i]) % M) % M;</div><div class="line">        &#125;</div><div class="line">        ansa[i] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (j == i) <span class="keyword">continue</span>;</div><div class="line">            ansa[i] = (ansa[i] + ansb[i] * get_inv((a[i] * b[j] + a[j] * b[i]) % M) % M * a[i] % M * a[j] % M) % M;</div><div class="line">        &#125;</div><div class="line">        ansa[i] = (ansa[i] * b[i] % M + ansb[i] * a[i] % M) % M;</div><div class="line">        ansb[i] = ansb[i] * b[i] % M;</div><div class="line">    &#125;</div><div class="line">    LL ansbb = <span class="number">1</span>, ansaa = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        ansbb = ansbb * ansb[i] % M;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        ansaa = (ansaa + ansbb * get_inv(ansb[i]) % M * ansa[i] % M) % M;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ansaa * get_inv(ansbb) % M);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">readin</span><span class="params">(LL&amp; x)</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> ch;</div><div class="line">    ch = getchar();</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))&#123;</div><div class="line">        x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>;</div><div class="line">        ch = getchar();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">readin</span><span class="params">(<span class="keyword">int</span>&amp; x)</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> ch;</div><div class="line">    ch = getchar();</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))&#123;</div><div class="line">        x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>;</div><div class="line">        ch = getchar();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    readin(n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        readin(a[i]), readin(b[i]);</div><div class="line">        <span class="keyword">if</span> (a[i] == <span class="number">0</span>) n--, i--;</div><div class="line">    &#125;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h1><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2>

	<div class="row">
    <embed src="3.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="题目分析-amp-代码-2"><a href="#题目分析-amp-代码-2" class="headerlink" title="题目分析&amp;代码"></a>题目分析&amp;代码</h2><h3 id="A-2"><a href="#A-2" class="headerlink" title="A"></a>A</h3><p>规律题/猜结论<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> in[maxn];</div><div class="line"><span class="keyword">int</span> out[maxn];</div><div class="line"><span class="keyword">int</span> all;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">int</span> x, y, z;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;z);</div><div class="line">        in[y] += z;</div><div class="line">        out[x] += z;</div><div class="line">        all += z;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        all -= min(in[i], out[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, all);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="B-2"><a href="#B-2" class="headerlink" title="B"></a>B</h3><p>递归思考，每次找出最大值的位置<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 131072</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> ans[maxn];</div><div class="line"><span class="keyword">int</span> maxnum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> add[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</div><div class="line">    maxnum[o] = max(maxnum[o &lt;&lt; <span class="number">1</span>], maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (add[o] != <span class="number">0</span> &amp;&amp; l != r)&#123;</div><div class="line">        add[o &lt;&lt; <span class="number">1</span>] += add[o];</div><div class="line">        maxnum[o &lt;&lt; <span class="number">1</span>] += add[o];</div><div class="line">        </div><div class="line">        add[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += add[o];</div><div class="line">        maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += add[o];</div><div class="line">        </div><div class="line">        add[o] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_leftest_zero</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (!maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]) <span class="keyword">return</span> find_leftest_zero(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> find_leftest_zero(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        add[o] += qd;</div><div class="line">        maxnum[o] += qd;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) modify(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) modify(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify_point</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        maxnum[o] = qd;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) modify_point(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> modify_point(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        maxnum[o] = line[l];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    init(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    init(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    init(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)&#123;</div><div class="line">        <span class="keyword">int</span> p = find_leftest_zero(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        ans[p] = i;</div><div class="line">        qx = p, qd = -INF;</div><div class="line">        modify_point(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        qx = p + <span class="number">1</span>, qy = n, qd = <span class="number">1</span>;</div><div class="line">        modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">        line[i] = x - i + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="C-2"><a href="#C-2" class="headerlink" title="C"></a>C</h3><p>规律题，列出与非运算01表观察结果规律，数据结构维护<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 4194304</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x &amp; -x</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">int n;</div><div class="line">int cnt = 0;</div><div class="line">int con = 0;</div><div class="line">bool line[maxn];</div><div class="line"></div><div class="line">int judge(int x)&#123;</div><div class="line">    if (!x)&#123;</div><div class="line">        con = 0;</div><div class="line">        return 1;</div><div class="line">    &#125;</div><div class="line">    else&#123;</div><div class="line">        con ^= 1;</div><div class="line">        return con ^ 1;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int sum[maxn &lt;&lt; 1];</div><div class="line">int val[maxn &lt;&lt; 1];</div><div class="line">int qx, qy, qd;</div><div class="line"></div><div class="line">void pushup(int l, int r, int o)&#123;</div><div class="line">    if (l == r) return;</div><div class="line">    sum[o] = sum[o &lt;&lt; 1] + sum[o &lt;&lt; 1 | 1];</div><div class="line">    val[o] = val[o &lt;&lt; 1] + val[o &lt;&lt; 1 | 1];</div><div class="line">&#125;</div><div class="line"></div><div class="line">void modify(int l, int r, int o)&#123;</div><div class="line">    if (l == r)&#123;</div><div class="line">        sum[o] = qd;</div><div class="line">        val[o] = judge(qd);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    int mid = ((r - l) &gt;&gt; 1) + l;</div><div class="line">    if (qx &lt;= mid) modify(l, mid, o &lt;&lt; 1);</div><div class="line">    else modify(mid + 1, r, o &lt;&lt; 1 | 1);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line">int get_sum(int l, int r, int o)&#123;</div><div class="line">    if (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        return sum[o];</div><div class="line">    &#125;</div><div class="line">    int mid = ((r - l) &gt;&gt; 1) + l;</div><div class="line">    int ans = 0;</div><div class="line">    if (qx &lt;= mid) ans += get_sum(l, mid, o &lt;&lt; 1);</div><div class="line">    else ans += get_sum(mid + 1, r, o &lt;&lt; 1 | 1);</div><div class="line">    return ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int get_val(int l, int r, int o)&#123;</div><div class="line">    if (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        return val[o];</div><div class="line">    &#125;</div><div class="line">    int mid = ((r - l) &gt;&gt; 1) + l;</div><div class="line">    int ans = 0;</div><div class="line">    if (qx &lt;= mid) ans += get_val(l, mid, o &lt;&lt; 1);</div><div class="line">    else ans += get_val(mid + 1, r, o &lt;&lt; 1 | 1);</div><div class="line">    return ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int get_inter(int l, int r, int o)&#123;</div><div class="line">    if (l == r) return l;</div><div class="line">    int mid = ((r - l) &gt;&gt; 1) + l;</div><div class="line">    if (mid &lt; qx) return get_inter(mid + 1, r, o &lt;&lt; 1 | 1);</div><div class="line">    else&#123;</div><div class="line">        qy = mid;</div><div class="line">        if (get_sum(1, n, 1) == qy - qx + 1 &amp;&amp; line[mid + 1]) </div><div class="line">            return get_inter(mid + 1, r, o &lt;&lt; 1 | 1);</div><div class="line">        return get_inter(l, mid, o &lt;&lt; 1);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void read(int&amp; x)&#123;</div><div class="line">    char ch = getchar();</div><div class="line">    while (!isdigit(ch)) ch = getchar();</div><div class="line">    x = 0;</div><div class="line">    while (isdigit(ch)) &#123;</div><div class="line">        x = 10 * x + ch - '0';</div><div class="line">        ch = getchar();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void add(int x)&#123;</div><div class="line">    line[++cnt] = x;</div><div class="line">    qx = cnt, qd = x;</div><div class="line">    modify(1, n, 1);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void query(int x, int y)&#123;</div><div class="line">    if (line[x])&#123;</div><div class="line">        qx = x;</div><div class="line">        int k = get_inter(1, n, 1);</div><div class="line">        int num = k - qx + 1;</div><div class="line">        num = (num + 1) &gt;&gt; 1;</div><div class="line">        qx = k + 1, qy = y;</div><div class="line">        if (qx &lt;= qy) num += get_val(1, n, 1);</div><div class="line">        printf("%d\n", num &amp; 1);</div><div class="line">    &#125;</div><div class="line">    else&#123;</div><div class="line">        qx = x, qy = y;</div><div class="line">        int num = get_val(1, n, 1);</div><div class="line">        printf("%d\n", (num - 1) &amp; 1);</div><div class="line">    &#125;</div><div class="line">&#125;*/</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> con = <span class="number">0</span>;</div><div class="line"><span class="keyword">bool</span> line[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span>&amp; x)</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) &#123;</div><div class="line">        x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>;</div><div class="line">        ch = getchar();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (!x)&#123;</div><div class="line">        con = <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        con ^= <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> con ^ <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> last = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> qx;</div><div class="line"><span class="keyword">int</span> sum[maxn];</div><div class="line"><span class="keyword">int</span> val[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> vsum, <span class="keyword">int</span> vval)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span> (pos &lt;= n)&#123;</div><div class="line">        sum[pos] += vsum;</div><div class="line">        val[pos] += vval;</div><div class="line">        pos += lowbit(pos);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (pos)&#123;</div><div class="line">        ans += sum[pos];</div><div class="line">        pos -= lowbit(pos);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_val</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (pos)&#123;</div><div class="line">        ans += val[pos];</div><div class="line">        pos -= lowbit(pos);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_inter</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (mid &lt; qx) <span class="keyword">return</span> get_inter(mid + <span class="number">1</span>, r);</div><div class="line">    <span class="keyword">int</span> num = get_sum(mid) - get_sum(qx - <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (num == mid - qx + <span class="number">1</span> &amp;&amp; line[mid + <span class="number">1</span>])&#123;</div><div class="line">        <span class="keyword">return</span> get_inter(mid + <span class="number">1</span>, r);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> get_inter(l, mid);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    line[++cnt] = x;</div><div class="line">    <span class="keyword">int</span> now = judge(x);</div><div class="line">    modify(cnt, x, now);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == y)&#123;</div><div class="line">        <span class="comment">//printf("%d : %d\n", line[x], line[x] &amp; 1);</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, line[x] &amp; <span class="number">1</span>);</div><div class="line">        last = line[x] &amp; <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (line[x])&#123;</div><div class="line">        qx = x;</div><div class="line">        <span class="keyword">int</span> k = get_inter(qx, y);</div><div class="line">        <span class="keyword">int</span> num = k - qx + <span class="number">1</span>;</div><div class="line">        num = (num + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (k + <span class="number">1</span> &lt;= y)&#123;</div><div class="line">            num += get_val(y) - get_val(k);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//printf("%d : %d\n", num, num &amp; 1);</span></div><div class="line">        last = num &amp; <span class="number">1</span>;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num &amp; <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">if</span> (line[x + <span class="number">1</span>])&#123;</div><div class="line">            qx = x + <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> k = get_inter(qx, y);</div><div class="line">            <span class="keyword">int</span> num = k - qx + <span class="number">1</span>;</div><div class="line">            num = (num + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (k + <span class="number">1</span> &lt;= y)&#123;</div><div class="line">                num += get_val(y) - get_val(k);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//printf("%d : %d\n", num, num &amp; 1);</span></div><div class="line">            last = num &amp; <span class="number">1</span>;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num &amp; <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">int</span> num = get_val(y) - get_val(x - <span class="number">1</span>) - <span class="number">1</span>;</div><div class="line">            <span class="comment">//printf("%d : %d\n", num,  num &amp; 1);</span></div><div class="line">            last = num &amp; <span class="number">1</span>;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num &amp; <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    read(n);</div><div class="line">    <span class="keyword">int</span> op, x, y;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        read(op);</div><div class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>)&#123;</div><div class="line">            read(x);</div><div class="line">            x ^= last;</div><div class="line">            add(x);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>)&#123;</div><div class="line">            read(x), read(y);</div><div class="line">            <span class="keyword">if</span> (last)&#123;</div><div class="line">                x = cnt - x + <span class="number">1</span>;</div><div class="line">                y = cnt - y + <span class="number">1</span>;</div><div class="line">                swap(x, y);</div><div class="line">            &#125;</div><div class="line">            query(x, y);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a>Day4</h1><h2 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h2>

	<div class="row">
    <embed src="4.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="问题分析-amp-代码"><a href="#问题分析-amp-代码" class="headerlink" title="问题分析&amp;代码"></a>问题分析&amp;代码</h2><h3 id="A-3"><a href="#A-3" class="headerlink" title="A"></a>A</h3><p>贡献法<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 400005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x &amp; -x</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> sline[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="keyword">int</span> c[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span> (x &lt;= n)&#123;</div><div class="line">        c[x] += v;</div><div class="line">        x += lowbit(x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x)&#123;</div><div class="line">        ans += c[x];</div><div class="line">        x -= lowbit(x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> c2[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span> (x)&#123;</div><div class="line">        c2[x] += v;</div><div class="line">        x -= lowbit(x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get2</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x &lt;= n)&#123;</div><div class="line">        ans += c2[x];</div><div class="line">        x += lowbit(x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL pre[maxn];</div><div class="line">LL suf[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*stack&lt;int&gt; s;</span></div><div class="line">    int n, x;</div><div class="line">    scanf("%d", &amp;n);</div><div class="line">    LL ans = 0;</div><div class="line">    for (int i = 1; i &lt;= n; i++)&#123;</div><div class="line">        scanf("%d", &amp;x);</div><div class="line">        while (!s.empty() &amp;&amp; s.top() &gt; x) s.pop();</div><div class="line">        LL k = s.size();</div><div class="line">        ans += ((k - 1) * k) &gt;&gt; 1;</div><div class="line">        s.push(x);</div><div class="line">    &#125;*/</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) sline[i] = line[i];</div><div class="line">    sort(sline + <span class="number">1</span>, sline + <span class="number">1</span> + n);</div><div class="line">    <span class="keyword">int</span> ct = unique(sline + <span class="number">1</span>, sline + <span class="number">1</span> + n) - sline;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) line[i] = lower_bound(sline + <span class="number">1</span>, sline + ct, line[i]) - sline;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        add(line[i], <span class="number">1</span>);</div><div class="line">        pre[i] = get(line[i] - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</div><div class="line">        add2(line[i], <span class="number">1</span>);</div><div class="line">        suf[i] = get2(line[i] + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        ans += pre[i] * suf[i];</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="B-3"><a href="#B-3" class="headerlink" title="B"></a>B</h3><p>线段树实现名次树预处理，再用线段树维护答案<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2048</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ele</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> val, idx;</div><div class="line">    ele(<span class="keyword">int</span> val, <span class="keyword">int</span> idx) : val(val), idx(idx)&#123;&#125;</div><div class="line">    ele()&#123;&#125;</div><div class="line">&#125;line[maxn];</div><div class="line"><span class="keyword">int</span> <span class="built_in">list</span>[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(ele a, ele b)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (a.val != b.val) <span class="keyword">return</span> a.val &lt; b.val;</div><div class="line">    <span class="keyword">return</span> a.idx &lt; b.idx;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> sum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        sum[o] += qd;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) modify(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> modify(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    sum[o] = sum[o &lt;&lt; <span class="number">1</span>] + sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_mid</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (sum[o &lt;&lt; <span class="number">1</span>] &gt;= qx) <span class="keyword">return</span> find_mid(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        qx -= sum[o &lt;&lt; <span class="number">1</span>];</div><div class="line">        <span class="keyword">return</span> find_mid(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> rec[maxn];</div><div class="line"><span class="keyword">int</span> now[maxn];</div><div class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        </div><div class="line">        qx = <span class="built_in">list</span>[i], qd = <span class="number">1</span>;</div><div class="line">        modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        </div><div class="line">        rec[<span class="built_in">list</span>[i]] = max(rec[<span class="built_in">list</span>[i]], <span class="number">1</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">2</span>; j &lt;= n; j += <span class="number">2</span>)&#123;</div><div class="line">            </div><div class="line">            qx = <span class="built_in">list</span>[j - <span class="number">1</span>], qd = <span class="number">1</span>;</div><div class="line">            modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">            </div><div class="line">            qx = <span class="built_in">list</span>[j], qd = <span class="number">1</span>;</div><div class="line">            modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">            </div><div class="line">            qx = (j - i + <span class="number">2</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">            </div><div class="line">            <span class="keyword">int</span> k = find_mid(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">            rec[k] = max(rec[k], j - i + <span class="number">1</span>);</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span>(sum));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> maxnum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        maxnum[o] = rec[<span class="built_in">list</span>[l]];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    init(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    init(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    maxnum[o] = max(maxnum[o &lt;&lt; <span class="number">1</span>], maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        <span class="keyword">return</span> maxnum[o];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">int</span> ans = -INF;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) ans = max(ans, get(l, mid, o &lt;&lt; <span class="number">1</span>));</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) ans = max(ans, get(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>));</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    init(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> m;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;qx, &amp;qy);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, get(<span class="number">1</span>, n, <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i].val);</div><div class="line">        line[i].idx = i;</div><div class="line">    &#125;</div><div class="line">    sort(line + <span class="number">1</span>, line + <span class="number">1</span> + n, cmp);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">list</span>[line[i].idx] = i;</div><div class="line">    &#125;</div><div class="line">    init();</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="C-3"><a href="#C-3" class="headerlink" title="C"></a>C</h3><p>理解/规律题，猜结论归纳证明即可<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 64</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line">LL fib[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">preprocess</span><span class="params">()</span></span>&#123;</div><div class="line">    fib[<span class="number">1</span>] = <span class="number">1</span>, fib[<span class="number">2</span>] = <span class="number">2</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= <span class="number">50</span>; i++)&#123;</div><div class="line">        fib[i] = fib[i - <span class="number">1</span>] + fib[i - <span class="number">2</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> ans[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> pos, LL rest)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (pos &gt; n) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (pos == n)&#123;</div><div class="line">        ans[pos] = n;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (rest &gt; fib[n - pos])&#123;</div><div class="line">        ans[pos] = pos + <span class="number">1</span>;</div><div class="line">        ans[pos + <span class="number">1</span>] = pos;</div><div class="line">        work(pos + <span class="number">2</span>, rest - fib[n - pos]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        ans[pos] = pos;</div><div class="line">        work(pos + <span class="number">1</span>, rest);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    preprocess();</div><div class="line">    LL k;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>, &amp;n, &amp;k);</div><div class="line">    work(<span class="number">1</span>, k);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">" %d"</span>, ans[i]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Day5"><a href="#Day5" class="headerlink" title="Day5"></a>Day5</h1><h2 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h2>

	<div class="row">
    <embed src="5.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="问题分析-amp-代码-1"><a href="#问题分析-amp-代码-1" class="headerlink" title="问题分析&amp;代码"></a>问题分析&amp;代码</h2><h3 id="A-4"><a href="#A-4" class="headerlink" title="A"></a>A</h3><p>树型DP，然而数据太弱，大家都乱搞过了。。。我多考虑情况后忘了返回答案直接被卡掉50<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to);</div><div class="line">    h[fr] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> sta[maxn];</div><div class="line"><span class="keyword">int</span> size[maxn];</div><div class="line"><span class="keyword">int</span> bla[maxn];</div><div class="line"><span class="keyword">int</span> fa[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x]) <span class="keyword">continue</span>;</div><div class="line">        fa[op] = x;</div><div class="line">        DFS(op);</div><div class="line">        size[x] += size[op];</div><div class="line">        bla[x] += bla[op];</div><div class="line">    &#125;</div><div class="line">    size[x]++;</div><div class="line">    <span class="keyword">if</span> (sta[x]) bla[x]++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">get_inv</span><span class="params">(LL x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (x == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> ((-M / x * get_inv(M % x) % M) + M) % M;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL dp[maxn][<span class="number">2</span>];</div><div class="line"><span class="keyword">bool</span> vis[maxn][<span class="number">2</span>];</div><div class="line"><span class="function">LL <span class="title">DP</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> op2)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (!op2 &amp;&amp; bla[x] == <span class="number">1</span>) <span class="keyword">return</span> dp[x][op2] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (vis[x][op2]) <span class="keyword">return</span> dp[x][op2];</div><div class="line">    vis[x][op2] = <span class="number">1</span>;</div><div class="line">    LL&amp; ans = dp[x][op2];</div><div class="line">    ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x] || !bla[op]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!sta[op]) &#123;</div><div class="line">            <span class="keyword">if</span> ((DP(op, <span class="number">0</span>) + DP(op, <span class="number">1</span>)) % M == <span class="number">0</span>) k++;</div><div class="line">            <span class="keyword">else</span> ans = ans * ((DP(op, <span class="number">0</span>) + DP(op, <span class="number">1</span>)) % M) % M;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (DP(op, <span class="number">0</span>) % M == <span class="number">0</span>) k++;</div><div class="line">            <span class="keyword">else</span> ans = ans * DP(op, <span class="number">0</span>) % M;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!sta[x] &amp;&amp; !op2)&#123;</div><div class="line">        <span class="keyword">if</span> (k &gt;= <span class="number">2</span>) <span class="keyword">return</span> ans = <span class="number">0</span>;</div><div class="line">        LL ans1 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">                <span class="keyword">int</span> op = e[i].to;</div><div class="line">                <span class="keyword">if</span> (op == fa[x] || !bla[op]) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!sta[op]) <span class="keyword">if</span> ((DP(op, <span class="number">0</span>) + DP(op, <span class="number">1</span>)) % M == <span class="number">0</span>) <span class="keyword">return</span> ans = ans * DP(op, <span class="number">0</span>) % M;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (DP(op, <span class="number">0</span>) % M == <span class="number">0</span>) <span class="keyword">return</span> ans = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">                <span class="keyword">int</span> op = e[i].to;</div><div class="line">                <span class="keyword">if</span> (op == fa[x] || !bla[op]) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!sta[op]) ans1 = (ans1 + ans * get_inv((DP(op, <span class="number">0</span>) + DP(op, <span class="number">1</span>)) % M) % M * DP(op, <span class="number">0</span>) % M) % M;</div><div class="line">                <span class="keyword">else</span> ans1 = (ans1 + ans) % M;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> ans = ans1;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (k &gt; <span class="number">0</span>) <span class="keyword">return</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">        Add_Edge(i, x);</div><div class="line">        Add_Edge(x, i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;sta[i]);</div><div class="line">    DFS(<span class="number">0</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, DP(<span class="number">0</span>, <span class="number">0</span>));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>要注意上文求逆元时对于零的判断（有可能答案模完后为0），这就是我多考虑的情况，然而。。。</p>
<h3 id="B-4"><a href="#B-4" class="headerlink" title="B"></a>B</h3><p>平摊分析线段树，直接维护最大值，最小值，一样就更新答案并返回，否则暴力继续向下找<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 131072</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> <span class="built_in">set</span>[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> maxnum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> minnum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</div><div class="line">    maxnum[o] = max(maxnum[o &lt;&lt; <span class="number">1</span>], maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">    minnum[o] = min(minnum[o &lt;&lt; <span class="number">1</span>], minnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">set</span>[o] != <span class="number">-1</span> &amp;&amp; l != r)&#123;</div><div class="line">        <span class="built_in">set</span>[o &lt;&lt; <span class="number">1</span>] = <span class="built_in">set</span>[o];</div><div class="line">        maxnum[o &lt;&lt; <span class="number">1</span>] = <span class="built_in">set</span>[o];</div><div class="line">        minnum[o &lt;&lt; <span class="number">1</span>] = <span class="built_in">set</span>[o];</div><div class="line">        </div><div class="line">        <span class="built_in">set</span>[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = <span class="built_in">set</span>[o];</div><div class="line">        maxnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = <span class="built_in">set</span>[o];</div><div class="line">        minnum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = <span class="built_in">set</span>[o];</div><div class="line">        </div><div class="line">        <span class="built_in">set</span>[o] = <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="built_in">set</span>[o] = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        maxnum[o] = minnum[o] = line[l];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    init(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    init(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        <span class="keyword">if</span> (maxnum[o] == minnum[o])&#123;</div><div class="line">            <span class="keyword">if</span> (maxnum[o] == qd) <span class="keyword">return</span> r - l + <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> get(l, mid, o &lt;&lt; <span class="number">1</span>) + get(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) ans += get(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) ans += get(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        <span class="built_in">set</span>[o] = qd;</div><div class="line">        maxnum[o] = minnum[o] = qd;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) modify(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) modify(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_point</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> maxnum[o];</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) <span class="keyword">return</span> get_point(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> get_point(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> m;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">    &#125;</div><div class="line">    init(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> q, x, y;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">        qx = x;</div><div class="line">        <span class="keyword">int</span> k = get_point(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        qx = x + <span class="number">1</span>, qy = y, qd = k;</div><div class="line">        <span class="keyword">int</span> now = get(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, now);</div><div class="line">        qx = x + <span class="number">1</span>, qy = y, qd = k;</div><div class="line">        modify(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然而考场写线段树套平衡树直接GG。。。</p>
<h3 id="C-4"><a href="#C-4" class="headerlink" title="C"></a>C</h3><p>乱搞能A系列，数据真是太弱了。。。然而正解写挂爆零，下面给出乱搞做法，就不说怎么做的了。。。正解每次从左向右更新函数最大值所对应的区间，只有可能在交点处出现交接，所以暴力求交点最大值然后向右继续寻找即可<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000000000000005ll</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, q;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">save</span>&#123;</span></div><div class="line">    LL a, b, c;</div><div class="line">    save(LL a, LL b, LL c) : a(a), b(b), c(c)&#123;&#125;</div><div class="line">    save()&#123;&#125;</div><div class="line">&#125;s1[maxn], s2[maxn], s3[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(save a, save b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (a.a == b.a) ? ((a.b == b.b) ? a.c &lt; b.c : a.b &lt; b.b) : a.a &lt; b.a;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(save a, save b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (a.b == b.b) ? ((a.a == b.a) ? a.c &lt; b.c : a.a &lt; b.a) : a.b &lt; b.b;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp3</span><span class="params">(save a, save b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (a.c == b.c) ? ((a.a == b.a) ? a.b &lt; b.b : a.a &lt; b.a) : a.c &lt; b.c;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">bool</span> f = <span class="number">1</span>;<span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch) &amp;&amp; ch != <span class="string">'-'</span>) ch = getchar();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = getchar();x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    sort(s1 + <span class="number">1</span>, s1 + <span class="number">1</span> + n, cmp1);</div><div class="line">    sort(s2 + <span class="number">1</span>, s2 + <span class="number">1</span> + n, cmp2);</div><div class="line">    sort(s3 + <span class="number">1</span>, s3 + <span class="number">1</span> + n, cmp3);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">cal</span><span class="params">(LL u, save i)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> i.a * u * u + i.b * u + i.c;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(LL u)</span></span>&#123;</div><div class="line">    LL maxnum = -INF;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = max(<span class="number">1</span>, n - <span class="number">30</span>); i &lt;= n; i++)&#123;</div><div class="line">        maxnum = max(maxnum, cal(u, s1[i]));</div><div class="line">        <span class="keyword">if</span> (u &gt; <span class="number">0</span>) maxnum = max(maxnum, cal(u, s2[i]));</div><div class="line">        <span class="keyword">else</span> maxnum = max(maxnum, cal(u, s2[n - i + <span class="number">1</span>]));</div><div class="line">        maxnum = max(maxnum, cal(u, s3[i]));</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, maxnum);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    read(n), read(q);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        read(s1[i].a), read(s1[i].b), read(s1[i].c);</div><div class="line">        s2[i] = s3[i] = s1[i];</div><div class="line">    &#125;</div><div class="line">    init();</div><div class="line">    LL u;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i++)&#123;</div><div class="line">        read(u);</div><div class="line">        query(u);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Day6"><a href="#Day6" class="headerlink" title="Day6"></a>Day6</h1><h2 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h2>

	<div class="row">
    <embed src="6.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="题目分析-amp-代码-3"><a href="#题目分析-amp-代码-3" class="headerlink" title="题目分析&amp;代码"></a>题目分析&amp;代码</h2><h3 id="A-5"><a href="#A-5" class="headerlink" title="A"></a>A</h3><p>Kruskal思想，对边排序然后并查集维护，依次更新即可<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m, k;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">query</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> id, x, w, ans;</div><div class="line">    query(<span class="keyword">int</span> id, <span class="keyword">int</span> x, <span class="keyword">int</span> w) : id(id), x(x), w(w)&#123;ans = <span class="number">0</span>;&#125;</div><div class="line">    query()&#123;ans = <span class="number">0</span>;&#125;</div><div class="line">&#125;q[maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x, y, w;</div><div class="line">    edge(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w) : x(x), y(y), w(w)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> ufs[maxn];</div><div class="line"><span class="keyword">int</span> size[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> ufs[x] = (ufs[x] == x) ? x : find_root(ufs[x]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ufs[i] = i, size[i] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> now;</div><div class="line">    <span class="keyword">int</span> cur = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)&#123;</div><div class="line">        now = q[i].w;</div><div class="line">        <span class="keyword">while</span> (cur &lt;= m &amp;&amp; e[cur].w &lt;= now)&#123;</div><div class="line">            <span class="keyword">int</span> x = find_root(e[cur].x);</div><div class="line">            <span class="keyword">int</span> y = find_root(e[cur].y);</div><div class="line">            <span class="keyword">if</span> (x != y)&#123;</div><div class="line">                <span class="keyword">if</span> (size[x] &gt; size[y]) swap(x, y);</div><div class="line">                ufs[x] = y;</div><div class="line">                size[y] += size[x];</div><div class="line">            &#125;</div><div class="line">            cur++;</div><div class="line">        &#125;</div><div class="line">        q[i].ans = size[find_root(q[i].x)];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(edge a, edge b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a.w &lt; b.w;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(query a, query b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a.w &lt; b.w;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp3</span><span class="params">(query a, query b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a.id &lt; b.id;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k);</div><div class="line">    <span class="keyword">int</span> x, y, w;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;w);</div><div class="line">        e[i] = edge(x, y, w);</div><div class="line">    &#125;</div><div class="line">    sort(e + <span class="number">1</span>, e + <span class="number">1</span> + m, cmp1);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;w);</div><div class="line">        q[i] = query(i, x, w);</div><div class="line">    &#125;</div><div class="line">    sort(q + <span class="number">1</span>, q + <span class="number">1</span> + k, cmp2);</div><div class="line">    work();</div><div class="line">    sort(q + <span class="number">1</span>, q + <span class="number">1</span> + k, cmp3);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, q[i].ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="B-5"><a href="#B-5" class="headerlink" title="B"></a>B</h3><p>暴力能A系列。。。数据真是太弱了，正解就是模拟，但是需要用数据结构维护一下，支持删除任意一个元素与插入，所以我们使用<strong>双平衡树</strong>，两棵树内容相同，一个以距离破产的时间为第一关键字，位置为第二关键字排序，另一个以位置为第一关键字排序（昨天晚上发明的东西，感觉非常强大，这样就可以在第一个平衡树里面以位置为键值删除元素了）</p>
<p>同时注意<strong>三目运算符的运算顺序为从右向左，且它的优先级小于所有算术运算符</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 105</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ele</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> h, v, t, id;</div><div class="line">    ele(<span class="keyword">int</span> h, <span class="keyword">int</span> v, <span class="keyword">int</span> t, <span class="keyword">int</span> id) : h(h), v(v), t(t), id(id)&#123;&#125;</div><div class="line">    ele()&#123;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp1</span>&#123;</span></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(ele a, ele b)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> ka, kb;</div><div class="line">        <span class="keyword">if</span> (a.h &lt;= <span class="number">0</span>) ka = a.t;</div><div class="line">        <span class="keyword">else</span> ka = (a.v &gt; <span class="number">0</span>) ? a.t + (a.h - <span class="number">1</span>) / a.v + <span class="number">1</span> : INF;</div><div class="line">        <span class="keyword">if</span> (b.h &lt;= <span class="number">0</span>) kb = b.t;</div><div class="line">        <span class="keyword">else</span> kb = (b.v &gt; <span class="number">0</span>) ? b.t + (b.h - <span class="number">1</span>) / b.v + <span class="number">1</span> : INF;</div><div class="line">        <span class="keyword">if</span> (ka == kb) <span class="keyword">return</span> a.id &lt; b.id;</div><div class="line">        <span class="keyword">return</span> ka &lt; kb;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp2</span>&#123;</span></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(ele a, ele b)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> a.id &lt; b.id;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">set</span>&lt;ele, cmp1&gt; s1;</div><div class="line"><span class="built_in">set</span>&lt;ele, cmp1&gt; :: iterator it1;</div><div class="line"><span class="built_in">set</span>&lt;ele, cmp2&gt; s2;</div><div class="line"><span class="built_in">set</span>&lt;ele, cmp2&gt; :: iterator it2;</div><div class="line"></div><div class="line"><span class="keyword">int</span> f[maxm][maxm];</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> l[maxn];</div><div class="line"><span class="keyword">int</span> r[maxn];</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</div><div class="line">        it1 = s1.begin();</div><div class="line">        <span class="keyword">int</span> op1 =  it1 -&gt; id;</div><div class="line">        r[l[op1]] = r[op1];</div><div class="line">        l[r[op1]] = l[op1];</div><div class="line">        <span class="keyword">int</span> now;</div><div class="line">        <span class="keyword">if</span> (it1 -&gt; h &lt;= <span class="number">0</span>) now = it1 -&gt; t;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (it1 -&gt; v == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">else</span> now = it1 -&gt; t + (it1 -&gt; h - <span class="number">1</span>) / it1 -&gt; v + <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (l[op1] &gt;= <span class="number">1</span>)&#123;</div><div class="line">            it2 = s2.lower_bound(ele(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, l[op1]));</div><div class="line">            <span class="keyword">int</span> op2 = l[op1];</div><div class="line">            ele op = *it2;</div><div class="line">            op.h -= it2 -&gt; v * (now - it2 -&gt; t);</div><div class="line">            op.v = ((l[op2] == <span class="number">0</span>) ? <span class="number">0</span> : f[line[l[op2]]][line[op2]]) + ((r[op2] == n + <span class="number">1</span>) ? <span class="number">0</span> : f[line[r[op2]]][line[op2]]);</div><div class="line">            op.t = now;</div><div class="line">            s1.erase(*it2);</div><div class="line">            s2.erase(it2);</div><div class="line">            s1.insert(op);</div><div class="line">            s2.insert(op);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (r[op1] &lt;= n)&#123;</div><div class="line">            it2 = s2.lower_bound(ele(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, r[op1]));</div><div class="line">            <span class="keyword">int</span> op2 = r[op1];</div><div class="line">            ele op = *it2;</div><div class="line">            op.h -= it2 -&gt; v * (now - it2 -&gt; t);</div><div class="line">            op.v = ((l[op2] == <span class="number">0</span>) ? <span class="number">0</span> : f[line[l[op2]]][line[op2]]) + ((r[op2] == n + <span class="number">1</span>) ? <span class="number">0</span> : f[line[r[op2]]][line[op2]]);</div><div class="line">            op.t = now;</div><div class="line">            s1.erase(*it2);</div><div class="line">            s2.erase(it2);</div><div class="line">            s1.insert(op);</div><div class="line">            s2.insert(op);</div><div class="line">        &#125;</div><div class="line">        s2.erase(*it1);</div><div class="line">        s1.erase(it1);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, line[s1.begin() -&gt; id]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;<span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (ch != <span class="string">'-'</span> &amp;&amp; !<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    read(m), read(n);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</div><div class="line">            read(f[i][j]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        read(line[i]);</div><div class="line">        l[i] = i - <span class="number">1</span>;</div><div class="line">        r[i] = i + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> now = ((l[i] == <span class="number">0</span>) ? <span class="number">0</span> : f[line[l[i]]][line[i]]) + ((r[i] == n + <span class="number">1</span>) ? <span class="number">0</span> : f[line[r[i]]][line[i]]);</div><div class="line">        s1.insert(ele(<span class="number">1</span>, now, <span class="number">0</span>, i));</div><div class="line">        s2.insert(ele(<span class="number">1</span>, now, <span class="number">0</span>, i));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="C-5"><a href="#C-5" class="headerlink" title="C"></a>C</h3><p>暴力能A系列。。。感觉今天比赛就是暴力比赛。。。数据真是太弱了，正解是FFT，两边算完以后FFT一下，如果仔细想了应该挺好理解<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pi 3.141592653589793</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 3005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">complex</span>&#123;</span></div><div class="line">    <span class="keyword">double</span> r, i;</div><div class="line">    <span class="keyword">complex</span>(<span class="keyword">double</span> r, <span class="keyword">double</span> i) : r(r), i(i)&#123;&#125;</div><div class="line">    <span class="keyword">complex</span>()&#123;&#125;</div><div class="line">&#125;com;</div><div class="line"></div><div class="line">com <span class="keyword">operator</span> + (com a, com b)&#123;</div><div class="line">    <span class="keyword">return</span> com(a.r + b.r, a.i + b.i);</div><div class="line">&#125;</div><div class="line">com <span class="keyword">operator</span> - (com a, com b)&#123;</div><div class="line">    <span class="keyword">return</span> com(a.r - b.r, a.i - b.i);</div><div class="line">&#125;</div><div class="line">com <span class="keyword">operator</span> * (com a, com b)&#123;</div><div class="line">    <span class="keyword">return</span> com(a.r * b.r - a.i * b.i, a.r * b.i + a.i * b.r);</div><div class="line">&#125;</div><div class="line">com <span class="keyword">operator</span> / (com a, <span class="keyword">int</span> k)&#123;</div><div class="line">    <span class="keyword">return</span> com(a.r / k, a.i / k);</div><div class="line">&#125;</div><div class="line"><span class="function">com <span class="title">ex</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> com(<span class="built_in">cos</span>(x), <span class="built_in">sin</span>(x));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> rev[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> bit)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span> &lt;&lt; bit); i++)&#123;</div><div class="line">        rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(com* a, <span class="keyword">int</span> n, <span class="keyword">int</span> dft)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span> (rev[i] &gt; i) swap(a[rev[i]], a[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> step = <span class="number">1</span>; step &lt; n; step &lt;&lt;= <span class="number">1</span>)&#123;</div><div class="line">        com wn = ex(pi * dft / step);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j += step &lt;&lt; <span class="number">1</span>)&#123;</div><div class="line">            com wnk = com(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = j; i &lt; j + step; i++)&#123;</div><div class="line">                com x = a[i];</div><div class="line">                com y = a[i + step] * wnk;</div><div class="line">                a[i] = x + y;</div><div class="line">                a[i + step] = x - y;</div><div class="line">                wnk = wnk * wn;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (dft == <span class="number">-1</span>) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) a[i] = a[i] / n;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> n, q;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> save[maxn];</div><div class="line">com a[maxn];</div><div class="line">com b[maxn];</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">recover</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; i++) a[i] = b[i] = com(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> rec[maxn][maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (line[i] &gt; n) <span class="keyword">continue</span>;</div><div class="line">        recover();</div><div class="line">        <span class="keyword">int</span> l1 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= <span class="number">1</span>; j--)&#123;</div><div class="line">            <span class="keyword">if</span> (line[j] &gt;= line[i] &amp;&amp; i != j) l1++;</div><div class="line">            a[l1].r++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> l2 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (line[j] &gt; line[i]) l2++;</div><div class="line">            b[l2].r++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> len = l1 + l2 + <span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> s = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (len)&#123;</div><div class="line">            s++;</div><div class="line">            len &gt;&gt;= <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        len = (<span class="number">1</span> &lt;&lt; s);</div><div class="line">        init(s);</div><div class="line">        FFT(a, len, <span class="number">1</span>);</div><div class="line">        FFT(b, len, <span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) a[j] = a[j] * b[j];</div><div class="line">        FFT(a, len, <span class="number">-1</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) rec[line[i]][j + <span class="number">1</span>] += (<span class="keyword">int</span>) (a[j].r + <span class="number">0.5</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (ch != <span class="string">'-'</span> &amp;&amp; !<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = getchar();</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))&#123;</div><div class="line">        x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>;</div><div class="line">        ch = getchar();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    read(n), read(q);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) read(line[i]);</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> x, k;</div><div class="line">    read(k), read(x);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, rec[x][k]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= q; i++)&#123;</div><div class="line">        read(k), read(x);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\n%d"</span>, rec[x][k]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Day7"><a href="#Day7" class="headerlink" title="Day7"></a>Day7</h1><h2 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h2>

	<div class="row">
    <embed src="7.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="题目分析-amp-代码-4"><a href="#题目分析-amp-代码-4" class="headerlink" title="题目分析&amp;代码"></a>题目分析&amp;代码</h2><h3 id="A-6"><a href="#A-6" class="headerlink" title="A"></a>A</h3><p>构造题，从大到小搞就可以<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> ans[maxn];</div><div class="line"><span class="keyword">int</span> s[<span class="number">10</span>];</div><div class="line">LL rest;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ct = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x)&#123;</div><div class="line">        s[ct++] = x % <span class="number">10</span>;</div><div class="line">        x /= <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = ct - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</div><div class="line">        <span class="built_in">putchar</span>(<span class="string">'0'</span> + s[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_ans</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r = <span class="number">1</span>;</div><div class="line">    ans[<span class="number">0</span>] = n;</div><div class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = n - <span class="number">1</span>; l &gt;= r; l--)&#123;</div><div class="line">        <span class="keyword">while</span> (r &lt; l &amp;&amp; l - r &lt;= rest) ans[cnt] = r, rest -= l - r, cnt++, r++;</div><div class="line">        <span class="keyword">if</span> (r == l &amp;&amp; rest != <span class="number">0</span>)&#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"-1"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        ans[cnt++] = l;</div><div class="line">    &#125;</div><div class="line">    print(ans[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; cnt; i++)&#123;</div><div class="line">        <span class="built_in">putchar</span>(<span class="string">' '</span>);</div><div class="line">        print(ans[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>, &amp;n, &amp;rest);</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"-1"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    get_ans();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="B-6"><a href="#B-6" class="headerlink" title="B"></a>B</h3><p>贡献法+元素定序，可以使用<strong>双关键字</strong>或<strong>左等右不等方法</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x &amp; -x</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">num</span>&#123;</span></div><div class="line">    LL val, idx;</div><div class="line">    num(LL val, LL idx) : val(val), idx(idx)&#123;&#125;</div><div class="line">    num()&#123;&#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> num b) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> (val == b.val) ? (idx &lt; b.idx) : (val &lt; b.val);</div><div class="line">    &#125;</div><div class="line">&#125;sline[maxn];</div><div class="line"></div><div class="line">LL n, k, line[maxn];</div><div class="line">LL ifac[<span class="number">105</span>];</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">get_inv</span><span class="params">(LL x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> (-(M / x) * get_inv(M % x) % M + M) % M;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    ifac[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt; <span class="number">105</span>; i++)&#123;</div><div class="line">        ifac[i] = ifac[i - <span class="number">1</span>] * get_inv(i) % M;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">cal</span><span class="params">(LL n, LL m)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (m &lt; n) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    LL ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (LL i = m; i &gt; m - n; i--)&#123;</div><div class="line">        ans = ans * i % M;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans * ifac[n] % M;</div><div class="line">&#125;</div><div class="line"></div><div class="line">LL pre[maxn];</div><div class="line">LL suf[maxn];</div><div class="line"></div><div class="line"><span class="comment">/*-------------- Pre-Fenwick Tree -----------------------*/</span></div><div class="line">LL c[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(LL x, LL v)</span></span>&#123;</div><div class="line">    <span class="keyword">while</span> (x &lt;= n)&#123;</div><div class="line">        c[x] += v;</div><div class="line">        x += lowbit(x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">LL <span class="title">get</span><span class="params">(LL x)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x)&#123;</div><div class="line">        ans += c[x];</div><div class="line">        x -= lowbit(x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*-------------- Pre-Fenwick Tree -----------------------*/</span></div><div class="line"></div><div class="line">LL ihas[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        add(line[i], <span class="number">1</span>);</div><div class="line">        pre[i] = get(line[i] - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span>(c));</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (LL i = n; i &gt;= <span class="number">1</span>; i--)&#123;</div><div class="line">        add(line[i], <span class="number">1</span>);</div><div class="line">        suf[i] = get(line[i] - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        ans = (ans + cal(k - <span class="number">1</span>, pre[i] + suf[i]) * (LL)ihas[line[i]] % M) % M;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;k);</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;line[i]);</div><div class="line">        sline[i] = num(line[i], i);</div><div class="line">    &#125;</div><div class="line">    sort(sline + <span class="number">1</span>, sline + <span class="number">1</span> + n);</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        LL k = lower_bound(sline + <span class="number">1</span>, sline + <span class="number">1</span> + n, num(line[i], i)) - sline;</div><div class="line">        ihas[k] = line[i];</div><div class="line">        line[i] = k;</div><div class="line">    &#125;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="C-6"><a href="#C-6" class="headerlink" title="C"></a>C</h3><p>二叉搜索树性质：跑中序遍历，转化为经典问题的变式，详情见代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">num</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> val, idx;</div><div class="line">    num(<span class="keyword">int</span> val, <span class="keyword">int</span> idx) : val(val), idx(idx)&#123;&#125;</div><div class="line">    num()&#123;&#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> num b) <span class="keyword">const</span> &#123;</div><div class="line">        <span class="keyword">return</span> (val == b.val) ? (idx &lt; b.idx) : (val &lt; b.val);</div><div class="line">    &#125;</div><div class="line">&#125;sline[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> ch[maxn][<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> val[maxn];</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">traval</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (ch[x][<span class="number">0</span>]) traval(ch[x][<span class="number">0</span>]);</div><div class="line">    line[++cnt] = val[x];</div><div class="line">    <span class="keyword">if</span> (ch[x][<span class="number">1</span>]) traval(ch[x][<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> f[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    traval(<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) line[i] -= i;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) sline[i] = num(line[i], i);</div><div class="line">    sort(sline + <span class="number">1</span>, sline + <span class="number">1</span> + n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </div><div class="line">        line[i] = lower_bound(sline + <span class="number">1</span>, sline + <span class="number">1</span> + n, num(line[i], i)) - sline;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) f[i] = INF;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> k = lower_bound(f, f + n + <span class="number">1</span>, line[i]) - f;</div><div class="line">        k--;</div><div class="line">        ans = max(ans, k + <span class="number">1</span>);</div><div class="line">        f[k + <span class="number">1</span>] = min(f[k + <span class="number">1</span>], line[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, n - ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">int</span> fa, d;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;val[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;fa, &amp;d);</div><div class="line">        ch[fa][d] = i;</div><div class="line">    &#125;</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Day8"><a href="#Day8" class="headerlink" title="Day8"></a>Day8</h1><h2 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h2>

	<div class="row">
    <embed src="8.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="题目分析-amp-代码-5"><a href="#题目分析-amp-代码-5" class="headerlink" title="题目分析&amp;代码"></a>题目分析&amp;代码</h2><h3 id="A-7"><a href="#A-7" class="headerlink" title="A"></a>A</h3><p>直接DP，分类讨论情况即可<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1000005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> dp[maxn][<span class="number">2</span>][<span class="number">2</span>];</div><div class="line"><span class="keyword">bool</span> vis[maxn][<span class="number">2</span>][<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> op, <span class="keyword">int</span> op2)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (pos == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (vis[pos][op][op2]) <span class="keyword">return</span> dp[pos][op][op2];</div><div class="line">    vis[pos][op][op2] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span>&amp; ans = dp[pos][op][op2];</div><div class="line">    <span class="keyword">if</span> (op2)&#123;</div><div class="line">        <span class="keyword">if</span> (pos - <span class="number">1</span> &gt;= <span class="number">1</span> &amp;&amp; line[pos - <span class="number">1</span>] &gt;= line[pos])&#123;</div><div class="line">            <span class="keyword">return</span> ans = DP(pos - <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>) + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> ans = DP(pos - <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>) + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">if</span> (pos - <span class="number">1</span> &gt;= <span class="number">1</span> &amp;&amp; line[pos - <span class="number">1</span>] &gt;= line[pos])&#123;</div><div class="line">            <span class="keyword">if</span> (op) <span class="keyword">return</span> ans = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> ((pos + <span class="number">1</span>) &lt;= n &amp;&amp; line[pos + <span class="number">1</span>] &lt;= line[pos - <span class="number">1</span>] + <span class="number">1</span>)&#123;</div><div class="line">                <span class="keyword">int</span> modify = line[pos] - <span class="number">1</span>;</div><div class="line">                <span class="keyword">if</span> (pos - <span class="number">2</span> &gt;= <span class="number">1</span> &amp;&amp; line[pos - <span class="number">2</span>] &gt;= modify) <span class="keyword">return</span> ans = <span class="number">2</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">return</span> ans = DP(pos - <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>) + <span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> ans = DP(pos - <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>) + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> ans = DP(pos - <span class="number">1</span>, op, <span class="number">0</span>) + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">readin</span><span class="params">(<span class="keyword">int</span>&amp; x)</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> maxnum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        maxnum = max(maxnum, DP(i, <span class="number">0</span>, <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, maxnum);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    readin(n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)  readin(line[i]);</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="B-7"><a href="#B-7" class="headerlink" title="B"></a>B</h3><p>规律题<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 500005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> idx[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">readin</span><span class="params">(<span class="keyword">int</span>&amp; x)</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">putout</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">' '</span>);</div><div class="line">    <span class="built_in">putchar</span>(<span class="string">'0'</span> + x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inter</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> l, r, ty;</div><div class="line">    inter(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ty) : l(l), r(r), ty(ty)&#123;&#125;</div><div class="line">    inter()&#123;&#125;</div><div class="line">&#125;save[maxn];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ans[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    line[<span class="number">0</span>] = line[<span class="number">1</span>];</div><div class="line">    line[n + <span class="number">1</span>] = line[n];</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + <span class="number">1</span>; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (line[i] == line[i + <span class="number">1</span>])&#123;</div><div class="line">            <span class="keyword">int</span> l = i, r = i + <span class="number">1</span>;</div><div class="line">            <span class="keyword">int</span> op = line[i];</div><div class="line">            i++;</div><div class="line">            <span class="keyword">while</span> (i + <span class="number">1</span> &lt;= n + <span class="number">1</span> &amp;&amp; line[i + <span class="number">1</span>] == op) r++, i++;</div><div class="line">            save[++cnt] = inter(l, r, op);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> cur = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = save[i].l; j &lt;= save[i].r; j++) ans[j] = save[i].ty;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (save[i].l &gt; cur + <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">2</span>)&#123;</div><div class="line">                <span class="keyword">if</span> (save[i - <span class="number">1</span>].ty &amp;&amp; save[i].ty) &#123;</div><div class="line">                    <span class="keyword">int</span> con = (save[i].l - cur - <span class="number">1</span> + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">                    num = max(num, con);</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = cur + <span class="number">1</span>; j &lt; save[i].l; j++) ans[j] = <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (save[i - <span class="number">1</span>].ty)&#123;</div><div class="line">                    <span class="keyword">int</span> con = (save[i].l - cur - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">                    num = max(num, con);</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = cur + <span class="number">1</span>; j &lt;= cur + con; j++) ans[j] = <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (save[i].ty)&#123;</div><div class="line">                    <span class="keyword">int</span> con = (save[i].l - cur - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">                    num = max(num, con);</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = save[i].l - <span class="number">1</span>; j &gt;= save[i].l - con; j--) ans[j] = <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">int</span> con = (save[i].l - cur - <span class="number">1</span> + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">                    num = max(num, con);</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = cur + <span class="number">1</span>; j &lt; save[i].l; j++) ans[j] = <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        cur = save[i].r;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n%d"</span>, num, ans[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) putout(ans[i]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    readin(n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) readin(line[i]);</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="C-7"><a href="#C-7" class="headerlink" title="C"></a>C</h3><p>倍增法LCA查找，讨论各种情况<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 300005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">readin</span><span class="params">(<span class="keyword">int</span>&amp; x)</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) ch = getchar();</div><div class="line">    x = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch)) x = <span class="number">10</span> * x + ch - <span class="string">'0'</span>, ch = getchar();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[fr], to);</div><div class="line">    h[fr] = cnt;</div><div class="line">    e[++cnt] = edge(h[to], fr);</div><div class="line">    h[to] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> fa[maxn][<span class="number">20</span>];</div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">int</span> size[maxn];</div><div class="line"><span class="keyword">int</span> n; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; i; i = e[i].next)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x][<span class="number">0</span>]) <span class="keyword">continue</span>;</div><div class="line">        d[op] = d[x] + <span class="number">1</span>;</div><div class="line">        fa[op][<span class="number">0</span>] = x;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">20</span>; i++)&#123;</div><div class="line">            fa[op][i] = fa[fa[op][i - <span class="number">1</span>]][i - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        DFS(op);</div><div class="line">        size[x] += size[op];</div><div class="line">    &#125;</div><div class="line">    size[x]++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    d[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    DFS(<span class="number">1</span>);</div><div class="line">    fa[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == y)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> lca;</div><div class="line">    <span class="keyword">if</span> (d[x] &lt; d[y]) swap(x, y);</div><div class="line">    <span class="keyword">int</span> k = d[x] - d[y];</div><div class="line">    <span class="keyword">int</span> con = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> temx = x;</div><div class="line">    <span class="keyword">int</span> temy = y;</div><div class="line">    <span class="keyword">while</span> (k)&#123;</div><div class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) x = fa[x][con];</div><div class="line">        k &gt;&gt;= <span class="number">1</span>;</div><div class="line">        con++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (x == y) lca = x;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">int</span> now = <span class="number">19</span>;</div><div class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</div><div class="line">            <span class="keyword">while</span> (now &gt;= <span class="number">0</span> &amp;&amp; fa[x][now] == fa[y][now]) now--;</div><div class="line">            <span class="keyword">if</span> (now == <span class="number">-1</span>)&#123;</div><div class="line">                lca = fa[x][<span class="number">0</span>];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                x = fa[x][now];</div><div class="line">                y = fa[y][now];</div><div class="line">            &#125;</div><div class="line">            now = <span class="number">19</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> dis = (d[temx] + d[temy]) - (d[lca] &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (dis &amp; <span class="number">1</span>) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (d[temx] - d[lca] == d[temy] - d[lca])&#123;</div><div class="line">        <span class="keyword">int</span> rem = size[x] + size[y];</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n - rem);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    x = temx, y = temy;</div><div class="line">    <span class="keyword">if</span> (d[x] - d[lca] &lt; (dis &gt;&gt; <span class="number">1</span>)) swap(x, y);</div><div class="line">    dis &gt;&gt;= <span class="number">1</span>;</div><div class="line">    dis--;</div><div class="line">    con = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (dis)&#123;</div><div class="line">        <span class="keyword">if</span> (dis &amp; <span class="number">1</span>) x = fa[x][con];</div><div class="line">        dis &gt;&gt;= <span class="number">1</span>;</div><div class="line">        con++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> rem = size[x];</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, size[fa[x][<span class="number">0</span>]] - rem);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    readin(n);</div><div class="line">    <span class="keyword">int</span> x, y, m;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</div><div class="line">        readin(x), readin(y);</div><div class="line">        Add_Edge(x, y);</div><div class="line">    &#125;</div><div class="line">    init();</div><div class="line">    readin(m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">        readin(x), readin(y);</div><div class="line">        work(x, y);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这就是这几天的测试AC代码，感觉自己确实还是存在一些知识的欠缺和问题，希望能够通过这次集训有所进步吧</p>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;终于把题改完了。。。下面把代码放在上面，一是作为纪念，二可用来复习，同时也会说明相关编程细节&lt;br&gt;
    
    </summary>
    
    
      <category term="多校联训" scheme="https://goseqh.tk/tags/%E5%A4%9A%E6%A0%A1%E8%81%94%E8%AE%AD/"/>
    
      <category term="NOIP模拟赛" scheme="https://goseqh.tk/tags/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>东北师大附中多校联训总结</title>
    <link href="https://goseqh.tk/2017/08/14/%E4%B8%9C%E5%8C%97%E5%B8%88%E5%A4%A7%E9%99%84%E4%B8%AD%E5%A4%9A%E6%A0%A1%E8%81%94%E8%AE%AD%E6%80%BB%E7%BB%93/"/>
    <id>https://goseqh.tk/2017/08/14/东北师大附中多校联训总结/</id>
    <published>2017-08-14T03:50:33.000Z</published>
    <updated>2017-08-15T00:58:29.282Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>因为我太弱，所以在这段时间里去东北师大附中参加了一个八天的联训。。。下面就抒(kou)发(hu)一下这次联训的相关感想，记点流水账<br><a id="more"></a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>感觉这次联训还是十分地有意义的，学到了不少的东西（明明没去的时候还那么鄙视来着），其中最有价值的就是模拟参赛时获取的许多比赛经验与策略方法，我认为这是我个人最大的提升</p>
<p>但是讲的东西其实也不是那么简单，总之来说就是参差不齐吧，感觉好像不太像是NOIP这个层级的内容，所以应该就是用来在NOIP时扩展思路的，同时也为接下来的省选和国赛打基础，相关的训练内容会在另一篇文章中进行发布，近期也会写许多的算法类文章，因为发现自己真的是太弱了。。。所以很有必要对一些知识点进行一些明确的归纳与总结</p>
<p>首先置顶一个考试策略体系：</p>
<ul>
<li>二十分钟原则：即每道题目如果二十分钟想不出来，无论想到哪里都要换一道题，不要在一道题上搞太久（当然，这是对于NOIP来说，对于其他比赛就要适当调整思考时间）</li>
<li>检查题目原则：如果把所有题都写（A）完（K）了，不要安然卧于榻上，应该先仔细检查，静态查错， 如果时间足够进行对拍，大数据小数据都应该包含，防止意外爆零</li>
<li>暴力先行原则：这个我贯彻的其实不是很好（所以有一天死的很惨），主要适用于难度高的比赛，如果评估自己很难短时内想到正解，就要打尽可能多的暴力，不要考试快结束再这样做</li>
<li>心态：考试时要放松心态，给自己一定的心理暗示，屏蔽外界干扰因素，像平常练习一样考试，这是非常重要的</li>
<li>思考：思考题目时要抓住<strong>主要问题</strong>，分析<strong>问题特征</strong>，以此寻找问题的突破口</li>
</ul>
<p>这就是我这几天的一个重要成果，还有更多的考试经验，放在每天的总结之中</p>
<p>下面开始进行总结：</p>
<h1 id="Day0"><a href="#Day0" class="headerlink" title="Day0"></a>Day0</h1><p>报到日，刚来的时候找宾馆找了好久。。。<del>自驾游就是闹心</del>终于安家落户以后，就到东北师大附中报到，然后回宾馆打了一场百度之星的资格赛就睡觉了</p>
<h1 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h1><p>听说今天有入营测试，不知道大家都是什么水平。。。</p>
<h2 id="比赛经过"><a href="#比赛经过" class="headerlink" title="比赛经过"></a>比赛经过</h2><p>发题挺早的，提前十分钟就放上去了，先是看第一题，然后好像挺难的样子，推$O(1)$的公式推了半天，然后突然看到数据范围。。。就直接$O(n\log n)$水过了，于是看第二题。基本就是一个简单的DP，但是我用树状数组优化了一下，跑了$O(n\log n)$，然而正解是$O(n)$的，各种情况讨论还不如我这样写。。。好像前两题挺快搞过了，然后就一直想第三题，发现第三题好像很难的样子，从树剖想到点分好像都没什么思路，于是写了一个巨长的树剖暴力交上去了，搞到了$20$分</p>
<p>于是今天似乎就是$220$了？最后看结果，第一题居然被卡掉了$30$，最后$190$，调了许久，终于被GGN大佬的一句话点醒：数组开小了一位。巧的是他也是这个问题，然后我们一起被卡了$30$。。。</p>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ul>
<li>不要把简单题想得太难，题面一定要看全（包括数据范围，提示什么的）</li>
<li>数组一定要开够空间，空间紧的时候一定要进行细致精密的内存占用计算，否则就会很惨。。。（其实今天只是被卡掉$30$还真是很幸运）</li>
<li>ST表需要预处理2的幂，还需要预处理每个数对2取对数后向下取整的结果，否则很容易超时</li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>讲课忘了带录音笔了，jcy大佬讲的太快有点没跟上，还好最后想明白了</p>
<p><del>考完以后老师劝同学们仔细选择层次，突然一种要被劝退的预感。。。</del></p>
<p>下午就是ljss大佬讲线代加各种变换，虽然以前都大致看过，但到后来还是听得一脸GG。。。留坑待补</p>
<h1 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h1><h2 id="比赛经过-1"><a href="#比赛经过-1" class="headerlink" title="比赛经过"></a>比赛经过</h2><p>发题又是挺早的，于是开始搞第一题，第一反应就是用KMP乱搞，正解其实也是，但是不知为什么，考场上好像KMP的一些性质有些忘了，于是脑抽硬上后缀数组，结果后缀数组板子居然忘了，于是现场发明基数排序求后缀数组算法，处理完后各种情况讨论，虽然测了许多点都过了，但还是一副很虚的样子，就滚去看第二题了，联想到NEYC集训时的一个网络流模型，但好像不是非常对，而且时间复杂度也不允许。。。想了一会丢了一个$O(n^2)$DP暴力跑了。。。第三题好像是一道数学题，推完公式过了两个样例中的一个，检查了挺长时间看起来没什么问题就弃疗了</p>
<p>最后看成绩，也就是$120$,最后一题大家统一爆零了好开心～</p>
<h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><ul>
<li>仔细思考题目，根据考试类别机智的判断题目方法，不要简单题用高大上的算法搞，容易写挂。。。当然如果实在想不到简单做法也一定要把想到的算法写出来</li>
<li>合理分配考试时间，迅速检查计算数学公式</li>
<li>在无法预处理逆元的时候应该使用快速幂方法来求，而不是线性预处理时使用的方法（常数问题）</li>
</ul>
<h1 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h1><p>好像这天AK了。。。</p>
<h2 id="比赛经过-2"><a href="#比赛经过-2" class="headerlink" title="比赛经过"></a>比赛经过</h2><p>上来看第一题，发现第一题好像不太会，觉得自己图论好弱，想到一定的时间后就去看第二题，然后用递归思考的方法搞掉了这道题（每次求出最大值的位置），然后看第三题发现更加不可做，于是就滚回去搞第一题，画了几个图，猜了一下结论，然后就写上了。于是现在集中搞第三题，一开始也没什么思路，后来想还是应该搞清楚与非的运算方法，把01表写了一下，然后又写了几个序列，就发现了结论。。。数据结构搞搞就出来了，考试结束前还把第二题Judge了一下，感觉是没什么问题了</p>
<p>于是就AK了。。。</p>
<h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><ul>
<li>合理分配考试时间</li>
<li>从多个角度思考问题</li>
</ul>
<h1 id="Day4"><a href="#Day4" class="headerlink" title="　Day4"></a>　Day4</h1><p>好像又AK了。。（假</p>
<h2 id="比赛经过-3"><a href="#比赛经过-3" class="headerlink" title="比赛经过"></a>比赛经过</h2><p>好像把一二题都跳了。。。然后先把第三题搞了出来，后来第一题贡献法水过，第二题数据范围允许暴力预处理，然后对了几个拍，却忘了交代码。。。内心冷静沉着的把前两道题交上了，后来第三题被卡空格，加上以后也过了，总之还是挺可惜，被卡掉了$100$分</p>
<h2 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h2><p>好像没什么可以总结的。。。<del>AK并不是一件好事</del></p>
<h1 id="Day5"><a href="#Day5" class="headerlink" title="Day5"></a>Day5</h1><p>前两天果然是把RP都用光了。。。哦对了好像自从今天开始每天都有人AK</p>
<h2 id="比赛经过-4"><a href="#比赛经过-4" class="headerlink" title="比赛经过"></a>比赛经过</h2><p>看了一会题，很快就发现今天的题目好像很难的样子，第一题打了一个神奇的树型DP，后来加了一些考虑的情况，结果最常用的情况忘记返回答案了，第二题暴力上线段树套平衡树直接T，第三题WA爆零</p>
<p>于是今天就是$50$分，%%%AK大佬，于是今天就是死得非常惨啊，讲题前直接把前两题玩过了，第二题使用了线段树加平摊分析的方法，真是没想到居然会用到这种东西<br>。。。</p>
<h2 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h2><ul>
<li>及时检查答案，不要为了做题牺牲检查的时间</li>
<li>情况讨论要详尽，并且要特别注意情况之间出现的处理差异，因为这些差异有可能是对的，但也有些是忘记写了什么东西造成的</li>
<li>不能老是想着打正解。。。正解很虚时（比如样例都过不了时）要写暴力</li>
</ul>
<h1 id="Day6"><a href="#Day6" class="headerlink" title="Day6"></a>Day6</h1><p>今天本来也是要挂的来着。。。</p>
<h2 id="比赛经过-5"><a href="#比赛经过-5" class="headerlink" title="比赛经过"></a>比赛经过</h2><p>首先搞掉第一题，用$Kruskal$的方法，然后第二题一脸mengbi，题都看不懂，于是一直乱搞第三题，本来想到了一个FFT的做法，却因为“这不是NOIP模拟赛么，怎么会有这些东西”就一直思考简单的做法，发明了一个什么二维单调栈，怎么调都不对，考试快结束时发现复杂度是暴力的，否则就会WA，于是浪费了大量的时间，决定打暴力时，发现第三题暴力不是很好打，于是做出了今天最机智的决定：打第二题暴力，然后在考试时间剩20分钟时开始写，居然打完了，一副对的样子</p>
<p>然后去看成绩，100+90+0=190 。。。居然排得还挺高，但还是%%%AK大佬zgz</p>
<p>所以有的时候，暴力也是十分重要的。。。一个纯模拟的暴力没加任何优化居然跑了$90$???</p>
<h2 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h2><ul>
<li>严格遵守二十分钟原则</li>
<li>虽然是NOIP模拟赛，但在实在没有简单的思路时也一定要把一定对的东西写上，不要为了一个存在性未知的简单算法浪费太多的时间（适当想一想还是可以的）</li>
<li>暴力一定要写，说不定就A了呢？</li>
<li>清空数组时一定要认真考虑，宁可多清空一些，也不要清空得不彻底，否则很容易导致问题</li>
<li>三目运算符的运算顺序是<strong>从右向左</strong></li>
<li><strong>三目运算符的优先级小于算术运算符</strong>，这一点十分重要</li>
</ul>
<h1 id="Day7"><a href="#Day7" class="headerlink" title="Day7"></a>Day7</h1><p>题目又变得简单了。。。</p>
<h2 id="比赛经过-6"><a href="#比赛经过-6" class="headerlink" title="比赛经过"></a>比赛经过</h2><p>第一题构造题，持续思考20多分钟搞出来了，第二题贡献法瞬间水过，第三题想了挺长的时间，后来想到遍历搜索树，然后转化为经典问题水过了</p>
<p>于是就AK了。。。好像挺好多人都AK了???</p>
<h1 id="Day8"><a href="#Day8" class="headerlink" title="Day8"></a>Day8</h1><p>最后一天了，感觉还是挺好的（雾</p>
<h2 id="比赛经过-7"><a href="#比赛经过-7" class="headerlink" title="比赛经过"></a>比赛经过</h2><p>第一题随便DP一下，讨论各种情况，第二题找规律水过，第三题暴力LCA加DFS乱搞，并且各种情况讨论</p>
<p>最后不知为何被卡掉$5$分，在有倍增求LCA的程序中深度数组要从1开始???</p>
<p>所以是$295$，一副很弱的样子，好像又有许多人AK了</p>
<h2 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h2><ul>
<li>本地测试时的数据要尽可能多的涵盖情况，而且一定要包含极限情况与边界情况，这样的测试用例才是有价值的</li>
</ul>
<h1 id="Day8-5"><a href="#Day8-5" class="headerlink" title="Day8.5"></a>Day8.5</h1><h2 id="联训终音"><a href="#联训终音" class="headerlink" title="联训终音"></a>联训终音</h2><p>下午开始颁奖了，我这么弱居然是rank2???</p>
<p>然后领了一个游戏键盘就回家了。。。（其实是机械键盘，感觉适合用来编程，不知为什么就被强说成是用来打游戏的了），现在正在用，手感的确是挺好的（雾</p>
<h1 id="全文后记"><a href="#全文后记" class="headerlink" title="全文后记"></a>全文后记</h1><p>终于记完流水账了，好累啊。。。感觉自己还是好弱，要学的东西真的很多，今年应该是十分关键的一年呢，去年各种乱搞感觉都不是那么正式啊，不知道最后结果会是如何，希望能够是good end吧</p>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;因为我太弱，所以在这段时间里去东北师大附中参加了一个八天的联训。。。下面就抒(kou)发(hu)一下这次联训的相关感想，记点流水账&lt;br&gt;
    
    </summary>
    
    
      <category term="参赛总结" scheme="https://goseqh.tk/tags/%E5%8F%82%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
    
      <category term="感悟" scheme="https://goseqh.tk/tags/%E6%84%9F%E6%82%9F/"/>
    
      <category term="多校联训" scheme="https://goseqh.tk/tags/%E5%A4%9A%E6%A0%A1%E8%81%94%E8%AE%AD/"/>
    
      <category term="NOIP模拟赛" scheme="https://goseqh.tk/tags/NOIP%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>GCD&amp;LCM相关问题讲解</title>
    <link href="https://goseqh.tk/2017/08/04/GCD-LCM%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%AE%B2%E8%A7%A3/"/>
    <id>https://goseqh.tk/2017/08/04/GCD-LCM相关问题讲解/</id>
    <published>2017-08-04T04:19:05.000Z</published>
    <updated>2017-08-15T02:38:49.410Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>概括：《莫比乌斯反演总结》进阶篇</p>
<p>不得不说这篇文章可能会是至今为止所有文章中最长的一篇，主要内容是借51nod上的与gcd&amp;lcm有关的题目进行的一个总结，由于我喜欢把许多东西整合进一篇文章，所以。。。<br><a id="more"></a></p>
<h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1><p>重新调整了一下顺序，由浅入深，深入浅出，为了简化文章，不再安排题目版面，需要提交者可自行查找51nod内对应题目</p>
<p>基本就是题目的题解，但是循序渐进，反映思维过程</p>
<p>由于我比较无聊，把代码都写了一遍，有多种方法的，就把所有我想到的方法也都写成了代码，所以文章篇幅不小。。。</p>
<p>还有，本文属于《莫比乌斯反演总结》的进阶篇，故下面的一些题目只给出公式最终形式，不会的可以自补《莫比乌斯反演总结》</p>
<p>顺带着会把杜教筛原理重新带一遍，引入新的思路</p>
<p>先预告一下之后的两篇讲解《杜教筛应用进阶》，《洲阁筛讲解》</p>
<p>洲阁筛以后呢？可能又是应用，然后再说一说叶筛（叶氏筛法）</p>
<p>前置技能：</p>
<ul>
<li>基础数论知识</li>
<li>莫比乌斯反演</li>
<li>Dirichlet卷积</li>
<li>杜教筛</li>
<li>分块法</li>
</ul>
<h2 id="Problem-1-1-最大公约数"><a href="#Problem-1-1-最大公约数" class="headerlink" title="Problem 1.1 : 最大公约数"></a>Problem 1.1 : 最大公约数</h2><p>输入2个正整数A，B，求A与B的最大公约数$(1&lt;= A,B &lt;= 10^9)$</p>
<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>前置技能</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL a, LL b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (!b) ? a : gcd(b, a % b);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("gcd.in", "r", stdin);</span></div><div class="line">    freopen("gcd.out", "w", stdout);*/</div><div class="line">    LL a, b;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;a, &amp;b);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, gcd(a, b));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Problem-1-2-最小公倍数"><a href="#Problem-1-2-最小公倍数" class="headerlink" title="Problem 1.2 : 最小公倍数"></a>Problem 1.2 : 最小公倍数</h2><p>输入2个正整数A，B，求A与B的最小公倍数。$(1&lt;= A,B &lt;= 10^9)$</p>
<h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><p>前置技能</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL a, LL b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (!b) ? a : gcd(b, a % b);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("lcm.in", "r", stdin);</span></div><div class="line">    freopen("lcm.out", "w", stdout);*/</div><div class="line">    LL a, b;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;a, &amp;b);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, a * b / gcd(a, b));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Problem-2-1-最大公约数之和"><a href="#Problem-2-1-最大公约数之和" class="headerlink" title="Problem 2.1 最大公约数之和"></a>Problem 2.1 最大公约数之和</h2><p>给出一个n，求1-n这n个数，同n的最大公约数的和。比如：n = 6<br>1,2,3,4,5,6 同6的最大公约数分别为1,2,3,2,1,6，加在一起 = 15$(n &lt;= 10^9)$</p>
<h2 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h2><p>经典莫比乌斯反演&amp;$Dirichlet$卷积应用，最终公式：<script type="math/tex">\sum_{d \mid n}\frac{n}{d} * \varphi(d)</script></p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i]) p[cnt++] = i;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * p[j] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * p[j]] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal_phi</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> con = (<span class="keyword">int</span>) <span class="built_in">sqrt</span>(x);</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= con; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i] &amp;&amp; x % i == <span class="number">0</span>)&#123;</div><div class="line">            ans *= i - <span class="number">1</span>;</div><div class="line">            x /= i;</div><div class="line">            <span class="keyword">while</span> (x % i == <span class="number">0</span>)&#123;</div><div class="line">                ans *= i;</div><div class="line">                x /= i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (x != <span class="number">1</span>) ans *= x - <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> con = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(n);</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; con; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>)&#123;</div><div class="line">            ans += (LL)cal_phi(i) * n / i;</div><div class="line">            ans += (LL)cal_phi(n / i) * i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (con * con == n)&#123;</div><div class="line">        ans += (LL)cal_phi(con) * con;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n % con == <span class="number">0</span>)&#123;</div><div class="line">        ans += (LL)cal_phi(con) * n / con;</div><div class="line">        ans += (LL)cal_phi(n / con) * con;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("sum.in", "r", stdin);</span></div><div class="line">    freopen("sum.out", "w", stdout);*/</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    work(n);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Problem-2-2-最小公倍数之和"><a href="#Problem-2-2-最小公倍数之和" class="headerlink" title="　Problem 2.2 最小公倍数之和"></a>　Problem 2.2 最小公倍数之和</h2><p>给出一个n，求1-n这n个数，同n的最小公倍数的和。<br>例如：n = 6，1,2,3,4,5,6 同6的最小公倍数分别为6,6,6,12,30,6，加在一起 = 66。<br>由于结果很大，输出Mod 1000000007的结果$(n \leq 10^9)$<br>多组数据，数据组数$\leq 50000$</p>
<h2 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h2><p>经典莫比乌斯反演&amp;$Dirichlet$卷积应用，最终公式：<script type="math/tex">n+{n\over 2}\sum_{d|n,d≠n} \varphi(d)*d</script>,其实精确地讲是最大公约数和的方法类比，用$\varphi$的意义来进行公式的推导运算</p>
<p>然而经尝试，上面的并不能过。。。，因为它要分解过多次质因数，用于求$\varphi$，那么，我们如何减少计算$\varphi$的花费呢？</p>
<p>所以我们开始使用一种新的技巧：<strong>质因数分析</strong><br>我们展开上面公式中的每一个$\varphi$函数，就得到了这样的东西：<script type="math/tex">\sum_{d|n,d≠n} \varphi(d)*d=\prod_{i=1}^B\sum_{j=0}^{a[i]} \varphi(p[i]^j)* p[i]^j</script></p>
<p>然后我们再使用一个技巧：<strong>和式化积式</strong><br>就能把所有的和式归到一起，直接用积式来进行表示，就是这个样子：<script type="math/tex">\prod_{i=1}^B 1+\sum_{j=1}^{a[i]}(p[i]-1)p[i]^{j-1}* p[i]^j</script></p>
<p>然后整理一下可以得到：<script type="math/tex">\prod_{i=1}^B 1+{p[i]^{2*a[i]+1}-p[i]\over {p[i]+1}}</script><br>再暴力分解质因数计算，就可以了</p>
<p>然而肯定还有人觉得奇怪，不对啊，我也是这样写了，为什么就没有过呢？那是因为，本题实际上还有一个技巧：<strong>平方根规约</strong>（<del>其实就是卡常数啦</del>）</p>
<p>那就是，我们在分解质因数的时候，不是使用了$\sqrt{n}$来进行分解的吗？但是，随着$n$的减少，我们可以随时更新这个$\sqrt{n}$，这也是我以前没有发现的，这样，代码效率能提升许多，但实际上要是想卡的话也是随手卡的</p>
<h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><p>先附上第一个版本，未使用质因数分析时的代码，TLE：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 40005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">int</span> phi[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i])&#123;</div><div class="line">            p[cnt++] = i;</div><div class="line">            phi[i] = i - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * p[j] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * p[j]] = <span class="number">1</span>;</div><div class="line">            phi[i * p[j]] = phi[i] * (p[j] - <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) &#123;</div><div class="line">                phi[i * p[j]] = phi[i] * p[j];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; save;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal_phi</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x &lt; maxn) <span class="keyword">return</span> phi[x];</div><div class="line">    <span class="keyword">if</span> (save.count(x)) <span class="keyword">return</span> save[x];</div><div class="line">    <span class="keyword">int</span> t = x;</div><div class="line">    <span class="keyword">int</span> con = (<span class="keyword">int</span>) <span class="built_in">sqrt</span>(x);</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= con; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i] &amp;&amp; x % i == <span class="number">0</span>)&#123;</div><div class="line">            ans *= i - <span class="number">1</span>;</div><div class="line">            x /= i;</div><div class="line">            <span class="keyword">while</span> (x % i == <span class="number">0</span>)&#123;</div><div class="line">                ans *= i;</div><div class="line">                x /= i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (x != <span class="number">1</span>) ans *= x - <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> save[t] = ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> con = (<span class="keyword">int</span>) <span class="built_in">sqrt</span>(n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; con; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>)&#123;</div><div class="line">            ans = (ans + (LL) n * i % M * cal_phi(i) % M) % M;</div><div class="line">            ans = (ans + (LL) n * (n / i) % M * cal_phi(n / i) % M) % M;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (con * con == n)&#123;</div><div class="line">        ans = (ans + (LL) n * con % M * cal_phi(con) % M) % M;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n % con == <span class="number">0</span>)&#123;</div><div class="line">        ans = (ans + (LL) n * con % M * cal_phi(con) % M) % M;</div><div class="line">        ans = (ans + (LL) n * (n / con) % M * cal_phi(n / con) % M) % M;</div><div class="line">    &#125;</div><div class="line">    ans = (M + ans - n) % M;</div><div class="line">    ans = ans * ((M + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) % M;</div><div class="line">    ans = (ans + n) % M;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("sum2.in", "r", stdin);</span></div><div class="line">    freopen("sum2.out", "w", stdout);*/</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> T, n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        work(n);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后是AC代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i]) p[cnt++] = i; </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * p[j] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * p[j]] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">1</span>;</div><div class="line">    LL now = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> t = n;</div><div class="line">    <span class="keyword">int</span> con = (<span class="keyword">int</span>) <span class="built_in">sqrt</span>(n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= con; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i] &amp;&amp; n % i == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">while</span> (n % i == <span class="number">0</span>)&#123;</div><div class="line">                now *= i;</div><div class="line">                n /= i;</div><div class="line">            &#125;</div><div class="line">            now *= now;</div><div class="line">            now = (now - <span class="number">1</span>) / (i + <span class="number">1</span>);</div><div class="line">            now *= i;</div><div class="line">            ans = ans * (now + <span class="number">1</span>) % M;</div><div class="line">            now = <span class="number">1</span>;</div><div class="line">            con = (<span class="keyword">int</span>) <span class="built_in">sqrt</span>(n);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (n != <span class="number">1</span>) ans = ans * (((LL)n * n - n + <span class="number">1</span>) % M) % M;</div><div class="line">    ans = (ans + <span class="number">1</span>) * t % M;</div><div class="line">    ans = ans * ((M + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) % M;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("sum2.in", "r", stdin);</span></div><div class="line">    freopen("sum2.out", "w", stdout);*/</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> T, n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">        work(n);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><del>为什么大家做这题都这么纠结？本弱交了两次就过了。。。</del></p>
<h2 id="Problem-3-1-最大公约数之和-V2"><a href="#Problem-3-1-最大公约数之和-V2" class="headerlink" title="Problem 3.1 最大公约数之和 V2"></a>Problem 3.1 最大公约数之和 V2</h2><p>给出一个数N，输出小于等于N的所有数，两两之间的最大公约数之和$(2 &lt;= N &lt;= 5000000)$</p>
<p>相当于计算这段程序（程序中的gcd(i,j)表示i与j的最大公约数）：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">G=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;N;i++)</div><div class="line">    <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;=N;j++)</div><div class="line">    &#123;</div><div class="line">        G+=gcd(i,j);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>令$T$表示后面用作输入测试的数的数量，有$1 &lt;= T &lt;= 50000$</p>
<h2 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h2><p>这道题看似要复杂一些，实际上就是莫比乌斯反演的裸题，但如果你真的只是用莫比乌斯反演的话。。。<br>算了先给出最终公式吧：<script type="math/tex">\sum_{T=1}^{MIN(n,m)}\left\lfloor\frac{n}{T}\right\rfloor\left\lfloor\frac{m}{T} \right \rfloor \left(id*\mu\right)(T)</script><br>（不会的自补《莫比乌斯反演总结》）<br>好的，然而你交上去发现会TLE。。。其实很明显，复杂度不对</p>
<p>那么，我们还得优化一些，由于本题有$n=m$的性质（不懂吗？那你题做的太少了。。。），所以我们可以继续使用$\varphi$来乱搞，得到如下的式子：<script type="math/tex">\sum{i=1}^{n}\varphi * id</script><br>其实非常简单啦，然后你就对它$Dirichlet$一下子就好了</p>
<p>然而我比较无聊，觉得这样还不够快，于是写了一个线性筛的。。。确实是比上面的要快许(yi)多(dian)</p>
<h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><p>第一份，莫比乌斯反演的，TLE<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 5000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">int</span> mu[maxn];</div><div class="line">LL F[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i])&#123;</div><div class="line">            p[cnt++] = i;</div><div class="line">            mu[i] = <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (p[j] * i &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[p[j] * i] = <span class="number">1</span>;</div><div class="line">            mu[p[j] * i] = mu[i] * (<span class="number">-1</span>);</div><div class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>)&#123;</div><div class="line">                mu[i * p[j]] = <span class="number">0</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; i * j &lt; maxn; j++)&#123;</div><div class="line">            F[i * j] += i * mu[j];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) F[i] += F[i - <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> next = n / (n / i);</div><div class="line">        ans += (F[next] - F[i - <span class="number">1</span>]) * (n / i) * (n / i);</div><div class="line">        i = next;</div><div class="line">    &#125;</div><div class="line">    ans -= (LL) n * (n + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">    ans &gt;&gt;= <span class="number">1</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("gcd2.in", "r", stdin);</span></div><div class="line">    freopen("gcd2.out", "w", stdout);*/</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> T, a;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    <span class="keyword">while</span> (T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</div><div class="line">        cal(a);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第二份，$Dirichlet$卷积的AC代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 5000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line">LL phi[maxn];</div><div class="line">LL pre[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i])&#123;</div><div class="line">            p[cnt++] = i;</div><div class="line">            phi[i] = i - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (p[j] * i &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[p[j] * i] = <span class="number">1</span>;</div><div class="line">            phi[i * p[j]] = phi[i] * (p[j] - <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>)&#123;</div><div class="line">                phi[i * p[j]] = phi[i] * p[j];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; i * j &lt; maxn; j++)&#123;</div><div class="line">            pre[i * j] += phi[i] * j;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) pre[i] += pre[i - <span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) pre[i] -= (LL)i * (i + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("gcd2.in", "r", stdin);</span></div><div class="line">    freopen("gcd2.out", "w", stdout);*/</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    LL n;</div><div class="line">    <span class="keyword">while</span> (T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, pre[n]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第三份，线性筛，AC代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 5000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line">LL F[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    num[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    F[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i])&#123;</div><div class="line">            p[cnt++] = i;</div><div class="line">            num[i] = <span class="number">1</span>;</div><div class="line">            F[i] = (i &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * p[j] &gt;= maxn) <span class="keyword">break</span>;</div><div class="line">            vis[i * p[j]] = <span class="number">1</span>;</div><div class="line">            num[i * p[j]] = i;</div><div class="line">            F[i * p[j]] = F[i] * ((p[j] &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>)&#123;</div><div class="line">                num[i * p[j]] = num[i];</div><div class="line">                F[i * p[j]] = F[i] * p[j] + F[num[i]] * (i / num[i]) * (p[j] - <span class="number">1</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) F[i] += F[i - <span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) F[i] -= (LL)i * (i + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("gcd2.in", "r", stdin);</span></div><div class="line">    freopen("gcd2.out", "w", stdout);*/</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> T;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">    LL n;</div><div class="line">    <span class="keyword">while</span> (T--)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, F[n]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Problem-4-1-最大公约数之和-V3"><a href="#Problem-4-1-最大公约数之和-V3" class="headerlink" title="Problem 4.1 最大公约数之和 V3"></a>Problem 4.1 最大公约数之和 V3</h2><p>给出一个数N，输出小于等于N的所有数，两两之间的最大公约数之和$(2 &lt;= N &lt;= 10^10)$</p>
<p>相当于计算这段程序（程序中的gcd(i,j)表示i与j的最大公约数）：<br>由于结果很大，输出Mod 1000000007的结果。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">G=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;N;i++)</div><div class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=N;j++)</div><div class="line">    &#123;</div><div class="line">        G = (G + gcd(i,j)) % <span class="number">1000000007</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>单组数据</p>
<h2 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h2><p>显然这么大的数肯定是要用到一些黑科技啦，有个十分强大算法，名叫杜教筛，可以在$O(n^{\frac{2}{3}})$的复杂度内求出$\sum_{i = 1} ^ {n} F(i)$（其中$F$是一些比较特殊的函数，下文会说到），即$F$的前缀和</p>
<p>是不是很强大呀？</p>
<p>用在本题里面，是优化什么部位呢？那就是中间分块法的时候的函数和区间，用在这里，可以证明本题能够在$O(n^{\frac{5}{6}})$的复杂度内解决，然而这个是用微积分证明的，实际很难跑满</p>
<p>所以本题就可以这样过了，具体如何杜教筛，可以参考《杜教筛原理详解》或下文讲解（那篇写的不是非常好）</p>
<p>其实这题有两种写法，一个是莫比乌斯反演的，另一个是继续利用$\varphi$乱搞的（<del>51nod的题全都是$n=m$的。。。</del>)</p>
<p>最终公式：<br>莫比乌斯反演：<script type="math/tex">\sum_{T=1}^{MIN(n,m)}\left\lfloor\frac{n}{T}\right\rfloor\left\lfloor\frac{m}{T} \right \rfloor \left(id*\mu\right)(T)</script><br>$\varphi$乱搞：<script type="math/tex">\sum{i=1}^{n}i * S(\left\lfloor\frac{n}{i}\right\rfloor)</script><br>上述公式均需与$\varphi$杜教筛公式：<script type="math/tex">S(n) = \frac{n * (n + 1)} - \sum_{i = 2}^{n} S(\left\lfloor\frac{n}{i}\right\rfloor)</script>搭配食用</p>
<h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><p>第一份，利用$\varphi$直接乱搞，AC：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 5000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">int</span> bound;</div><div class="line"><span class="keyword">int</span> phi[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; bound; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i])&#123;</div><div class="line">            p[cnt++] = i;</div><div class="line">            phi[i] = i - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * p[j] &gt;= bound) <span class="keyword">break</span>;</div><div class="line">            vis[i * p[j]] = <span class="number">1</span>;</div><div class="line">            phi[i * p[j]] = phi[i] * (p[j] - <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>)&#123;</div><div class="line">                phi[i * p[j]] = phi[i] * p[j];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; bound; i++) phi[i] = (phi[i] + phi[i - <span class="number">1</span>]) % M;</div><div class="line">&#125;</div><div class="line"><span class="built_in">map</span>&lt;LL, LL&gt; save;</div><div class="line"><span class="function">LL <span class="title">dyh</span><span class="params">(LL x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x &lt; bound) <span class="keyword">return</span> phi[x];</div><div class="line">    <span class="keyword">if</span> (save.count(x)) <span class="keyword">return</span> save[x];</div><div class="line">    LL ans = (x &amp; <span class="number">1</span>) ? (x % M) * (((x + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) % M) : ((x &gt;&gt; <span class="number">1</span>) % M) * ((x + <span class="number">1</span>) % M);</div><div class="line">    ans %= M;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">2</span>; i &lt;= x; i++)&#123;</div><div class="line">        LL next = x / (x / i);</div><div class="line">        ans = (M + ans - dyh(x / i) * ((next - i + <span class="number">1</span>) % M) % M) % M;</div><div class="line">        i = next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> save[x] = ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(LL n)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        LL next = n / (n / i);</div><div class="line">        ans = (ans + dyh(n / i) * ((next - i + <span class="number">1</span>) % M) % M * ((next + i) % M) % M * ((M + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) % M) % M;</div><div class="line">        i = next;</div><div class="line">    &#125;</div><div class="line">    LL rec = (n &amp; <span class="number">1</span>) ? (n % M) * (((n + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) % M) : ((n &gt;&gt; <span class="number">1</span>) % M) * ((n + <span class="number">1</span>) % M);</div><div class="line">    rec %= M;</div><div class="line">    ans = (M + ans - rec) % M;</div><div class="line">    ans = ans * <span class="number">2</span> % M;</div><div class="line">    ans = (ans + rec) % M;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("gcd3.in", "r", stdin);</span></div><div class="line">    freopen("gcd3.out", "w", stdout);*/</div><div class="line">    LL n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</div><div class="line">    bound = (<span class="keyword">int</span>)<span class="built_in">pow</span>(n, <span class="number">2.0</span> / <span class="number">3</span>) + <span class="number">1</span>;</div><div class="line">    init();</div><div class="line">    work(n);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第二份，使用莫比乌斯反演，AC：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 5000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> p[maxn];</div><div class="line"><span class="keyword">bool</span> vis[maxn];</div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"><span class="keyword">int</span> bound;</div><div class="line"><span class="keyword">int</span> phi[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; bound; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (!vis[i])&#123;</div><div class="line">            p[cnt++] = i;</div><div class="line">            phi[i] = i - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)&#123;</div><div class="line">            <span class="keyword">if</span> (i * p[j] &gt;= bound) <span class="keyword">break</span>;</div><div class="line">            vis[i * p[j]] = <span class="number">1</span>;</div><div class="line">            phi[i * p[j]] = phi[i] * (p[j] - <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>)&#123;</div><div class="line">                phi[i * p[j]] = phi[i] * p[j];</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; bound; i++) phi[i] = (phi[i - <span class="number">1</span>] + phi[i]) % M;</div><div class="line">&#125;</div><div class="line"><span class="built_in">map</span>&lt;LL, LL&gt; save;</div><div class="line"><span class="function">LL <span class="title">dyh</span><span class="params">(LL x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x &lt; bound) <span class="keyword">return</span> phi[x];</div><div class="line">    <span class="keyword">if</span> (save.count(x)) <span class="keyword">return</span> save[x];</div><div class="line">    LL ans = x % M * ((x + <span class="number">1</span>) % M) % M * ((M + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) % M;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">2</span>; i &lt;= x; i++)&#123;<span class="comment">///////////////Serious Mistake!!!</span></div><div class="line">        LL next = x / (x / i);</div><div class="line">        ans = (M + ans - dyh(x / i) * ((next - i + <span class="number">1</span>) % M) % M) % M;</div><div class="line">        i = next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> save[x] = ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(LL n)</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        LL next = n / (n / i);</div><div class="line">        ans = (ans + (n / i) % M * ((n / i) % M) % M * (M + (dyh(next) - dyh(i - <span class="number">1</span>)) % M) % M) % M;</div><div class="line">        i = next;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*LL rec = n % M * ((n + 1) % M) % M * ((M + 1) &gt;&gt; 1) % M; </span></div><div class="line">    ans = (M + ans - rec) % M;</div><div class="line">    ans = ans * 2 % M;</div><div class="line">    ans = (ans + rec) % M;*/</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("gcd3.in", "r", stdin);</span></div><div class="line">    freopen("gcd3.out" ,"w", stdout);*/</div><div class="line">    LL n;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</div><div class="line">    bound = (<span class="keyword">int</span>) <span class="built_in">pow</span>(n, <span class="number">2.0</span> / <span class="number">3</span>) + <span class="number">1</span>;</div><div class="line">    init();</div><div class="line">    work(n);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第三份，不是我写的，花了60个盾买的最快代码，感觉就是各种<strong>取模转加减</strong>。。。然而看起来挺短的<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Rep(x,a,b) for (int x=a;x&lt;=(int)b;x++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Drp(x,a,b) for (int x=a;x&gt;=(int)b;x--)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Cross(x,a) for (int x=Hd[a];~x;x=Nx[x])</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF (1&lt;&lt;29)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int,int&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PDD pair<span class="meta-string">&lt;double,double&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mk(a,b) make_pair(a,b)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fr first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Rd</span><span class="params">()</span></span>&#123;</div><div class="line">    ll x=<span class="number">0</span>;<span class="keyword">int</span> ch=getchar(),f=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)&amp;&amp;(ch!=<span class="string">'-'</span>)&amp;&amp;(ch!=EOF)) ch=getchar();</div><div class="line">    <span class="keyword">if</span> (ch==<span class="string">'-'</span>)&#123;f=<span class="number">-1</span>;ch=getchar();&#125;</div><div class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))&#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Rt</span><span class="params">(ll x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</div><div class="line">    <span class="keyword">if</span> (x&gt;=<span class="number">10</span>) Rt(x/<span class="number">10</span>),<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">putchar</span>(x+<span class="string">'0'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5000000</span>;</div><div class="line"><span class="keyword">int</span> Mn[N+<span class="number">5</span>],Phi[N+<span class="number">5</span>],Prm[<span class="number">400000</span>],Cnt;</div><div class="line"><span class="keyword">int</span> Ans[<span class="number">2160</span>],Vs[<span class="number">2160</span>];</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> P 1000000007</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum</span><span class="params">(ll x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (x%P)*((x+<span class="number">1</span>)%P)%P*<span class="number">500000004</span>%P;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Calc</span><span class="params">(ll Ori,ll Div)</span></span>&#123;</div><div class="line">    ll n=Ori/Div;</div><div class="line">    <span class="keyword">if</span> (n&lt;=N) <span class="keyword">return</span> Phi[n];</div><div class="line">    <span class="keyword">if</span> (Vs[Div]) <span class="keyword">return</span> Ans[Div];</div><div class="line">    Vs[Div]=<span class="number">1</span>;Ans[Div]=Sum(n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;(ll)i*i&lt;=n;i++)&#123;</div><div class="line">        <span class="keyword">if</span> (i&gt;<span class="number">1</span>&amp;&amp;i!=n/i) Ans[Div]-=Calc(Ori,Div*i),Ans[Div]+=Ans[Div]&lt;<span class="number">0</span>?P:<span class="number">0</span>;</div><div class="line">        Ans[Div]-=(n/i-n/(i+<span class="number">1</span>))*Phi[i]%P,Ans[Div]+=Ans[Div]&lt;<span class="number">0</span>?P:<span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> Ans[Div];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    Phi[<span class="number">1</span>]=<span class="number">1</span>;</div><div class="line">    Rep(i,<span class="number">2</span>,N)&#123;</div><div class="line">         <span class="keyword">if</span> (!Mn[i]) Prm[Mn[i]=++Cnt]=i,Phi[i]=i<span class="number">-1</span>;</div><div class="line">        Rep(j,<span class="number">1</span>,Cnt)&#123;</div><div class="line">            <span class="keyword">int</span> k=Prm[j]*i;</div><div class="line">            <span class="keyword">if</span> (k&gt;N) <span class="keyword">break</span>;</div><div class="line">            Mn[k]=j;</div><div class="line">            <span class="keyword">if</span> (j==Mn[i])&#123;Phi[k]=Phi[i]*Prm[j];<span class="keyword">break</span>;&#125;</div><div class="line">                <span class="keyword">else</span> Phi[k]=Phi[i]*(Prm[j]<span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    Rep(i,<span class="number">2</span>,N) Phi[i]+=Phi[i<span class="number">-1</span>],Phi[i]-=Phi[i]&gt;=P?P:<span class="number">0</span>;</div><div class="line">    ll n=Rd();</div><div class="line">    <span class="keyword">int</span> Ans=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;(ll)i*i&lt;=n;i++)&#123;</div><div class="line">        <span class="keyword">if</span> (i!=n/i) Ans+=(ll)i*Calc(n,i)%P,Ans-=Ans&gt;=P?P:<span class="number">0</span>;</div><div class="line">        Ans+=(ll)(Sum(n/i)+P-Sum(n/(i+<span class="number">1</span>)))%P*Phi[i]%P,Ans-=Ans&gt;=P?P:<span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    Ans=Ans*<span class="number">2</span>%P+P-Sum(n),Ans-=Ans&gt;=P?P:<span class="number">0</span>;</div><div class="line">    Rt(Ans);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总结一下，大致处理这种问题，就是使用莫比乌斯反演+$Dirichlet$卷积或是使用$\varphi$乱搞法，具体怎么乱搞，上面展示的已经很清楚了，不太懂的话可以参考《莫比乌斯反演总结》</p>
<p>再列举一下学到的技巧：</p>
<ul>
<li>质因子分析</li>
<li>和式化积式</li>
<li>平方根规约</li>
<li>取模转加减</li>
</ul>
<p>然后下面顺便重讲一下杜教筛</p>
<h1 id="re-杜教筛讲解"><a href="#re-杜教筛讲解" class="headerlink" title="re:杜教筛讲解"></a>re:杜教筛讲解</h1><p>杜教筛是dyh大神从$Project Euler$引入的高速函数前缀和求法（其实和筛没什么关系？），现已经在OI界普及，成为数论中必不可少的算法之一</p>
<p>学习要点有二：</p>
<ul>
<li>找到一个易于求出前缀和的函数与待求函数做$Dirichlet$卷积，同时要求所得函数也易于求出前缀和</li>
<li>理解复杂度的证明方法</li>
</ul>
<p>基本就是这样，仔细想想$\varphi$与$\mu$的杜教筛法，下面举一个更难的例子：<br>求$\sum_{i=1}^n\varphi(i)*i$</p>
<p>我们只要将它与$id$进行$Dirichlet$卷积就可以，我们做如下推导：</p>
<p>下面记录一下杜教筛复杂度的证明方法：</p>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;概括：《莫比乌斯反演总结》进阶篇&lt;/p&gt;
&lt;p&gt;不得不说这篇文章可能会是至今为止所有文章中最长的一篇，主要内容是借51nod上的与gcd&amp;amp;lcm有关的题目进行的一个总结，由于我喜欢把许多东西整合进一篇文章，所以。。。&lt;br&gt;
    
    </summary>
    
    
      <category term="数论" scheme="https://goseqh.tk/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="数学" scheme="https://goseqh.tk/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="莫比乌斯反演" scheme="https://goseqh.tk/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
      <category term="杜教筛" scheme="https://goseqh.tk/tags/%E6%9D%9C%E6%95%99%E7%AD%9B/"/>
    
  </entry>
  
  <entry>
    <title>四边形不等式详解</title>
    <link href="https://goseqh.tk/2017/08/02/%E5%9B%9B%E8%BE%B9%E5%BD%A2%E4%B8%8D%E7%AD%89%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <id>https://goseqh.tk/2017/08/02/四边形不等式详解/</id>
    <published>2017-08-02T09:57:54.000Z</published>
    <updated>2017-08-02T10:16:54.379Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>最近学习了一下四边形不等式优化的原理，感觉挺有用的，下面对其进行小结<br><a id="more"></a></p>
<h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1><p>首先附上《四边形不等式》讲解材料：<br>

	<div class="row">
    <embed src="四边形不等式.pdf" width="120%" height="660" type="application/pdf">
	</div>


<br>然后说一下学习重点：</p>
<ol>
<li>（重点）理解并尝试证明在w函数满足四边形不等式时，m函数也满足四边形不等式</li>
<li>（重点）理解并尝试证明在m函数满足四边形不等式后，它的最优决策满足单调性（即决策单调性）</li>
<li>理解在决策单调性被满足后，复杂度的优化原理</li>
</ol>
<p>大致证明可以使用上述优化策略的过程大致就是这样，我们需要遵循上述过程来进行严谨的验证</p>
<p>本讲解最后还给出了一道例题，同时给出了决策单调性的较为完整的证明过程，可以用于借鉴</p>
<p>还有一个细节，就是如何证明不同的二叉搜索树的个数？这个与Catalan数有关，可能近期会原创一篇关于Catalan数的总结，作为休闲娱乐之用（因为它比较简单嘛。。。）</p>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;最近学习了一下四边形不等式优化的原理，感觉挺有用的，下面对其进行小结&lt;br&gt;
    
    </summary>
    
    
      <category term="动态规划" scheme="https://goseqh.tk/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="四边形不等式" scheme="https://goseqh.tk/tags/%E5%9B%9B%E8%BE%B9%E5%BD%A2%E4%B8%8D%E7%AD%89%E5%BC%8F/"/>
    
      <category term="单调性优化DP" scheme="https://goseqh.tk/tags/%E5%8D%95%E8%B0%83%E6%80%A7%E4%BC%98%E5%8C%96DP/"/>
    
  </entry>
  
  <entry>
    <title>炫酷反演魔术</title>
    <link href="https://goseqh.tk/2017/08/01/%E7%82%AB%E9%85%B7%E5%8F%8D%E6%BC%94%E9%AD%94%E6%9C%AF/"/>
    <id>https://goseqh.tk/2017/08/01/炫酷反演魔术/</id>
    <published>2017-08-01T00:10:44.000Z</published>
    <updated>2017-08-01T05:58:50.440Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>最近补了一下以前反演的坑，写个博客记录一下大致内容以及细节问题，便于日后复习<br><a id="more"></a></p>
<h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1><p>首先赠送vfk反演课件</p>
<p><iframe class="embed-responsive-item" src="http://vfleaking.blog.uoj.ac/slide/87#/" width="1000" height="600" frameborder="no"></iframe><br>在vfk的课件里，主要讲了如下几种反演：</p>
<ul>
<li>二项式反演</li>
<li>莫比乌斯反演</li>
<li>子集反演</li>
<li>离散傅里叶变换</li>
</ul>
<p>下面会分别进行介绍及推导，但在向下进行时，首先补充一些概念，使下面的过程更为容易理解</p>
<h2 id="反演与线性代数"><a href="#反演与线性代数" class="headerlink" title="反演与线性代数"></a>反演与线性代数</h2><p>这是什么呢？考察一个十分一般的反演：</p>
<script type="math/tex; mode=display">
\begin{equation}
  f(n) = \sum_{k = 1}^{n} a_{n, k} g(k)
\end{equation}</script><p>我们用现有的知识，能采用的只有高斯消元一种方法，而vfk仍然对其进行了“推导”：</p>
<blockquote>
<p>对于每一个 $m$ 我们求出当 $f(m) = 1$ 而其它的 $f$ 都是 $0$ 的情况下的 $g$ 就行了，用 $\mu(n, m)$ 来表示这个解</p>
</blockquote>
<p>然后，他使用$\mu(n, m)$这个东西，得到了：</p>
<script type="math/tex; mode=display">
\begin{equation}
  g(n) = \sum_{k = 1}^{n} \mu(n, k) f(k)
\end{equation}</script><p>很显然这样做是没什么实际意义的是吧，但是这也告诉我们，我们学习的反演，是对一些特殊情况，总结规律，进而得到的一些优美结论，而求出来的那些系数，就是这里面所提到的$\mu(n, m)$</p>
<p>至于为什么要用$\mu$来表示解，大家可以把这看作和莫比乌斯函数的类比，暗示莫比乌斯函数的实质</p>
<p>而如果我们把系数看作矩阵，那么我们求反演的过程就相当于是在求逆矩阵，这也是为什么在下面每个反演的推导中，vfk都是先“说了一句废话”，然后就推导出了结论，他说的那句废话，就相当于是把原矩阵乘上了一个单位矩阵，然后，用我们已经知道的系数矩阵与其逆代换这个单位矩阵，然后代换掉系数矩阵与原矩阵的乘积，就是反演后的样子，下面用推导步骤详细说明这里的含义（用$F$代表函数$f$的矩阵，大小为$1×n$，用$G$代表函数$g$的矩阵，大小为$1×n$，用$A$代表系数矩阵，大小为$n×n$，$I$表示单位矩阵，大小为$n×n$）：</p>
<script type="math/tex; mode=display">
\begin{array}{rcl}
\mbox{首先有}&F & =&  GA\\
\mbox{又知}& G & =&  G × I\\
&G × I  &=&  G × A × A^{-1}\\
& &=&  F × A^{-1}\\
\mbox{故}& G &=& F × A^{-1}
\end{array}</script><p>这形象地反映了vfk的推导过程，理解起来会好一些，之后也会把每个式子对应到上面的矩阵运算中</p>
<p>下面分别对两个常见反演进行讲解：</p>
<h2 id="二项式反演"><a href="#二项式反演" class="headerlink" title="二项式反演"></a>二项式反演</h2><h3 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h3><script type="math/tex; mode=display">
\begin{eqnarray}
f(n) =\sum_{k = 0}^{n} \binom{n}{k} g(k)\\
g(n)  = \sum_{k = 0}^{n} (-1)^{n - k} \binom{n}{k} f(k)
\end{eqnarray}</script><h3 id="推导"><a href="#推导" class="headerlink" title="推导"></a>推导</h3><p>首先说一句废话($G = G * I$):</p>
<script type="math/tex; mode=display">
\begin{equation}
  g(n) = \sum_{m = 0}^{n} [n - m = 0] \binom{n}{m} g(m)
\end{equation}</script><p>回忆我们刚才发现的性质($I = A * A^{-1}$):</p>
<script type="math/tex; mode=display">
\begin{equation}
  \sum_{k = 0}^{n}{(-1)^k\binom{n}{k}} = [n = 0]
\end{equation}</script><p>代进去($G = G * I = G × A × A^{-1}$):</p>
<script type="math/tex; mode=display">
\begin{equation}
  g(n) = \sum_{m = 0}^{n} \sum_{k = 0}^{n - m} (-1)^k \binom{n - m}{k} \binom{n}{m} g(m)
\end{equation}</script><p>注意 $\binom{n - m}{k} \binom{n}{m}$ 意思是在 $n$ 个里面两个子集一个大小为 $m$ 另一个大小为 $k$，所以和 $\binom{n}{k} \binom{n - k}{m}$ 其实是等价的</p>
<script type="math/tex; mode=display">
\begin{eqnarray}
  g(n) =\sum_{m = 0}^{n} \sum_{k = 0}^{n - m} (-1)^k \binom{n - m}{k} \binom{n}{m} g(m) \\
  = \sum_{m = 0}^{n} \sum_{k = 0}^{n - m} (-1)^k \binom{n}{k} \binom{n - k}{m} g(m)
\end{eqnarray}</script><p>交换两个求和符号:</p>
<script type="math/tex; mode=display">
\begin{equation}
  g(n) = \sum_{k = 0}^{n} (-1)^k \binom{n}{k} \sum_{m = 0}^{n - k} \binom{n - k}{m} g(m)
\end{equation}</script><p>注意最右边的那个小朋友！其实就是 $f$！($F = GA$)<br>变成:</p>
<script type="math/tex; mode=display">
\begin{equation}
  g(n) = \sum_{k = 0}^{n} (-1)^k \binom{n}{k} f(n - k)
\end{equation}</script><p>把下标换得漂亮点:</p>
<script type="math/tex; mode=display">
\begin{equation}
  g(n) = \sum_{k = 0}^{n} (-1)^{n - k} \binom{n}{k} f(k)
\end{equation}</script><p>所以我们就得到了酱紫的东西:（妈呀其实就是容斥）</p>
<script type="math/tex; mode=display">
\begin{eqnarray}
f(n)  = \sum_{k = 0}^{n} \binom{n}{k} g(k)\\
g(n) = \sum_{k = 0}^{n} (-1)^{n - k} \binom{n}{k} f(k)
\end{eqnarray}</script><h2 id="莫比乌斯反演"><a href="#莫比乌斯反演" class="headerlink" title="莫比乌斯反演"></a>莫比乌斯反演</h2><h3 id="形式A"><a href="#形式A" class="headerlink" title="形式A"></a>形式A</h3><script type="math/tex; mode=display">
\begin{eqnarray}
  f(n) =  \sum_{d \mid n} g(d)\\
  g(n)  =  \sum_{d \mid n} \mu(\frac{n}{d}) f(d)
\end{eqnarray}</script><h3 id="形式B"><a href="#形式B" class="headerlink" title="形式B"></a>形式B</h3><script type="math/tex; mode=display">
\begin{eqnarray}
  f(n) = \sum_{n \mid d} g(d)\\
  g(n) = \sum_{n \mid d} \mu(\frac{d}{n}) f(d)
\end{eqnarray}</script><h3 id="推导-1"><a href="#推导-1" class="headerlink" title="推导"></a>推导</h3><p>可以知道 $ \mu(\prod_p p^\alpha) = \prod_p [\alpha = 1](-1) $ （为啥是这个式子以后再侃 = =）($I = A * A^{-1}$):</p>
<p>接下来说一句废话($G = G * I$):</p>
<script type="math/tex; mode=display">
\begin{equation}
  g(n) = \sum_{m \mid n} [\frac{n}{m} = 1]g(m)
\end{equation}</script><p>代进去！($G = G * I = G × A × A^{-1}$)</p>
<script type="math/tex; mode=display">
\begin{equation}
  g(n) = \sum_{m \mid n} \sum_{d \mid \frac{n}{m}} \mu(d) g(m)
\end{equation}</script><p>注意 $d \mid \frac{n}{m}$ 其实就是 $md \mid n$，所以跟 $m \mid \frac{n}{d}$ 等价。似曾相识，对不？<br>交换两个求和符号：</p>
<script type="math/tex; mode=display">
\begin{equation}
  g(n) = \sum_{d \mid n} \mu(d) \sum_{m \mid \frac{n}{d}} g(m)
\end{equation}</script><p>$f$ 君好久不见($F = GA$)</p>
<script type="math/tex; mode=display">
\begin{equation}
  g(n) = \sum_{d \mid n} \mu(d) f(\frac{n}{d})
\end{equation}</script><p>把下标换得漂亮点：</p>
<script type="math/tex; mode=display">
\begin{equation}
  g(n) = \sum_{d \mid n} \mu(\frac{n}{d}) f(d)
\end{equation}</script><p>所以我们就得到了酱紫的东西：（妈呀其实这也是容斥）</p>
<script type="math/tex; mode=display">
\begin{eqnarray}
  f(n) =  \sum_{d \mid n} g(d)\\
  g(n)  =  \sum_{d \mid n} \mu(\frac{n}{d}) f(d)
\end{eqnarray}</script><p>基本上举了这两个例子，用于说明vfk的操作实际上是矩阵运算，免得很多人不知道vfk在干嘛。。。</p>
<h2 id="子集反演"><a href="#子集反演" class="headerlink" title="子集反演"></a>子集反演</h2><h3 id="形式A-1"><a href="#形式A-1" class="headerlink" title="形式A"></a>形式A</h3><script type="math/tex; mode=display">
\begin{eqnarray}
  f(S)  =  \sum_{T \subseteq S} g(T)\\
  g(S)  =  \sum_{T \subseteq S} (-1)^{\lvert S \rvert - \lvert T \rvert} f(T)
\end{eqnarray}</script><h3 id="形式B-1"><a href="#形式B-1" class="headerlink" title="形式B"></a>形式B</h3><script type="math/tex; mode=display">
\begin{eqnarray}
  f(S)  =  \sum_{S \subseteq T} g(T)\\
  g(S)  =  \sum_{S \subseteq T} (-1)^{\lvert T \rvert - \lvert S \rvert} f(T)
\end{eqnarray}</script><h3 id="形式C（多重子集反演）"><a href="#形式C（多重子集反演）" class="headerlink" title="形式C（多重子集反演）"></a>形式C（多重子集反演）</h3><p>定义 $\mu(S)$，$S$ 包含重复元素则为 $0$，否则为 $(-1)^{\lvert S \rvert}$</p>
<script type="math/tex; mode=display">
\begin{eqnarray}
  f(S)  =  \sum_{T \subseteq S} g(T)\\
  g(S)  =  \sum_{T \subseteq S} \mu(S - T) f(T)
\end{eqnarray}</script><h3 id="推导-2"><a href="#推导-2" class="headerlink" title="推导"></a>推导</h3><script type="math/tex; mode=display">
\begin{equation}
  \sum_{r \subseteq p} (-1)^{\lvert r \rvert} = [p = 0]
\end{equation}</script><p>这里的 $\lvert r \rvert$ 表示集合的大小<br>然后像以前一样做：</p>
<script type="math/tex; mode=display">
\begin{eqnarray}
  g(p)  = \sum_{q \subseteq p} [p - q = 0] g(q) \\
   =  \sum_{q \subseteq p} \sum_{r \subseteq p - q} (-1)^{\lvert r \rvert} g(q) \\
   =  \sum_{r \subseteq p} (-1)^{\lvert r \rvert} \sum_{q \subseteq p - r} g(q) \\
   =  \sum_{r \subseteq p} (-1)^{\lvert r \rvert} f(p - r) \\
   =  \sum_{r \subseteq p} (-1)^{\lvert p \rvert - \lvert r \rvert} f(r)
\end{eqnarray}</script><p>所以我们就得到了酱紫的东西：（妈呀就是裸容斥）</p>
<script type="math/tex; mode=display">
\begin{eqnarray}
  f(S)  =  \sum_{T \subseteq S} g(T)\\
  g(S)  =  \sum_{T \subseteq S} (-1)^{\lvert S \rvert - \lvert T \rvert} f(T)
\end{eqnarray}</script><p>子集反演很重要，因为通过它，你可以在本质的层面上理解莫比乌斯反演的真正内涵，所有的整数都可以看做集合，而多重子集反演则可以很好地解释莫比乌斯函数的必要性，而子集反演和二项式反演也有密不可分的联系（其实这三个反演的本质完全相同，都是同一种反演）</p>
<h2 id="离散傅里叶变换"><a href="#离散傅里叶变换" class="headerlink" title="离散傅里叶变换"></a>离散傅里叶变换</h2><h3 id="形式-1"><a href="#形式-1" class="headerlink" title="形式"></a>形式</h3><script type="math/tex; mode=display">
\begin{eqnarray}
  f_m  =  \sum_{k = 0}^{n - 1} \epsilon^{mk} g_k\\
  g_m  =  \frac{1}{n} \sum_{k = 0}^{n - 1} \epsilon^{-mk} f_k
\end{eqnarray}</script><h3 id="推导-3"><a href="#推导-3" class="headerlink" title="推导"></a>推导</h3><p>说实话并没有看懂vfk的推导。。。</p>
<p>注意到：</p>
<script type="math/tex; mode=display">
\begin{eqnarray}
      [(p + q) \bmod n = r] \\
   =  [(p + q - r) \bmod n = 0] \\
   =  \frac{1}{n}\sum_{k = 0}^{n - 1} \epsilon^{(p + q - r)k} \\
   =  \frac{1}{n}\sum_{k = 0}^{n - 1} \epsilon^{-rk} \epsilon^{pk} \epsilon^{qk}
\end{eqnarray}</script><p>这三部分几乎是独立的！</p>
<script type="math/tex; mode=display">
\begin{eqnarray}
  c_r  =  \sum_{p, q} [(p + q) \bmod n = r] a_p b_q \\
   =  \sum_{p, q} \frac{1}{n} \sum_{k = 0}^{n - 1} \epsilon^{-rk} \epsilon^{pk} \epsilon^{qk} a_p b_q \\
   =  \frac{1}{n} \sum_{k = 0}^{n - 1} \epsilon^{-rk} \sum_{p, q} \epsilon^{pk} a_p \epsilon^{qk} b_q \\
   =  \frac{1}{n} \sum_{k = 0}^{n - 1} \epsilon^{-rk} \sum_{p} \epsilon^{pk} a_p \sum_{q} \epsilon^{qk} b_q \\
\end{eqnarray}</script><p>抓到你了！反演君！<br>所以我们就得到了酱紫的东西：</p>
<script type="math/tex; mode=display">
\begin{eqnarray}
  f_m  =  \sum_{k = 0}^{n - 1} \epsilon^{mk} g_k\\
  g_m  =  \frac{1}{n} \sum_{k = 0}^{n - 1} \epsilon^{-mk} f_k
\end{eqnarray}</script><p>利用分治和单位根的小性质，这两个都是可以快速求的</p>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="UOJ-Round-5-C"><a href="#UOJ-Round-5-C" class="headerlink" title="UOJ Round #5 C"></a>UOJ Round #5 C</h2><p>令 $p = 998244353$（$7 \times 17 \times 2^{23} + 1$，一个质数）。<br>给你整数 $n, c, d$。现在有整数 $x_1, \dots, x_n$ 和 $b_1, \dots, b_n$ 满足 $0 \leq x_1, \dots, x_n, b_1, \dots, b_n &lt; p$，且对于 $1 \leq i \leq n$ 满足：</p>
<script type="math/tex; mode=display">\begin{equation}
  \sum_{j = 1}^{n} \gcd(i, j)^c \cdot lcm(i, j)^d \cdot x_j \equiv b_i \pmod{p}
\end{equation}</script><p>有 $q$ 个询问，每次给出 $b_1, \dots, b_n$，请你解出 $x_1, \dots, x_n$ 的值。<br>$n \leq 10^5$, $nq \leq 3 \times 10^5$</p>
<h2 id="经典问题"><a href="#经典问题" class="headerlink" title="经典问题"></a>经典问题</h2><p>有两个长度为 $2^n$ 的数列 $a_0, \dots, a_{2^n-1}$，$b_0, \dots, b_{2^n-1}$。<br>求数列 $c$，其中</p>
<script type="math/tex; mode=display">
\begin{equation}
  c_r = \sum_{p, q} [p \mbox{ or } q = r] a_p b_q
\end{equation}</script><p>$n \leq 20$</p>
<h2 id="经典问题-1"><a href="#经典问题-1" class="headerlink" title="经典问题"></a>经典问题</h2><p>有两个长度为 $n$ 的数列 $a_0, \dots, a_{n-1}$，$b_0, \dots, b_{n-1}$。<br>求数列 $c$，其中</p>
<script type="math/tex; mode=display">
\begin{equation}
  c_r = \sum_{p, q} [(p + q) \bmod n = r] a_p b_q
\end{equation}</script><p>$n$ 是 $2$ 的整数次幂，$n \leq 2^{20}$。</p>
<h2 id="经典问题-2"><a href="#经典问题-2" class="headerlink" title="经典问题"></a>经典问题</h2><p>有两个长度为 $2^n$ 的数列 $a_0, \dots, a_{2^n-1}$，$b_0, \dots, b_{2^n-1}$。<br>求数列 $c$，其中</p>
<script type="math/tex; mode=display">\begin{equation}
  c_r = \sum_{p, q} [p \mbox{ and } q = r] a_p b_q
\end{equation}</script><p>$n \leq 20$</p>
<h2 id="经典问题-3"><a href="#经典问题-3" class="headerlink" title="经典问题"></a>经典问题</h2><p>有两个长度为 $2^n$ 的数列：$a_0, \dots, a_{2^n-1}$ 和 $b_0, \dots, b_{2^n-1}$。<br>求数列 $c$，其中</p>
<script type="math/tex; mode=display">
\begin{equation}
  c_r = \sum_{p \subseteq r} a_p b_{r - p}
\end{equation}</script><p>要求 $O(n^2 2^n)$</p>
<h1 id="优秀代码"><a href="#优秀代码" class="headerlink" title="优秀代码"></a>优秀代码</h1><h2 id="莫比乌斯反演-1"><a href="#莫比乌斯反演-1" class="headerlink" title="莫比乌斯反演"></a>莫比乌斯反演</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i = n; i++)</div><div class="line">      g[i] = f[i];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i = n; i++)</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i + i; j = n; j += i)</div><div class="line">        g[j] -= g[i];</div></pre></td></tr></table></figure>
<h2 id="子集反演-1"><a href="#子集反演-1" class="headerlink" title="子集反演"></a>子集反演</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; (<span class="number">1</span> &lt;&lt; n); s++)</div><div class="line">        <span class="keyword">if</span> (s &gt;&gt; i &amp; <span class="number">1</span>)</div><div class="line">            f[s] += f[s ^ <span class="number">1</span> &lt;&lt; i];</div></pre></td></tr></table></figure>
<p>无脑反着写：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; (<span class="number">1</span> &lt;&lt; n); s++)</div><div class="line">        <span class="keyword">if</span> (s &gt;&gt; i &amp; <span class="number">1</span>)</div><div class="line">            f[s] -= f[s ^ <span class="number">1</span> &lt;&lt; i];</div></pre></td></tr></table></figure></p>
<p>感觉东西不少，提炼的也差不多了，那么就先这样子吧</p>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;最近补了一下以前反演的坑，写个博客记录一下大致内容以及细节问题，便于日后复习&lt;br&gt;
    
    </summary>
    
    
      <category term="数论" scheme="https://goseqh.tk/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="数学" scheme="https://goseqh.tk/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="线性代数" scheme="https://goseqh.tk/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
      <category term="反演" scheme="https://goseqh.tk/tags/%E5%8F%8D%E6%BC%94/"/>
    
  </entry>
  
  <entry>
    <title>烤肉？烤肉。</title>
    <link href="https://goseqh.tk/2017/07/29/%E7%83%A4%E8%82%89%EF%BC%9F%E7%83%A4%E8%82%89%E3%80%82/"/>
    <id>https://goseqh.tk/2017/07/29/烤肉？烤肉。/</id>
    <published>2017-07-29T14:52:08.000Z</published>
    <updated>2017-07-29T15:56:49.043Z</updated>
    
    <content type="html"><![CDATA[<link href="/style.css" rel="stylesheet" type="text/css"><script src="/crypto-js.js"></script><script src="/mcommon.js"></script><script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <div id="security"> <div> <div class="input-container"> <input type="password" class="form-control" id="pass" placeholder=" Maybe you cannot access this article, I'm sorry. "/> <label for="pass"> Maybe you cannot access this article, I'm sorry. </label> <div class="bottom-line"></div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      Nice to meet you.
    
    </summary>
    
    
      <category term="感悟" scheme="https://goseqh.tk/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>单调队列&amp;单调栈总结</title>
    <link href="https://goseqh.tk/2017/07/26/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97-%E5%8D%95%E8%B0%83%E6%A0%88%E6%80%BB%E7%BB%93/"/>
    <id>https://goseqh.tk/2017/07/26/单调队列-单调栈总结/</id>
    <published>2017-07-26T07:44:05.000Z</published>
    <updated>2017-07-27T00:48:45.665Z</updated>
    
    <content type="html"><![CDATA[<!--toc-->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>最近刷了一波JCY大神的课件，打算认真练习一发单调队列/单调栈，于是有了这篇总结，同时作为之后学习单调优化DP的基础<br><a id="more"></a></p>
<h1 id="单调队列-单调栈概念介绍"><a href="#单调队列-单调栈概念介绍" class="headerlink" title="单调队列/单调栈概念介绍"></a>单调队列/单调栈概念介绍</h1><p>由于个人认为这两者基本没什么区别，所以放在一起进行讲解</p>
<p>单调队列就是一个队列，里面的元素具有单调性，所以就可以在里面进行各种操作，比如在里面进行二分啊什么的，但是如果只能二分那其实也没有什么学习的必要性，更加重点的作用就是它能够同时维护多个区间的信息，具体原因下文会有所讲述<br><img src="http://otp08noas.bkt.clouddn.com/3.png" alt=""><br>而单调栈很显然就是一个栈，它里面的元素也是具有单调性的，但是每次只能从一个方向进出<br><img src="http://otp08noas.bkt.clouddn.com/4.png" alt=""></p>
<p>首先说一下个人的理解，单调队列和单调栈其实没有什么本质区别，首先单调栈，看上去它是一个内部元素有序化的这么一个数据结构，但如果深入挖掘栈内各个元素的本质，就会发现，实际上栈内每个元素都代表着一个区间，这个区间中的极值就是这个元素的值（极值可以使最大值或最小值，这个看你如何进行维护）</p>
<p>为什么这么说呢？我们可以看一下这个图：<br><img src="http://otp08noas.bkt.clouddn.com/1.png" alt=""><br>这时我们已经处理了两个大括号之间的所有数据，然后，我们把单调栈里的每一项都用一种颜色进行标记，同时标出它们在原序列上对应的区间，如下图：<br><img src="http://otp08noas.bkt.clouddn.com/2.png" alt=""><br>我们会发现，每个元素在它自己的区间内，都是最大值，这就是单调栈的实质，通过许多单个元素同时维护“许多区间”</p>
<p>为什么这么说呢，大家可以把当前单调栈中维护的区间看作这样子：</p>
<p>首先，我们不是标记出了每个颜色的范围吗，把这个每个颜色中的元素的在原序列中的下标视为左端点，现在更新到的原序列中的位置视为右端点，那么这个栈里面就总共维护着已经更新的原序列中的元素的个数这么多个区间，我们每次都会使右端点向右移动一个单位，这样总共就会维护到 $\frac{n ∗ (n + 1)}{2}$ 个区间，对应原序列的全部子区间，这种理解，我个人称作 <strong>区间化理解</strong></p>
<p>所以，单调栈往往可以解决具有如下特征的问题：</p>
<ul>
<li>涉及最值</li>
<li>询问全部区间的情况（个数为$O(n^2)$)<br>显然，单调栈的特性在于第二点，它能同时维护许多区间，所以就可以把原本暴力$O(n^2)$才能解决问题的算法优化到了$O(n)$，其实这是一个极为优秀的优化</li>
</ul>
<p>我们可以在每次加入元素的同时，直接把答案进行批量累加（即再维护一个当前栈内所有区间的贡献和，每次把答案加上这个总贡献），这样就能够非常高效的维护与所有区间有关的信息，我把这种方法称为<strong>整体化处理</strong>，这种方法有时虽然可以被替代，但更多时候它能简化出栈时更新答案的复杂性，因为<strong>整体化处理</strong>是随时更新答案的</p>
<p>或者是在每次弹出元素的时候，对答案进行更新，这样可以保证相对于单个区间来说的答案最优性（相当于<strong>极大化</strong>区间贡献）</p>
<p>而单调队列就相当于，我们移动了元素的起始位置，像是一个滑动的窗口，在左端点向右移动时，我们永远地舍弃掉了那些掉出窗口的元素，这样做的目的会在下文的讲解中体现</p>
<p>下面举几个例题，来简单介绍一下它的具体用法与应用范围</p>
<h1 id="例题讲解"><a href="#例题讲解" class="headerlink" title="例题讲解"></a>例题讲解</h1><h2 id="51nod-1102-面积最大的矩形"><a href="#51nod-1102-面积最大的矩形" class="headerlink" title="51nod 1102 面积最大的矩形"></a>51nod 1102 面积最大的矩形</h2><p>基准时间限制：1 秒<br>空间限制：131072 KB<br>分值：20<br>难度：3级算法题</p>
<p>有一个正整数的数组，化为直方图，求此直方图包含的最大矩形面积。例如 $2,1,5,6,2,3$，对应的直方图如下：</p>
<p>面积最大的矩形为$5,6$组成的宽度为$2$的矩形，面积为$10$。</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>$第1行：1个数N，表示数组的长度(0 &lt;= N &lt;= 50000)$<br>$第2 - N + 1行：数组元素A[i]。(1 &lt;= A[i] &lt;= 10^9)$</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>输出最大的矩形面积</p>
<h3 id="Input示例"><a href="#Input示例" class="headerlink" title="Input示例"></a>Input示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">6</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">6</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<h3 id="Output示例"><a href="#Output示例" class="headerlink" title="Output示例"></a>Output示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">10</span></div></pre></td></tr></table></figure>
<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>求最大矩形面积，这是单调栈的一个常见应用，考虑到当高度下降的时候，被卡住的那些矩形就永远只能被卡在那里了，所以这时它们就应该出栈，于是我们就知道应该维护一个单调上升的单调栈，细节可见代码</p>
<p>维护方法：我们对于每个进栈的元素定义结构体，里面有两个成员变量，分别代表它入栈的位置和它自己的高度（用于比较的键值），出栈时用当前的位置与它入栈的位置的距离减一作为矩形一边，高度作为另一边计算面积并更新答案</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">LL line[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rec</span>&#123;</span></div><div class="line">    LL val, idx;</div><div class="line">    rec(LL val, LL idx) : val(val), idx(idx)&#123;&#125;</div><div class="line">    rec()&#123;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">stack</span>&lt;rec&gt; save;</div><div class="line">LL ans = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">        rec op;</div><div class="line">        <span class="keyword">int</span> l = i;</div><div class="line">        <span class="keyword">while</span>(!save.empty() &amp;&amp; (save.top()).val &gt; line[i])&#123;</div><div class="line">            op = save.top();</div><div class="line">            ans = max(ans, (i - op.idx) * op.val);</div><div class="line">            l = op.idx;</div><div class="line">            save.pop();</div><div class="line">        &#125;</div><div class="line">        save.push(rec(line[i], l));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (!save.empty())&#123;</div><div class="line">        rec op = save.top();</div><div class="line">        ans = max(ans, (n - op.idx + <span class="number">1</span>) * op.val);</div><div class="line">        save.pop();</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("rec.in", "r", stdin);</span></div><div class="line">    freopen("rec.out", "w", stdout);*/</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;line[i]);</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="51nod-1158-全是1的最大子矩阵"><a href="#51nod-1158-全是1的最大子矩阵" class="headerlink" title="51nod 1158 全是1的最大子矩阵"></a>51nod 1158 全是1的最大子矩阵</h2><p>基准时间限制：1 秒<br>空间限制：131072 KB<br>分值：80<br>难度：5级算法题</p>
<p>给出1个$M*N$的矩阵$M_1$，里面的元素只有0或1，找出$M_1$的一个子矩阵$M_2$，$M_2$中的元素只有1，并且$M_2$的面积是最大的。输出$M_2$的面积。</p>
<h3 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h3><p>$第1行:2个数m,n中间用空格分隔(2 &lt;= m,n &lt;= 500)$<br>$第2 - N + 1行：每行m个数，中间用空格分隔，均为0或1。$</p>
<h3 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h3><p>$输出最大全是1的子矩阵的面积。$</p>
<h3 id="Input示例-1"><a href="#Input示例-1" class="headerlink" title="Input示例"></a>Input示例</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">3 </span><span class="number">3</span></div><div class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">0</span></div><div class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">1</span></div><div class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">1</span></div></pre></td></tr></table></figure>
<h3 id="Output示例-1"><a href="#Output示例-1" class="headerlink" title="Output示例"></a>Output示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure>
<h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><p>上一题的二维加强版，直接对每一行套用上一题方法即可</p>
<p>维护方法：同上一题</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 505</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> geo[maxn][maxn];</div><div class="line"><span class="keyword">int</span> low[maxn][maxn];</div><div class="line"><span class="keyword">int</span> up[maxn][maxn];</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)&#123;</div><div class="line">        low[n - <span class="number">1</span>][j] = (geo[n - <span class="number">1</span>][j]) ? <span class="number">1</span> : <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)&#123;</div><div class="line">            low[i][j] = (geo[i][j]) ? low[i + <span class="number">1</span>][j] + <span class="number">1</span> : <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mat</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> val, idx;</div><div class="line">    mat(<span class="keyword">int</span> val, <span class="keyword">int</span> idx) : val(val), idx(idx)&#123;&#125;</div><div class="line">    mat()&#123;&#125;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> row)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="built_in">stack</span>&lt;mat&gt; save;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) line[i] = low[row][i];</div><div class="line">    save.push(mat(line[<span class="number">0</span>], <span class="number">0</span>));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++)&#123;</div><div class="line">        mat op = save.top();</div><div class="line">        <span class="keyword">int</span> l = i;</div><div class="line">        <span class="keyword">while</span> (!save.empty() &amp;&amp; op.val &gt;= line[i])&#123;</div><div class="line">            l = op.idx;</div><div class="line">            ans = max(ans, (i - l) * op.val);</div><div class="line">            save.pop();</div><div class="line">            <span class="keyword">if</span> (save.empty()) <span class="keyword">break</span>;</div><div class="line">            op = save.top();</div><div class="line">        &#125;</div><div class="line">        save.push(mat(line[i], l));</div><div class="line">        ans = max(ans, (i - l + <span class="number">1</span>) * line[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*--------------------*/</span></div><div class="line">    <span class="keyword">while</span> (!save.empty())&#123;</div><div class="line">        mat op = save.top();</div><div class="line">        ans = max(ans, (m - op.idx) * op.val);</div><div class="line">        save.pop();</div><div class="line">        <span class="keyword">if</span> (save.empty()) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/*--------------------*/</span></div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) ans = max(ans, cal(i));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("mat.in", "r", stdin);</span></div><div class="line">    freopen("mat.out", "w" ,stdout);*/</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;geo[i][j]);</div><div class="line">    init();</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="51nod-1215-数组的宽度"><a href="#51nod-1215-数组的宽度" class="headerlink" title="51nod 1215 数组的宽度"></a>51nod 1215 数组的宽度</h2><p>题目来源： Javaman<br>基准时间限制：1 秒<br>空间限制：131072 KB<br>分值： 80<br>难度：5级算法题</p>
<p>N个整数组成的数组，定义子数组$a[i]..a[j]$的宽度为：$max(a[i]..a[j]) - min(a[i]..a[j])$，求所有子数组的宽度和。</p>
<h3 id="Input-2"><a href="#Input-2" class="headerlink" title="Input"></a>Input</h3><p>$第1行：1个数N，表示数组的长度。(1 &lt;= N &lt;= 50000)$<br>$第2 - N + 1行：每行1个数，表示数组中的元素(1 &lt;= A[i] &lt;= 50000)$</p>
<h3 id="Output-2"><a href="#Output-2" class="headerlink" title="Output"></a>Output</h3><p>输出所有子数组的宽度和。</p>
<h3 id="Input示例-2"><a href="#Input示例-2" class="headerlink" title="Input示例"></a>Input示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">5</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">5</span></div></pre></td></tr></table></figure>
<h3 id="Output示例-2"><a href="#Output示例-2" class="headerlink" title="Output示例"></a>Output示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">20</span></div></pre></td></tr></table></figure>
<h2 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h2><p>发现最大值与最小值可以分开维护，这样就简单了许多，我们可以通过单调栈快速求出所有区间的极值之和，具体方法需要我上面的对于单调栈的<strong>区间化理解</strong>，细节见代码</p>
<p>维护方法，由于对称性，仅讲解最大值的求法：对每个入栈的元素定义结构体，内含两个成员变量，其中一个代表在<strong>区间化理解</strong>的意义下，这个元素所代表的区间的左端点，另一个变量代表它本身的值（键值），出栈时，由于它一定小于把它挤出去的那个元素，于是需要把它自己的左端点传给那个新来的元素，然后自己出栈，对于答案，我们采用<strong>整体化处理</strong>，用一个全局变量维护当前栈内元素所代表的所有区间的最大值的和，每次把一个元素入栈以后，我们需要把出栈的那些元素对这个全局变量的贡献减掉，然后加上刚入栈的那个元素的贡献，然后直接加入最终答案即可</p>
<p>p.s. 其实也不一定用到整体化处理，我们考察区间化理解的意义后，可以直接在每个元素出栈时再用它们的贡献更新答案，所以这不算是整体化处理的典型用法</p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">LL line[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inter</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> val, l, r;</div><div class="line">    inter(<span class="keyword">int</span> val, <span class="keyword">int</span> l, <span class="keyword">int</span> r) : val(val), l(l), r(r)&#123;&#125;</div><div class="line">    inter()&#123;&#125;</div><div class="line">&#125;;</div><div class="line"><span class="function">LL <span class="title">get_max</span><span class="params">()</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>, now = <span class="number">0</span>;</div><div class="line">    <span class="built_in">stack</span>&lt;inter&gt; save;</div><div class="line">    save.push(inter(line[<span class="number">1</span>], <span class="number">1</span>, <span class="number">1</span>));</div><div class="line">    ans = now = line[<span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> l = i;</div><div class="line">        inter op = save.top();</div><div class="line">        <span class="keyword">while</span> (!save.empty() &amp;&amp; op.val &lt;= line[i])&#123;</div><div class="line">            now -= (LL)(op.r - op.l + <span class="number">1</span>) * op.val;</div><div class="line">            l = op.l;</div><div class="line">            save.pop();</div><div class="line">            <span class="keyword">if</span> (save.empty()) <span class="keyword">break</span>;</div><div class="line">            op = save.top();</div><div class="line">        &#125;</div><div class="line">        save.push(inter(line[i], l, i));</div><div class="line">        now += (i - l + <span class="number">1</span>) * line[i];</div><div class="line">        ans += now;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function">LL <span class="title">get_min</span><span class="params">()</span></span>&#123;</div><div class="line">    LL ans = <span class="number">0</span>, now = <span class="number">0</span>;</div><div class="line">    <span class="built_in">stack</span>&lt;inter&gt; save;</div><div class="line">    save.push(inter(line[<span class="number">1</span>], <span class="number">1</span>, <span class="number">1</span>));</div><div class="line">    ans = now = line[<span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> l = i;</div><div class="line">        inter op = save.top();</div><div class="line">        <span class="keyword">while</span> (!save.empty() &amp;&amp; op.val &gt;= line[i])&#123;</div><div class="line">            now -= (LL)(op.r - op.l + <span class="number">1</span>) * op.val;</div><div class="line">            l = op.l;</div><div class="line">            save.pop();</div><div class="line">            <span class="keyword">if</span> (save.empty()) <span class="keyword">break</span>;</div><div class="line">            op = save.top();</div><div class="line">        &#125;</div><div class="line">        save.push(inter(line[i], l, i));</div><div class="line">        now += (i - l + <span class="number">1</span>) * line[i];</div><div class="line">        ans += now;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("width.in", "r", stdin);</span></div><div class="line">    freopen("width.out", "w", stdout);*/</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;line[i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, get_max() - get_min());</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="51nod-1272-最大距离"><a href="#51nod-1272-最大距离" class="headerlink" title="51nod 1272 最大距离"></a>51nod 1272 最大距离</h2><p>题目来源： Codility<br>基准时间限制：1 秒<br>空间限制：131072 KB<br>分值： 20<br>难度：3级算法题</p>
<p>给出一个长度为$N$的整数数组$A$，对于每一个数组元素，如果他后面存在大于等于该元素的数，则这两个数可以组成一对。每个元素和自己也可以组成一对。例如：${5, 3, 6, 3, 4, 2}$，可以组成$11$对，如下（数字为下标）：<br>$(0,0), (0, 2), (1, 1), (1, 2), (1, 3), (1, 4), (2, 2), (3, 3), (3, 4), (4, 4), (5, 5)$。其中$(1, 4)$是距离最大的一对，距离为3。</p>
<h3 id="Input-3"><a href="#Input-3" class="headerlink" title="Input"></a>Input</h3><p>$第1行：1个数N，表示数组的长度(2 &lt;= N &lt;= 50000)。$<br>$第2 - N + 1行：每行1个数，对应数组元素A_i(1 &lt;= A_i &lt;= 10^9)。$</p>
<h3 id="Output-3"><a href="#Output-3" class="headerlink" title="Output"></a>Output</h3><p>输出最大距离。</p>
<h3 id="Input示例-3"><a href="#Input示例-3" class="headerlink" title="Input示例"></a>Input示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">6</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">6</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure>
<h3 id="Output示例-3"><a href="#Output示例-3" class="headerlink" title="Output示例"></a>Output示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<h2 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h2><p>这道题算是比较经典的单调栈内二分的题目，这就是单调栈的一种比较简单的操作，其实这题我是搞了一段时间的，主要是想有没有$O(n)$的算法，然而最后还是没能想出来。。。</p>
<p>维护方法：本题采用了一种不同的维护方式，即不保留刚入栈元素的方式，每次对于刚入栈的元素，如果它小于栈顶元素，我们把它直接入栈，否则，我们不将它入栈，而是在原栈中二分寻找答案，并更新最终答案，容易知道这样做是正确的</p>
<h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">num</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> val, idx;</div><div class="line">    num(<span class="keyword">int</span> val, <span class="keyword">int</span> idx) : val(val), idx(idx)&#123;&#125;</div><div class="line">    num()&#123;&#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> num b) <span class="keyword">const</span>&#123;</div><div class="line">        <span class="keyword">return</span> val &gt; b.val;</div><div class="line">    &#125;</div><div class="line">&#125;save[maxn];</div><div class="line"><span class="keyword">int</span> head;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(num x)</span></span>&#123;</div><div class="line">    save[head++] = x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">(num x)</span></span>&#123;</div><div class="line">    head--;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> num <span class="title">top</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> save[head - <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">    push(num(line[<span class="number">1</span>], <span class="number">1</span>));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        num op = top();</div><div class="line">        <span class="keyword">if</span> (line[i] &lt; op.val) push(num(line[i], i));</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            num* op2 = lower_bound(save, save + head, num(line[i], i));</div><div class="line">            ans = max(ans, i - op2 -&gt; idx);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("maxlen.in", "r", stdin);</span></div><div class="line">    freopen("maxlen.out", "w", stdout);*/</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="51nod-1962-区间计数"><a href="#51nod-1962-区间计数" class="headerlink" title="51nod 1962 区间计数"></a>51nod 1962 区间计数</h2><p>基准时间限制：1.5 秒<br>空间限制：262144 KB<br>分值： 80<br>难度：5级算法题</p>
<p>两个数列 ${A_n} ， {B_n}$ ，请求出$Ans$, $Ans$定义如下：</p>
<script type="math/tex; mode=display">Ans=\sum_{i = 1}^{n}\sum_{j = 1}^{n}[j=i][max\{A_i,A_{i+1},...,A_j\}=max\{B_i,B_{i+1},...,B_j\}]</script><p>注：[ ]内表达式为真，则为1，否则为0.</p>
<p>$1≤N≤3.5×10^5$<br>$1≤A_i,B_i≤N $</p>
<h3 id="样例解释："><a href="#样例解释：" class="headerlink" title="样例解释："></a>样例解释：</h3><p>7个区间分别为：$（1,4），（1,5），（2,4），（2,5），（3,3），（3,5），（4,5）$</p>
<h3 id="Input-4"><a href="#Input-4" class="headerlink" title="Input"></a>Input</h3><p>$第一行一个整数N$<br>$第二行N个整数A_i$<br>$第三行N个整数B_i$</p>
<h3 id="Output-4"><a href="#Output-4" class="headerlink" title="Output"></a>Output</h3><p>一行，一个整数$Ans$</p>
<h3 id="Input示例-4"><a href="#Input示例-4" class="headerlink" title="Input示例"></a>Input示例</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">5</span></div><div class="line"><span class="symbol">1 </span><span class="number">4</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></div><div class="line"><span class="symbol">3 </span><span class="number">2</span> <span class="number">2</span> <span class="number">4</span> <span class="number">1</span></div></pre></td></tr></table></figure>
<h3 id="Output示例-4"><a href="#Output示例-4" class="headerlink" title="Output示例"></a>Output示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">7</span></div></pre></td></tr></table></figure>
<h2 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h2><p>其实我是先做的这道题，然后再看的其他题。。。<br>这题就是，我们同样使用区间化理解，先分别为两个序列维护两个栈，然后对栈内每个数记录一个区间，每次我们就是要求两个栈内的相同的数所对应的区间的交，我们每次插入元素，就把所有的交的和累加进答案，这就是我说的整体化处理</p>
<p>维护方法：对每个元素记录一个区间，和它本身的值，对值相同的元素我们求交，并把交的长度加入整体维护的全局变量中，出栈入栈分别删除或增加，每次当前位置更新完毕后，我们直接把答案加入最终答案即可</p>
<h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 400005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long int</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inter</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> l, r;</div><div class="line">    inter(<span class="keyword">int</span> l, <span class="keyword">int</span> r) : l(l), r(r)&#123;&#125;</div><div class="line">    inter()&#123;&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_insect</span><span class="params">(inter a, inter b)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (a.l &gt; b.l) swap(a, b);</div><div class="line">    <span class="keyword">if</span> (a.r &lt; b.l) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> min(a.r, b.r) - b.l + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; savea, saveb;</div><div class="line"><span class="keyword">int</span> linea[maxn], lineb[maxn];</div><div class="line">inter reca[maxn], recb[maxn];</div><div class="line">LL ans, now;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) reca[i] = recb[i] = inter(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    savea.push(linea[<span class="number">1</span>]);</div><div class="line">    reca[linea[<span class="number">1</span>]] = inter(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    saveb.push(lineb[<span class="number">1</span>]);</div><div class="line">    recb[lineb[<span class="number">1</span>]] = inter(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    now = ans = get_insect(recb[lineb[<span class="number">1</span>]], reca[lineb[<span class="number">1</span>]]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">int</span> op;</div><div class="line">        inter ka = inter(i, i);</div><div class="line">        <span class="keyword">while</span> (!savea.empty() &amp;&amp; (op = savea.top()) &lt;= linea[i])&#123;</div><div class="line">            now -= get_insect(reca[op], recb[op]);</div><div class="line">            ka.l = reca[op].l;</div><div class="line">            reca[op] = inter(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">            savea.pop();</div><div class="line">        &#125;</div><div class="line">        savea.push(linea[i]);</div><div class="line"></div><div class="line">        inter kb = inter(i, i);</div><div class="line">        <span class="keyword">while</span> (!saveb.empty() &amp;&amp; (op = saveb.top()) &lt;= lineb[i])&#123;</div><div class="line">            now -= get_insect(reca[op], recb[op]);</div><div class="line">            kb.l = recb[op].l;</div><div class="line">            recb[op] = inter(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">            saveb.pop();</div><div class="line">        &#125;</div><div class="line">        saveb.push(lineb[i]);</div><div class="line"></div><div class="line">        reca[linea[i]] = ka;</div><div class="line">        recb[lineb[i]] = kb;</div><div class="line">        <span class="keyword">if</span>  (linea[i] == lineb[i])&#123;</div><div class="line">            now += get_insect(ka, kb);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            now += get_insect(reca[linea[i]], recb[linea[i]]);</div><div class="line">            now += get_insect(reca[lineb[i]], recb[lineb[i]]);</div><div class="line">        &#125;</div><div class="line">        ans += now;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("inter.in", "r", stdin);</span></div><div class="line">    freopen("inter.out" ,"w", stdout);*/</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;linea[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;lineb[i]);</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="51nod-1153-选择子序列"><a href="#51nod-1153-选择子序列" class="headerlink" title="51nod 1153 选择子序列"></a>51nod 1153 选择子序列</h2><p>题目来源： Codility<br>基准时间限制：1 秒<br>空间限制：131072 KB<br>分值： 40<br>难度：4级算法题</p>
<p>长度为$N的整数数组A$，所有的数均不相同，假设下标从$0$开始。找到一个最长的数组B，B数组的长度为K，数值范围是$0 - N - 1$，记录的是A数组的下标。</p>
<p>满足$A[B[0]] &gt; A[B[1]] &gt; A[B[2]] &gt;…A[B[K]]$，并且对任意连续的两项$B[i]及B[i + 1]$，满足$min(B[i]，B[i + 1]) &lt; j &lt; max(B[i]，B[i + 1])$ 均有$A[j] &lt; A[B[i + 1]] $，求最大的K。</p>
<p>例如：$9, 10, 2, -1, 3, -5, 0, -3, 1, 12, 5, 8, -2, 6, 4$。可以选出：$12, 10, 3, 1, 0, -3。$对应的下标为$：9, 1, 4, 8, 6, 7$（就是B数组），输出$6$。</p>
<h3 id="Input-5"><a href="#Input-5" class="headerlink" title="Input"></a>Input</h3><p>$第1行：一个数N，表示A数组的长度。（1 &lt;= N &lt;= 50000)$<br>$第2 - N + 1行：每行1个数对应A数组的元素Ai（0 &lt; Ai &lt; 10^9)$</p>
<h3 id="Output-5"><a href="#Output-5" class="headerlink" title="Output"></a>Output</h3><p>$输出B数组最长的长度K。$</p>
<h3 id="Input示例-5"><a href="#Input示例-5" class="headerlink" title="Input示例"></a>Input示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="number">15</span></div><div class="line"><span class="number">9</span></div><div class="line"><span class="number">10</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">-1</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">-5</span></div><div class="line"><span class="number">0</span></div><div class="line"><span class="number">-3</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">12</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">8</span></div><div class="line"><span class="number">-2</span></div><div class="line"><span class="number">6</span></div><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure>
<h3 id="Output示例-5"><a href="#Output示例-5" class="headerlink" title="Output示例"></a>Output示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">6</span></div></pre></td></tr></table></figure>
<h2 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h2><p>我们很容易发现本题的贪心策略，每次选当前区间中最大的数，然后在分出的左右两个小区间中重复上述过程，找到最长的那个序列就可以了，正常的想法就是维护线段树，然后$O(n\log n)$解决，但是我觉得，既然是在做单调栈，为什么不在$O(n)$内解决呢？于是我就想到了单调栈的做法</p>
<p>维护方法：对每个元素维护一个结构体，内含两个成员变量，分别为当前求出的DP值和元素本身的值，我们每次在pop出一个元素后，我们用这个元素的最长长度加一，更新新的栈顶元素的最长长度，同时对于每次进栈的那个元素，用所有被它挤出去的那些元素的最长长度加一来更新它的最长长度，最后在每次操作时都用元素的最长长度更新答案，并且把所有元素都出栈检查即可</p>
<h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">num</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> val, ans;</div><div class="line">    num(<span class="keyword">int</span> val, <span class="keyword">int</span> ans) : val(val), ans(ans)&#123;&#125;</div><div class="line">    num()&#123;&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</div><div class="line">    <span class="built_in">stack</span>&lt;num&gt; save;</div><div class="line">    save.push(num(line[<span class="number">1</span>], <span class="number">1</span>));</div><div class="line">    tot = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        num op = save.top();</div><div class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (!save.empty() &amp;&amp; op.val &lt;= line[i])&#123;</div><div class="line">            ans = max(ans, op.ans);</div><div class="line">            save.pop();</div><div class="line">            <span class="keyword">if</span> (!save.empty())&#123;</div><div class="line">                num op2 = save.top();</div><div class="line">                save.pop();</div><div class="line">                op2.ans = max(op2.ans, op.ans + <span class="number">1</span>);</div><div class="line">                save.push(op2);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">            op = save.top();</div><div class="line">        &#125;</div><div class="line">        save.push(num(line[i], ans + <span class="number">1</span>));</div><div class="line">        tot = max(tot, ans + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (!save.empty())&#123;</div><div class="line">        num op = save.top();</div><div class="line">        tot = max(tot, op.ans);</div><div class="line">        save.pop();</div><div class="line">        <span class="keyword">if</span> (!save.empty())&#123;</div><div class="line">            num op2 = save.top();</div><div class="line">            save.pop();</div><div class="line">            op2.ans = max(op2.ans, op.ans + <span class="number">1</span>);</div><div class="line">            save.push(op2);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, tot);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("sub.in", "r", stdin);</span></div><div class="line">    freopen("sub.out", "w", stdout);*/</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="51nod-1275-连续子段的差异"><a href="#51nod-1275-连续子段的差异" class="headerlink" title="51nod 1275 连续子段的差异"></a>51nod 1275 连续子段的差异</h2><p>题目来源： Codility<br>基准时间限制：1 秒<br>空间限制：131072 KB<br>分值： 80<br>难度：5级算法题</p>
<p>给出一个包括N个元素的整数数组A，包括A本身在内，共有 $\frac{n * (n + 1)}{2}$个非空子段。例如：1 3 2的子段为{1} {3} {2} {1 3} {3 2} {1 3 2}。在这些子段中，如果最大值同最小值的差异不超过K，则认为这是一个合格的子段。给出数组A和K，求有多少符合条件的子段。例如：3 5 7 6 3，K = 2，符合条件的子段包括：{3} {5} {7} {6} {3} {3 5} {5 7} {7 6} {5 7 6}，共9个。</p>
<h3 id="Input-6"><a href="#Input-6" class="headerlink" title="Input"></a>Input</h3><p>$第1行：2个数N, K（1 &lt;= N &lt;= 50000, 0 &lt;= K &lt;= 10^9)$<br>$第2 - N + 1行：每行1个数，对应数组的元素A_i(0 &lt;= A[i] &lt;= 10^9)$</p>
<h3 id="Output-6"><a href="#Output-6" class="headerlink" title="Output"></a>Output</h3><p>输出符合条件的子段数量。</p>
<h3 id="Input示例-6"><a href="#Input示例-6" class="headerlink" title="Input示例"></a>Input示例</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">5 </span><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">7</span></div><div class="line"><span class="number">6</span></div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure>
<h3 id="Output示例-6"><a href="#Output示例-6" class="headerlink" title="Output示例"></a>Output示例</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">9</span></div></pre></td></tr></table></figure>
<h2 id="题目分析-6"><a href="#题目分析-6" class="headerlink" title="题目分析"></a>题目分析</h2><p>这就是一个需要用到单调队列的题目了，同时根据本题的特性，本题还需要使用尺取法，我们先维护两个队列，一个维护最大值，另一个维护最小值，我们每次同时向两个队列中加入元素并更新，然后直到两个队列最大和最小的元素之差超过$K$，然后我们统计数量并向右移动队列的左端点（同时移动两个队列的），再重复上述尺取过程，这样就可以解决问题了，这种问题的解决，需要基于同时性处理，即同时入队一个元素，同时出队一个元素</p>
<h2 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; inc;</div><div class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; dec;</div><div class="line"></div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> n, k;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">/*freopen("diff.in", "r", stdin);</span></div><div class="line">    freopen("diff.out", "w", stdout);*/</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</div><div class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line[i]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">        <span class="keyword">while</span>(cur &lt; n)&#123;</div><div class="line">            <span class="keyword">while</span> (!dec.empty() &amp;&amp; line[dec.back()] &lt;= line[cur]) dec.pop_back();</div><div class="line">            dec.push_back(cur);</div><div class="line">            <span class="keyword">while</span> (!inc.empty() &amp;&amp; line[inc.back()] &gt;= line[cur]) inc.pop_back();</div><div class="line">            inc.push_back(cur);</div><div class="line">            <span class="keyword">if</span> (line[dec.front()] - line[inc.front()] &lt;= k) cur++;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        ans += (cur - i);</div><div class="line">        <span class="keyword">if</span> (inc.front() == i) inc.pop_front();</div><div class="line">        <span class="keyword">if</span> (dec.front() == i) dec.pop_front();</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><ul>
<li><p>单调栈</p>
<ul>
<li>上升栈<ul>
<li>求最大矩形面积</li>
<li>求最小值的整体和</li>
<li>求包含末元素的最长上升子序列长度</li>
</ul>
</li>
<li>下降栈<ul>
<li>求最大值的整体和</li>
<li>求包含末元素的最长下降子序列长度</li>
</ul>
</li>
<li>栈内二分<ul>
<li>不保留维护，分情况更新</li>
</ul>
</li>
<li>区间化理解<ul>
<li>把元素区间化，用区间交解决问题</li>
</ul>
</li>
<li>整体化处理<ul>
<li>常用于多个栈的相关联信息维护</li>
</ul>
</li>
</ul>
</li>
<li><p>单调队列</p>
<ul>
<li>二分答案</li>
<li>尺取法</li>
<li>滑动窗口式问题</li>
</ul>
</li>
</ul>
<p>感觉题还是做得少。。。没什么内容</p>
<p>所以大致就是这样，单调栈/单调队列其实还是很好理解的，我们熟悉了几种常见的操作以后，就能够感受到单调栈/单调队列这种数据结构的强大之处，也能对它们有更深刻的理解</p>
]]></content>
    
    <summary type="html">
    
      &lt;!--toc--&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;最近刷了一波JCY大神的课件，打算认真练习一发单调队列/单调栈，于是有了这篇总结，同时作为之后学习单调优化DP的基础&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://goseqh.tk/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="单调队列" scheme="https://goseqh.tk/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
      <category term="单调栈" scheme="https://goseqh.tk/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>骗分导论</title>
    <link href="https://goseqh.tk/2017/07/25/%E9%AA%97%E5%88%86%E5%AF%BC%E8%AE%BA/"/>
    <id>https://goseqh.tk/2017/07/25/骗分导论/</id>
    <published>2017-07-25T14:07:04.000Z</published>
    <updated>2017-07-25T14:14:26.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>闲时看看，大有裨益<br><a id="more"></a></p>
<h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1>

	<div class="row">
    <embed src="./骗分导论(OI).pdf" width="120%" height="660" type="application/pdf">
	</div>



]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;闲时看看，大有裨益&lt;br&gt;
    
    </summary>
    
    
      <category term="骗分导论" scheme="https://goseqh.tk/tags/%E9%AA%97%E5%88%86%E5%AF%BC%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>2016 LNWC 讲解</title>
    <link href="https://goseqh.tk/2017/07/24/2016-LNWC-%E8%AE%B2%E8%A7%A3/"/>
    <id>https://goseqh.tk/2017/07/24/2016-LNWC-讲解/</id>
    <published>2017-07-24T15:06:33.000Z</published>
    <updated>2017-07-24T15:22:46.591Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>这里存放一下2016 LNWC的讲课课件，用于以后的知识复习<br><a id="more"></a></p>
<h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><p>如下：</p>
<ul>
<li>Day1 树 ryz</li>
<li>Day2 数据结构 eleven</li>
<li>Day3 网络流 ryz</li>
<li>Day4 数据结构 eleven</li>
<li>Day5 1-字符串 &amp; 2-数论 ryz</li>
<li>Day6 动态规划 eleven</li>
</ul>
<p>其中，ryz为茹逸中，eleven为李诗懿</p>
<h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1><h2 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h2>

	<div class="row">
    <embed src="./1.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h2>

	<div class="row">
    <embed src="./2.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h2>

	<div class="row">
    <embed src="./3.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a>Day4</h2>

	<div class="row">
    <embed src="./4.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="Day5-1"><a href="#Day5-1" class="headerlink" title="Day5-1"></a>Day5-1</h2>

	<div class="row">
    <embed src="./5-1.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="Day5-2"><a href="#Day5-2" class="headerlink" title="Day5-2"></a>Day5-2</h2>

	<div class="row">
    <embed src="./5-2.pdf" width="120%" height="660" type="application/pdf">
	</div>



<h2 id="Day6"><a href="#Day6" class="headerlink" title="Day6"></a>Day6</h2>

	<div class="row">
    <embed src="./6.pdf" width="120%" height="660" type="application/pdf">
	</div>



]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;这里存放一下2016 LNWC的讲课课件，用于以后的知识复习&lt;br&gt;
    
    </summary>
    
    
      <category term="树" scheme="https://goseqh.tk/tags/%E6%A0%91/"/>
    
      <category term="数据结构" scheme="https://goseqh.tk/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="网络流" scheme="https://goseqh.tk/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="字符串" scheme="https://goseqh.tk/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="数论" scheme="https://goseqh.tk/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="动态规划" scheme="https://goseqh.tk/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>特殊算法详解</title>
    <link href="https://goseqh.tk/2017/07/24/%E7%89%B9%E6%AE%8A%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <id>https://goseqh.tk/2017/07/24/特殊算法详解/</id>
    <published>2017-07-24T14:53:29.000Z</published>
    <updated>2017-07-24T14:57:33.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>这里存放一下JCY大神的讲课课件，用于特殊算法的复习<br><a id="more"></a></p>
<h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1>

	<div class="row">
    <embed src="./day10.pdf" width="120%" height="660" type="application/pdf">
	</div>



]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;这里存放一下JCY大神的讲课课件，用于特殊算法的复习&lt;br&gt;
    
    </summary>
    
    
      <category term="莫队算法" scheme="https://goseqh.tk/tags/%E8%8E%AB%E9%98%9F%E7%AE%97%E6%B3%95/"/>
    
      <category term="CDQ分治" scheme="https://goseqh.tk/tags/CDQ%E5%88%86%E6%B2%BB/"/>
    
      <category term="分块法" scheme="https://goseqh.tk/tags/%E5%88%86%E5%9D%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据结构详解</title>
    <link href="https://goseqh.tk/2017/07/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%A6%E8%A7%A3/"/>
    <id>https://goseqh.tk/2017/07/24/数据结构详解/</id>
    <published>2017-07-24T10:29:20.000Z</published>
    <updated>2017-07-24T14:26:14.371Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>这里存放一下JCY大神的讲课课件，用于数据结构的复习<br><a id="more"></a></p>
<h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1><!--

	<div class="row">
    <embed src="http://www.slideboom.com/presentations/1826019/day3%E8%AF%BE%E4%BB%B6?pk=1701-4c32-17d6-9435-f3e2-83fd-57bd-33cd" width="120%" height="660" type="application/pdf">
	</div>


-->
<!--

	<div class="row">
    <embed src="http://pptplus.cn/index.php?g=site&amp;m=ppt&amp;a=detail&amp;id=8413#&amp;gid=1&amp;pid=1" width="120%" height="660" type="application/pdf">
	</div>


-->
<!--<iframe class="embed-responsive-item" src="./day3课件.html" height="400px" width="90%" align="center">
</iframe>-->


	<div class="row">
    <embed src="./day3课件.pdf" width="120%" height="660" type="application/pdf">
	</div>



<!-- 
<iframe src="https://github.com/GQH123/GQH123.github.io/blob/master/2017/07/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%A6%E8%A7%A3/day3%E8%AF%BE%E4%BB%B6.ppt" height="400px" width="90%" align="center"></iframe> 
-->
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;这里存放一下JCY大神的讲课课件，用于数据结构的复习&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://goseqh.tk/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>基础算法与技巧</title>
    <link href="https://goseqh.tk/2017/07/24/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E4%B8%8E%E6%8A%80%E5%B7%A7/"/>
    <id>https://goseqh.tk/2017/07/24/基础算法与技巧/</id>
    <published>2017-07-24T10:26:50.000Z</published>
    <updated>2017-07-24T14:41:38.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>这里存放一下FZW大神的讲课课件，用于基础算法的复习<br><a id="more"></a></p>
<h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1>

	<div class="row">
    <embed src="./day2课件.pdf" width="120%" height="660" type="application/pdf">
	</div>



]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;这里存放一下FZW大神的讲课课件，用于基础算法的复习&lt;br&gt;
    
    </summary>
    
    
      <category term="基础算法" scheme="https://goseqh.tk/tags/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
