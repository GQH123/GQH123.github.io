<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Renatus&#39;s Blog</title>
  <subtitle>Renatus</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gqh123.github.io/"/>
  <updated>2019-06-28T13:17:06.292Z</updated>
  <id>https://gqh123.github.io/</id>
  
  <author>
    <name>Renatus</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【置顶】黑科技汇总</title>
    <link href="https://gqh123.github.io/2025/09/09/%E3%80%90%E7%BD%AE%E9%A1%B6%E3%80%91%E9%BB%91%E7%A7%91%E6%8A%80%E6%B1%87%E6%80%BB/"/>
    <id>https://gqh123.github.io/2025/09/09/【置顶】黑科技汇总/</id>
    <published>2025-09-09T08:01:20.000Z</published>
    <updated>2019-06-28T13:17:06.292Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>在这神秘的光芒背后，有着怎样的奥秘？（纯胡扯<br><a id="more"></a><br>黑科技大概指的就是我们编程中的一些技巧，无法单独开一篇文章进行记录，于是汇总到这里</p>
<p>这篇文章很早以前就开了，只是一直没有内容，下面我就来填充一下</p>
<h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><h3 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h3><p>下面的黑科技先只写描述，代码留坑待补</p>
<h4 id="质因数分解法"><a href="#质因数分解法" class="headerlink" title="质因数分解法"></a>质因数分解法</h4><h5 id="Pollard-Rho-因数分解法"><a href="#Pollard-Rho-因数分解法" class="headerlink" title="Pollard-Rho 因数分解法"></a>Pollard-Rho 因数分解法</h5><p>我们使用一个随机函数$F(x)$生成随机数列$a_1, a_2, \cdots, a_n$，其中，$F(x) = (ax^2 + c) \bmod n$</p>
<p>然后，我们使用两个对于这个数列而言的指针（由于数列项的数量过大无法保存），其中一个的迭代速度是另一个的二倍，即$a = F(a), b = F(F(b))$</p>
<p>然后，我们求出$d = gcd(\mid a - b \mid, n)$，如果$d &gt; 1$，那么我们就找到了一个$n$的因子$d$</p>
<p>如果发现$b == a$，这说明数列出现循环，而我们此时发现了这一点，我们重新随机随机函数的那两个系数，然后重新随机进行分解</p>
<p>这样，我们可以在$O(n^{\frac{1}{4}})$实现对大数的质因数分解</p>
<h5 id="线性筛质因数分解法"><a href="#线性筛质因数分解法" class="headerlink" title="线性筛质因数分解法"></a>线性筛质因数分解法</h5><p>首先我们先跑一遍线性筛，以$son[i]$记录把$i$筛掉的最小的质数</p>
<p>分解质因数的时候，不停地$n=n/son[n]$来分解</p>
<p>可以证明复杂度是单次$O(logn)$：每迭代一次，$n$被除以$son[n]$，而$son[n]$最小为$2$，故时间复杂度不超过$O(logn)$</p>
<h5 id="变上界质因数分解法"><a href="#变上界质因数分解法" class="headerlink" title="变上界质因数分解法"></a>变上界质因数分解法</h5><p>众所周知，我们正常人在因数分解的时候，我们都是采用$O(\sqrt{n})$的算法进行暴力分解的，我们从小到大枚举质因数，判断能否整除$n$，然后再进行相应分解即可，直到枚举的质因数大于了$\sqrt{n}$，就停止，如果此时$n$不为$1$，那么它一定是一个质数（这应该很显然）</p>
<p>但是，我们发现，随着分解的进行，$n$在不断地减小，这就是说，$\sqrt{n}$这个上界也是不断地减小的，我们每次做完一个质因数的分解，直接更新上界，用当前的$\sqrt{n}$作为上界，然后继续上面的操作即可</p>
<p>经实测这个方法优化的效果<strong>十分明显</strong>，具体证明则是玄学</p>
<h4 id="素数判定法"><a href="#素数判定法" class="headerlink" title="素数判定法"></a>素数判定法</h4><h5 id="Miller-Robin判素法"><a href="#Miller-Robin判素法" class="headerlink" title="Miller-Robin判素法"></a>Miller-Robin判素法</h5><p>具体操作方法的讲解网上应该已经很多了，本处暂略，时间复杂度：$O( \log n)$，适合大数判素或多组询问</p>
<h3 id="黑科技公式"><a href="#黑科技公式" class="headerlink" title="黑科技公式"></a>黑科技公式</h3><h4 id="下取整累积公式"><a href="#下取整累积公式" class="headerlink" title="下取整累积公式"></a>下取整累积公式</h4><script type="math/tex; mode=display">\frac{\left\lfloor\frac{x}{n}\right\rfloor}{k} = \left\lfloor\frac{x}{nk}\right\rfloor</script><p>可以用下文的下取整不等式证明</p>
<h4 id="取模公式"><a href="#取模公式" class="headerlink" title="取模公式"></a>取模公式</h4><script type="math/tex; mode=display">k \bmod n = k - n * \left\lfloor\frac{k}{n}\right\rfloor</script><p>这个公式很重要，在许多只有取模存在的式子中，这个公式往往是解题的关键</p>
<h4 id="调和级数定理"><a href="#调和级数定理" class="headerlink" title="调和级数定理"></a>调和级数定理</h4><script type="math/tex; mode=display">\sum_{d=1}^{N}\frac{N}{d}=N\log N</script><script type="math/tex; mode=display">\sum_{d=1}^{N}\sqrt{\frac{N}{d}}=N</script><p>可以用微积分证明</p>
<h4 id="异或不等式"><a href="#异或不等式" class="headerlink" title="异或不等式"></a>异或不等式</h4><script type="math/tex; mode=display">\left | a - b \right | \leq a \oplus b  \leq a + b</script><p>把异或运算转化为代数表达</p>
<h4 id="分块公式"><a href="#分块公式" class="headerlink" title="分块公式"></a>分块公式</h4><p>我们现在已知$x$和$n$，要求最大的$y$满足</p>
<script type="math/tex; mode=display">\left\lfloor\frac{n}{x}\right\rfloor = \left\lfloor\frac{n}{y}\right\rfloor</script><p>那么</p>
<script type="math/tex; mode=display">y = \left\lfloor\frac{n}{ \left\lfloor\frac{n}{x}\right\rfloor }\right\rfloor</script><h4 id="上-下取整不等式"><a href="#上-下取整不等式" class="headerlink" title="上/下取整不等式"></a>上/下取整不等式</h4><script type="math/tex; mode=display">\left\lfloor\frac{n}{x}\right\rfloor = t \Leftrightarrow t * x \leq n < (t + 1) * x</script><script type="math/tex; mode=display">\left\lceil\frac{n}{x}\right\rceil = t \Leftrightarrow (t - 1) * x < n \leq t * x</script><p>还有什么呢？到时候再说吧。。。</p>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="ST表"><a href="#ST表" class="headerlink" title="ST表"></a>ST表</h3><h4 id="计算极值覆盖区"><a href="#计算极值覆盖区" class="headerlink" title="计算极值覆盖区"></a>计算极值覆盖区</h4><p>极值覆盖区，就是一个元素作为一个区间里的极值时，这个满足条件的区间的范围，或者是对于一个元素来说，如果它是作为最大值出现的，那么我们需要找到它左端第一个大于它的元素的位置以及右端第一个大于它的元素的位置</p>
<p>我们可以这样表示这个范围，对于第$i$个元素，我们用$l[i]$表示$i$能覆盖的最左端，$r[i]$表示$i$能覆盖的最右端</p>
<p>那么，对于所有满足$l[i] \leq l \leq i$并且$i \leq r \leq r[i]$的区间$[l, r]$来说，第$i$个元素的值都是这个区间里的极值</p>
<p>我们对于这个问题，可以使用二分+线段树在$O(log^2n)$的时间内处理每一个元素的覆盖区间，但是这显然太弱了是不是？</p>
<p>我们可以考虑使用ST表来优化这个问题的复杂度，我们可以用$O(n \log n)$的复杂度预处理ST表，然后对于每个元素使用$O(\log n)$的复杂度求出边界，这样总共的复杂度就是$O(n \log n)$的，编程复杂度远低于上面的那个方法</p>
<p>其实这个问题还有一个$O(n)$的方法，然而我刚想到。。。所以就在下面说吧</p>
<p>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> le[maxn][bit];</div><div class="line"><span class="keyword">int</span> ri[maxn][bit];</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    rep(i, <span class="number">1</span>, n) le[i][<span class="number">0</span>] = line[i], ri[i][<span class="number">0</span>] = line[i];</div><div class="line">    rep(i, <span class="number">1</span>, n) rep(j, <span class="number">1</span>, bit - <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (i - two[j - <span class="number">1</span>] &gt;= <span class="number">1</span>) le[i][j] = min(le[i - two[j - <span class="number">1</span>]][j - <span class="number">1</span>], le[i][j - <span class="number">1</span>]);</div><div class="line">        <span class="keyword">else</span> le[i][j] = -INF;</div><div class="line">        <span class="keyword">if</span> (i + two[j - <span class="number">1</span>] &lt;= n) ri[i][j] = min(ri[i + two[j - <span class="number">1</span>]][j - <span class="number">1</span>], ri[i][j - <span class="number">1</span>]);</div><div class="line">        <span class="keyword">else</span> ri[i][j] = -INF;</div><div class="line">    &#125;<span class="comment">//初始化ST表</span></div><div class="line">    rep(i, <span class="number">1</span>, n)&#123;</div><div class="line">        <span class="keyword">int</span> x = i;</div><div class="line">        <span class="keyword">int</span> y = i;</div><div class="line">        <span class="keyword">int</span> op = line[i];</div><div class="line">        per(j, bit - <span class="number">1</span>, <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (le[x][j] &gt;= op) x -= two[j];</div><div class="line">            <span class="keyword">if</span> (ri[y][j] &gt;= op) y += two[j];</div><div class="line">        &#125;</div><div class="line">        l[i] = x + <span class="number">1</span>, r[i] = y - <span class="number">1</span>;</div><div class="line">    &#125;<span class="comment">//通过ST表不断跳跃寻找边界</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码还是十分简单的</p>
<h3 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h3><h4 id="计算极值覆盖区-1"><a href="#计算极值覆盖区-1" class="headerlink" title="计算极值覆盖区"></a>计算极值覆盖区</h4><p>接着ST表那里的讲解，这里有一个利用单调栈进行$O(n)$处理的玩法</p>
<p>假设每个元素是作为最大值出现的，我们先考虑求出每个位置的$i$的$r[i]$，我们维护一个单调递减的单调栈，从左扫到右，每次扫到一个元素，把所有小于这个元素的元素弹出，并把它们的$r[i]$记录为当前扫到的位置减一，然后我们把扫到的这个元素加入栈中，继续上述扫描，然后就可以求出所有的$r[i]$啦</p>
<p>关于正确性的证明，显然是对的啊。。。于是复杂度就都是$O(n)$了，又明显优于ST表的做法，而且达到了理论下界</p>
<p><del>不要和我说可以用一些已经推出的元素推导未知的来达到更优的复杂度，那样没什么意义。。。至少对于这个问题来说是这样，因为这个问题本身往往只是一个子问题，不值得使用过于复杂的处理</del></p>
<p><del>果然还是这样探究问题的未知的更优答案，能使人有更大的成就感啊</del></p>
<p>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</div><div class="line"><span class="keyword">int</span> line[maxn];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    rep(i, <span class="number">1</span>, n)&#123;</div><div class="line">        <span class="keyword">int</span> op = line[i];</div><div class="line">        <span class="keyword">while</span> (!s.empty() &amp;&amp; line[s.top()] &gt; op) r[s.top()] = i - <span class="number">1</span>, s.pop(); </div><div class="line">        s.push(i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (!s.empty()) r[s.top()] = n, s.pop(); </div><div class="line">    per(i, n, <span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">int</span> op = line[i];</div><div class="line">        <span class="keyword">while</span> (!s.empty() &amp;&amp; line[s.top()] &gt; op) l[s.top()] = i + <span class="number">1</span>, s.pop(); </div><div class="line">        s.push(i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (!s.empty()) l[s.top()] = <span class="number">1</span>, s.pop(); </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码又简单了一些。。。</p>
<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h3 id="枚举子集"><a href="#枚举子集" class="headerlink" title="枚举子集"></a>枚举子集</h3><p>这里有一个十分简洁高上的写法:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = S; x; x = (x - <span class="number">1</span>) &amp; S)&#123;</div><div class="line">    <span class="comment">//do something...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>感觉证明非常简单，首先，我们可以考虑$S$的二进制没有零的特殊情况，这样我们就相当于从$S$不断地减一，一直减到零，那么中间经过的这些数值很显然肯定是$S$的子集，如果$S$的二进制表示中有零存在，那么我们每次进行一个与操作，相当于是直接跳过了$S$的某一位为零，而$x$的那一位却为$1$的不合法情况，由于跳过的这些情况都是比剩下的所有合法情况数值要大的（看成十进制的数值），所以我们不会跳过合法情况</p>
<p>这样，就相当于我们的$x$经过且仅经过了所有合法的情况，这样就是对$S$的子集枚举啦</p>
<h2 id="编程相关"><a href="#编程相关" class="headerlink" title="编程相关"></a>编程相关</h2><h3 id="常数优化"><a href="#常数优化" class="headerlink" title="常数优化"></a>常数优化</h3><h4 id="适当运用register关键字"><a href="#适当运用register关键字" class="headerlink" title="适当运用register关键字"></a>适当运用register关键字</h4><p><code>register</code>关键字的作用是将后面声明的变量放入系统CPU的寄存器中，使得变量的操作速度快得飞起，但是我们<strong>只能将<code>int</code>类型的单个变量</strong>用这种方法声明，由于系统寄存器很小，所以建议不要同时对超过三个<code>int</code>变量进行<code>register</code>声明，否则反而会降低运行速度</p>
<p>所以，我们采取用完回收的原则，可以宏定义一种优化的<code>for</code>循环语句：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++)</span></div></pre></td></tr></table></figure></p>
<p>然后以后用<code>rep(i, l, r)</code>代替<code>for</code>循环就行了，实测可以大幅提高程序运行速度</p>
<h3 id="内存优化"><a href="#内存优化" class="headerlink" title="内存优化"></a>内存优化</h3><h4 id="减少额外占用"><a href="#减少额外占用" class="headerlink" title="减少额外占用"></a>减少额外占用</h4><p>实测发现，在使用较多的<code>#include</code>语句以及使用这个语句<code>using namespace std;</code>时，我们的程序会产生许多的额外内存开销，这对于卡内存的题目而言是非常不利的</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;在这神秘的光芒背后，有着怎样的奥秘？（纯胡扯&lt;br&gt;
    
    </summary>
    
    
      <category term="黑科技" scheme="https://gqh123.github.io/tags/%E9%BB%91%E7%A7%91%E6%8A%80/"/>
    
  </entry>
  
  <entry>
    <title>【置顶】编程错误汇总</title>
    <link href="https://gqh123.github.io/2025/09/09/%E3%80%90%E7%BD%AE%E9%A1%B6%E3%80%91%E7%BC%96%E7%A8%8B%E9%94%99%E8%AF%AF%E6%B1%87%E6%80%BB/"/>
    <id>https://gqh123.github.io/2025/09/09/【置顶】编程错误汇总/</id>
    <published>2025-09-09T07:17:39.000Z</published>
    <updated>2019-06-28T13:17:24.551Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>妙妙妙妙不可言&lt;（￣︶￣）/<br><a id="more"></a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大概就是许多常见错误的汇总，每次考试前仔细的看一看，认真地记一记，应该会有很大的好处</p>
<p>注意，下面的每个错误都很重要，时间允许的话一定要一字一字地看！</p>
<h1 id="语法类"><a href="#语法类" class="headerlink" title="语法类"></a>语法类</h1><h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h2><ul>
<li><p><strong>随时都要注意是否应该使用更大的数据类型以防止溢出</strong>，这一点至关重要</p>
<ul>
<li>常见的需要用到<code>long long int</code>的地方<ul>
<li>算术表达式里面的计算中间结果</li>
<li>与取模有关的几乎所有题目</li>
<li>对程序计算答案的累计（即最终结果）</li>
<li>对于满足条件的n元组个数的统计</li>
<li>组合数学相关题目</li>
<li>一些数据范围很大的数论题以及需要用到杜教筛的数论题</li>
<li>总之每次都仔细的判断一下，程序完成后特别考虑一下这个问题，应该就没问题了</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>随时都要注意是否由于使用了较大的数据类型导致内存超限</strong></p>
</li>
<li><p><strong>注意输入输出是否使用了正确的类型表标识符</strong></p>
</li>
</ul>
<h2 id="基本语句"><a href="#基本语句" class="headerlink" title="基本语句"></a>基本语句</h2><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><ul>
<li><strong>注意内外层循环变量的冲突</strong></li>
<li>注意内部语句循环变量的正确使用</li>
<li>注意循环变量与全局变量（循环外部变量）的冲突</li>
</ul>
<h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><ul>
<li>注意if…else的对应性，不要把内层的if对应到外层的else上，为避免这一错误可多使用’{}’</li>
<li>注意<gqh style="font-family:Goseqh;color:red">运算符的优先级</gqh></li>
</ul>
<h3 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h3><ul>
<li>保险起见，在每个分支后面加上break;</li>
</ul>
<h2 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h2><ul>
<li><gqh style="font-family:Goseqh;color:red">严重问题:注意宏定义的不安全性</gqh>，代码示例如下：</li>
</ul>
<p>我们想计算$(a + b) * c$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> A a + b</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a, b, c;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;c);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, A * c);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但这样做的结果是$a + b * c$<br>要想得到正确结果，多使用’()’：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> A (a + b)</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a, b, c;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;c);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, A * c);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="排序相关"><a href="#排序相关" class="headerlink" title="排序相关"></a>排序相关</h2><ul>
<li><p></p><p style="font-family:verdana;color:red">严重问题：绝对不要使比较方法出现循环比较现象，必须保证排序结果唯一</p>，相关链接：<a href="http://gqh123.github.io/2018/01/15/BZOJ-3712-PA2014-Fiolki/">BZOJ 3712: [PA2014]Fiolki</a><p></p>
</li>
<li><p></p><p style="font-family:verdana;color:orange">在priority_queue的自定义比较用结构体中，注意运算符()的比较方法是：(a, b)在a的优先级小于b时返回True</p>，即相当于重载大于运算符<p></p>
</li>
</ul>
<h2 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h2><ul>
<li><p style="font-family:verdana;color:orange">尽可能避免在任何STL中存放比较方法定义与外部数组存在关联的元素，否则会导致排序紊乱产生错误</p>

</li>
</ul>
<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><ul>
<li><p style="font-family:verdana;color:red">严重问题：绝对不要使用STL的二分查找功能来查找set中的元素，只能使用set自带的二分查找成员函数，否则会导致严重的TLE问题</p>

</li>
</ul>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><ul>
<li>不要在未对要访问的map键值赋值的情况下访问它，否则会RE</li>
</ul>
<h3 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h3><ul>
<li>注意cmp的定义方法：当$a$比$b$优先级小的时候返回true</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span>&#123;</span></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> a &lt; b;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, cmp&gt; p;</div></pre></td></tr></table></figure>
<p>$p$是一个大根堆</p>
<h3 id="lower-bound-upper-bound"><a href="#lower-bound-upper-bound" class="headerlink" title="lower_bound/upper_bound"></a>lower_bound/upper_bound</h3><ul>
<li><p><gqh style="font-family:verdana;color:red">严重问题：绝对不要使用这两个函数来查找set中的元素，只能使用set自带的二分查找成员函数，否则会导致严重的TLE问题</gqh>，本处再强调一遍</p>
</li>
<li><gqh style="font-family:verdana;color:orange">注意这两个二分查找函数只能作用于一个有序数组，即已经排好序的数组，而不能是任意数组（二分算法本身也要求有序...）</gqh>

</li>
</ul>
<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ul>
<li><gqh style="font-family:verdana;color:orange">注意构造函数前面简化赋值语句的正确使用方法</gqh>，相关链接：<a href="http://gqh123.github.io/2018/01/15/BZOJ-4502-%E4%B8%B2/">BZOJ 4502: 串</a></li>
</ul>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul>
<li>即使是定义在全局的结构体，内部变量初始时也不一定都为$0$，需要在构造函数中手动初始化</li>
</ul>
<h1 id="算法类"><a href="#算法类" class="headerlink" title="算法类"></a>算法类</h1><h2 id="前缀和-积"><a href="#前缀和-积" class="headerlink" title="前缀和/积"></a>前缀和/积</h2><ul>
<li>不要使最开头累加/乘的操作访问不该访问的内存</li>
<li>如果是求前缀积，一定不要忘记第一个元素应该手动设为$1$</li>
</ul>
<h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><ul>
<li>注意不要忘记每次对幂数进行的右移操作，否则会TLE（当然，这个本地也是很容易测试出来的，但可能会不知道问题出在哪里）</li>
<li><gqh style="font-family:verdana;color:red">严重问题：注意绝对不要使幂数为一个负数</gqh>，如果容易出现此错误，最好提前判断一下</li>
<li>在取模的题目中，不要忘记每次乘法都是需要取模的</li>
</ul>
<h2 id="动态规划（DP）"><a href="#动态规划（DP）" class="headerlink" title="动态规划（DP）"></a>动态规划（DP）</h2><ul>
<li><p>在边界值问题上要特别注意，边界值需要经过计算与论证方可确定</p>
</li>
<li><p>注意情况讨论的不充分或是相互重叠的问题</p>
</li>
<li><p>在取模的问题中时刻记住对结果及时进行取模处理</p>
</li>
</ul>
<ul>
<li><gqh style="font-family:verdana;color:red">严重问题：在记忆化搜索时，时刻记住在跳出当前计算层之前把vis数组设置为$true$，否则会导致严重的TLE问题</gqh>
</li>
<li><p>DP的状态转移不能存在环，否则需要使用最短路式更新法</p>
</li>
</ul>
<ul>
<li><gqh style="font-family:verdana;color:orange">注意：在题目卡常时，要将递归形式的DP改造为迭代形式，以大幅提高运行速度</gqh>

</li>
</ul>
<h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><ul>
<li>注意有些时候边与点数目的差异会很大，不要直接对存储点与边的数组直接使用相同大小的宏定义进行声明</li>
</ul>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="树链剖分"><a href="#树链剖分" class="headerlink" title="树链剖分"></a>树链剖分</h3><ul>
<li>注意题目的要求，仔细严谨地设置链上操作方法，相关链接：<a href="http://gqh123.github.io/2018/01/15/BZOJ-3319-%E9%BB%91%E7%99%BD%E6%A0%91/">BZOJ 3319: 黑白树</a></li>
</ul>
<h3 id="Link-Cut-Tree"><a href="#Link-Cut-Tree" class="headerlink" title="Link-Cut-Tree"></a>Link-Cut-Tree</h3><ul>
<li>相关链接：<a href="http://gqh123.github.io/2018/01/13/Link-Cut-Tree%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90/">Link-Cut-Tree完全解析</a></li>
</ul>
<h3 id="字典树-Trie"><a href="#字典树-Trie" class="headerlink" title="字典树(Trie)"></a>字典树(Trie)</h3><ul>
<li><gqh style="font-family:verdana;color:red">严重问题：时刻注意Trie的空间占用大小并非$O(n)$而是$O(n\log n)$</gqh>，要计算后声明足够的内存空间，同时<gqh style="font-family:verdana;color:orange">防止内存超过限制</gqh>


</li>
</ul>
<h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h3><ul>
<li><gqh style="font-family:verdana;color:red">严重问题：注意不要让查询的区间为不合法区间</gqh>，否则会RE，这种错误往往比较隐蔽，所以可能出现此情况时最好提前判断一下</li>
<li><p>注意线段树的基本架构不要写错：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Operate</span> <span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="comment">//pushdown(l, r, o);</span></div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        <span class="comment">//do something</span></div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) Operate(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) Operate(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><gqh style="font-family:verdana;color:orange">有的时候，当题目卡常数时，我们需要把线段树改写为迭代形式，以加快运行速度</gqh>

</li>
</ul>
<h3 id="可持久化线段树-主席树"><a href="#可持久化线段树-主席树" class="headerlink" title="可持久化线段树/主席树"></a>可持久化线段树/主席树</h3><ul>
<li><gqh style="font-family:verdana;color:red">严重问题：时刻注意可持久化线段树/主席树的空间占用大小并非$O(n)$而是$O(n\log n)$</gqh>，要计算后声明足够的内存空间，同时<gqh style="font-family:verdana;color:orange">防止内存超过限制</gqh>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;妙妙妙妙不可言&amp;lt;（￣︶￣）/&lt;br&gt;
    
    </summary>
    
    
      <category term="编程错误" scheme="https://gqh123.github.io/tags/%E7%BC%96%E7%A8%8B%E9%94%99%E8%AF%AF/"/>
    
  </entry>
  
  <entry>
    <title>题目分析要领II</title>
    <link href="https://gqh123.github.io/2019/07/06/%E9%A2%98%E7%9B%AE%E5%88%86%E6%9E%90%E8%A6%81%E9%A2%86II/"/>
    <id>https://gqh123.github.io/2019/07/06/题目分析要领II/</id>
    <published>2019-07-06T03:59:07.000Z</published>
    <updated>2019-07-06T04:30:07.719Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>洗澡时的领悟，本文予以记录<br><a id="more"></a></p>
<!-- toc -->
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>继上一篇题目分析要领已经过去了一年半多的时间，值此CF Div.1受挫之际，我决定再次改进我思维的缺陷，改变我长久以来形成习惯的对题目的理解与分析方式。</p>
<p>本次的《题目分析要领II》，大概与其名稍有不符，本文不会讲解题目分析的步骤与过程，而是更多地侧重分析题目时的思维上的注意事项，由此加以避免。</p>
<h1 id="题目分析要点"><a href="#题目分析要点" class="headerlink" title="题目分析要点"></a>题目分析要点</h1><p>不妨先说一说过去的习惯是什么样子的，由此产生对比。</p>
<h2 id="过去"><a href="#过去" class="headerlink" title="过去"></a>过去</h2><p>如果将解决题目比作是挖掘星球岩层下的矿石，那么我过去则是习惯于直降星球表面，拿起钻头就开始向下进发。</p>
<p>换句话说，我习惯于紧盯题目本身，从题目出发，希望能够同平常一般从上挖到下。</p>
<p>有的时候（尤其是应对较为简单的题目时），这样的方式往往比较有效，因为，许多简单的题目正是这样一个抽丝剥茧的过程，我们只要顺着思路做，最后常常可以做出来。</p>
<p>但是，这样一来，题目的区分性也就随之降低。因为，若不是入门，知识不全或是对题目分析有障碍的人，大部分人都可以轻松解决题目。</p>
<p>因此，越向难度高的方向走，我就越能感受到这种思维方式的障碍。好像岩层过厚过硬，钻头变得十分无力。</p>
<p>以致我长期以来，在高难度比赛上的表现都不够优秀（例如NOI，CF Div.1，AGC等）。</p>
<p>那么，更好，更灵活的思维方式是什么呢？</p>
<h2 id="如今"><a href="#如今" class="headerlink" title="如今"></a>如今</h2><p>当然，所有的思维都应是灵活的，领悟到这一点，也不意味着我们就一定抛弃原有的。</p>
<p>还是用上面的例子作为比喻，这样的思维方式，就好像是，我们回到宇宙之中，在将目标星球观察一番后，找到一颗“彗星”来撞击它，打碎它的岩层。</p>
<p><del>（比喻可能有些不当，请体会精神…）</del></p>
<p>也就是说，我们不要把目光局限在这样一道题上，<strong>多去联想，多去类比，思考关键性质</strong>，而非急于尝试解决问题。</p>
<p>从题目的外部“旁征博引”，他山之石攻我璞玉。</p>
<p>这一点上，也好像是我们<strong>以退为进，以守为攻</strong>，有一种以柔克刚的意思。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>所以，我们有的时候可能太盲目，太浮躁了，静下来思考本质，戒骄戒躁，也许更有利于问题的解决。这一点不只适用于<code>Programming Contest</code>，可能人生中的问题大多也都如此。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;洗澡时的领悟，本文予以记录&lt;br&gt;
    
    </summary>
    
    
      <category term="技巧" scheme="https://gqh123.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Oier的知识</title>
    <link href="https://gqh123.github.io/2019/06/28/Oier%E7%9A%84%E7%9F%A5%E8%AF%86/"/>
    <id>https://gqh123.github.io/2019/06/28/Oier的知识/</id>
    <published>2019-06-28T13:08:21.000Z</published>
    <updated>2019-06-28T13:26:01.600Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>Oier的知识，以思维导图的方式呈现<br><a id="more"></a></p>


	<div class="row">
    <embed src="./Oier的知识.pdf" width="120%" height="660" type="application/pdf">
	</div>



]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;Oier的知识，以思维导图的方式呈现&lt;br&gt;
    
    </summary>
    
    
      <category term="Oier的知识" scheme="https://gqh123.github.io/tags/Oier%E7%9A%84%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ 4502: 串</title>
    <link href="https://gqh123.github.io/2018/01/15/BZOJ-4502-%E4%B8%B2/"/>
    <id>https://gqh123.github.io/2018/01/15/BZOJ-4502-串/</id>
    <published>2018-01-15T02:46:23.000Z</published>
    <updated>2019-06-27T07:29:24.752Z</updated>
    
    <content type="html"><![CDATA[<!--用真正的题解标题替换所有的<title>--->
<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>BZOJ 4502: 串  题解<br><a id="more"></a></p>
<h1 id="BZOJ-4502-串"><a href="#BZOJ-4502-串" class="headerlink" title="BZOJ 4502: 串"></a>BZOJ 4502: 串</h1><ul>
<li><p>Time Limit: 30 Sec </p>
</li>
<li><p>Memory Limit: 512 MB</p>
</li>
</ul>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>兔子们在玩字符串的游戏。首先，它们拿出了一个字符串集合S，然后它们定义一个字<br>符串为“好”的，当且仅当它可以被分成非空的两段，其中每一段都是字符串集合S中某个字符串的前缀。<br>比如对于字符串集合{“abc”,”bca”}，字符串”abb”，”abab”是“好”的（”abb”=”ab”+”b”,abab=”ab”+”ab”），而字符串“bc”不是“好”的。<br>兔子们想知道，一共有多少不同的“好”的字符串。</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行一个整数n，表示字符串集合中字符串的个数<br>接下来每行一个字符串</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>一个整数，表示有多少不同的“好”的字符串</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>2</p>
<p>ab</p>
<p>ac</p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>9</p>
<h3 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h3><p>1&lt;=n&lt;=10000，每个字符串非空且长度不超过30，均为小写字母组成。</p>
<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>字符串好题</p>
<p>对于这样的一些多串问题，我们第一反应就是建出Trie树</p>
<p>然后，有了Trie树，我们继续观察题目性质</p>
<p>我们首先可以把所有的前缀两两有序组合，这样现在一共有$n ^ 2$个组合，我们考虑如何舍去其中重复的那些</p>
<p>我们规定，对于所有重复的组合，我们<strong>只保留第二个前缀长度最大的那个</strong></p>
<p>这样，如果一个组合被舍弃了，我们能够知道，这是因为，这个组合的后一个前缀被真包含于一个更长的前缀，而且这个前缀可以和其他的前缀重新形成一样的组合</p>
<p>我们现在就要对每个前缀统计它能够舍掉多少个组合数量，我们定义一个组合被它所舍弃掉，当且仅当这个组合的第二个前缀是它的真后缀（如上面所说）并且能形成原来的组合，而且不存在另外一个满足前述条件的前缀真包含这个前缀，因为更短的前缀形成的组合会被其他的串舍弃掉</p>
<p>注意上面讨论的前缀都是作为第二个前缀存在于组合中的，而且其实上面的定义是为了更好的适用于AC自动机的失配边（就是说，其实是先想到了AC自动机，才要这样做的…..）</p>
<p>我们发现，对于一个前缀，我们需要找到它的最大的后缀，满足这个后缀在前缀集合中出现，所以我们需要建出AC自动机，然后沿着它的失配边走一次就能得到我们想要的这个前缀</p>
<p>我们知道，这会带来一个长度上的差值$d$，这告诉我们，所有长度<strong>大于$d$</strong>的前缀作为第一个前缀与这个较短的前缀组合的话，都是会被原前缀舍弃掉的，原因请自行思考</p>
<p>其实是这样的，你可以把第二个前缀加长到原前缀，然后前面的缩减$d$的长度，这样一定也是一种已经存在的组合</p>
<p>所以，我们只要对每个前缀都统计出需要舍掉多少，然后直接用$n ^ 2$减掉，就是最终答案了</p>
<p><del>好像比网上的DP快了6000多ms？</del></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**************************************************************</span></div><div class="line">    Problem: 4502</div><div class="line">    User: Renatus</div><div class="line">    Language: C++</div><div class="line">    Result: Accepted</div><div class="line">    Time:4452 ms</div><div class="line">    Memory:481016 kb</div><div class="line">****************************************************************/</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxs 105</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 405005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for (register int i = r; i &gt;= l; i--)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> n, len;</div><div class="line"><span class="keyword">char</span> s[maxs];</div><div class="line"> </div><div class="line"><span class="keyword">namespace</span> Trie&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> sigma 26</span></div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></div><div class="line">        node* ch[sigma];</div><div class="line">        <span class="keyword">int</span> siz, tsiz;</div><div class="line">        node(<span class="keyword">int</span> siz = <span class="number">0</span>, <span class="keyword">int</span> tsiz = <span class="number">0</span>) &#123;rep(i, <span class="number">0</span>, sigma - <span class="number">1</span>) ch[i] = <span class="literal">NULL</span>;&#125;<span class="comment">//注意即使预先留了0的空位值，但是如果不赋上去的话也是没有用的</span></div><div class="line">    &#125;*root;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(node*&amp; now, <span class="keyword">int</span> pos)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (!now) now = <span class="keyword">new</span> node(), now -&gt; siz = now -&gt; tsiz = <span class="number">0</span>;</div><div class="line">        now -&gt; siz++;</div><div class="line">        <span class="keyword">if</span> (pos &lt; <span class="number">0</span>) &#123;now -&gt; tsiz++; <span class="keyword">return</span>;&#125;</div><div class="line">        <span class="keyword">if</span> (s[pos] - <span class="string">'a'</span> &gt;= sigma) assert(<span class="literal">false</span>);</div><div class="line">        insert(now -&gt; ch[s[pos] - <span class="string">'a'</span>], pos - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_siz</span><span class="params">(node* now, <span class="keyword">int</span> pos)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (!now) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (pos &lt; <span class="number">0</span>) <span class="keyword">return</span> now -&gt; siz - now -&gt; tsiz;</div><div class="line">        <span class="keyword">if</span> (s[pos] - <span class="string">'a'</span> &gt;= sigma) assert(<span class="literal">false</span>);</div><div class="line">        <span class="keyword">return</span> get_siz(now -&gt; ch[s[pos] - <span class="string">'a'</span>], pos - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> Trie;</div><div class="line"> </div><div class="line">ll ans = <span class="number">0</span>;</div><div class="line"> </div><div class="line"><span class="keyword">namespace</span> AC_automaton&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> sigma 26</span></div><div class="line"> </div><div class="line">    <span class="keyword">int</span> ch[maxn][sigma];</div><div class="line">    <span class="keyword">int</span> d[maxn];</div><div class="line">    <span class="keyword">int</span> f[maxn];</div><div class="line">    <span class="keyword">int</span> ct = <span class="number">0</span>;</div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; bfs;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> now = <span class="number">0</span>;</div><div class="line">        rep(i, <span class="number">0</span>, len - <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">int</span>&amp; next = ch[now][s[i] - <span class="string">'a'</span>];</div><div class="line">            <span class="keyword">if</span> (!next) next = ++ct, d[next] = d[now] + <span class="number">1</span>;</div><div class="line">            now = next;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_AC</span><span class="params">()</span></span>&#123;</div><div class="line">        f[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        rep(i, <span class="number">0</span>, sigma - <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (ch[<span class="number">0</span>][i]) bfs.push(ch[<span class="number">0</span>][i]), f[ch[<span class="number">0</span>][i]] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> (!bfs.empty())&#123;</div><div class="line">            <span class="keyword">int</span> x = bfs.front(); bfs.pop();</div><div class="line">            rep(i, <span class="number">0</span>, sigma - <span class="number">1</span>)&#123;</div><div class="line">                <span class="keyword">if</span> (!ch[x][i]) <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">int</span> k = f[x];</div><div class="line">                    <span class="keyword">while</span> (k &amp;&amp; !ch[k][i]) k = f[k];</div><div class="line">                    f[ch[x][i]] = ch[k][i];</div><div class="line">                    bfs.push(ch[x][i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        insert(root, len - <span class="number">1</span>);</div><div class="line">        rep(i, <span class="number">0</span>, sigma - <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (!ch[x][i]) <span class="keyword">continue</span>;</div><div class="line">            s[len++] = <span class="string">'a'</span> + i;</div><div class="line">            DFS(ch[x][i]);</div><div class="line">            len--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DFS2</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> k = f[x];</div><div class="line">        <span class="keyword">if</span> (k)&#123;</div><div class="line">            len -= d[k];</div><div class="line">            ans -= get_siz(root, len - <span class="number">1</span>);</div><div class="line">            len += d[k];</div><div class="line">        &#125;</div><div class="line">        rep(i, <span class="number">0</span>, sigma - <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (!ch[x][i]) <span class="keyword">continue</span>;</div><div class="line">            s[len++] = <span class="string">'a'</span> + i;</div><div class="line">            DFS2(ch[x][i]);</div><div class="line">            len--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;<span class="keyword">using</span> <span class="keyword">namespace</span> AC_automaton;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">        freopen(<span class="string">"bunch.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">    rep(i, <span class="number">1</span>, n) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</div><div class="line">        len = <span class="built_in">strlen</span>(s);</div><div class="line">        insert();</div><div class="line">    &#125;</div><div class="line">    get_AC();</div><div class="line">    len = <span class="number">0</span>;</div><div class="line">    DFS(<span class="number">0</span>);</div><div class="line">    ans = (ll)ct * ct;</div><div class="line">    len = <span class="number">0</span>;</div><div class="line">    DFS2(<span class="number">0</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>细节：注意构造函数的正确使用方法</p>
]]></content>
    
    <summary type="html">
    
      &lt;!--用真正的题解标题替换所有的&lt;title&gt;---&gt;
&lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;BZOJ 4502: 串  题解&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://gqh123.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="字符串" scheme="https://gqh123.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="题解" scheme="https://gqh123.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="BZOJ" scheme="https://gqh123.github.io/tags/BZOJ/"/>
    
      <category term="Trie" scheme="https://gqh123.github.io/tags/Trie/"/>
    
      <category term="AC自动机" scheme="https://gqh123.github.io/tags/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ 3712: [PA2014]Fiolki</title>
    <link href="https://gqh123.github.io/2018/01/15/BZOJ-3712-PA2014-Fiolki/"/>
    <id>https://gqh123.github.io/2018/01/15/BZOJ-3712-PA2014-Fiolki/</id>
    <published>2018-01-14T23:38:34.000Z</published>
    <updated>2019-06-27T07:29:24.748Z</updated>
    
    <content type="html"><![CDATA[<!--用真正的题解标题替换所有的<title>--->
<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>BZOJ 3712: [PA2014]Fiolki  题解<br><a id="more"></a></p>
<h1 id="BZOJ-3712-PA2014-Fiolki"><a href="#BZOJ-3712-PA2014-Fiolki" class="headerlink" title="BZOJ 3712: [PA2014]Fiolki"></a>BZOJ 3712: [PA2014]Fiolki</h1><ul>
<li><p>Time Limit: 30 Sec </p>
</li>
<li><p>Memory Limit: 128 MB</p>
</li>
</ul>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>化学家吉丽想要配置一种神奇的药水来拯救世界。<br>吉丽有n种不同的液体物质，和n个药瓶（均从1到n编号）。初始时，第i个瓶内装着g[i]克的第i种物质。吉丽需要执行一定的步骤来配置药水，第i个步骤是将第a[i]个瓶子内的所有液体倒入第b[i]个瓶子，此后第a[i]个瓶子不会再被用到。瓶子的容量可以视作是无限的。<br>吉丽知道某几对液体物质在一起时会发生反应产生沉淀，具体反应是1克c[i]物质和1克d[i]物质生成2克沉淀，一直进行直到某一反应物耗尽。生成的沉淀不会和任何物质反应。当有多于一对可以发生反应的物质在一起时，吉丽知道它们的反应顺序。每次倾倒完后，吉丽会等到反应结束后再执行下一步骤。<br>吉丽想知道配置过程中总共产生多少沉淀。</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行三个整数n,m,k(0&lt;=m&lt;n&lt;=200000,0&lt;=k&lt;=500000)，分别表示药瓶的个数（即物质的种数），操作步数，可以发生的反应数量。<br>第二行有n个整数g[1],g[2],…,g[n]（1&lt;=g[i]&lt;=10^9)，表示初始时每个瓶内物质的质量。<br>接下来m行，每行两个整数a[i],b<a href="1&lt;=a[i],b[i]&lt;=n,a[i]≠b[i]">i</a>，表示第i个步骤。保证a[i]在以后的步骤中不再出现。<br>接下来k行，每行是一对可以发生反应的物质c[i],d<a href="1&lt;=c[i],d[i]&lt;=n,c[i]≠d[i]">i</a>，按照反应的优先顺序给出。同一个反应不会重复出现。</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>所求答案</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>3 2 1</p>
<p>2 3 4</p>
<p>1 2</p>
<p>3 2</p>
<p>2 3</p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>6</p>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p>鸣谢Jcvb</p>
<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>一道思维好题</p>
<p>一开始我还用并查集+set+启发式合并，结果直接TLE……虽然卡卡常也许能过，但是没有必要了对吧</p>
<p>我们发现，整个实验过程可以看成一棵树的结构，一开始，每瓶药剂都是单独的点，我们做一次实验，就合并两个点，相当于新建一个点作为他们的父亲，然后这个父亲继续参与反应</p>
<p>这样，我们可以建出树</p>
<p>然后，两个反应最近的反应时间，就是它们的LCA，我们知道，每对药剂最多只会反应一次，因为不会只倒出部分药剂，所以我们把每对可能反应按照发生时间排序再做一遍，同时发现当前反应未发生就直接跳出即可</p>
<p>其实还是有一些细节</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 600005 <span class="comment">//注意开够内存</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> bit 20</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> erep(i, x) for (register int i = h[x]; i; i = e[i].next)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for (register int i = r; i &gt;= l; i--)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() ((p1 == p2 &amp;&amp; (p2 = (p1 = buffer) + fread(buffer, 1, maxn, stdin), p1 == p2)) ? EOF : *p1++)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> *p1, *p2;</div><div class="line"><span class="keyword">char</span> buffer[maxn];</div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = gc(); x = <span class="number">0</span>; <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!(<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) &amp;&amp; ch != <span class="string">'-'</span>) ch = gc();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = gc();</div><div class="line">    <span class="keyword">while</span> (<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + ch - <span class="string">'0'</span>, ch = gc();</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, k, ct = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> g[maxn];</div><div class="line"><span class="keyword">int</span> now[maxn];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[x], y);</div><div class="line">    h[x] = cnt;</div><div class="line">    e[++cnt] = edge(h[y], x);</div><div class="line">    h[y] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> fa[maxn][bit + <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    rep(i, <span class="number">1</span>, bit) fa[x][i] = fa[fa[x][i - <span class="number">1</span>]][i - <span class="number">1</span>];</div><div class="line">    erep(i, x)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x][<span class="number">0</span>]) <span class="keyword">continue</span>;</div><div class="line">        fa[op][<span class="number">0</span>] = x;</div><div class="line">        d[op] = d[x] + <span class="number">1</span>;</div><div class="line">        DFS(op);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> x;</div><div class="line">    <span class="keyword">if</span> (d[x] &lt; d[y]) swap(x, y);</div><div class="line">    <span class="keyword">int</span> k = d[x] - d[y], now = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (k)&#123;</div><div class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) x = fa[x][now];</div><div class="line">        now++, k &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> x;</div><div class="line">    per(i, bit, <span class="number">0</span>) <span class="keyword">if</span> (fa[x][i] != fa[y][i]) x = fa[x][i], y = fa[y][i];</div><div class="line">    <span class="keyword">return</span> fa[x][<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ope</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x, y, t, id;</div><div class="line">    ope(<span class="keyword">int</span> x = <span class="number">0</span>, <span class="keyword">int</span> y = <span class="number">0</span>, <span class="keyword">int</span> t = <span class="number">0</span>, <span class="keyword">int</span> id = <span class="number">0</span>) : x(x), y(y), t(t), id(id)&#123;&#125; </div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> ope b) <span class="keyword">const</span>&#123;</div><div class="line">        <span class="keyword">return</span> (t == b.t) ? id &lt; b.id : (d[t] == d[b.t]) ? t &lt; b.t : d[t] &gt; d[b.t];</div><div class="line">        <span class="comment">//return (t == b.t) ? id &lt; b.id : d[t] &gt; d[b.t]; 这样写是不对的，因为有可能出现循环比较</span></div><div class="line">    &#125;</div><div class="line">&#125;line[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">        freopen(<span class="string">"fiolki.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    read(n), read(m), read(k);</div><div class="line">    rep(i, <span class="number">1</span>, n) read(g[i]), now[i] = i;</div><div class="line">    ct = n;</div><div class="line">    rep(i, <span class="number">1</span>, m)&#123;</div><div class="line">        read(x), read(y);</div><div class="line">        ++ct;</div><div class="line">        <span class="keyword">if</span> (!now[x] || !now[y]) assert(<span class="literal">false</span>);</div><div class="line">        Add_Edge(now[x], ct);</div><div class="line">        Add_Edge(now[y], ct);</div><div class="line">        now[x] = <span class="number">0</span>, now[y] = ct;</div><div class="line">    &#125;</div><div class="line">    ++ct;</div><div class="line">    rep(i, <span class="number">1</span>, n) <span class="keyword">if</span> (now[i]) Add_Edge(ct, now[i]);</div><div class="line">    DFS(ct);</div><div class="line">    rep(i, <span class="number">1</span>, k)&#123;</div><div class="line">        read(x), read(y);</div><div class="line">        <span class="keyword">int</span> lca = get_lca(x, y);</div><div class="line">        line[i] = ope(x, y, lca, i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sort(line + <span class="number">1</span>, line + <span class="number">1</span> + k);</div><div class="line">    ll ans = <span class="number">0</span>;</div><div class="line">    rep(i, <span class="number">1</span>, k)&#123;</div><div class="line">        <span class="keyword">if</span> (line[i].t == ct) <span class="keyword">break</span>;</div><div class="line">        x = line[i].x, y = line[i].y;</div><div class="line">        <span class="keyword">int</span> mi = min(g[x], g[y]);</div><div class="line">        g[x] -= mi, g[y] -= mi, ans += mi &lt;&lt; <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;!--用真正的题解标题替换所有的&lt;title&gt;---&gt;
&lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;BZOJ 3712: [PA2014]Fiolki  题解&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://gqh123.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="BZOJ" scheme="https://gqh123.github.io/tags/BZOJ/"/>
    
      <category term="思维题" scheme="https://gqh123.github.io/tags/%E6%80%9D%E7%BB%B4%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ 4592: [Shoi2015]脑洞治疗仪</title>
    <link href="https://gqh123.github.io/2018/01/15/BZOJ-4592-Shoi2015-%E8%84%91%E6%B4%9E%E6%B2%BB%E7%96%97%E4%BB%AA/"/>
    <id>https://gqh123.github.io/2018/01/15/BZOJ-4592-Shoi2015-脑洞治疗仪/</id>
    <published>2018-01-14T23:30:39.000Z</published>
    <updated>2019-06-27T07:29:24.752Z</updated>
    
    <content type="html"><![CDATA[<!--用真正的题解标题替换所有的<title>--->
<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>BZOJ 4592: [Shoi2015]脑洞治疗仪  题解<br><a id="more"></a></p>
<h1 id="BZOJ-4592-Shoi2015-脑洞治疗仪"><a href="#BZOJ-4592-Shoi2015-脑洞治疗仪" class="headerlink" title="BZOJ 4592: [Shoi2015]脑洞治疗仪"></a>BZOJ 4592: [Shoi2015]脑洞治疗仪</h1><ul>
<li><p>Time Limit: 20 Sec </p>
</li>
<li><p>Memory Limit: 256 MB</p>
</li>
</ul>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>曾经发明了自动刷题机的发明家SHTSC又公开了他的新发明：脑洞治疗仪—一种可以治疗他因为发明而日益增大的脑洞的神秘装置。<br>为了简单起见，我们将大脑视作一个01序列。1代表这个位置的脑组织正常工作，0代表这是一块脑洞。<br>1    0    1    0    0    0    1    1    1    0<br>脑洞治疗仪修补某一块脑洞的基本工作原理就是将另一块连续区域挖出，将其中正常工作的脑组织填补在这块脑洞中。<br>（所以脑洞治疗仪是脑洞的治疗仪？）<br>例如，用上面第8号位置到第10号位置去修补第1号位置到第4号位置的脑洞。我们就会得到：<br>1    1    1    1    0    0    1    0    0    0<br>如果再用第1号位置到第4号位置去修补第8号位置到第10号位置：<br>0    0    0    0    0    0    1    1    1    1<br>这是因为脑洞治疗仪会把多余出来的脑组织直接扔掉。<br>如果再用第7号位置到第10号位置去填补第1号位置到第6号位置：<br>1    1    1    1    0    0    0    0    0    0<br>这是因为如果新脑洞挖出来的脑组织不够多，脑洞治疗仪仅会尽量填补位置比较靠前的脑洞。<br>假定初始时SHTSC并没有脑洞，给出一些挖脑洞和脑洞治疗的操作序列，你需要即时回答SHTSC的问题：<br>在大脑某个区间中最大的连续脑洞区域有多大。</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行两个整数n，m。表示SHTSC的大脑可分为从1到n编号的n个连续区域。有m个操作。<br>以下m行每行是下列三种格式之一。<br>0 l r ：SHTSC挖了一个从l到r的脑洞。<br>1 l0 r0 l1 r2 ：SHTSC进行了一次脑洞治疗，用从l0到r0的脑组织修补l1到r1的脑洞。<br>2 l r ：SHTSC询问l到r这段区间最大的脑洞有多大。<br>n,m &lt;=200000，1&lt;=l&lt;=r&lt;=n</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>对于每个询问，输出一行一个整数，表示询问区间内最大连续脑洞区域有多大。</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>10 10</p>
<p>0 2 2</p>
<p>0 4 6</p>
<p>0 10 10</p>
<p>2 1 10</p>
<p>1 8 10 1 4</p>
<p>2 1 10</p>
<p>1 1 4 8 10</p>
<p>2 1 10</p>
<p>1 7 10 1 6</p>
<p>2 1 10</p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>3</p>
<p>3</p>
<p>6</p>
<p>6</p>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p>By 佚名上传</p>
<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>线段树</p>
<p>我们发现，需要维护01序列的最长连续段，这部分使用经典的前中后法即可维护</p>
<p>然后我们还需要维护区间1的个数，即区间和，直接搞就好</p>
<p>对于最后一个填充操作，用区间覆盖实现，我们优先搞左边，如果左边搞完还剩下脑组织，就搞右边，如此即可</p>
<p>还可以结合区间和以及区间覆盖标记搞一些小的优化剪枝，比如如果已经全是1就直接跳出等等</p>
<p>所以还算是比较快的，rank7</p>
<p><img src="http://218.106.205.134/uploads/4592.png" height="px" width="px"></p>
<p>还是1A，挺开心</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**************************************************************</span></div><div class="line">    Problem: 4592</div><div class="line">    User: Renatus</div><div class="line">    Language: C++</div><div class="line">    Result: Accepted</div><div class="line">    Time:2932 ms</div><div class="line">    Memory:16840 kb</div><div class="line">****************************************************************/</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 400005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for (register int i = r; i &gt;= l; i--)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() ((p1 == p2 &amp;&amp; (p2 = (p1 = buffer) + fread(buffer, 1, maxn, stdin), p1 == p2)) ? EOF : *p1++)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">char</span> *p1, *p2;</div><div class="line"><span class="keyword">char</span> buffer[maxn];</div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = gc(); x = <span class="number">0</span>; <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!(<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) &amp;&amp; ch != <span class="string">'-'</span>) ch = gc();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = gc();</div><div class="line">    <span class="keyword">while</span> (<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + ch - <span class="string">'0'</span>, ch = gc();</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> <span class="built_in">set</span>[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> le[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> ri[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> mi[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> sum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (!sum[o &lt;&lt; <span class="number">1</span>]) le[o] = mid - l + <span class="number">1</span> + le[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">    <span class="keyword">else</span> le[o] = le[o &lt;&lt; <span class="number">1</span>];</div><div class="line">    <span class="keyword">if</span> (!sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]) ri[o] = r - mid + ri[o &lt;&lt; <span class="number">1</span>];</div><div class="line">    <span class="keyword">else</span> ri[o] = ri[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">    mi[o] = max(ri[o &lt;&lt; <span class="number">1</span>] + le[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>], max(mi[o &lt;&lt; <span class="number">1</span>], mi[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]));</div><div class="line">    sum[o] = sum[o &lt;&lt; <span class="number">1</span>] + sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">set</span>[o] == <span class="number">-1</span> || l == r) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">set</span>[o])&#123; </div><div class="line">        <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line"> </div><div class="line">        <span class="keyword">int</span> ls = o &lt;&lt; <span class="number">1</span>;</div><div class="line">        le[ls] = ri[ls] = mi[ls] = <span class="number">0</span>, sum[ls] = mid - l + <span class="number">1</span>;</div><div class="line">        <span class="built_in">set</span>[ls] = <span class="number">1</span>;</div><div class="line"> </div><div class="line">        <span class="keyword">int</span> rs = o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>;</div><div class="line">        le[rs] = ri[rs] = mi[rs] = <span class="number">0</span>, sum[rs] = r - mid;</div><div class="line">        <span class="built_in">set</span>[rs] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line"> </div><div class="line">        <span class="keyword">int</span> ls = o &lt;&lt; <span class="number">1</span>;</div><div class="line">        le[ls] = ri[ls] = mi[ls] = mid - l + <span class="number">1</span>, sum[ls] = <span class="number">0</span>;</div><div class="line">        <span class="built_in">set</span>[ls] = <span class="number">0</span>;</div><div class="line"> </div><div class="line">        <span class="keyword">int</span> rs = o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>;</div><div class="line">        le[rs] = ri[rs] = mi[rs] = r - mid, sum[rs] = <span class="number">0</span>;</div><div class="line">        <span class="built_in">set</span>[rs] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">set</span>[o] = <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="built_in">set</span>[o] = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">if</span> (l == r) &#123;sum[o] = <span class="number">1</span>; <span class="keyword">return</span>;&#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    init(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    init(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    sum[o] = sum[o &lt;&lt; <span class="number">1</span>] + sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">set</span>[o] == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">set</span>[o] == <span class="number">1</span>) <span class="keyword">return</span> min(qy, r) - max(qx, l) + <span class="number">1</span>; </div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy) <span class="keyword">return</span> sum[o];</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l, ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) ans += get(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) ans += get(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dig</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">set</span>[o] == <span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy) &#123;</div><div class="line">        <span class="built_in">set</span>[o] = sum[o] = <span class="number">0</span>;</div><div class="line">        le[o] = ri[o] = mi[o] = r - l + <span class="number">1</span>; </div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) dig(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) dig(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">set</span>[o] == <span class="number">1</span> || !qd) <span class="keyword">return</span>;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        <span class="keyword">int</span> rest = r - l + <span class="number">1</span> - sum[o];</div><div class="line">        <span class="keyword">if</span> (rest &lt;= qd)&#123;</div><div class="line">            qd -= rest;</div><div class="line">            <span class="built_in">set</span>[o] = <span class="number">1</span>;</div><div class="line">            le[o] = ri[o] = mi[o] = <span class="number">0</span>;</div><div class="line">            sum[o] = r - l + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">            fill(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span> (qd) fill(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">            pushup(l, r, o);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid &amp;&amp; qd) fill(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid &amp;&amp; qd) fill(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(l, r, o);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ele</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x, y, m;</div><div class="line">    ele(<span class="keyword">int</span> x = <span class="number">0</span>, <span class="keyword">int</span> y = <span class="number">0</span>, <span class="keyword">int</span> m = <span class="number">0</span>) : x(x), y(y), m(m)&#123;&#125; </div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> = (<span class="keyword">const</span> ele b) &#123;</div><div class="line">        x = b.x, y = b.y, m = b.m;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="function">ele <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy) <span class="keyword">return</span> ele(le[o], ri[o], mi[o]); </div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    ele ans1 = ele(<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>), ans2 = ele(<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>), ans = ele(<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) ans1 = query(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) ans2 = query(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (ans1.x == <span class="number">-1</span>) <span class="keyword">return</span> ans2;</div><div class="line">    <span class="keyword">if</span> (ans2.x == <span class="number">-1</span>) <span class="keyword">return</span> ans1;</div><div class="line">    <span class="keyword">if</span> (ans1.x == mid - l + <span class="number">1</span>) ans.x = ans1.x + ans2.x;</div><div class="line">    <span class="keyword">else</span> ans.x = ans1.x;</div><div class="line">    <span class="keyword">if</span> (ans2.y == r - mid) ans.y = ans1.y + ans2.y;</div><div class="line">    <span class="keyword">else</span> ans.y = ans2.y;</div><div class="line">    ans.m = max(ans1.y + ans2.x, max(ans1.m, ans2.m));</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">        freopen(<span class="string">"cure.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">int</span> op; </div><div class="line">    read(n), read(m);</div><div class="line">    init(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    rep(i, <span class="number">1</span>, m)&#123;</div><div class="line">        read(op);</div><div class="line">        <span class="keyword">switch</span>(op)&#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">0</span>: read(qx), read(qy), dig(<span class="number">1</span>, n, <span class="number">1</span>); <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>: read(qx), read(qy), qd = get(<span class="number">1</span>, n, <span class="number">1</span>), dig(<span class="number">1</span>, n, <span class="number">1</span>), read(qx), read(qy), fill(<span class="number">1</span>, n, <span class="number">1</span>); <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">2</span>: read(qx), read(qy); ele ans = query(<span class="number">1</span>, n, <span class="number">1</span>); <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max(ans.x, max(ans.y, ans.m))); <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;!--用真正的题解标题替换所有的&lt;title&gt;---&gt;
&lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;BZOJ 4592: [Shoi2015]脑洞治疗仪  题解&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://gqh123.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="https://gqh123.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="题解" scheme="https://gqh123.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="BZOJ" scheme="https://gqh123.github.io/tags/BZOJ/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ 1334: [Baltic2008]Elect</title>
    <link href="https://gqh123.github.io/2018/01/15/BZOJ-1334-Baltic2008-Elect/"/>
    <id>https://gqh123.github.io/2018/01/15/BZOJ-1334-Baltic2008-Elect/</id>
    <published>2018-01-14T23:23:03.000Z</published>
    <updated>2019-06-27T07:29:24.736Z</updated>
    
    <content type="html"><![CDATA[<!--用真正的题解标题替换所有的<title>--->
<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>BZOJ 1334: [Baltic2008]Elect  题解<br><a id="more"></a></p>
<h1 id="BZOJ-1334-Baltic2008-Elect"><a href="#BZOJ-1334-Baltic2008-Elect" class="headerlink" title="BZOJ 1334: [Baltic2008]Elect"></a>BZOJ 1334: [Baltic2008]Elect</h1><ul>
<li><p>Time Limit: 10 Sec </p>
</li>
<li><p>Memory Limit: 162 MB</p>
</li>
</ul>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>N个政党要组成一个联合内阁，每个党都有自己的席位数. 现在希望你找出一种方案，你选中的党的席位数要大于总数的一半，并且联合内阁的席位数越多越好. 对于一个联合内阁，如果某个政党退出后，其它党的席位仍大于总数的一半，则这个政党被称为是多余的，这是不允许的.</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行给出有多少个政党.其值小于等于300 下面给出每个政党的席位数.总席位数小于等于 100000</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>你的组阁方案中最多能占多少个席位.</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>4</p>
<p>1 3 2 4</p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>7</p>
<h3 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h3><p>选择第二个政党和第四个</p>
<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>十分简单的背包DP</p>
<p>每次只使用容量不超过一半的状态来转移</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for (register int i = r; i &gt;= l; i--)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() ((p1 == p2 &amp;&amp; (p2 = (p1 = buffer) + fread(buffer, 1, maxn, stdin), p1 == p2)) ? EOF : *p1++)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> *p1, *p2;</div><div class="line"><span class="keyword">char</span> buffer[maxn];</div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = gc(); x = <span class="number">0</span>; <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!(<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) &amp;&amp; ch != <span class="string">'0'</span>) ch = gc();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = gc();</div><div class="line">    <span class="keyword">while</span> (<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + ch - <span class="string">'0'</span>, ch = gc();</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m = <span class="number">0</span>;</div><div class="line"><span class="keyword">bool</span> dp[maxn];</div><div class="line"><span class="keyword">int</span> g[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">        freopen(<span class="string">"elect.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span>  </span></div><div class="line">    ll sum = <span class="number">0</span>;</div><div class="line">    read(n);</div><div class="line">    rep(i, <span class="number">1</span>, n) read(g[i]), m += g[i];</div><div class="line">    sort(g + <span class="number">1</span>, g + <span class="number">1</span> + n);</div><div class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> mid = m &gt;&gt; <span class="number">1</span>;</div><div class="line">    per(i, n, <span class="number">1</span>) per(j, min(g[i] + mid, m), g[i]) dp[j] |= dp[j - g[i]];</div><div class="line">    per(i, m, <span class="number">0</span>) <span class="keyword">if</span> (dp[i]) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, i);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125; </div><div class="line">    assert(<span class="literal">false</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;!--用真正的题解标题替换所有的&lt;title&gt;---&gt;
&lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;BZOJ 1334: [Baltic2008]Elect  题解&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://gqh123.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="BZOJ" scheme="https://gqh123.github.io/tags/BZOJ/"/>
    
      <category term="背包DP" scheme="https://gqh123.github.io/tags/%E8%83%8C%E5%8C%85DP/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ 1125: [POI2008]Poc</title>
    <link href="https://gqh123.github.io/2018/01/15/BZOJ-1125-POI2008-Poc/"/>
    <id>https://gqh123.github.io/2018/01/15/BZOJ-1125-POI2008-Poc/</id>
    <published>2018-01-14T23:02:13.000Z</published>
    <updated>2019-06-27T07:29:24.736Z</updated>
    
    <content type="html"><![CDATA[<!--用真正的题解标题替换所有的<title>--->
<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>BZOJ 1125: [POI2008]Poc  题解<br><a id="more"></a></p>
<h1 id="BZOJ-1125-POI2008-Poc"><a href="#BZOJ-1125-POI2008-Poc" class="headerlink" title="BZOJ 1125: [POI2008]Poc"></a>BZOJ 1125: [POI2008]Poc</h1><ul>
<li><p>Time Limit: 10 Sec </p>
</li>
<li><p>Memory Limit: 162 MB</p>
</li>
</ul>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>n列火车，每条有l节车厢。每节车厢有一种颜色（用小写字母表示）。有m次车厢交换操作。求：对于每列火车，在交换车厢的某个时刻，与其颜色完全相同的火车最多有多少。</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>n l m (2 ≤ n ≤ 1000, 1 ≤ l ≤ 100, 0 ≤ m ≤ 100000) n行字符串，长度为l m行，每行4个数a b c d,a车的第b个字符与c车第d个字符交换。</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>n个数，在交换车厢的某个时刻，与该车颜色完全相同的火车最多数目。</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>5 6 7</p>
<p>ababbd</p>
<p>abbbbd</p>
<p>aaabad</p>
<p>caabbd</p>
<p>cabaad</p>
<p>2 3 5 4</p>
<p>5 3 5 5</p>
<p>3 5 2 2</p>
<p>1 2 4 3</p>
<p>2 2 5 1</p>
<p>1 1 3 3</p>
<p>4 1 5 6</p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>3</p>
<p>3</p>
<p>3</p>
<p>2</p>
<p>3</p>
<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>好题</p>
<p>据说网上代码都是什么平衡树上打标记？虽然挺有道理，但还是跑不过我……</p>
<p>现在好像还是rank3……</p>
<p><img src="http://218.106.205.134/uploads/1125_usr.png" height="px" width="px"></p>
<p>这种差距就不是卡常数能解决的了……</p>
<p>我们考虑这样做，我们发现，需要求完全相同的串的个数，这就是同构性判定，我们很容易想到Hash</p>
<p>我们可以$O(n)$求出所有会出现的Hash值，先把他们离散化一下</p>
<p>然后，我们发现，如果我们直接对每个Hash维护单调栈，那么是不行的，因为串的进入时间不一样，在查询的时候不能用已经操作过许多次的栈来更新答案，因为里面会包含许多本不该包含的信息</p>
<p>这样，难道我们就需要可持久化单调栈了吗？</p>
<p>反正我没试过….但是我知道，由于后添加的栈内元素信息一定是会被包含的（但是元素本身不一定，仔细体会一下这里的含义），所以我们可以对每个元素记录一下它自己进入栈的时间</p>
<p>同时，在每个串被操作的时候，把它取出来更新答案，这时候，我们也对这个串记录一下它是什么时候进入它原来的那个单调栈的，然后直接栈内二分即可更新答案</p>
<p>这样，好像就行了？总之虽然总复杂度好像相同，但是我修改是$O(1)$的，这样也能优化很多？</p>
<p>其实我还有好多优化没有使用……</p>
<p>但是这样写会导致细节非常多，有什么串操作后不变，或是交换同一个串的两个字符，或是这两种情况合在一起，然后最开始和最后全都需要更新一次答案……自己写写吧</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**************************************************************</span></div><div class="line">    Problem: 1125</div><div class="line">    User: Renatus</div><div class="line">    Language: C++</div><div class="line">    Result: Accepted</div><div class="line">    Time:1756 ms</div><div class="line">    Memory:14484 kb</div><div class="line">****************************************************************/</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxl 205 </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 200005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Hash 998244353</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000007  </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> push push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pop pop_back </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for (register int i = r; i &gt;= l; i--)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() ((p1 == p2 &amp;&amp; (p2 = (p1 = buffer) + fread(buffer, 1, maxn, stdin), p1 == p2)) ? EOF : *p1++)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">char</span> *p1, *p2;</div><div class="line"><span class="keyword">char</span> buffer[maxn];</div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = gc(); x = <span class="number">0</span>; <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!(<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) &amp;&amp; ch != <span class="string">'-'</span>) ch = gc();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = gc();</div><div class="line">    <span class="keyword">while</span> (<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + ch - <span class="string">'0'</span>, ch = gc();</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> n, l, m;</div><div class="line"> </div><div class="line"><span class="keyword">char</span> k[maxn][maxl];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">reads</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = gc();</div><div class="line">    <span class="keyword">while</span> (!(<span class="string">'a'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'z'</span>)) ch = gc();</div><div class="line">    <span class="keyword">int</span> now = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="string">'a'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'z'</span>) k[x][++now] = ch, ch = gc();</div><div class="line">    k[x][++now] = <span class="string">'\0'</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pii</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> fi, se;</div><div class="line">    pii(<span class="keyword">int</span> fi = <span class="number">0</span>, <span class="keyword">int</span> se = <span class="number">0</span>) : fi(fi), se(se)&#123;&#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> pii b) <span class="keyword">const</span>&#123;</div><div class="line">        <span class="keyword">return</span> (fi == b.fi) ? se &lt; b.se : fi &lt; b.fi;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> has[maxn], _has[maxn];</div><div class="line"><span class="keyword">int</span> t[maxn];</div><div class="line">ll mi[maxl];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_hash</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    has[x] = <span class="number">0</span>;</div><div class="line">    rep(i, <span class="number">1</span>, l) has[x] = ((ll)has[x] * Hash % M + k[x][i]) % M;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">query</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x, y, z, w;</div><div class="line">    query(<span class="keyword">int</span> x = <span class="number">0</span>, <span class="keyword">int</span> y = <span class="number">0</span>, <span class="keyword">int</span> z = <span class="number">0</span>, <span class="keyword">int</span> w = <span class="number">0</span>) : x(x), y(y), z(z), w(w)&#123;&#125;</div><div class="line">&#125;q[maxm];</div><div class="line"> </div><div class="line"><span class="keyword">int</span> line[(maxm &lt;&lt; <span class="number">1</span>) + maxn];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"> </div><div class="line"><span class="built_in">vector</span>&lt;pii&gt; s[(maxm &lt;&lt; <span class="number">1</span>) + maxn];</div><div class="line"><span class="keyword">int</span> siz[(maxm &lt;&lt; <span class="number">1</span>) + maxn]; <span class="comment">//当前hash等于下标的串个数 </span></div><div class="line"> </div><div class="line"><span class="keyword">int</span> ans[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_ans</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> h = has[x];</div><div class="line">    ans[x] = max(ans[x], lower_bound(s[h].begin(), s[h].end(), pii(t[x], <span class="number">0</span>)) -&gt; se); </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> ti)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> h = has[x];</div><div class="line">    siz[h]--;</div><div class="line">    <span class="keyword">while</span> (!s[h].empty() &amp;&amp; s[h].back().fi == ti) s[h].pop();</div><div class="line">    s[h].push(pii(ti, siz[h])); </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> ti)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> h = has[x];</div><div class="line">    h = has[x] = y, siz[h]++, t[x] = ti;</div><div class="line">    <span class="keyword">while</span> (!s[h].empty() &amp;&amp; (s[h].back().se &lt;= siz[h] || s[h].back().fi == ti)) s[h].pop();</div><div class="line">    s[h].push(pii(ti, siz[h])); </div><div class="line">&#125;<span class="comment">//remove和modify需要分离，具体原因自行思考 </span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">        freopen(<span class="string">"poc.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">        freopen(<span class="string">"poc.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">int</span> x, y, z, w;</div><div class="line">    read(n), read(l), read(m);</div><div class="line"> </div><div class="line">    <span class="comment">//预处理模块</span></div><div class="line">    mi[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    rep(i, <span class="number">1</span>, l) mi[i] = mi[i - <span class="number">1</span>] * Hash % M;</div><div class="line">    rep(i, <span class="number">1</span>, n) reads(i);</div><div class="line">    rep(i, <span class="number">1</span>, n) get_hash(i), line[++cnt] = has[i], _has[i] = has[i];</div><div class="line">    rep(i, <span class="number">1</span>, m) &#123;</div><div class="line">        read(x), read(y), read(z), read(w);</div><div class="line">        <span class="keyword">int</span> d = k[z][w] - k[x][y];</div><div class="line">        has[x] = (has[x] + M + mi[l - y] * d % M) % M;</div><div class="line">        has[z] = (has[z] + M - mi[l - w] * d % M) % M;</div><div class="line">        swap(k[x][y], k[z][w]);</div><div class="line">        q[i] = query(x, z, has[x], has[z]);</div><div class="line">        line[++cnt] = has[x], line[++cnt] = has[z];</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">//离散化模块</span></div><div class="line">    sort(line + <span class="number">1</span>, line + <span class="number">1</span> + cnt);</div><div class="line">    cnt = unique(line + <span class="number">1</span>, line + <span class="number">1</span> + cnt) - line - <span class="number">1</span>;</div><div class="line">    rep(i, <span class="number">1</span>, n) has[i] = _has[i];</div><div class="line">    rep(i, <span class="number">1</span>, n) has[i] = lower_bound(line + <span class="number">1</span>, line + <span class="number">1</span> + cnt, has[i]) - line;</div><div class="line">    rep(i, <span class="number">1</span>, m)&#123;</div><div class="line">        q[i].z = lower_bound(line + <span class="number">1</span>, line + <span class="number">1</span> + cnt, q[i].z) - line;</div><div class="line">        q[i].w = lower_bound(line + <span class="number">1</span>, line + <span class="number">1</span> + cnt, q[i].w) - line;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">//算法工作模块</span></div><div class="line">    rep(i, <span class="number">1</span>, n) siz[has[i]]++, t[i] = <span class="number">0</span>;</div><div class="line">    rep(i, <span class="number">1</span>, n) <span class="keyword">if</span> (s[has[i]].empty()) s[has[i]].push(pii(<span class="number">0</span>, siz[has[i]]));</div><div class="line">    rep(i, <span class="number">1</span>, n) get_ans(i);</div><div class="line">    rep(i, <span class="number">1</span>, m)&#123;</div><div class="line">        <span class="comment">//注意更新答案与修改的顺序</span></div><div class="line">        get_ans(q[i].x), get_ans(q[i].y); </div><div class="line">        <span class="keyword">if</span> (q[i].x == q[i].y) &#123;</div><div class="line">            remove(q[i].y, i), modify(q[i].y, q[i].w, i);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;<span class="comment">//注意特殊判断边界情况</span></div><div class="line">        remove(q[i].x, i), remove(q[i].y, i);</div><div class="line">        modify(q[i].x, q[i].z, i), modify(q[i].y, q[i].w, i);</div><div class="line">        <span class="comment">//需要分离remove和modify，否则可能会弹出有用元素，包含无用信息</span></div><div class="line">    &#125;</div><div class="line">    rep(i, <span class="number">1</span>, n) get_ans(i);</div><div class="line">    rep(i, <span class="number">1</span>, n) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;!--用真正的题解标题替换所有的&lt;title&gt;---&gt;
&lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;BZOJ 1125: [POI2008]Poc  题解&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://gqh123.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="字符串" scheme="https://gqh123.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="离散化" scheme="https://gqh123.github.io/tags/%E7%A6%BB%E6%95%A3%E5%8C%96/"/>
    
      <category term="题解" scheme="https://gqh123.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="BZOJ" scheme="https://gqh123.github.io/tags/BZOJ/"/>
    
      <category term="单调栈" scheme="https://gqh123.github.io/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
      <category term="Hash" scheme="https://gqh123.github.io/tags/Hash/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ 3304: [Shoi2005]带限制的最长公共子序列</title>
    <link href="https://gqh123.github.io/2018/01/15/BZOJ-3304-Shoi2005-%E5%B8%A6%E9%99%90%E5%88%B6%E7%9A%84%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <id>https://gqh123.github.io/2018/01/15/BZOJ-3304-Shoi2005-带限制的最长公共子序列/</id>
    <published>2018-01-14T22:57:48.000Z</published>
    <updated>2019-06-27T07:29:24.740Z</updated>
    
    <content type="html"><![CDATA[<!--用真正的题解标题替换所有的<title>--->
<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>BZOJ 3304: [Shoi2005]带限制的最长公共子序列  题解<br><a id="more"></a></p>
<h1 id="BZOJ-3304-Shoi2005-带限制的最长公共子序列"><a href="#BZOJ-3304-Shoi2005-带限制的最长公共子序列" class="headerlink" title="BZOJ 3304: [Shoi2005]带限制的最长公共子序列"></a>BZOJ 3304: [Shoi2005]带限制的最长公共子序列</h1><ul>
<li><p>Time Limit: 10 Sec </p>
</li>
<li><p>Memory Limit: 128 MB</p>
</li>
</ul>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p><img src="http://218.106.205.134/uploads/111.jpg" height="px" width="px"></p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>输入共三行，每行为长度不超过500的，小写字母组成的非空字符串<br>按顺序分别表示x,y,z</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>如存在满足条件的N，输出W的长度，否则输出 NO SOLUTION</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>helloworld</p>
<p>hellxebore</p>
<p>xr</p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>5</p>
<h3 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h3><p>w=hxeor</p>
<p>本题要求找出的W首先是X与Y的公共子序列并且包含Z，然后才是满足这些条件的</p>
<p>字符串里面找最长的。</p>
<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>MDZZ，吃饭的时候都在想这道题，结果一看题解，$O(n ^ 3)$可过？！</p>
<p>真是f**k</p>
<p>直接记录三个串各自的匹配位置滚动一下就好</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 515</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for (register int i = r; i &gt;= l; i--)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() ((p1 == p2 &amp;&amp; (p2 = (p1 = buffer) + fread(buffer, 1, maxn, stdin), p1 == p2)) ? EOF : *p1++)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> *p1, *p2;</div><div class="line"><span class="keyword">char</span> buffer[maxn];</div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = gc(); x = <span class="number">0</span>; <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!(<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) &amp;&amp; ch != <span class="string">'-'</span>) ch = gc();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = gc();</div><div class="line">    <span class="keyword">while</span> (<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + ch - <span class="string">'0'</span>, ch = gc();</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, k;</div><div class="line"><span class="keyword">char</span> a[maxn], b[maxn], c[maxn];</div><div class="line"><span class="keyword">int</span> dp[maxn][maxn][<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">        freopen(<span class="string">"lcs.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%s%s"</span>, a + <span class="number">1</span>, b + <span class="number">1</span>, c + <span class="number">1</span>);</div><div class="line">    n = <span class="built_in">strlen</span>(a + <span class="number">1</span>), m = <span class="built_in">strlen</span>(b + <span class="number">1</span>), k = <span class="built_in">strlen</span>(c + <span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> d = <span class="number">0</span>;</div><div class="line">    per(l, k + <span class="number">1</span>, <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (l != k + <span class="number">1</span>)&#123;</div><div class="line">            rep(i, <span class="number">1</span>, n + <span class="number">1</span>) dp[i][m + <span class="number">1</span>][d] = -INF;</div><div class="line">            rep(i, <span class="number">1</span>, m + <span class="number">1</span>) dp[n + <span class="number">1</span>][i][d] = -INF;</div><div class="line">        &#125;</div><div class="line">        per(i, n, <span class="number">1</span>) per(j, m, <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (a[i] == b[j])&#123;</div><div class="line">                <span class="keyword">if</span> (a[i] == c[l]) dp[i][j][d] = max(dp[i + <span class="number">1</span>][j + <span class="number">1</span>][d ^ <span class="number">1</span>], dp[i + <span class="number">1</span>][j + <span class="number">1</span>][d]) + <span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span> dp[i][j][d] = dp[i + <span class="number">1</span>][j + <span class="number">1</span>][d] + <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> dp[i][j][d] = max(dp[i + <span class="number">1</span>][j][d], dp[i][j + <span class="number">1</span>][d]);</div><div class="line">        &#125;</div><div class="line">        d ^= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (dp[<span class="number">1</span>][<span class="number">1</span>][d ^ <span class="number">1</span>] &gt; <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%d"</span>, dp[<span class="number">1</span>][<span class="number">1</span>][d ^ <span class="number">1</span>]);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO SOLUTION"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;!--用真正的题解标题替换所有的&lt;title&gt;---&gt;
&lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;BZOJ 3304: [Shoi2005]带限制的最长公共子序列  题解&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://gqh123.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="BZOJ" scheme="https://gqh123.github.io/tags/BZOJ/"/>
    
      <category term="最长公共子序列DP" scheme="https://gqh123.github.io/tags/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97DP/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ 4275: [ONTAK2015]Badania naukowe</title>
    <link href="https://gqh123.github.io/2018/01/15/BZOJ-4275-ONTAK2015-Badania-naukowe/"/>
    <id>https://gqh123.github.io/2018/01/15/BZOJ-4275-ONTAK2015-Badania-naukowe/</id>
    <published>2018-01-14T22:53:17.000Z</published>
    <updated>2019-06-27T07:29:24.748Z</updated>
    
    <content type="html"><![CDATA[<!--用真正的题解标题替换所有的<title>--->
<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>BZOJ 4275: [ONTAK2015]Badania naukowe  题解<br><a id="more"></a></p>
<h1 id="BZOJ-4275-ONTAK2015-Badania-naukowe"><a href="#BZOJ-4275-ONTAK2015-Badania-naukowe" class="headerlink" title="BZOJ 4275: [ONTAK2015]Badania naukowe"></a>BZOJ 4275: [ONTAK2015]Badania naukowe</h1><ul>
<li><p>Time Limit: 3 Sec </p>
</li>
<li><p>Memory Limit: 256 MB</p>
</li>
</ul>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给定三个数字串A,B,C，请找到一个A,B的最长公共子序列，满足C是该子序列的子串。</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行包含一个正整数n(1&lt;=n&lt;=3000)，表示A串的长度。<br>第二行包含n个正整数，其中第i个数表示A<a href="1&lt;=A[i]&lt;=1000">i</a>。<br>第三行包含一个正整数m(1&lt;=m&lt;=3000)，表示B串的长度。<br>第四行包含m个正整数，其中第i个数表示B<a href="1&lt;=B[i]&lt;=1000">i</a>。<br>第五行包含一个整数k(0&lt;=k&lt;=3000)，表示C串的长度。<br>第六行包含k个正整数，其中第i个数表示C<a href="1&lt;=C[i]&lt;=1000">i</a>。</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>输出一个整数，即满足条件的最长公共子序列的长度，如果无解输出-1。特别的，如果k为0且无解，请输出0。</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>7</p>
<p>1 2 2 3 1 1 2</p>
<p>6</p>
<p>1 2 1 3 1 2</p>
<p>2</p>
<p>3 2</p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>4</p>
<h3 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h3><p>找到的最长个公共子序列为(1,2,3,2)。</p>
<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>就是一道ZZ的LCS上DP，一开始我还以为需要KMP……</p>
<p>后来发现直接暴力枚举开头，然后贪心匹配，一旦匹配结束就退出并记录这个区间，然后DP一下前后缀LCS，再枚举两个串分别的匹配位置，更新一下答案就好……</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 4005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for (register int i = r; i &gt;= l; i--)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() ((p1 == p2 &amp;&amp; (p2 = (p1 = buffer) + fread(buffer, 1, maxn, stdin), p1 == p2)) ? EOF : *p1++) </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> *p1, *p2;</div><div class="line"><span class="keyword">char</span> buffer[maxn];</div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = gc(); x = <span class="number">0</span>; <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!(<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) &amp;&amp; ch != <span class="string">'-'</span>) ch = gc();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) ch = gc(), f = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + ch - <span class="string">'0'</span>, ch = gc();</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, k;</div><div class="line"><span class="keyword">int</span> a[maxn];</div><div class="line"><span class="keyword">int</span> b[maxn];</div><div class="line"><span class="keyword">int</span> c[maxn];</div><div class="line"><span class="keyword">int</span> ca = <span class="number">0</span>;</div><div class="line">pii sa[maxn];</div><div class="line"><span class="keyword">int</span> cb = <span class="number">0</span>;</div><div class="line">pii sb[maxn];</div><div class="line"><span class="keyword">int</span> pre[maxn][maxn];</div><div class="line"><span class="keyword">int</span> suf[maxn][maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    rep(i, <span class="number">1</span>, n) &#123;</div><div class="line">        <span class="keyword">if</span> (a[i] != c[<span class="number">1</span>]) <span class="keyword">continue</span>;</div><div class="line">        pii op = pii(i, <span class="number">0</span>);</div><div class="line">        <span class="keyword">int</span> now = <span class="number">2</span>;</div><div class="line">        <span class="keyword">bool</span> f = <span class="number">0</span>;</div><div class="line">        rep(j, i + <span class="number">1</span>, n)&#123;</div><div class="line">            <span class="keyword">if</span> (now &gt; k) &#123;</div><div class="line">                op.se = j - <span class="number">1</span>;</div><div class="line">                sa[++ca] = op;</div><div class="line">                f = <span class="number">1</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (a[j] == c[now]) now++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!f &amp;&amp; now &gt; k) &#123;</div><div class="line">            op.se = n;</div><div class="line">            sa[++ca] = op;</div><div class="line">            f = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!f) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    rep(i, <span class="number">1</span>, m) &#123;</div><div class="line">        <span class="keyword">if</span> (b[i] != c[<span class="number">1</span>]) <span class="keyword">continue</span>;</div><div class="line">        pii op = pii(i, <span class="number">0</span>);</div><div class="line">        <span class="keyword">int</span> now = <span class="number">2</span>;</div><div class="line">        <span class="keyword">bool</span> f = <span class="number">0</span>;</div><div class="line">        rep(j, i + <span class="number">1</span>, m)&#123;</div><div class="line">            <span class="keyword">if</span> (now &gt; k) &#123;</div><div class="line">                op.se = j - <span class="number">1</span>;</div><div class="line">                sb[++cb] = op;</div><div class="line">                f = <span class="number">1</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (b[j] == c[now]) now++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!f &amp;&amp; now &gt; k) &#123;</div><div class="line">            op.se = m;</div><div class="line">            sb[++cb] = op;</div><div class="line">            f = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!f) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">        freopen(<span class="string">"bad.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    read(n);</div><div class="line">    rep(i, <span class="number">1</span>, n) read(a[i]);</div><div class="line">    read(m);</div><div class="line">    rep(i, <span class="number">1</span>, m) read(b[i]);</div><div class="line">    read(k);</div><div class="line">    rep(i, <span class="number">1</span>, k) read(c[i]);</div><div class="line">    rep(i, <span class="number">1</span>, n) rep(j, <span class="number">1</span>, m) pre[i][j] = (a[i] == b[j]) ? (pre[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>) : max(pre[i - <span class="number">1</span>][j], pre[i][j - <span class="number">1</span>]);</div><div class="line">    per(i, n, <span class="number">1</span>) per(j, m, <span class="number">1</span>) suf[i][j] = (a[i] == b[j]) ? (suf[i + <span class="number">1</span>][j + <span class="number">1</span>] + <span class="number">1</span>) : max(suf[i + <span class="number">1</span>][j], suf[i][j + <span class="number">1</span>]);</div><div class="line">    <span class="keyword">if</span> (!k)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, pre[n][m]);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    init();</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">-1</span>;</div><div class="line">    rep(i, <span class="number">1</span>, ca) rep(j, <span class="number">1</span>, cb) ans = max(ans, pre[sa[i].fi - <span class="number">1</span>][sb[j].fi - <span class="number">1</span>] + k + suf[sa[i].se + <span class="number">1</span>][sb[j].se + <span class="number">1</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;!--用真正的题解标题替换所有的&lt;title&gt;---&gt;
&lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;BZOJ 4275: [ONTAK2015]Badania naukowe  题解&lt;br&gt;
    
    </summary>
    
    
      <category term="贪心" scheme="https://gqh123.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="题解" scheme="https://gqh123.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="BZOJ" scheme="https://gqh123.github.io/tags/BZOJ/"/>
    
      <category term="最长公共子序列DP" scheme="https://gqh123.github.io/tags/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97DP/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ 3319: 黑白树</title>
    <link href="https://gqh123.github.io/2018/01/15/BZOJ-3319-%E9%BB%91%E7%99%BD%E6%A0%91/"/>
    <id>https://gqh123.github.io/2018/01/15/BZOJ-3319-黑白树/</id>
    <published>2018-01-14T22:49:00.000Z</published>
    <updated>2019-06-27T07:29:24.744Z</updated>
    
    <content type="html"><![CDATA[<!--用真正的题解标题替换所有的<title>--->
<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>BZOJ 3319: 黑白树  题解<br><a id="more"></a></p>
<h1 id="BZOJ-3319-黑白树"><a href="#BZOJ-3319-黑白树" class="headerlink" title="BZOJ 3319: 黑白树"></a>BZOJ 3319: 黑白树</h1><ul>
<li><p>Time Limit: 10 Sec </p>
</li>
<li><p>Memory Limit: 512 MB</p>
</li>
</ul>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给定一棵树，边的颜色为黑或白，初始时全部为白色。维护两个操作：</p>
<p>1.查询u到根路径上的第一条黑色边的标号。<br>2.将u到v    路径上的所有边的颜色设为黑色。</p>
<p>Notice:这棵树的根节点为1</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行两个数n,m分别表示点数和操作数。<br>接下来n-?    1行，每行2个数u,v.表示一条u到v的边。<br>接下来m行，每行为以下格式：</p>
<p>1 v 表示第一个操作</p>
<p>2 v u 表示第二种操作</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>对于每个询问，输出相应答案。如果不存在，输出0。</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>5 4</p>
<p>1 2</p>
<p>1 3</p>
<p>2 4</p>
<p>2 5</p>
<p>1 2</p>
<p>2 2 3</p>
<p>1 3</p>
<p>1 4</p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>0</p>
<p>2</p>
<p>1</p>
<h3 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h3><p>对于    100%    的数据：n，m&lt;=10^6</p>
<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>显然是一道ZZ的树链剖分题……但是我TM居然WA了好几次，我们只需要记录一下每个点的父亲边编号，然后每次染黑的时候除了LCA以外都染黑就行了，所以需要特殊判一些东西……</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for (register int i = r; i &gt;= l; i--)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> erep(i, x) for (register int i = h[x]; i; i = e[i].next)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() ((p1 == p2 &amp;&amp; (p2 = (p1 = buffer) + fread(buffer, 1, maxn, stdin), p1 == p2)) ? EOF : *p1++)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> *p1, *p2;</div><div class="line"><span class="keyword">char</span> buffer[maxn];</div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = gc(); x = <span class="number">0</span>; <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!(<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) &amp;&amp; ch != <span class="string">'-'</span>) ch = gc();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) ch = gc(), f = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">1</span>) +  (x &lt;&lt; <span class="number">3</span>) + ch - <span class="string">'0'</span>, ch = gc();</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> next, to;</div><div class="line">    edge(<span class="keyword">int</span> next, <span class="keyword">int</span> to) : next(next), to(to)&#123;&#125;</div><div class="line">    edge()&#123;&#125;</div><div class="line">&#125;e[maxn];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">1</span>, h[maxn];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    e[++cnt] = edge(h[x], y);</div><div class="line">    h[x] = cnt;</div><div class="line">    e[++cnt] = edge(h[y], x);</div><div class="line">    h[y] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> fa[maxn];</div><div class="line"><span class="keyword">int</span> son[maxn];</div><div class="line"><span class="keyword">int</span> siz[maxn];</div><div class="line"><span class="keyword">int</span> top[maxn];</div><div class="line"><span class="keyword">int</span> dfs[maxn];</div><div class="line"><span class="keyword">int</span> idfs[maxn];</div><div class="line"><span class="keyword">int</span> d[maxn];</div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    siz[x] = <span class="number">1</span>;</div><div class="line">    erep(i, x)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x]) &#123;num[x] = i &gt;&gt; <span class="number">1</span>; <span class="keyword">continue</span>;&#125;</div><div class="line">        fa[op] = x;</div><div class="line">        d[op] = d[x] + <span class="number">1</span>;</div><div class="line">        DFS(op);</div><div class="line">        siz[x] += siz[op];</div><div class="line">        <span class="keyword">if</span> (siz[op] &gt; siz[son[x]]) son[x] = op;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> tp)</span></span>&#123;</div><div class="line">    top[x] = tp;</div><div class="line">    dfs[x] = ++t;</div><div class="line">    idfs[t] = x;</div><div class="line">    <span class="keyword">if</span> (son[x]) DFS(son[x], tp);</div><div class="line">    erep(i, x)&#123;</div><div class="line">        <span class="keyword">int</span> op = e[i].to;</div><div class="line">        <span class="keyword">if</span> (op == fa[x] || op == son[x]) <span class="keyword">continue</span>;</div><div class="line">        DFS(op, op);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    DFS(<span class="number">1</span>);</div><div class="line">    DFS(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> sum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy, qd;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (sum[o] == r - l + <span class="number">1</span>) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (l == r) &#123;sum[o] = <span class="number">1</span>; <span class="keyword">return</span>;&#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) <span class="built_in">set</span>(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) <span class="built_in">set</span>(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    sum[o] = sum[o &lt;&lt; <span class="number">1</span>] + sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> (sum[o]) ? num[idfs[l]] : <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">        <span class="keyword">if</span> (sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]) <span class="keyword">return</span> find(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> find(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">int</span> d = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) d = find(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (d) <span class="keyword">return</span> d;</div><div class="line">    <span class="keyword">return</span> (qx &lt;= mid) ? find(l, mid, o &lt;&lt; <span class="number">1</span>) : <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a = top[x], b = top[y];</div><div class="line">    <span class="keyword">while</span> (a != b)&#123;</div><div class="line">        <span class="keyword">if</span> (d[a] &lt; d[b]) swap(x, y), swap(a, b);</div><div class="line">        qx = dfs[a], qy = dfs[x];</div><div class="line">        <span class="built_in">set</span>(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        x = fa[a], a = top[x];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (d[x] &lt; d[y]) swap(x, y);</div><div class="line">    qx = dfs[y] + <span class="number">1</span>, qy = dfs[x];</div><div class="line">    <span class="keyword">if</span> (qx &lt;= qy) <span class="built_in">set</span>(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a = top[x];</div><div class="line">    <span class="keyword">while</span> (x)&#123;</div><div class="line">        qx = dfs[a], qy = dfs[x];</div><div class="line">        <span class="keyword">int</span> d = find(<span class="number">1</span>, n, <span class="number">1</span>); </div><div class="line">        <span class="keyword">if</span> (d) <span class="keyword">return</span> d;</div><div class="line">        <span class="keyword">else</span> x = fa[a], a = top[x];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">        freopen(<span class="string">"bw.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">int</span> x, y, op;</div><div class="line">    read(n), read(m);</div><div class="line">    rep(i, <span class="number">1</span>, n - <span class="number">1</span>) read(x), read(y), Add_Edge(x, y);</div><div class="line">    init();</div><div class="line">    rep(i, <span class="number">1</span>, m)&#123;</div><div class="line">        read(op);</div><div class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) read(x), <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, get(x));</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) read(x), read(y), <span class="built_in">set</span>(x, y);</div><div class="line">        <span class="keyword">else</span> assert(<span class="literal">false</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;!--用真正的题解标题替换所有的&lt;title&gt;---&gt;
&lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;BZOJ 3319: 黑白树  题解&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://gqh123.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="https://gqh123.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="题解" scheme="https://gqh123.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="BZOJ" scheme="https://gqh123.github.io/tags/BZOJ/"/>
    
      <category term="树链剖分" scheme="https://gqh123.github.io/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>Link-Cut-Tree完全解析</title>
    <link href="https://gqh123.github.io/2018/01/13/Link-Cut-Tree%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90/"/>
    <id>https://gqh123.github.io/2018/01/13/Link-Cut-Tree完全解析/</id>
    <published>2018-01-13T12:58:28.000Z</published>
    <updated>2019-06-27T07:29:24.808Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>终于迎来这一刻啦O(∩_∩)O~，可以专心致志地写一篇完全解析了<br><a id="more"></a></p>
<p>先理一下先修知识</p>
<p>先修知识：</p>
<ul>
<li>树链剖分 </li>
<li>Splay平衡树</li>
<li>Splay翻转树</li>
</ul>
<p>再介绍一下本文的目录</p>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul>
<li><p>Link-Cut-Tree基础</p>
<ul>
<li>讲解</li>
<li>模板</li>
<li>例题</li>
<li>易错点</li>
</ul>
</li>
<li><p>Link-Cut-Tree维护边信息</p>
<ul>
<li>讲解</li>
<li>模板</li>
<li>例题</li>
<li>易错点</li>
</ul>
</li>
<li><p>Link-Cut-Tree维护子树信息</p>
<ul>
<li>讲解</li>
<li>模板</li>
<li>例题</li>
<li>易错点</li>
</ul>
</li>
<li><p>Link-Cut-Tree高级应用</p>
<ul>
<li>前言</li>
<li>例题</li>
<li>易错点</li>
</ul>
</li>
</ul>
<p><del>当然，这只是期望的样子，要真的完成这么多恐怕要好长时间吧</del></p>
<h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1><p>那么，讲解就正式开始啦！</p>
<h2 id="Link-Cut-Tree基础"><a href="#Link-Cut-Tree基础" class="headerlink" title="Link-Cut-Tree基础"></a>Link-Cut-Tree基础</h2><h3 id="讲解-1"><a href="#讲解-1" class="headerlink" title="讲解"></a>讲解</h3><p>首先，大家应该都学习过树链剖分对吧，我们知道，树链剖分维护的是一个固定的树剖分，我们通常采用轻重树链剖分法来实现这一点，但是，当树的形态可以发生改变的时候，这么做显然就不行了，因为如果我们继续使用当前的链剖分形式，就无法保证时间复杂度，而如果动态地去维护树剖分，听起来又好像是一件挺困难的事情</p>
<p>实际上，我们正是采用后者进行维护的，这个东西，就是传说中的<strong>动态树</strong>了，而维护树的形态改变以后的新的树剖分的算法，就是这次的主要内容<strong>Link-Cut-Tree</strong></p>
<p>我们知道，一个树剖分是由链组成的，而对于每一条链来说，这就是一个序列，而对于序列上的问题，我们可以采用许多方法进行解决，比如使用数据结构</p>
<p>在树链剖分里面，我们正是这样做的，我们先求出一个树剖分，然后把它们放到线段树上进行统一的维护，这样就大大地降低了算法的复杂度和维护的难度。但是，对于动态树来说，它的形态在不断的发生变化，这样，我们很难记录每条链的顶端等信息，然后使用线段树维护</p>
<p>这样，由于有了序列的动态操作，所以我们需要一种支持快速的序列分裂与合并操作的数据结构，这让我们想到Splay</p>
<p>而Link-Cut-Tree正是采用了这样的方法，我们把每条链都放到一棵Splay上进行维护，然后进行某种操作</p>
<p>既然是用Splay来维护，那么Splay本身的操作就很自然地加入到了Link-Cut-Tree中，所以，我们首先需要实现如下操作：</p>
<ul>
<li>is_root(x)操作，判断x是否已经是Splay的根</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">is_root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (ch[fa[x]][<span class="number">0</span>] != x &amp;&amp; ch[fa[x]][<span class="number">1</span>] != x);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>pushup(x)操作，把儿子信息上传到当前点</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    siz[x] = siz[ls] + siz[rs] + <span class="number">1</span>;<span class="comment">//此处维护了子树大小</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>pushdown(x)操作，把当前点标记下传给儿子</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (rev[x])&#123;</div><div class="line">        swap(ls, rs);</div><div class="line">        rev[ls] ^= <span class="number">1</span>, rev[rs] ^= <span class="number">1</span>;</div><div class="line">        rev[x] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>rotate(x)操作，旋转平衡树的核心操作——旋转，此处不解释</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> k = x;</div><div class="line">    x = fa[x];</div><div class="line">    <span class="keyword">int</span> d = ch[x][<span class="number">1</span>] == k;</div><div class="line">    fa[k] = fa[x];</div><div class="line">    <span class="keyword">if</span> (!is_root(x)) ch[fa[x]][ch[fa[x]][<span class="number">1</span>] == x] = k;</div><div class="line">    ch[x][d] = ch[k][d ^ <span class="number">1</span>];</div><div class="line">    fa[ch[x][d]] = x;</div><div class="line">    ch[k][d ^ <span class="number">1</span>] = x;</div><div class="line">    fa[x] = k;</div><div class="line">    pushup(x);</div><div class="line">    pushup(k);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>splay(x)操作，Splay的核心操作——伸展，把某一个点“伸展”到根，其实就是旋转到根的位置</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> st[maxn];</div><div class="line"><span class="keyword">int</span> cst = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> t = x;</div><div class="line">    <span class="keyword">while</span> (!is_root(x))&#123;</div><div class="line">        st[++cst] = x;</div><div class="line">        x = fa[x];</div><div class="line">    &#125;</div><div class="line">    st[++cst] = x;</div><div class="line">    <span class="keyword">while</span> (cst)&#123;</div><div class="line">        pushdown(st[cst]);</div><div class="line">        cst--;</div><div class="line">    &#125;<span class="comment">//为了方便我们事先pushdown所有会经过的结点</span></div><div class="line">    x = t;</div><div class="line">    <span class="keyword">while</span> (!is_root(x))&#123;</div><div class="line">        <span class="keyword">int</span> f1 = fa[x];</div><div class="line">        <span class="keyword">if</span> (!is_root(f1))&#123;</div><div class="line">            <span class="keyword">int</span> f2 = fa[f1];</div><div class="line">            <span class="keyword">if</span> ((ch[f1][<span class="number">1</span>] == x) ^ (ch[f2][<span class="number">1</span>] == f1)) rotate(x);</div><div class="line">            <span class="keyword">else</span> rotate(f1);</div><div class="line">        &#125;</div><div class="line">        rotate(x);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后，我们再对常见的树上形态改变操作进行逐个分析：</p>
<ul>
<li>Link(x, y)操作，连接两个不同点</li>
</ul>
<p>如果直接合并两棵树，那么就可能会导致两棵树的父子关系不匹配（或者说树的方向不一致，可以自行体会）</p>
<p>我们发现，如果要调整父子关系体系使得这两棵树匹配的话，只需要调整其中的一棵就可以，而且为了理顺父子关系，我们肯定需要让连到另一棵树上的这个点成为自己所在树的根，然后连上去</p>
<p>这个操作就是moveroot</p>
<p>所以，我们现在需要实现moveroot，具体该怎么做呢？我们可以分析这个操作，我们需要让这个点先一路连到根，使它和根在同一条链里，也就是同一棵Splay里，然后，我们知道，点的深度决定了点在Splay里的键值，由于我们把一个点设置为根，相当于把这个点到根的路径的深度翻转，也就是把链翻转</p>
<p>而把链翻转，其实就是序列翻转，而这个正好是Splay的标志性操作，我们就可以在Splay中直接翻转这个序列</p>
<p>这样的话，我们在Splay就需要维护反转标记，下传时需要交换左右儿子</p>
<p>但是我们发现，如果我们直接合并所有的从x到根的链，那么会导致一些原来在x下方的点也被包含了进来，这样的话，就会变得比较麻烦，因为这些点是不需要被翻转的，如果保留它们，在最后打翻转标记的时候就需要分裂Splay，那我们不妨一开始就舍弃他们，这样便没有了后顾之忧</p>
<p>这个合并到根路径上所有链形成新的链的操作就是access</p>
<p>先说一句，合并所有链，指的是在一条链被合并的时候，它不在这条路径上的部分是会被舍弃的，也就是说，我们最后合并完的东西，还是一条链，并且一端为x，另一端为根</p>
<p>在这个操作中，我们需要不断的合并、分裂Splay，但是，我们发现，永远被合并、分裂的部分的深度是从链的底端向上的一部分，而合并也是从底端向下接上一端，这些恰好与Splay合并、分裂不相交序列的经典操作吻合（总之Splay无限好，看起来就像是专门为了LCT开发的……），所以我们只需要直接在Splay上操作就可以了，代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> tem = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x)&#123;</div><div class="line">        splay(x);</div><div class="line">        rs = tem;</div><div class="line">        pushup(x);</div><div class="line">        tem = x;</div><div class="line">        x = fa[x];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体来说就是不断先把当前点旋到根，然后连接上新的右子树，然后爬向父亲，如此往复直到原树树根</p>
<p>这样，我们解决了access操作</p>
<p>回到moveroot，我们显然是要先进行一次access，然后翻转这棵Splay，那么这个也是Splay基础操作，我们把要打标记的那个点Splay到根，然后直接打上反转标记即可<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    access(x);</div><div class="line">    splay(x);</div><div class="line">    rev[x] ^= <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样moveroot也解决了</p>
<p>回到Link操作，我们也就是需要把其中一个点x设置为根，即moveroot(x)，然后直接把它连到另一个点上，即fa[x] = y，由于每个点维护的是Splay树中的信息，而x与y之间的边不在Splay中，所以不必更新y的任何信息（但是后文要讲的就不是这样(<em>^_^</em>) ……）</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    moveroot(x);</div><div class="line">    fa[x] = y;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样Link操作就被我们解决了</p>
<p>还有一个操作，因为既然有Link，那么一定有Cut对吧，这样才是Link-Cut-Tree嘛</p>
<p>Cut还要用到一个额外的操作，但是一会再说…</p>
<ul>
<li>Cut(x, y)操作，断开x与y在原树上的连接</li>
</ul>
<p>我们先假设x与y之间存在这条边</p>
<p>我们发现，我们很难直接Cut掉两个点之间的连接，因为它们要么在同一棵Splay里，要么不在，如果在的话，由于我们把链放在了Splay中，所以它们之间不一定有边相连，位置关系也很难确定，不在一棵Splay中则更是如此</p>
<p>那么，我们首先要做的，是舍弃不在同一棵Splay中的情况，就是把它们两个放在一条链里，而我们现在有的操作，只有moveroot和access，能不能通过这两个操作实现这一目的呢？这是可以的</p>
<p>我们先moveroot(y)，然后access(x)，这样x，y就很自然地在同一条链上了</p>
<p>那么，在同一条链上以后呢？此时x, y在Splay里面的位置关系是未知的，我们要把情况归一来方便处理，那么我们可以splay(x)，这样就整洁多了</p>
<p>由于x, y之间有边，y还是树根，那么x左子树里肯定只有一个点，那就是y，这时候，我们就可以放心的断开这条边啦，即fa[y] = ch[x][0] = 0，但是因为这样做改变了Splay的形态，所以我们需要对x进行一下pushup(x)操作</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    split(x, y);</div><div class="line">    fa[y] = ls = <span class="number">0</span>;</div><div class="line">    pushup(x);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面只剩下最后的一个部分啦，那就是链修改与查询的相关操作，无论是哪一种，为了正确地处理问题，我们都需要单独将这条链提取出来，其实就是直接类比Splay里面的修改与查询，这样，我们就还需要一种操作，那就是提取特定链</p>
<ul>
<li>split(x, y)操作，将x到y的链提取出来放进一棵Splay中维护，并且为了处理修改与查询，使x为Splay的根</li>
</ul>
<p>这样，我们需要做的，就是把x, y放进一棵Splay，等等，这个和刚才Cut时的操作有点像啊？</p>
<p>其实就是一个操作，我们先moveroot(y)，然后access(x)，最后再splay(x)，这就是split(x, y)的全部操作</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    moveroot(y);</div><div class="line">    access(x);</div><div class="line">    splay(x);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以，Cut中的操作，事实上是先提取链，然后断开连接</p>
<p>这样，我们每次修改与查询的时候，直接作用于被操作链的Splay根就可以了，因为这棵Splay本身就是这条被操作链</p>
<p>下面再讲一个东西，就是高鲁棒性的Link-Cut-Tree操作：</p>
<p>有的时候，我们会Link两个已经连通的点，此时我们需要忽略此操作（后文有些时候就不会忽略），还有的时候，我们会Cut两个没有边直接相连的点，这时我们也需要忽略，那么这样该怎么做呢？</p>
<p>我们再加入一个操作：</p>
<ul>
<li>check(x, y)操作，检查两个点是否已经连通</li>
</ul>
<p>具体做法应该很简单了吧，我们直接access(x)，然后splay(x)，然后一直向左跳找到原树树根，对y也这样做，然后看这两个树根是否相同即可</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    access(x); splay(x);</div><div class="line">    <span class="keyword">while</span> (ls) x = ls;</div><div class="line">    <span class="keyword">int</span> f1 = x;</div><div class="line">    x = y;</div><div class="line">    access(x); splay(x);</div><div class="line">    <span class="keyword">while</span> (ls) x = ls; </div><div class="line">    <span class="keyword">return</span> f1 == x;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是常常会有另一种写法，那就是直接从这个点开始暴力跳父亲，跳到树根，这样好像也挺正确的</p>
<p>实际上，我们最好不要这样写，虽然这样比较简便，但是这样做实际上是无法获得复杂度保证的，是一种错误的写法（个人认为）</p>
<p>关于LCT的复杂度，下面会提到</p>
<p>然后，对于Link，我们事先check一下x, y就可以了</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (check(x, y)) <span class="keyword">return</span>;</div><div class="line">    moveroot(x);</div><div class="line">    fa[x] = y;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于Cut，我们也是要先Check一下，但是两个点即使在同一棵树里也不一定有边直接相连，所以，我们需要在split(x, y)以后，判断y的左右儿子是否存在，只要有一个存在，都是需要直接return掉的</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    split(x, y);</div><div class="line">    <span class="keyword">if</span> (ls == y &amp;&amp; !ch[y][<span class="number">0</span>] &amp;&amp; !ch[y][<span class="number">1</span>])&#123;</div><div class="line">        fa[y] = ls = <span class="number">0</span>;</div><div class="line">        pushup(x);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至于为什么，可以自己思考一下</p>
<p>关于LCT的复杂度证明，首先用到的是Splay的均摊复杂度证明，这个可以证明是$O(\log n)$的，然后，对于LCT的access操作来说（因为别的操作都由此衍生，所以只分析这个就可以了），可以证明是一种差分相加的形式，最后可以势能分析仍然是$O(\log n)$的，这也就解释了为什么我认为暴力跳父亲是错误写法，因为这样失去了势能分析的前提条件</p>
<h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>汇总一下，板子大概就是这个样子的：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> ch[maxn][<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> val[maxn];</div><div class="line"><span class="keyword">int</span> sum[maxn];</div><div class="line"><span class="keyword">int</span> fa[maxn];</div><div class="line"><span class="keyword">bool</span> rev[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (ch[fa[x]][<span class="number">0</span>] != x &amp;&amp; ch[fa[x]][<span class="number">1</span>] != x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    sum[x] = sum[ls] + sum[rs] + val[x];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (rev[x])&#123;</div><div class="line">        swap(ls, rs);</div><div class="line">        rev[ls] ^= <span class="number">1</span>, rev[rs] ^= <span class="number">1</span>;</div><div class="line">        rev[x] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> k = x;</div><div class="line">    x = fa[x];</div><div class="line">    <span class="keyword">int</span> d = ch[x][<span class="number">1</span>] == k;</div><div class="line">    fa[k] = fa[x];</div><div class="line">    <span class="keyword">if</span> (!is_root(x)) ch[fa[x]][ch[fa[x]][<span class="number">1</span>] == x] = k;</div><div class="line">    ch[x][d] = ch[k][d ^ <span class="number">1</span>];</div><div class="line">    fa[ch[x][d]] = x;</div><div class="line">    ch[k][d ^ <span class="number">1</span>] = x;</div><div class="line">    fa[x] = k;</div><div class="line">    pushup(x);</div><div class="line">    pushup(k);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> st[maxn];</div><div class="line"><span class="keyword">int</span> cst = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> t = x;</div><div class="line">    <span class="keyword">while</span> (!is_root(x))&#123;</div><div class="line">        st[++cst] = x;</div><div class="line">        x = fa[x];</div><div class="line">    &#125;</div><div class="line">    st[++cst] = x;</div><div class="line">    <span class="keyword">while</span> (cst)&#123;</div><div class="line">        pushdown(st[cst]);</div><div class="line">        cst--;</div><div class="line">    &#125;<span class="comment">//为了方便我们事先pushdown所有会经过的结点</span></div><div class="line">    x = t;</div><div class="line">    <span class="keyword">while</span> (!is_root(x))&#123;</div><div class="line">        <span class="keyword">int</span> f1 = fa[x];</div><div class="line">        <span class="keyword">if</span> (!is_root(f1))&#123;</div><div class="line">            <span class="keyword">int</span> f2 = fa[f1];</div><div class="line">            <span class="keyword">if</span> ((ch[f1][<span class="number">1</span>] == x) ^ (ch[f2][<span class="number">1</span>] == f1)) rotate(x);</div><div class="line">            <span class="keyword">else</span> rotate(f1);</div><div class="line">        &#125;</div><div class="line">        rotate(x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x)&#123;</div><div class="line">        splay(x);</div><div class="line">        rs = t;</div><div class="line">        pushup(x);</div><div class="line">        t = x;</div><div class="line">        x = fa[x];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    access(x);</div><div class="line">    splay(x);</div><div class="line">    rev[x] ^= <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    moveroot(y);</div><div class="line">    access(x);</div><div class="line">    splay(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    access(x); splay(x);</div><div class="line">    <span class="keyword">while</span> (ls) x = ls;</div><div class="line">    <span class="keyword">int</span> f1 = x;</div><div class="line">    x = y;</div><div class="line">    access(x); splay(x);</div><div class="line">    <span class="keyword">while</span> (ls) x = ls;</div><div class="line">    <span class="keyword">int</span> f2 = x;</div><div class="line">    <span class="keyword">return</span> f1 == f2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (check(x, y)) <span class="keyword">return</span>;</div><div class="line">    moveroot(x);</div><div class="line">    fa[x] = y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    split(x, y);</div><div class="line">    <span class="keyword">if</span> (ls == y &amp;&amp; !ch[y][<span class="number">0</span>] &amp;&amp; !ch[y][<span class="number">1</span>])&#123;</div><div class="line">        fa[y] = ls = <span class="number">0</span>;</div><div class="line">        pushup(x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    splay(x);</div><div class="line">    val[x] = y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    split(x, y);</div><div class="line">    <span class="keyword">return</span> sum[x];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个有两种操作，一个是单点修改，一个是链查询</p>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>既然都讲到这里了，那就放几道例题吧，一句话题解采用白色字体</p>
<ul>
<li><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2631" target="_blank" rel="external">BZOJ 2631: tree</a> <font color="#FFFFFF">基础标记下传LCT，正常搞就好了</font></p>
<ul>
<li><a href="http://gqh123.github.io/2018/01/02/BZOJ-2631-tree/">题解</a></li>
</ul>
</li>
<li><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3282" target="_blank" rel="external">BZOJ 3282: Tree</a> <font color="#FFFFFF">基础LCT，正常搞就好了 </font></p>
<ul>
<li><a href="http://goseqk.tk/2018/01/02/BZOJ-3282-Tree/" target="_blank" rel="external">题解</a></li>
</ul>
</li>
<li><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1180" target="_blank" rel="external">BZOJ 1180: [CROATIAN2009]OTOCI</a> <font color="#FFFFFF">高鲁棒性LCT </font></p>
<ul>
<li><a href="http://gqh123.github.io/2018/01/02/BZOJ-1180-CROATIAN2009-OTOCI/">题解</a></li>
</ul>
</li>
<li><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2002" target="_blank" rel="external">BZOJ 2002: [Hnoi2010]Bounce 弹飞绵羊</a> <font color="#FFFFFF">稍微有一点思考难度的LCT（其实一点也没有…）但是这题还可以分块做 </font></p>
</li>
</ul>
<h3 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h3><ul>
<li><p>pushdown操作中，<strong>除了交换子树以外不可以将信息延迟更新</strong>，比如链加操作，必须在接收到add标记以后就立刻更新sum, mx, mi等信息，而rev标记不需要，但是如果rev标记也采用这种及时更新信息的方法，那么注意<strong>是否交换子树不取决于当前的rev标记，而在于传递的标记值</strong></p>
</li>
<li><p>如果有Splay的其他操作，比如找第K大这种<strong>需要从根向下游历的操作，必须沿路进行pushdown操作</strong>，因为不这样做无法保证左右子树的正确性和信息正确性。这种错误往往非常隐蔽，一定要小心！</p>
</li>
<li><p>在Splay中进行了查询某个点的操作以后，为了保证时间复杂度，<strong>必须将这个点Splay到根</strong>，这其实是Splay的有关内容，在那个里面也算是一个易错点吧</p>
</li>
<li><p>在注意Splay中预先pushdown时，<strong>最后到根的那个点也要加入栈中</strong>，而且在Splay时，不能因为当前点已经是根就直接不执行Splay操作，因为这样会影响access中的子树交换正确性</p>
</li>
<li><p>寻找当前原树树根的方法必须采用上文讲述的方法</p>
</li>
<li><p>注意Splay中每次需要rotate的点</p>
</li>
<li><p>注意pushup的时候要算上自己的信息</p>
</li>
<li><p>rotate时需要判断被rotate的点的父亲是否为Splay的根</p>
</li>
<li><p>注意题目中对Link, Cut操作鲁棒性的要求</p>
</li>
</ul>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>那么，本章就到此结束啦！对于LCT来说，把基本的概念理解的十分透彻是一件十分重要的事，因为所有的LCT题目都离不开对基本结构的理解与分析</p>
<h2 id="Link-Cut-Tree维护边信息"><a href="#Link-Cut-Tree维护边信息" class="headerlink" title="Link-Cut-Tree维护边信息"></a>Link-Cut-Tree维护边信息</h2><h3 id="讲解-2"><a href="#讲解-2" class="headerlink" title="讲解"></a>讲解</h3><p>我们都知道，树上不只是有点，还是有边的，而边上往往也会负载许多的信息，比如长度什么的</p>
<p>在树链剖分中，我们常用的做法是把边信息下放到深度较大的那一端上，这样是正确的，而且维护起来十分方便</p>
<p>但是在LCT中，由于父子关系时常发生变化，所以，这样做很难维护正确性，我们必须考虑使用其他的方法</p>
<p>既然LCT维护点信息十分方便，那么我们为什么不将边信息转化为点信息呢？考虑到图论中常用的加点法，我们可以把每一条边都看成点，然后这个新点向原来的两端连边，然后，我们把边信息附着在这个点上，我们就可以维护边信息啦</p>
<p>当然，还有不用加点的方法，在neither_nor的博客中被提到了，那个方法比较复杂，所以像我这么菜肯定是不会的啦O(∩_∩)O！</p>
<p>其实就是这么点东西……</p>
<p>这样，我们就可以解决许多的问题了，比如动态最小生成树，线段树分治套最小生成树……之类的</p>
<h3 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h3><p>有一道十分经典的题目，那就是[Noi2014]魔法森林这道题，相信很多人都是使用什么动点SPFA这种暴力的方法过的是吧……</p>
<p>我们就以它为例吧！</p>
<p><del>具体方法大家是不是都会……</del></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 300005 </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ls ch[x][0]</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rs ch[x][1]</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for (register int i = r; i &gt;= l; i--)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() ((p1 == p2 &amp;&amp; (p2 = (p1 = buffer) + fread(buffer, 1, maxn, stdin), p1 == p2)) ? EOF : *p1++)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> *p1, *p2;</div><div class="line"><span class="keyword">char</span> buffer[maxn];</div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = gc(); x = <span class="number">0</span>; <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!(<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) &amp;&amp; ch != <span class="string">'-'</span>) ch = gc();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = gc();</div><div class="line">    <span class="keyword">while</span> (<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + ch - <span class="string">'0'</span>, ch = gc();</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x, y, va, vb;</div><div class="line">    edge(<span class="keyword">int</span> x = <span class="number">0</span>, <span class="keyword">int</span> y = <span class="number">0</span>, <span class="keyword">int</span> va = <span class="number">0</span>, <span class="keyword">int</span> vb = <span class="number">0</span>) : x(x), y(y), va(va), vb(vb)&#123;&#125;</div><div class="line">&#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a, edge b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> (a.va != b.va) ? a.va &lt; b.va : a.vb &lt; b.vb;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ch[maxn][<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> mx[maxn];</div><div class="line"><span class="keyword">int</span> val[maxn];</div><div class="line"><span class="keyword">int</span> fa[maxn];</div><div class="line"><span class="keyword">bool</span> rev[maxn];</div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    mx[x] = x;</div><div class="line">    <span class="keyword">if</span> (val[mx[ls]] &gt; val[mx[x]]) mx[x] = mx[ls];</div><div class="line">    <span class="keyword">if</span> (val[mx[rs]] &gt; val[mx[x]]) mx[x] = mx[rs];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (rev[x])&#123;</div><div class="line">        rev[ls] ^= <span class="number">1</span>, rev[rs] ^= <span class="number">1</span>;</div><div class="line">        swap(ls, rs);</div><div class="line">        rev[x] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> ch[fa[x]][<span class="number">0</span>] != x &amp;&amp; ch[fa[x]][<span class="number">1</span>] != x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> d)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> k = ch[x][d];</div><div class="line">    fa[k] = fa[x];</div><div class="line">    <span class="keyword">if</span> (!is_root(x)) ch[fa[x]][ch[fa[x]][<span class="number">1</span>] == x] = k;</div><div class="line">    ch[x][d] = ch[k][d ^ <span class="number">1</span>];</div><div class="line">    fa[ch[x][d]] = x;</div><div class="line">    ch[k][d ^ <span class="number">1</span>] = x;</div><div class="line">    fa[x] = k;</div><div class="line">    pushup(x);</div><div class="line">    pushup(k); </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> tem = x; </div><div class="line">    <span class="keyword">while</span> (!is_root(x))&#123;</div><div class="line">        s.push(x);</div><div class="line">        x = fa[x];</div><div class="line">    &#125;</div><div class="line">    s.push(x);</div><div class="line">    <span class="keyword">while</span> (!s.empty())&#123;</div><div class="line">        pushdown(s.top());</div><div class="line">        s.pop();</div><div class="line">    &#125;</div><div class="line">    x = tem;</div><div class="line">    <span class="keyword">while</span> (!is_root(x))&#123;</div><div class="line">        <span class="keyword">int</span> f1 = fa[x];</div><div class="line">        <span class="keyword">int</span> d1 = ch[f1][<span class="number">1</span>] == x;</div><div class="line">        <span class="keyword">if</span> (!is_root(f1))&#123;</div><div class="line">            <span class="keyword">int</span> f2 = fa[f1];</div><div class="line">            <span class="keyword">int</span> d2 = ch[f2][<span class="number">1</span>] == f1;</div><div class="line">            <span class="keyword">if</span> (d1 ^ d2) rotate(f1, d1), rotate(f2, d2);</div><div class="line">            <span class="keyword">else</span> rotate(f2, d2), rotate(f1, d1);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> rotate(f1, d1);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x)&#123;</div><div class="line">        splay(x);</div><div class="line">        rs = tmp;</div><div class="line">        pushup(x);</div><div class="line">        tmp = x;</div><div class="line">        x = fa[x];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    access(x);</div><div class="line">    splay(x);</div><div class="line">    rev[x] ^= <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    moveroot(y);</div><div class="line">    access(x);</div><div class="line">    splay(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    moveroot(x);</div><div class="line">    fa[x] = y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    split(x, y);</div><div class="line">    fa[y] = ls = <span class="number">0</span>;</div><div class="line">    pushup(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_max_point</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    split(x, y);</div><div class="line">    <span class="keyword">return</span> mx[x];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    access(x), splay(x);</div><div class="line">    <span class="keyword">while</span> (ls) x = ls;</div><div class="line">    <span class="keyword">int</span> f1 = x;</div><div class="line">    x = y;</div><div class="line">    access(x), splay(x);</div><div class="line">    <span class="keyword">while</span> (ls) x = ls;</div><div class="line">    <span class="keyword">return</span> f1 == x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">        freopen(<span class="string">"magic.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">int</span> x, y, z, w;</div><div class="line">    read(n), read(m);</div><div class="line">    rep(i, <span class="number">1</span>, m)&#123;</div><div class="line">        read(x), read(y), read(z), read(w);</div><div class="line">        e[i] = edge(x, y, z, w);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//rep(i, 1, n) val[i] = 0;</span></div><div class="line">    sort(e + <span class="number">1</span>, e + <span class="number">1</span> + m, cmp);</div><div class="line">    rep(i, <span class="number">1</span>, m) val[i + n] = e[i].vb;<span class="comment">//Link-Cut-Tree上维护的是B的有关信息</span></div><div class="line">    <span class="keyword">int</span> ans = INF;</div><div class="line">    rep(i, <span class="number">1</span>, m)&#123;</div><div class="line">        x = e[i].x, y = e[i].y, z = e[i].va, w = e[i].vb;</div><div class="line">        <span class="keyword">if</span> (!check(x, y)) &#123;</div><div class="line">            link(x, i + n);</div><div class="line">            link(y, i + n);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">int</span> k = get_max_point(x, y);</div><div class="line">            <span class="keyword">if</span> (val[k] &gt; w) &#123;</div><div class="line">                cut(k, e[k - n].x);</div><div class="line">                cut(k, e[k - n].y);</div><div class="line">                link(x, i + n);</div><div class="line">                link(y, i + n);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (check(<span class="number">1</span>, n))&#123;</div><div class="line">            <span class="keyword">int</span> k = get_max_point(<span class="number">1</span>, n);</div><div class="line">            ans = min(ans, val[k] + z);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (ans == INF) <span class="built_in">printf</span>(<span class="string">"-1"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h3><ul>
<li><p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3669" target="_blank" rel="external">BZOJ 3669: [Noi2014]魔法森林</a></p>
</li>
<li><p><a href="http://uoj.ac/problem/274" target="_blank" rel="external">UOJ #274. 【清华集训2016】温暖会指引我们前行</a> <font color="#FFFFFF">好像和普通的最大生成树没什么区别…正常做就好</font></p>
<ul>
<li><a href="http://gqh123.github.io/2018/01/13/UOJ-274-%E3%80%90%E6%B8%85%E5%8D%8E%E9%9B%86%E8%AE%AD2016%E3%80%91%E6%B8%A9%E6%9A%96%E4%BC%9A%E6%8C%87%E5%BC%95%E6%88%91%E4%BB%AC%E5%89%8D%E8%A1%8C/">题解</a></li>
</ul>
</li>
</ul>
<h3 id="易错点-1"><a href="#易错点-1" class="headerlink" title="易错点"></a>易错点</h3><ul>
<li>最主要的易错点，<strong>就是由于加点而引起的点数增多</strong>，这常常会被忽略而导致严重的问题，我们要时刻考虑这个问题</li>
</ul>
<h3 id="后记-1"><a href="#后记-1" class="headerlink" title="后记"></a>后记</h3><p>这就是一个常用的技巧，其实没什么难的……</p>
<h2 id="Link-Cut-Tree维护子树信息"><a href="#Link-Cut-Tree维护子树信息" class="headerlink" title="Link-Cut-Tree维护子树信息"></a>Link-Cut-Tree维护子树信息</h2><h3 id="讲解-3"><a href="#讲解-3" class="headerlink" title="讲解"></a>讲解</h3><p>不错，终于到了这里了～</p>
<p>这个技巧是相对来说有点难度的（其实也没有……），我们知道LCT本身其实是很难维护子树信息的，因为它的维护对象是树上的链剖分，也就是一条一条的链</p>
<p>我们发现，一个点的子树，会包含什么？</p>
<p>显然这个点在某个链剖分上，所以，它一定会包含自己所在链的下面的点的各自的子树，以及它自己的不在链上的子树</p>
<p>这样，我们可以子树信息分为三部分，一个是实子树信息，就是Splay上的LCT子树信息，另一个是虚子树信息，就是自己的不在链上的点的LCT子树信息，第三个，就是前面提到的LCT子树信息，一个点的LCT子树信息，就是它的实子树信息与虚子树信息之和</p>
<p>看起来比较乱是不是</p>
<p>我们发现，一个点如果不是链上的最底端的点，那么它所包含的也会有自己下面的链上的其他点的信息，而这样是很难维护的，我们要做的就是把这个点下面的链上点都与他断开</p>
<ul>
<li>模板</li>
<li>例题</li>
<li>易错点</li>
</ul>
<ul>
<li>Link-Cut-Tree高级应用<ul>
<li>前言</li>
<li>例题</li>
<li>易错点</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;终于迎来这一刻啦O(∩_∩)O~，可以专心致志地写一篇完全解析了&lt;br&gt;
    
    </summary>
    
    
      <category term="LCT" scheme="https://gqh123.github.io/tags/LCT/"/>
    
      <category term="重要文章" scheme="https://gqh123.github.io/tags/%E9%87%8D%E8%A6%81%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ 4530: [Bjoi2014]大融合</title>
    <link href="https://gqh123.github.io/2018/01/13/BZOJ-4530-Bjoi2014-%E5%A4%A7%E8%9E%8D%E5%90%88/"/>
    <id>https://gqh123.github.io/2018/01/13/BZOJ-4530-Bjoi2014-大融合/</id>
    <published>2018-01-13T11:21:33.000Z</published>
    <updated>2019-06-27T07:29:24.752Z</updated>
    
    <content type="html"><![CDATA[<!--用真正的题解标题替换所有的<title>--->
<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>BZOJ 4530: [Bjoi2014]大融合  题解<br><a id="more"></a></p>
<h1 id="BZOJ-4530-Bjoi2014-大融合"><a href="#BZOJ-4530-Bjoi2014-大融合" class="headerlink" title="BZOJ 4530: [Bjoi2014]大融合"></a>BZOJ 4530: [Bjoi2014]大融合</h1><ul>
<li><p>Time Limit:  10 Sec </p>
</li>
<li><p>Memory Limit: 256 MB</p>
</li>
</ul>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>小强要在N个孤立的星球上建立起一套通信系统。这套通信系统就是连接N个点的一个树。<br>这个树的边是一条一条添加上去的。在某个时刻，一条边的负载就是它所在的当前能够<br>联通的树上路过它的简单路径的数量。</p>
<p><img src="http://218.106.205.134/uploads/ff.png" height="px" width="px"></p>
<p>例如，在上图中，现在一共有了5条边。其中，(3,8)这条边的负载是6，因<br>为有六条简单路径2-3-8,2-3-8-7,3-8,3-8-7,4-3-8,4-3-8-7路过了(3,8)。<br>现在，你的任务就是随着边的添加，动态的回答小强对于某些边的负载的<br>询问。</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行包含两个整数N,Q，表示星球的数量和操作的数量。星球从1开始编号。<br>接下来的Q行，每行是如下两种格式之一：<br>A x y 表示在x和y之间连一条边。保证之前x和y是不联通的。<br>Q x y 表示询问(x,y)这条边上的负载。保证x和y之间有一条边。<br>1≤N,Q≤100000</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>对每个查询操作，输出被查询的边的负载。</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>8 6</p>
<p>A 2 3</p>
<p>A 3 4</p>
<p>A 3 8</p>
<p>A 8 7</p>
<p>A 6 5</p>
<p>Q 3 8</p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>6</p>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p>鸣谢佚名上传</p>
<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>LCT维护子树信息，当然也可以用离线树链剖分来搞</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt; </span></span></div><div class="line"><span class="comment">//#define TEST</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ls ch[x][0]</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rs ch[x][1]</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for (register int i = r; i &gt;= l; i--)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() ((p1 == p2 &amp;&amp; (p2 = (p1 = buffer) + fread(buffer, 1, maxn, stdin), p1 == p2)) ? EOF : *p1++)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> *p1, *p2;</div><div class="line"><span class="keyword">char</span> buffer[maxn];</div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = gc(); x = <span class="number">0</span>; <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!(<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) &amp;&amp; ch != <span class="string">'-'</span>) ch = gc();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = gc();</div><div class="line">    <span class="keyword">while</span> (<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + ch - <span class="string">'0'</span>, ch = gc();</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> siz[maxn];</div><div class="line"><span class="keyword">int</span> vsiz[maxn];</div><div class="line"><span class="keyword">int</span> fa[maxn];</div><div class="line"><span class="keyword">int</span> ch[maxn][<span class="number">2</span>];</div><div class="line"><span class="keyword">bool</span> rev[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">debug</span><span class="params">()</span></span>&#123;</div><div class="line">    rep(x, <span class="number">0</span>, n)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"#%d : siz = %d, vsiz = %d, ls = %d, rs = %d, fa = %d, rev = %d\n"</span>, x, siz[x], vsiz[x], ls, rs, fa[x], rev[x]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">is_root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> ch[fa[x]][<span class="number">0</span>] != x &amp;&amp; ch[fa[x]][<span class="number">1</span>] != x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    siz[x] = siz[ls] + siz[rs] + vsiz[x] + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushv</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> op)</span></span>&#123; <span class="comment">//op == 1 || op == -1 </span></div><div class="line">    vsiz[fa[x]] += op * siz[x];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (rev[x])&#123;</div><div class="line">        rev[ls] ^= <span class="number">1</span>, rev[rs] ^= <span class="number">1</span>;</div><div class="line">        rev[x] = <span class="number">0</span>;</div><div class="line">        swap(ls, rs);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> d)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> k = ch[x][d];</div><div class="line">    fa[k] = fa[x];</div><div class="line">    <span class="keyword">if</span> (!is_root(x)) ch[fa[x]][ch[fa[x]][<span class="number">1</span>] == x] = k;</div><div class="line">    ch[x][d] = ch[k][d ^ <span class="number">1</span>];</div><div class="line">    fa[ch[x][d]] = x;</div><div class="line">    ch[k][d ^ <span class="number">1</span>] = x;</div><div class="line">    fa[x] = k;</div><div class="line">    pushup(x);</div><div class="line">    pushup(k);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> t = x;</div><div class="line">    <span class="keyword">while</span> (!is_root(x))&#123;</div><div class="line">        s.push(x);</div><div class="line">        x = fa[x];</div><div class="line">    &#125;</div><div class="line">    s.push(x);<span class="comment">//Error!!!!</span></div><div class="line">    <span class="keyword">while</span> (!s.empty())&#123;</div><div class="line">        pushdown(s.top());</div><div class="line">        s.pop();</div><div class="line">    &#125;</div><div class="line">    x = t;</div><div class="line">    <span class="keyword">while</span> (!is_root(x))&#123;</div><div class="line">        <span class="keyword">int</span> f1 = fa[x];</div><div class="line">        <span class="keyword">int</span> d1 = ch[f1][<span class="number">1</span>] == x;</div><div class="line">        <span class="keyword">if</span> (!is_root(f1))&#123;</div><div class="line">            <span class="keyword">int</span> f2 = fa[f1];</div><div class="line">            <span class="keyword">int</span> d2 = ch[f2][<span class="number">1</span>] == f1;</div><div class="line">            <span class="keyword">if</span> (d1 ^ d2) rotate(f1, d1), rotate(f2, d2);</div><div class="line">            <span class="keyword">else</span> rotate(f2, d2), rotate(f1, d1);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> rotate(f1, d1);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x)&#123;</div><div class="line">        splay(x);</div><div class="line">        pushv(rs, <span class="number">1</span>), pushv(t, <span class="number">-1</span>);</div><div class="line">        rs = t;</div><div class="line">        pushup(x);</div><div class="line">        t = x;</div><div class="line">        x = fa[x];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    access(x), splay(x), rev[x] ^= <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    moveroot(y), access(x), splay(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    moveroot(x), access(y), splay(y);</div><div class="line">    fa[x] = y;</div><div class="line">    pushv(x, <span class="number">1</span>);</div><div class="line">    pushup(y);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">get</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    split(x, y);</div><div class="line">    <span class="keyword">int</span> a = vsiz[x] + <span class="number">1</span>;</div><div class="line">    split(y, x);</div><div class="line">    <span class="keyword">int</span> b = vsiz[y] + <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> (ll) a * b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">        freopen(<span class="string">"comb.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">        <span class="meta">#<span class="meta-keyword">ifdef</span> TEST</span></div><div class="line">            freopen(<span class="string">"comb.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">        <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    read(n), read(m);</div><div class="line">    <span class="keyword">char</span> op;</div><div class="line">    rep(i, <span class="number">1</span>, m)&#123;</div><div class="line">        op = gc();</div><div class="line">        <span class="keyword">while</span> (op != <span class="string">'Q'</span> &amp;&amp; op != <span class="string">'A'</span>) op = gc();</div><div class="line">        <span class="keyword">switch</span>(op)&#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'A'</span>: read(x), read(y), link(x, y); <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'Q'</span>: read(x), read(y), <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, get(x, y)); <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>: assert(<span class="literal">false</span>); <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="meta">#<span class="meta-keyword">ifdef</span> TEST</span></div><div class="line">            debug();</div><div class="line">        <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;!--用真正的题解标题替换所有的&lt;title&gt;---&gt;
&lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;BZOJ 4530: [Bjoi2014]大融合  题解&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://gqh123.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="BZOJ" scheme="https://gqh123.github.io/tags/BZOJ/"/>
    
      <category term="LCT" scheme="https://gqh123.github.io/tags/LCT/"/>
    
  </entry>
  
  <entry>
    <title>UOJ #228. 基础数据结构练习题</title>
    <link href="https://gqh123.github.io/2018/01/13/UOJ-228-%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    <id>https://gqh123.github.io/2018/01/13/UOJ-228-基础数据结构练习题/</id>
    <published>2018-01-13T10:59:23.000Z</published>
    <updated>2019-06-27T07:29:24.816Z</updated>
    
    <content type="html"><![CDATA[<!--用真正的题解标题替换所有的<title>--->
<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>UOJ #228. 基础数据结构练习题  题解<br><a id="more"></a></p>
<h1 id="UOJ-228-基础数据结构练习题"><a href="#UOJ-228-基础数据结构练习题" class="headerlink" title="UOJ #228. 基础数据结构练习题"></a>UOJ #228. 基础数据结构练习题</h1><div class="tab-content">
    <div class="tab-pane active" id="tab-statement">
        <article class="top-buffer-md"><p>sylvia 是一个热爱学习的女孩子，今天她想要学习数据结构技巧。</p>
<p>在看了一些博客学了一些姿势后，她想要找一些数据结构题来练练手。于是她的好朋友九条可怜酱给她出了一道题。</p>
<p>给出一个长度为 $n$ 的数列 $A$，接下来有 $m$ 次操作，操作有三种：</p>
<ol><li>对于所有的 $i \in [l,r]$，将 $A_i$ 变成 $A_i+x$。</li>
<li>对于所有的 $i \in [l,r]$，将 $A_i$ 变成 $\lfloor \sqrt {A_i} \rfloor$。</li>
<li>对于所有的 $i \in [l,r]$，询问 $A_i$ 的和。</li>
</ol><p>作为一个不怎么熟练的初学者，sylvia 想了好久都没做出来。而可怜酱又外出旅游去了，一时间联系不上。于是她决定向你寻求帮助：你能帮她解决这个问题吗。</p>
<h3>输入格式</h3>
<p>第一行两个数：$ n, m $。</p>
<p>接下来一行 $ n $ 个数 $A_i$。</p>
<p>接下来 $ m $ 行中，第 $ i $ 行第一个数 $ t_i $ 表示操作类型：</p>
<p>若 $ t_i = 1 $，则接下来三个整数 $ l_i, r_i, x_i $，表示操作一。</p>
<p>若 $ t_i = 2 $，则接下来三个整数 $ l_i, r_i$，表示操作二。</p>
<p>若 $ t_i = 3 $，则接下来三个整数 $ l_i, r_i$，表示操作三。</p>
<h3>输出格式</h3>
<p>对于每个询问操作，输出一行表示答案。</p>
<h3>样例一</h3>
<h4>input</h4>
<pre>
5 5
1 2 3 4 5
1 3 5 2
2 1 4
3 2 4
2 3 5
3 1 5

</pre>

<h4>output</h4>
<pre>
5
6

</pre>

<h3>样例二</h3>
<p>见样例数据下载。</p>
<h3>限制与约定</h3>
<div class="table-responsive">
    <table class="table table-bordered table-text-center table-vertical-middle"><thead><tr><th>测试点编号</th><th>$n$ 的规模</th><th>$m$ 的规模</th><th>其他约定</th></tr></thead><tbody><tr><td>1</td><td rowspan="3">$n \leq 3000$</td><td rowspan="3">$m \leq 3000$</td><td rowspan="3"></td></tr><tr><td>2</td></tr><tr><td>3</td></tr><tr><td>4</td><td rowspan="7">$n \leq 100000$</td><td rowspan="7">$m \leq 100000$</td><td rowspan="2">数据随机生成</td></tr><tr><td>5</td></tr><tr><td>6</td><td rowspan="2">$t_i \neq 1$</td></tr><tr><td>7</td></tr><tr><td>8</td><td rowspan="3"></td></tr><tr><td>9</td></tr><tr><td>10</td></tr></tbody></table></div>

<p>对于所有数据，保证有 $1 \leq l_i \leq r_i \leq n,1 \leq A_i,x_i \leq 10^5$</p>
<p><strong>时间限制：</strong>$1\texttt{s}$</p>
<p><strong>空间限制：</strong>$256\texttt{MB}$</p>
<h3>下载</h3>
<p><a href="/download.php?type=problem&amp;id=228">样例数据下载</a></p>

<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>首先，这非常显然是一道平摊分析线段树的题对吧……因为有开方这种无法批量快速维护的操作</p>
<p>我们知道，在没有增加的操作的时候，开方的运算量级是$O(\log \log n)$，是极其地小的，可以直接暴力操作</p>
<p>但是这道题有区间加，所以，我们就考虑什么时候我们可以批量更改信息，我们可以维护一个区间的最大值和最小值，显然如果这两个值开方后相同，那么就可以直接区间覆盖对吧</p>
<p>然后，我们可以考虑开方操作分到两边的次数（这意味着我们暴力的量级）， 这说明，当前这个区间的最大值和最小值开方后不相等，但这个差距在经过开方的运算量级这么多次操作以后，这个差距就会被消除掉，而要想再制造出这样的差距，每个差距都需要一次区间加操作，所以暴力是很稳的</p>
<p>但是如果只是这样做其实是不行的，因为当差距为$1$的时候，已经无法再消除的更小了，但是这个时候最大值和最小值的开方也可以不相同啊，比如一个是$n ^ 2 - 1$，另一个是$n ^ 2$。，这样，我们可以这样构造数据，$0$和$1$间隔放置，然后开方操作和区间加65535间隔放置（至于为什么是这个数，请自行思考），这样这个算法就会退化到$O(n ^ 2)$级别</p>
<p>所以，我们只要再特殊判断一下这种坑人的情况就可以了（其实应该很容易想到，因为$1$开多少次方都还是$1$，相等于是差距经过数次开方减少到了边界）</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></div><div class="line"><span class="comment">//#define DEBUG</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 300005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> llen (mid - l + 1)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rlen (r - mid)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for (register int i = r; i &gt;= l; i--)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() ((p1 == p2 &amp;&amp; (p2 = (p1 = buffer) + fread(buffer, 1, maxn, stdin), p1 == p2)) ? EOF : *p1++)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> *p1, *p2;</div><div class="line"><span class="keyword">char</span> buffer[maxn];</div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = gc(); x = <span class="number">0</span>; <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!(<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) &amp;&amp; ch != <span class="string">'-'</span>) ch = gc();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = gc();</div><div class="line">    <span class="keyword">while</span> (<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + ch - <span class="string">'0'</span>, ch = gc();</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> a[maxn];</div><div class="line"></div><div class="line">ll sum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line">ll mx[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line">ll mi[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line">ll <span class="built_in">set</span>[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line">ll add[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> qx, qy;</div><div class="line">ll qd;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    sum[o] = sum[o &lt;&lt; <span class="number">1</span>] + sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">    mx[o] = max(mx[o &lt;&lt; <span class="number">1</span>], mx[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">    mi[o] = min(mi[o &lt;&lt; <span class="number">1</span>], mi[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l, ls = o &lt;&lt; <span class="number">1</span>, rs = o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">set</span>[o] != <span class="number">-1</span>)&#123;</div><div class="line">        ll k = <span class="built_in">set</span>[o];</div><div class="line">        sum[ls] = llen * k, mx[ls] = mi[ls] = <span class="built_in">set</span>[ls] = k, add[ls] = <span class="number">0</span>;</div><div class="line">        sum[rs] = rlen * k, mx[rs] = mi[rs] = <span class="built_in">set</span>[rs] = k, add[rs] = <span class="number">0</span>;</div><div class="line">        <span class="built_in">set</span>[o] = <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (add[o])&#123;</div><div class="line">        ll k = add[o];</div><div class="line">        sum[ls] += llen * k, mx[ls] += k, mi[ls] += k, add[ls] += k;</div><div class="line">        sum[rs] += rlen * k, mx[rs] += k, mi[rs] += k, add[rs] += k;</div><div class="line">        add[o] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    <span class="built_in">set</span>[o] = <span class="number">-1</span>;</div><div class="line">    <span class="comment">//add[o] = 0;</span></div><div class="line">    <span class="keyword">if</span> (l == r)&#123;</div><div class="line">        mx[o] = mi[o] = sum[o] = a[l];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    init(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    init(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy) <span class="keyword">return</span> sum[o];</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    ll ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) ans += get(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) ans += get(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">square</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        <span class="keyword">int</span> a = (<span class="keyword">int</span>) <span class="built_in">sqrt</span>(mx[o]), b = (<span class="keyword">int</span>) <span class="built_in">sqrt</span>(mi[o]);</div><div class="line">        <span class="keyword">if</span> (a == b) &#123;</div><div class="line">            <span class="keyword">if</span> (add[o] || <span class="built_in">set</span>[o] != <span class="number">-1</span>) assert(<span class="literal">false</span>);</div><div class="line">            <span class="built_in">set</span>[o] = mx[o] = mi[o] = a;</div><div class="line">            sum[o] = (ll)a * (r - l + <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (mx[o] == mi[o] + <span class="number">1</span>)&#123;</div><div class="line">            ll k = a - mx[o];</div><div class="line">            add[o] += k, mx[o] += k, mi[o] += k;</div><div class="line">            sum[o] += k * (r - l + <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">            square(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">            square(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">            pushup(o);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) square(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) square(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">    pushdown(l, r, o);</div><div class="line">    <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">        add[o] += qd, mx[o] += qd, mi[o] += qd;</div><div class="line">        sum[o] += (r - l + <span class="number">1</span>) * qd;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">    <span class="keyword">if</span> (qx &lt;= mid) modify(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (qy &gt; mid) modify(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">    pushup(o);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">debug</span><span class="params">()</span></span>&#123;</div><div class="line">    rep(i, <span class="number">1</span>, n)&#123;</div><div class="line">        qx = qy = i;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld "</span>, get(<span class="number">1</span>, n, <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">        freopen(<span class="string">"prac.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">int</span> t;</div><div class="line">    read(n), read(m);</div><div class="line">    rep(i, <span class="number">1</span>, n) read(a[i]);</div><div class="line">    init(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    rep(i, <span class="number">1</span>, m)&#123;</div><div class="line">        read(t), read(qx), read(qy);</div><div class="line">        <span class="keyword">switch</span>(t)&#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>: read(qd), modify(<span class="number">1</span>, n, <span class="number">1</span>); <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">2</span>: square(<span class="number">1</span>, n, <span class="number">1</span>); <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">3</span>: <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, get(<span class="number">1</span>, n, <span class="number">1</span>)); <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>: <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG   </span></div><div class="line">            debug();</div><div class="line">        <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</article></div></div>]]></content>
    
    <summary type="html">
    
      &lt;!--用真正的题解标题替换所有的&lt;title&gt;---&gt;
&lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;UOJ #228. 基础数据结构练习题  题解&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://gqh123.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="https://gqh123.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="题解" scheme="https://gqh123.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="UOJ" scheme="https://gqh123.github.io/tags/UOJ/"/>
    
      <category term="平摊分析" scheme="https://gqh123.github.io/tags/%E5%B9%B3%E6%91%8A%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>UOJ #207. 共价大爷游长沙</title>
    <link href="https://gqh123.github.io/2018/01/13/UOJ-207-%E5%85%B1%E4%BB%B7%E5%A4%A7%E7%88%B7%E6%B8%B8%E9%95%BF%E6%B2%99/"/>
    <id>https://gqh123.github.io/2018/01/13/UOJ-207-共价大爷游长沙/</id>
    <published>2018-01-13T10:41:47.000Z</published>
    <updated>2019-06-27T07:29:24.816Z</updated>
    
    <content type="html"><![CDATA[<!--用真正的题解标题替换所有的<title>--->
<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>UOJ #207. 共价大爷游长沙  题解<br><a id="more"></a></p>
<h1 id="UOJ-207-共价大爷游长沙"><a href="#UOJ-207-共价大爷游长沙" class="headerlink" title="UOJ #207. 共价大爷游长沙"></a>UOJ #207. 共价大爷游长沙</h1><div class="tab-content">
    <div class="tab-pane active" id="tab-statement">
        <article class="top-buffer-md"><p>火车司机出秦川，跳蚤国王下江南，共价大爷游长沙。每个周末，勤劳的共价大爷都会开车游历长沙市。</p>
<p>长沙市的交通线路可以抽象成为一个 $n$ 个点 $n-1$ 条边的无向图，点编号为 $1$ 到 $n$，任意两点间均存在<strong>恰好</strong>一条路径，显然两个点之间最多也只会有一条边相连。有一个包含一些点对 $(x,y)$ 的<strong>可重</strong>集合S，共价大爷的旅行路线是这样确定的：<strong>每次他会选择 $S$ 中的某一对点 $(x,y)$，并从 $x$ 出发沿着唯一路径到达 $y$。</strong></p>
<p>小L是共价大爷的脑残粉，为了见到共价大爷的尊容，小L决定守在这张图的某条边上等待共价大爷的到来。为了保证一定能见到他，<strong>显然小L必须选择共价大爷一定会经过的边——也就是所有共价大爷可能选择的路径都经过的边。</strong></p>
<p>现在小L想知道，如果他守在某一条边，是否一定能见到共价大爷。</p>
<p>然而长沙市总是不断的施工，也就是说，<strong>可能某个时刻某条边会断开，同时这个时刻一定也有某条新边会出现，且任意时刻图都满足任意两点间均存在恰好一条路径的条件。</strong>注意断开的边有可能和加入的新边连接着相同的两个端点。共价大爷的兴趣也会不断变化，<strong>所以S也会不断加入新点对或者删除原有的点对。</strong>当然，<strong>小L也有可能在任何时候向你提出守在某一条边是否一定能见到共价大爷的问题。你能回答小L的所有问题吗？</strong></p>
<h3>输入格式</h3>
<p>输入的第一行包含一个整数 $\mathrm{id}$，表示测试数据编号，如第一组数据的$\mathrm{id} = 1$，样例数据的 $\mathrm{id}$ 可以忽略。<strong>hack数据中的 $\mathrm{id}$必须为 $0$ 到 $10$ 之间的整数。hack数据中$\mathrm{id}$的值和数据类型没有任何关系。</strong></p>
<p>输入的第二行包含两个整数 $n, m$，分别表示图中的点数，以及接下来会发生的事件数，事件的定义下文中会有描述。初始时 $S$ 为空。</p>
<p>接下来 $n - 1$ 行，每行两个正整数 $x, y$，表示点 $x$ 和点 $y$ 之间有一条无向边。</p>
<p>接下来 $m$ 行，每行描述一个事件，每行的第一个数 $\mathrm{type}$ 表示事件的类型。</p>
<p>若$\mathrm{type} = 1$，那么接下来有四个正整数$x, y, u, v$，表示先删除连接点$x$和点$y$的无向边，保证存在这样的无向边，然后加入一条连接点$u$和点$v$的无向边，保证操作后的图仍然满足题中所述条件。</p>
<p>若$\mathrm{type} = 2$，那么接下来有两个正整数 $x, y$，表示在 $S$ 中加入点对 $(x, y)$。</p>
<p>若$\mathrm{type} = 3$，那么接下来有一个正整数 $x$，表示删除第 $x$ 个加入 $S$ 中的点对，即在第 $x$ 个 $\mathrm{type} = 2$ 的事件中加入 $S$ 中的点对，保证这个点对存在且仍然在 $S$ 中。</p>
<p>若 $\mathrm{type} = 4$，那么接下来有两个正整数 $x, y$，表示小L询问守在连接点 $x$ 和点 $y$ 的边上是否一定能见到共价大爷，保证存在这样的无向边且此时 $S$ 不为空。</p>
<h3>输出格式</h3>
<p>对于每个小L的询问，输出“<samp>YES</samp>”或者“<samp>NO</samp>”（均不含引号）表示小L一定能或者不一定能见到共价大爷。</p>
<h3>样例一</h3>
<h4>input</h4>
<pre>
0
5 7
1 2
1 3
2 4
1 5
2 1 5
1 1 5 2 5
4 2 5
2 1 4
4 2 5
3 1
4 2 4

</pre>

<h4>output</h4>
<pre>
YES
NO
YES

</pre>

<h3>explanation</h3>
<p>最开始将点对 $(1,5)$ 加入到 $S$ 中，此时点 $1$ 和点 $5$ 之间的路径是 $1 \rightarrow 5$。</p>
<p>接着将连接点 $1$ 和点 $5$ 的边断开，加入连接点 $2$ 和点 $5$ 的边，我们发现图仍然满足题中所述条件，且点 $1$ 和点 $5$ 之间的路径是 $1 \rightarrow 2 \rightarrow 5$，经过点了 $2$ 和点 $5$ 之间的边，因此第一个询问答案是 <samp>YES</samp>。</p>
<p>接着将点对 $(1,4)$ 加入到 $S$ 中，点 $1$ 和点 $4$ 之间的路径是 $1 \rightarrow 2 \rightarrow 4$，没有经过点 $2$ 和点 $5$ 之间的边，因此第二个询问答案是 <samp>NO</samp>。</p>
<p>接着，我们删除了第一个加入到 $S$ 中的点对，也就是点对 $(1,5)$，此时 $S$ 中唯一的点对就是 $(1,4)$，经过了点 $2$ 和点 $4$ 之间的边，因此最后一个询问答案是 <samp>YES</samp>。</p>
<h3>样例二</h3>
<p>见样例数据下载。</p>
<h3>样例三</h3>
<p>见样例数据下载。这组数据中 $\mathrm{type} \ne 1$。</p>
<h3>限制与约定</h3>
<p>每组测试数据的限制与约定如下所示：</p>
<div class="table-responsive">
<table class="table table-bordered table-text-center table-vertical-middle"><thead><tr><th>测试点编号</th>
<th>$n$</th>
<th>$m$</th>
<th>$\mathrm{type}=$</th>
<th>限制与约定</th>
</tr></thead><tbody><tr><td>1</td><td>$n \le 100$</td><td>$m \le 100$</td><td>$1,2,3,4$</td><td rowspan="5"></td></tr><tr><td>2</td><td rowspan="9">$n \le 100000$</td><td rowspan="9">$m \le 300000$</td><td rowspan="2">$2,4$</td></tr><tr><td>3</td>
</tr><tr><td>4</td><td rowspan="2">$2,3,4$</td></tr><tr><td>5</td></tr><tr><td>6</td><td rowspan="5">$1,2,3,4$</td><td rowspan="2">任意时刻 $|S| \le 10$</td></tr><tr><td>7</td></tr><tr><td>8</td><td rowspan="3"></td></tr><tr><td>9</td></tr><tr><td>10</td></tr></tbody></table></div>

<p><strong>时间限制：</strong>$2\texttt{s}$</p>
<p><strong>空间限制：</strong>$512\texttt{MB}$</p>
<h3>来源</h3>
<p>matthew99</p>
<h3>题解</h3>
<p><a href="http://matthew99.blog.uoj.ac/blog/1771" target="_blank" rel="external">http://matthew99.blog.uoj.ac/blog/1771</a></p>
<h3>下载</h3>
<p><a href="/download.php?type=problem&amp;id=207">样例数据下载</a></p>

<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>这道题，我们发现，由于新增了一个集合，我们很难快速的应对整个集合的批量信息维护要求，因为集合内部有增删操作，外部也有树的形态改变，如果直接维护所有点对形成的链的交，外部形态改变可能会影响到所有的集合内的元素，所以这样就十分地差</p>
<p>我们发现，主要问题是维护链交很难同时维护所有集合内的点对的有关信息，因此我们现在想要做的，就是用一种方法快速地包含集合内的信息，同时在外部形态改变的时候不会受到太大影响（最好是无影响），能够快速反映这种变化</p>
<p>我们知道，如果一条边满足题目的条件，那么我们可以发现，这条边两端的每个子树中，一定包含每个点对中的恰好一个点，其他的情况都不成立</p>
<p>只包含一次的时候才计算，二次或是不出现都不计算，这让我们想到什么？没错，那就是异或运算！</p>
<p>进一步，由于我们要快速包含所有信息，而异或也正可以尽可能多地包含所有的原有信息，并且运算方便快捷</p>
<p>通过异或，我们可以联想异或的有关应用，我们常常使用异或值的相等关系来进行等价性判定，这就是Hash的思想</p>
<p>我们知道，在字符串中，我们有一种方法叫做Hash，我们在改变字符串的时候，Hash很容易维护，而用Hash来进行相等判断，只需要$O(1)$的时间，我们可以考虑这样做</p>
<p>我们为每一个点对随意赋上一个权值，然后，我们维护每个点里面的所有点的权值的子树异或和，使用经典的LCT维护子树方法即可做到这一点</p>
<p>在判定时，我们维护一个当前集合内所有点对的异或和，然后直接比较这条边的某一个端点的子树异或和是否与之相等即可</p>
<p>注意，随机权值在<code>int</code>范围内时会被hack，需要增大随机范围到<code>long long int</code>方可通过本题</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></div><div class="line"><span class="comment">//#define DEBUG</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ls ch[x][0]</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rs ch[x][1]</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for (register int i = r; i &gt;= l; i--)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() ((p1 == p2 &amp;&amp; (p2 = (p1 = buffer) + fread(buffer, 1, maxn, stdin), p1 == p2)) ? EOF : *p1++)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> *p1, *p2;</div><div class="line"><span class="keyword">char</span> buffer[maxn];</div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = gc(); x = <span class="number">0</span>; <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!(<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) &amp;&amp; ch != <span class="string">'-'</span>) ch = gc();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = gc();</div><div class="line">    <span class="keyword">while</span> (<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + ch - <span class="string">'0'</span>, ch = gc();</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line">ll all = <span class="number">0</span>;</div><div class="line">ll val[maxn];</div><div class="line">ll sum[maxn];</div><div class="line">ll vsum[maxn];</div><div class="line"><span class="keyword">int</span> fa[maxn];</div><div class="line"><span class="keyword">int</span> ch[maxn][<span class="number">2</span>];</div><div class="line"><span class="keyword">bool</span> rev[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">is_root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> ch[fa[x]][<span class="number">0</span>] != x &amp;&amp; ch[fa[x]][<span class="number">1</span>] != x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    sum[x] = vsum[x] ^ sum[ls] ^ sum[rs] ^ val[x];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushv</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    vsum[fa[x]] ^= sum[x];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (rev[x])&#123;</div><div class="line">        rev[ls] ^= <span class="number">1</span>, rev[rs] ^= <span class="number">1</span>;</div><div class="line">        swap(ls, rs);</div><div class="line">        rev[x] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> k = x;</div><div class="line">    x = fa[x];</div><div class="line">    <span class="keyword">if</span> (!x) <span class="keyword">return</span>;</div><div class="line">    fa[k] = fa[x];</div><div class="line">    <span class="keyword">int</span> d = ch[x][<span class="number">1</span>] == k;</div><div class="line">    <span class="keyword">if</span> (!is_root(x)) ch[fa[x]][ch[fa[x]][<span class="number">1</span>] == x] = k;</div><div class="line">    ch[x][d] = ch[k][d ^ <span class="number">1</span>];</div><div class="line">    fa[ch[x][d]] = x;</div><div class="line">    ch[k][d ^ <span class="number">1</span>] = x;</div><div class="line">    fa[x] = k;</div><div class="line">    pushup(x);</div><div class="line">    pushup(k);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> st[maxn];</div><div class="line"><span class="keyword">int</span> cst = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (!x) assert(<span class="literal">false</span>);</div><div class="line">    <span class="keyword">int</span> t = x;</div><div class="line">    <span class="keyword">while</span> (!is_root(x))&#123;</div><div class="line">        st[++cst] = x;</div><div class="line">        x = fa[x];</div><div class="line">    &#125;</div><div class="line">    st[++cst] = x;</div><div class="line">    <span class="keyword">while</span> (cst)&#123;</div><div class="line">        pushdown(st[cst]);</div><div class="line">        cst--;</div><div class="line">    &#125;</div><div class="line">    x = t;</div><div class="line">    <span class="keyword">while</span> (!is_root(x))&#123;</div><div class="line">        <span class="keyword">int</span> f1 = fa[x];</div><div class="line">        <span class="keyword">if</span> (!is_root(f1))&#123;</div><div class="line">            <span class="keyword">int</span> f2 = fa[f1];</div><div class="line">            <span class="keyword">if</span> (!x) assert(<span class="literal">false</span>);</div><div class="line">            <span class="keyword">if</span> ((ch[f1][<span class="number">1</span>] == x) ^ (ch[f2][<span class="number">1</span>] == f1)) rotate(x);</div><div class="line">            <span class="keyword">else</span> rotate(f1);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!x) assert(<span class="literal">false</span>);</div><div class="line">        rotate(x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x)&#123;</div><div class="line">        splay(x);</div><div class="line">        pushv(rs), pushv(t);</div><div class="line">        rs = t;</div><div class="line">        pushup(x);</div><div class="line">        t = x;</div><div class="line">        x = fa[x];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    access(x);</div><div class="line">    splay(x);</div><div class="line">    rev[x] ^= <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    moveroot(y);</div><div class="line">    access(x);</div><div class="line">    splay(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    split(x, y);</div><div class="line">    ls = fa[y] = <span class="number">0</span>;</div><div class="line">    pushup(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    moveroot(y);</div><div class="line">    moveroot(x);</div><div class="line">    fa[x] = y;</div><div class="line">    pushv(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x, ll y)</span></span>&#123;</div><div class="line">    access(x), splay(x);</div><div class="line">    val[x] ^= y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    moveroot(y);</div><div class="line">    access(x);</div><div class="line">    <span class="keyword">int</span> f1 = ((vsum[x] ^ val[x]) == all);</div><div class="line">    moveroot(x);</div><div class="line">    access(y);</div><div class="line">    <span class="keyword">int</span> f2 = ((vsum[y] ^ val[y]) == all);</div><div class="line">    <span class="keyword">if</span> (f1 ^ f2) assert(<span class="literal">false</span>);</div><div class="line">    <span class="keyword">if</span> (f1) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ele</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    ll z;</div><div class="line">    ele(<span class="keyword">int</span> x = <span class="number">0</span>, <span class="keyword">int</span> y = <span class="number">9</span>, ll z = <span class="number">0</span>) : x(x), y(y), z(z)&#123;&#125;</div><div class="line">&#125;save[maxn];</div><div class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">        freopen(<span class="string">"changsha.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">int</span> x, y, op;</div><div class="line">    ll z;</div><div class="line">    read(n);</div><div class="line">    read(n), read(m);</div><div class="line">    rep(i, <span class="number">1</span>, n - <span class="number">1</span>) read(x), read(y), link(x, y);</div><div class="line">    rep(i, <span class="number">1</span>, m)&#123;</div><div class="line">        read(op);</div><div class="line">        <span class="keyword">switch</span>(op)&#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>: read(x), read(y), cut(x, y), read(x), read(y), link(x, y); <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">2</span>: read(x), read(y); z = (ll)rand() * rand(); modify(x, z), modify(y, z), save[++cnt] = ele(x, y, z), all ^= z; <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">3</span>: read(x), modify(save[x].x, save[x].z), modify(save[x].y, save[x].z), all ^= save[x].z; <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">4</span>: read(x), read(y), get(x, y); <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</article></div></div>]]></content>
    
    <summary type="html">
    
      &lt;!--用真正的题解标题替换所有的&lt;title&gt;---&gt;
&lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;UOJ #207. 共价大爷游长沙  题解&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://gqh123.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LCT" scheme="https://gqh123.github.io/tags/LCT/"/>
    
      <category term="Hash" scheme="https://gqh123.github.io/tags/Hash/"/>
    
      <category term="UOJ" scheme="https://gqh123.github.io/tags/UOJ/"/>
    
  </entry>
  
  <entry>
    <title>UOJ #274. 【清华集训2016】温暖会指引我们前行</title>
    <link href="https://gqh123.github.io/2018/01/13/UOJ-274-%E3%80%90%E6%B8%85%E5%8D%8E%E9%9B%86%E8%AE%AD2016%E3%80%91%E6%B8%A9%E6%9A%96%E4%BC%9A%E6%8C%87%E5%BC%95%E6%88%91%E4%BB%AC%E5%89%8D%E8%A1%8C/"/>
    <id>https://gqh123.github.io/2018/01/13/UOJ-274-【清华集训2016】温暖会指引我们前行/</id>
    <published>2018-01-13T10:21:34.000Z</published>
    <updated>2019-06-27T07:29:24.820Z</updated>
    
    <content type="html"><![CDATA[<!--用真正的题解标题替换所有的<title>--->
<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>UOJ #274. 【清华集训2016】温暖会指引我们前行  题解<br><a id="more"></a></p>
<h1 id="UOJ-274-【清华集训2016】温暖会指引我们前行"><a href="#UOJ-274-【清华集训2016】温暖会指引我们前行" class="headerlink" title="UOJ #274. 【清华集训2016】温暖会指引我们前行"></a>UOJ #274. 【清华集训2016】温暖会指引我们前行</h1><div class="tab-content">
    <div class="tab-pane active" id="tab-statement">
        <article class="top-buffer-md"><p>寒冬又一次肆虐了北国大地</p>
<p>无情的北风穿透了人们御寒的衣物</p>
<p>可怜虫们在冬夜中发出无助的哀嚎</p>
<p>“冻死宝宝了！”</p>
<p>这时</p>
<p>远处的天边出现了一位火焰之神</p>
<p>“我将赐予你们温暖和希望！”</p>
<p>只见他的身体中喷射出火焰之力</p>
<p>通过坚固的钢铁，传遍了千家万户</p>
<p>这时，只听见人们欢呼</p>
<p>“暖气来啦！”</p>
<h3>任务描述</h3>
<p>虽然小R住的宿舍楼早已来了暖气，但是由于某些原因，宿舍楼中的某些窗户仍然开着（例如厕所的窗户），这就使得宿舍楼中有一些路上的温度还是很低。</p>
<p>小R的宿舍楼中有$n$个地点和一些路，一条路连接了两个地点，小R可以通过这条路从其中任意一个地点到达另外一个地点。但在刚开始，小R还不熟悉宿舍楼中的任何一条路，所以他会慢慢地发现这些路，他在发现一条路时还会知道这条路的温度和长度。每条路的温度都是互不相同的。</p>
<p>小R需要在宿舍楼中活动，每次他都需要从一个地点到达另一个地点。小R希望每次活动时经过一条最温暖的路径，最温暖的路径的定义为，将路径上各条路的温度从小到大排序后字典序最大。即温度最低的路温度尽量高，在满足该条件的情况下，温度第二低的路温度尽量高，以此类推。小R不会经过重复的路。由于每条路的温度互不相同，因此只存在一条最温暖的路径。</p>
<p>对于小R的每次活动，你需要求出小R需要走过的路径总长度。如果小R通过当前发现的路不能完成这次活动，则输出 $-1$。</p>
<p><strong>注意本题中的字典序与传统意义上的字典序定义有所不同，对于两个序列$a,b(a \neq b)$，若$a$是$b$的前缀则$a$的字典序较大，同时可以推出空串的字典序最大。</strong></p>
<h3>输入格式</h3>
<p>第一行两个正整数 $n,m$。表示小R的宿舍楼中有 $n$ 个地点，共发生了 $m$ 个事件。</p>
<p>接下来 $m$ 行，每行描述一个事件，事件分为三类。</p>
<ol><li><p>$\texttt{find id u v t l}$ 表示小R发现了一条连接$u$和$v$之间的路，编号为$id$。相同$id$的边只会出现一次。</p>
</li>
<li><p>$\texttt{move u v}$ 表示小R要从$u$到达$v$，你需要计算出最温暖的路径的长度 ，若不能从$u$到达$v$，则输出$-1$。</p>
</li>
<li><p>$\texttt{change id l}$ 表示从$u$到$v$这条边的长度变为了$l$（保证在当前时间点这条边存在）。 </p>
</li>
</ol><h3>输出格式</h3>
<p>对于每个询问，输出一行整数，表示最温暖的路径长度。</p>
<h3>样例一</h3>
<h4>input</h4>
<pre>
8 19
find 0 0 2 7 2
find 1 2 4 4 4
find 2 4 6 10 1
find 3 6 7 8 6
move 2 7
move 1 6
find 4 2 5 3 4
move 0 5
change 0 12
find 5 4 5 5 10
find 6 2 3 6 9
move 3 5
find 7 0 1 12 1
move 1 6
find 8 1 7 11 100
move 1 6
move 3 7
move 5 6
move 2 2

</pre>

<h4>output</h4>
<pre>
11
-1
6
23
18
106
122
11
0

</pre>

<h3>样例二</h3>
<h4>input</h4>
<pre>
15 45
find 0 1 0 8 5987
find 1 2 0 14 5455
find 2 3 0 27 8830
find 3 4 3 42 7688
find 4 5 0 25 1756
find 5 6 5 35 1550
find 6 7 4 43 9440
move 3 9
change 2 9113
move 10 13
move 3 3
move 11 10
find 7 8 7 6 7347
find 8 9 8 26 8935
move 8 4
change 3 4466
find 9 10 9 28 8560
move 6 5
find 10 11 10 31 6205
change 9 9228
find 11 12 10 23 948
find 12 13 12 45 5945
move 0 9
move 2 5
change 2 6118
find 13 14 13 12 6906
move 4 1
change 2 504
find 14 4 2 22 9796
move 10 7
move 1 14
move 13 3
find 15 12 9 39 8985
find 16 9 8 17 3710
change 1 5370
find 17 1 0 36 4669
find 18 7 6 37 8087
move 9 0
find 19 14 9 33 8234
find 20 0 4 24 5209
change 1 4883
find 21 6 3 9 2461
find 22 5 2 19 4291
change 1 7219
change 6 4846

</pre>

<h4>output</h4>
<pre>
-1
-1
0
-1
16787
1550
39301
7211
16571
25510
59706
46309
30692

</pre>

<h3>样例三</h3>
<p>见样例数据下载</p>
<h3>限制与约定</h3>
<p>对于find操作：$(0\le id\lt m, 0\le u,v \lt n, u\ne v,0\le t\le 1000000000, 0 \le l \le 10000)$；</p>
<p>对于move操作：$(0\le u,v \lt n)$；</p>
<p>对于change操作：$(0 \le l \le 10000)$。</p>
<p>对于100%的数据，$1\le n\le 100000, 1\le m \le 300000$ 。</p>
<p>本题共有20个数据点，每个数据点5分。</p>
<div class="table-responsive">
<table class="table table-bordered table-text-center table-vertical-middle"><thead><tr><th rowspan="1">测试点</th><th rowspan="1">$n$</th><th rowspan="1">$m$</th><th rowspan="1">$其它$</th></tr></thead><tbody><tr><td rowspan="1">$1-2$</td><td rowspan="1">$\leq20$</td><td rowspan="1">$\leq50$</td><td rowspan="2">无特殊约定</td></tr><tr><td rowspan="1">$3-5$</td><td rowspan="1">$\leq1000$</td><td rowspan="1">$\leq3000$</td></tr><tr><td rowspan="1">$6-10$</td><td rowspan="3">$\leq100000$</td><td rowspan="3">$\leq300000$</td><td rowspan="1">所有的find事件都在move事件之前，且没有change事件</td></tr><tr><td rowspan="1">$11-14$</td><td rowspan="1">所有的find事件都在move事件之前</td></tr><tr><td rowspan="1">$15-20$</td><td rowspan="1">无特殊约定</td></tr></tbody></table></div>


<p><strong>时间限制</strong>：$2\texttt{s}$</p>
<p><strong>空间限制</strong>：$512\texttt{MB}$</p>
<h3>下载</h3>
<p><a href="/download.php?type=problem&amp;id=274">样例数据下载</a></p>

<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>这道题，我们显然是要先维护一下当前温度的最大生成树，然后不断地向里面加边，替换已有的边，然后回答询问，大概就是这样的一个思路</p>
<p>我们发现，要查询和要维护的信息都在边上，但是LCT很难直接维护边信息，怎么办呢？可以使用加点法</p>
<p>我们新加入一些点，这些点的信息就是对应的边上的信息，就是说，我们是用这些新加入的点来代替原来的边的，假设原来的边的两端为$x$和$y$，那么这个新点就再和$x$, $y$连边即可</p>
<p>然后就和普通的LCT一样了，维护一下当前子树中点权最小的那个点即可</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 600005 </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ls ch[x][0]</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rs ch[x][1]</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for (register int i = r; i &gt;= l; i--)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> x, y, t, l;</div><div class="line">    edge(<span class="keyword">int</span> x = INF, <span class="keyword">int</span> y = INF, <span class="keyword">int</span> t = INF, <span class="keyword">int</span> l = INF) : x(x), y(y), t(t), l(l)&#123;&#125;</div><div class="line">&#125;e[maxn];</div><div class="line"></div><div class="line"><span class="keyword">int</span> num[maxn];</div><div class="line"><span class="keyword">int</span> val[maxn];</div><div class="line"><span class="keyword">int</span> sum[maxn];</div><div class="line"><span class="keyword">int</span> fa[maxn];</div><div class="line"><span class="keyword">int</span> ch[maxn][<span class="number">2</span>];</div><div class="line"><span class="keyword">bool</span> rev[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> ch[fa[x]][<span class="number">0</span>] != x &amp;&amp; ch[fa[x]][<span class="number">1</span>] != x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    sum[x] = sum[ls] + sum[rs] + val[x];</div><div class="line">    num[x] = x;</div><div class="line">    <span class="keyword">if</span> (e[num[ls]].t &lt; e[num[x]].t) num[x] = num[ls];</div><div class="line">    <span class="keyword">if</span> (e[num[rs]].t &lt; e[num[x]].t) num[x] = num[rs];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (rev[x])&#123;</div><div class="line">        rev[ls] ^= <span class="number">1</span>, rev[rs] ^= <span class="number">1</span>;</div><div class="line">        rev[x] = <span class="number">0</span>;</div><div class="line">        swap(ls, rs);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> d)</span></span>&#123;</div><div class="line">    <span class="comment">//printf("rotate start-----------------------\n");</span></div><div class="line">    <span class="keyword">int</span> k = ch[x][d];</div><div class="line">    fa[k] = fa[x];</div><div class="line">    <span class="keyword">if</span> (!is_root(x)) ch[fa[x]][ch[fa[x]][<span class="number">1</span>] == x] = k;</div><div class="line">    ch[x][d] = ch[k][d ^ <span class="number">1</span>];</div><div class="line">    fa[ch[x][d]] = x;</div><div class="line">    ch[k][d ^ <span class="number">1</span>] = x;</div><div class="line">    fa[x] = k;</div><div class="line">    pushup(x);</div><div class="line">    pushup(k);</div><div class="line">    <span class="comment">//printf("rotate end-----------------------\n");</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="comment">//printf("splay start-----------------------\n");</span></div><div class="line">    <span class="keyword">int</span> t = x;</div><div class="line">    <span class="keyword">while</span> (!is_root(x))&#123;</div><div class="line">        s.push(x);</div><div class="line">        x = fa[x];</div><div class="line">        <span class="keyword">if</span> (x == fa[x]) <span class="built_in">printf</span>(<span class="string">"%d"</span>, x), assert(<span class="literal">false</span>);</div><div class="line">    &#125;</div><div class="line">    s.push(x);</div><div class="line">    <span class="keyword">while</span> (!s.empty())&#123;</div><div class="line">        pushdown(s.top());</div><div class="line">        s.pop();</div><div class="line">    &#125;</div><div class="line">    x = t;</div><div class="line">    <span class="keyword">while</span> (!is_root(x))&#123;</div><div class="line">        <span class="keyword">int</span> f1 = fa[x];</div><div class="line">        <span class="keyword">int</span> d1 = ch[f1][<span class="number">1</span>] == x;</div><div class="line">        <span class="keyword">if</span> (!is_root(f1))&#123;</div><div class="line">            <span class="keyword">int</span> f2 = fa[f1];</div><div class="line">            <span class="keyword">int</span> d2 = ch[f2][<span class="number">1</span>] == f1;</div><div class="line">            <span class="keyword">if</span> (d1 ^ d2) rotate(f1, d1), rotate(f2, d2);</div><div class="line">            <span class="keyword">else</span> rotate(f2, d2), rotate(f1, d1);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> rotate(f1, d1);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//printf("splay end-----------------------\n");</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="comment">//printf("access start-----------------------\n");</span></div><div class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x)&#123;</div><div class="line">        splay(x);</div><div class="line">        rs = t;</div><div class="line">        pushup(x);</div><div class="line">        t = x;</div><div class="line">        x = fa[x];</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//printf("access end-----------------------\n");</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    access(x);</div><div class="line">    splay(x);</div><div class="line">    rev[x] ^= <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    moveroot(y);</div><div class="line">    access(x);</div><div class="line">    splay(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    access(x), splay(x);</div><div class="line">    <span class="keyword">while</span> (ls) x = ls;</div><div class="line">    splay(x);</div><div class="line">    <span class="keyword">int</span> f = x; x = y;</div><div class="line">    access(x), splay(x);</div><div class="line">    <span class="keyword">while</span> (ls) x = ls;</div><div class="line">    splay(x);</div><div class="line">    <span class="keyword">return</span> f == x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_edge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    split(x, y);</div><div class="line">    <span class="keyword">return</span> num[x];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_len</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (!check(x, y)) &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    split(x, y);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum[x]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    split(x, y);</div><div class="line">    fa[y] = ls = <span class="number">0</span>;</div><div class="line">    pushup(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> x = e[id].x, y = e[id].y;</div><div class="line">    <span class="keyword">if</span> (check(x, y))&#123;</div><div class="line">        <span class="keyword">int</span> k = get_edge(x, y);</div><div class="line">        <span class="keyword">if</span> (e[k].t &gt; e[id].t) <span class="keyword">return</span>;</div><div class="line">        cut(k, e[k].x);</div><div class="line">        cut(k, e[k].y);</div><div class="line">    &#125;</div><div class="line">    sum[id] = val[id] = e[id].l;</div><div class="line">    num[id] = id;</div><div class="line">    moveroot(x);</div><div class="line">    fa[x] = id;</div><div class="line">    moveroot(y);</div><div class="line">    fa[y] = id;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> len)</span></span>&#123; </div><div class="line">    access(id);</div><div class="line">    splay(id);</div><div class="line">    val[id] = len;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">        freopen(<span class="string">"warm.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">char</span> op[<span class="number">15</span>];</div><div class="line">    <span class="keyword">int</span> x, y, z, w, id;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">    rep(i, <span class="number">1</span>, m)&#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, op);</div><div class="line">        <span class="keyword">switch</span>(op[<span class="number">0</span>])&#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'f'</span>: <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d"</span>, &amp;id, &amp;x, &amp;y, &amp;z, &amp;w), id += n + <span class="number">1</span>, x++, y++, e[id] = edge(x, y, z, w), link(id); <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'m'</span>: <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y), x++, y++, get_len(x, y); <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'c'</span>: <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;id, &amp;x), id += n + <span class="number">1</span>, modify(id, x); <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>: assert(<span class="literal">false</span>); <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</article></div></div>]]></content>
    
    <summary type="html">
    
      &lt;!--用真正的题解标题替换所有的&lt;title&gt;---&gt;
&lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;UOJ #274. 【清华集训2016】温暖会指引我们前行  题解&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://gqh123.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LCT" scheme="https://gqh123.github.io/tags/LCT/"/>
    
      <category term="UOJ" scheme="https://gqh123.github.io/tags/UOJ/"/>
    
      <category term="生成树" scheme="https://gqh123.github.io/tags/%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
      <category term="最小生成树" scheme="https://gqh123.github.io/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ 3510: 首都</title>
    <link href="https://gqh123.github.io/2018/01/13/BZOJ-3510-%E9%A6%96%E9%83%BD/"/>
    <id>https://gqh123.github.io/2018/01/13/BZOJ-3510-首都/</id>
    <published>2018-01-13T10:02:20.000Z</published>
    <updated>2019-06-27T07:29:24.744Z</updated>
    
    <content type="html"><![CDATA[<!--用真正的题解标题替换所有的<title>--->
<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>BZOJ 3510: 首都  题解<br><a id="more"></a></p>
<h1 id="BZOJ-3510-首都"><a href="#BZOJ-3510-首都" class="headerlink" title="BZOJ 3510: 首都"></a>BZOJ 3510: 首都</h1><ul>
<li><p>Time Limit:  10 Sec </p>
</li>
<li><p>Memory Limit: 256  MB</p>
</li>
</ul>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>在X星球上有N个国家，每个国家占据着X星球的一座城市。由于国家之间是敌对关系，所以不同国家的两个城市是不会有公路相连的。<br>X星球上战乱频发，如果A国打败了B国，那么B国将永远从这个星球消失，而B国的国土也将归A国管辖。A国国王为了加强统治，会在A国和B国之间修建一条公路，即选择原A国的某个城市和B国某个城市，修建一条连接这两座城市的公路。<br>同样为了便于统治自己的国家，国家的首都会选在某个使得其他城市到它距离之和最小的城市，这里的距离是指需要经过公路的条数，如果有多个这样的城市，编号最小的将成为首都。<br>现在告诉你发生在X星球的战事，需要你处理一些关于国家首都的信息，具体地，有如下3种信息需要处理：<br>1、A x y：表示某两个国家发生战乱，战胜国选择了x城市和y城市，在它们之间修建公路（保证其中城市一个在战胜国另一个在战败国）。<br>2、Q x：询问当前编号为x的城市所在国家的首都。<br>3、Xor：询问当前所有国家首都编号的异或和。 </p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行是整数N，M，表示城市数和需要处理的信息数。<br>接下来每行是一个信息，格式如题目描述（A、Q、Xor中的某一种）。 </p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>输出包含若干行，为处理Q和Xor信息的结果。 </p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>10 10 </p>
<p>Xor </p>
<p>Q 1 </p>
<p>A 10 1 </p>
<p>A 1 4 </p>
<p>Q 4 </p>
<p>Q 10 </p>
<p>A 7 6 </p>
<p>Xor </p>
<p>Q 7 </p>
<p>Xor </p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>11 </p>
<p>1 </p>
<p>1 </p>
<p>1 </p>
<p>2 </p>
<p>6 </p>
<p>2 </p>
<h3 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h3><p>对于100%的数据，2&lt;=N&lt;=100000，1&lt;=M&lt;=200000。 </p>
<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>首先这题要我们寻找树的重心，这个是挺有意思的，因为我们知道重心的性质是非常多的，于是我猜想了一个性质，两棵树合并后，重心一定在原来两棵树的重心的路径上</p>
<p>其实也挺显然的，想想重心的递归求法，再结合一下定义就明白了</p>
<p>但是，我们发现，即便如此，我们无法精确地直接求出中心位置（也许可以二分？？不知道），所以，我们可以考虑暴力地移动重心，但是，路径长度是$O(n)$的，这样做时间复杂度无法保证，怎么办呢？</p>
<p>我们继续研究，发现，中心移动的距离不会超过这两棵树的大小，这非常显然，所以，基于这个思路，我们可以尝试启发式合并，把小树链到大树上然后移动大树的重心，这样，大树移动的步数不会超过$O(小树大小)$，这便是启发式合并了，复杂度$O(nlog ^ 2 n)$</p>
<p>那么我们要做的，就是用并查集维护每棵树的大小和重心，然后合并以及移动重心</p>
<p>看网上题解都是把点一个一个插入，感觉好傻哦，为什么不直接链到上面然后再移动重心呢？所以，我们先把小树链上去，然后split一下两个重心，然后在这个Splay上不断地找后继，这便是移动重心了</p>
<p>但是，移动需要用到子树大小，我们怎么维护呢？我们知道，在LCT上是可以维护子树大小的，我们可以多记录一个虚子树大小的信息，那么在一个点执行access操作以后，这个点的虚子树大小加一就是原树上的它的子树的大小，但是，在移动中心的时候，我们也不能每次都调用一下access对吧，这样复杂度无法保证，但是我们知道，当前点的下一个点的子树大小，其实就是Splay上这个点的右子树的大小，这个大小包含了所有下面的所有点的实子树加虚子树大小</p>
<p>这样，我们就可以根据这个信息来移动重心了，因为根据前面的性质，我们只需要判断这棵子树大小与整块大小的一半的关系，注意，当存在两个重心时，需要特殊地处理一下</p>
<p>细节其实也挺TM多的……</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></div><div class="line"><span class="comment">//#define DEBUG</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2000000005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ls ch[x][0]</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rs ch[x][1]</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for (register int i = r; i &gt;= l; i--)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() ((p1 == p2 &amp;&amp; (p2 = (p1 = buffer) + fread(buffer, 1, maxn, stdin), p1 == p2)) ? EOF : *p1++)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> *p1, *p2;</div><div class="line"><span class="keyword">char</span> buffer[maxn];</div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = gc(); x = <span class="number">0</span>; <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!(<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) &amp;&amp; ch != <span class="string">'-'</span>) ch = gc();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">0</span>, ch = gc();</div><div class="line">    <span class="keyword">while</span> (<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + ch - <span class="string">'0'</span>, ch = gc();</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> xorsum = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> g[maxn];</div><div class="line"><span class="keyword">int</span> ufs[maxn];</div><div class="line"><span class="keyword">int</span> sum[maxn];<span class="comment">//树的大小</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> ufs[x] = (x == ufs[x]) ? x : find_root(ufs[x]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> ch[maxn][<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> fa[maxn];</div><div class="line"><span class="keyword">int</span> vsiz[maxn], siz[maxn];</div><div class="line"><span class="keyword">bool</span> rev[maxn];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">debug</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"第%d次操作， 要输出的可真是多啊.....\n"</span>, x);</div><div class="line">    rep(i, <span class="number">1</span>, n) &#123;</div><div class="line">        <span class="keyword">int</span> k = find_root(i);</div><div class="line">        <span class="keyword">if</span> (k == i) <span class="built_in">printf</span>(<span class="string">"#%d : ufs = %d, sum = %d, g = %d\n"</span>, i, ufs[i], sum[i], g[i]);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"#%d : ufs = %d\n"</span>, i, ufs[i]);</div><div class="line">    &#125;</div><div class="line">    rep(i, <span class="number">1</span>, n)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"#%d : siz = %d, vsiz = %d, fa = %d, rev = %d, ls = %d, rs = %d\n"</span>, i, siz[i], vsiz[i], fa[i], rev[i], ch[i][<span class="number">0</span>], ch[i][<span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n\n\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">is_root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> ch[fa[x]][<span class="number">0</span>] != x &amp;&amp; ch[fa[x]][<span class="number">1</span>] != x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    siz[x] = siz[ls] + siz[rs] + vsiz[x] + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushv</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> op)</span></span>&#123; <span class="comment">//op == 1 || op == -1 </span></div><div class="line">    vsiz[fa[x]] += op * siz[x];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (rev[x])&#123;</div><div class="line">        rev[ls] ^= <span class="number">1</span>, rev[rs] ^= <span class="number">1</span>;</div><div class="line">        rev[x] = <span class="number">0</span>;</div><div class="line">        swap(ls, rs);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> k = x;</div><div class="line">    x = fa[x];</div><div class="line">    <span class="keyword">if</span> (!x) <span class="keyword">return</span>;</div><div class="line">    fa[k] = fa[x];</div><div class="line">    <span class="keyword">int</span> d = ch[x][<span class="number">1</span>] == k;</div><div class="line">    <span class="keyword">if</span> (!is_root(x)) ch[fa[x]][ch[fa[x]][<span class="number">1</span>] == x] = k;</div><div class="line">    ch[x][d] = ch[k][d ^ <span class="number">1</span>];</div><div class="line">    fa[ch[x][d]] = x;</div><div class="line">    ch[k][d ^ <span class="number">1</span>] = x;</div><div class="line">    fa[x] = k;</div><div class="line">    pushup(x);</div><div class="line">    pushup(k);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> st[maxn];</div><div class="line"><span class="keyword">int</span> cst = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (!x) assert(<span class="literal">false</span>);</div><div class="line">    <span class="keyword">int</span> t = x;</div><div class="line">    <span class="keyword">while</span> (!is_root(x))&#123;</div><div class="line">        st[++cst] = x;</div><div class="line">        x = fa[x];</div><div class="line">    &#125;</div><div class="line">    st[++cst] = x;</div><div class="line">    <span class="keyword">while</span> (cst)&#123;</div><div class="line">        pushdown(st[cst]);</div><div class="line">        cst--;</div><div class="line">    &#125;</div><div class="line">    x = t;</div><div class="line">    <span class="keyword">while</span> (!is_root(x))&#123;</div><div class="line">        <span class="keyword">int</span> f1 = fa[x];</div><div class="line">        <span class="keyword">if</span> (!is_root(f1))&#123;</div><div class="line">            <span class="keyword">int</span> f2 = fa[f1];</div><div class="line">            <span class="keyword">if</span> (!x) assert(<span class="literal">false</span>);</div><div class="line">            <span class="keyword">if</span> ((ch[f1][<span class="number">1</span>] == x) ^ (ch[f2][<span class="number">1</span>] == f1)) rotate(x);</div><div class="line">            <span class="keyword">else</span> rotate(f1);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!x) assert(<span class="literal">false</span>);</div><div class="line">        rotate(x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x)&#123;</div><div class="line">        splay(x);</div><div class="line">        pushv(rs, <span class="number">1</span>), pushv(t, <span class="number">-1</span>);<span class="comment">//Warning!!!</span></div><div class="line">        rs = t;</div><div class="line">        pushup(x);</div><div class="line">        t = x;</div><div class="line">        x = fa[x];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    access(x);</div><div class="line">    splay(x);</div><div class="line">    rev[x] ^= <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> _x = find_root(x), _y = find_root(y);</div><div class="line">    <span class="keyword">if</span> (sum[_x] &gt; sum[_y]) swap(_x, _y), swap(x, y);<span class="comment">//Error!!!!!</span></div><div class="line">    sum[_y] += sum[_x];</div><div class="line">    ufs[_x] = _y;</div><div class="line">    xorsum ^= g[_x] ^ g[_y];</div><div class="line"></div><div class="line">    access(y), splay(y);<span class="comment">//Error!!!</span></div><div class="line">    moveroot(x);</div><div class="line">    fa[x] = y;</div><div class="line">    pushv(x, <span class="number">1</span>);</div><div class="line"></div><div class="line">    moveroot(g[_y]);</div><div class="line">    access(g[_x]);</div><div class="line">    splay(g[_y]);</div><div class="line"></div><div class="line">    x = g[_y]; <span class="keyword">int</span> con = sum[_y] &gt;&gt; <span class="number">1</span>;</div><div class="line">    g[_y] = INF;<span class="comment">//Warning!!!</span></div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>)&#123;</div><div class="line">        pushdown(x);</div><div class="line">        <span class="keyword">int</span> subtree_siz = siz[rs];</div><div class="line">        <span class="keyword">if</span> (subtree_siz &lt; con) <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (subtree_siz == con)&#123;</div><div class="line">            <span class="keyword">if</span> (sum[_y] &amp; <span class="number">1</span>) <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">else</span> g[_y] = x;</div><div class="line">        &#125;</div><div class="line">        x = rs;</div><div class="line">        <span class="keyword">while</span> (pushdown(x), ls) x = ls;<span class="comment">//Error!!!!!!!!!</span></div><div class="line">        splay(x);</div><div class="line">    &#125;</div><div class="line">    g[_y] = min(g[_y], x);</div><div class="line"></div><div class="line">    xorsum ^= g[_y];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">        freopen(<span class="string">"capital.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    read(n), read(m);</div><div class="line">    rep(i, <span class="number">1</span>, n) ufs[i] = i, g[i] = i, sum[i] = <span class="number">1</span>, xorsum ^= i;</div><div class="line">    rep(i, <span class="number">1</span>, m)&#123;</div><div class="line">        <span class="keyword">char</span> op = gc();</div><div class="line">        <span class="keyword">while</span> (op != <span class="string">'A'</span> &amp;&amp; op != <span class="string">'X'</span> &amp;&amp; op != <span class="string">'Q'</span>) op = gc();</div><div class="line">        <span class="keyword">switch</span>(op)&#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'A'</span>: read(x), read(y), merge(x, y); <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'Q'</span>: read(x), <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, g[find_root(x)]); <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'X'</span>: <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, xorsum); <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></div><div class="line">            debug(i);</div><div class="line">        <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于代码的细节及坑点可以观察上面的Warning和Error</p>
]]></content>
    
    <summary type="html">
    
      &lt;!--用真正的题解标题替换所有的&lt;title&gt;---&gt;
&lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;BZOJ 3510: 首都  题解&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://gqh123.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="启发式合并" scheme="https://gqh123.github.io/tags/%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/"/>
    
      <category term="题解" scheme="https://gqh123.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="BZOJ" scheme="https://gqh123.github.io/tags/BZOJ/"/>
    
      <category term="LCT" scheme="https://gqh123.github.io/tags/LCT/"/>
    
      <category term="树的重心" scheme="https://gqh123.github.io/tags/%E6%A0%91%E7%9A%84%E9%87%8D%E5%BF%83/"/>
    
      <category term="并查集" scheme="https://gqh123.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ 3779: 重组病毒</title>
    <link href="https://gqh123.github.io/2018/01/13/BZOJ-3779-%E9%87%8D%E7%BB%84%E7%97%85%E6%AF%92/"/>
    <id>https://gqh123.github.io/2018/01/13/BZOJ-3779-重组病毒/</id>
    <published>2018-01-13T09:27:41.000Z</published>
    <updated>2019-06-27T07:29:24.748Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>BZOJ 3779: 重组病毒  题解<br><a id="more"></a></p>
<h1 id="BZOJ-3779-重组病毒"><a href="#BZOJ-3779-重组病毒" class="headerlink" title="BZOJ 3779: 重组病毒"></a>BZOJ 3779: 重组病毒</h1><ul>
<li><p>Time Limit:  20 Sec </p>
</li>
<li><p>Memory Limit:  512 MB</p>
</li>
</ul>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>黑客们通过对已有的病毒反编译，将许多不同的病毒重组，并重新编译出了新型的重组病毒。这种病毒的繁殖和变异能力极强。为了阻止这种病毒传播，某安全机构策划了一次实验，来研究这种病毒。<br>实验在一个封闭的局域网内进行。局域网内有n台计算机，编号为1~n。一些计算机之间通过网线直接相连，形成树形的结构。局域网中有一台特殊的计算机，称之为核心计算机。根据一些初步的研究，研究员们拟定了一个一共m步的实验。实验开始之前，核心计算机的编号为1，每台计算机中都有病毒的一个变种，而且每台计算机中的变种都不相同。实验中的每一步会是下面中的一种操作：<br>1、    RELEASE x<br>在编号为x的计算机中植入病毒的一个新变种。这个变种在植入之前不存在于局域网中。<br>2、    RECENTER x<br>将核心计算机改为编号为x的计算机。但是这个操作会导致原来核心计算机中的病毒产生新变种，并感染过来。换言之，假设操作前的核心计算机编号为y，相当于在操作后附加了一次RELEASE y的操作。<br>根据研究的结论，在植入一个新变种时，病毒会在局域网中搜索核心计算机的位置，并沿着网络中最短的路径感染过去。<br>而第一轮实验揭露了一个惊人的真相：病毒的不同变种是互斥的。新变种在感染一台已经被旧变种感染的电脑时，会把旧变种完全销毁之后再感染。但研究员发现了实现过程中的漏洞。如果新变种在感染过程中尚未销毁过这类旧变种，需要先花费1单位时间分析旧变种，才能销毁。如果之前销毁过这类旧变种，就可以认为销毁不花费时间。病毒在两台计算机之间的传播亦可认为不花费时间。<br>研究员对整个感染过程的耗时特别感兴趣，因为这是消灭病毒的最好时机。于是在m步实验之中，研究员有时还会做出如下的询问：<br>3、    REQUEST x<br>询问如果在编号为x的计算机的关键集合中的计算机中植入一个新变种，平均感染时间为多长。编号为y的计算机在编号为x的计算机的关键集合中，当且仅当从y沿网络中的最短路径感染到核心计算机必须经过x。由于有RECENTER操作的存在，这个集合并不一定是始终不变的。<br>至此，安全机构认为已经不需要实际的实验了，于是他们拜托你编写一个程序，模拟实验的结果，并回答所有的询问。</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>输入的第一行包含两个整数n和m，分别代表局域网中计算机的数量，以及操作和询问的总数。<br>接下来n-1行，每行包含两个整数x和y，表示局域网中编号为x和y的计算机之间有网线直接相连。<br>接下来m行，每行包含一个操作或者询问，格式如问题描述中所述。</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>对于每个询问，输出一个实数，代表平均感染时间。输出与答案的绝对误差不超过 10^(-6)时才会被视为正确。</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>8 6</p>
<p>1 2</p>
<p>1 3</p>
<p>2 8</p>
<p>3 4</p>
<p>3 5</p>
<p>3 6</p>
<p>4 7</p>
<p>REQUEST 7</p>
<p>RELEASE 3</p>
<p>REQUEST 3</p>
<p>RECENTER 5</p>
<p>RELEASE 2</p>
<p>REQUEST 1</p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>4.0000000000</p>
<p>2.0000000000</p>
<p>1.3333333333</p>
<h3 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h3><p>N &lt; = 1 00 000 M &lt; = 1 00 000</p>
<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>这道题其实和SDOI2017的树点涂色那道题很像的，只不过多了一个换根操作，实际难度就大幅提升……</p>
<p>首先，我们知道第一种操作可以类比LCT中的access，所以，我们可以用LCT的树剖分来维护每种颜色的情况，也即，在一条重链里的所有点的颜色是相同的</p>
<p>那么，我们就需要分析题目所求的东西是什么，我们经过分析可以发现，一个点感染到根的时间就等于这个点到根的轻边树加一，那么，我们只需要维护一个点到根经过了多少条轻边就可以了</p>
<p>联想边的轻重转换，我们知道，一条边的转换，只有可能发生于access操作中，我们还知道，树上信息的维护可以使用DFS序+线段树，因为它支持快速方便的子树修改，如果还有链修改，那么就可以使用树链剖分+线段树，由于access不会涉及链修改，所以也不需要这样做</p>
<p>我们不妨从$1$开始遍历，求出DFS序</p>
<p>具体方法就是我们在每次access切换边的轻重的时候，在这条边下面的子树中进行子树修改，即区间加一或减一，当然，这是正常的情况，由于本题支持换根，所以当一个点$x$为根时，从$x$到$1$的路径上的所有点的子树方向会发生改变（其实不够准确，因为有些子树仍是它的子树，但是请体会精神……)，我们需要考虑这样的情况，更特殊的，当当前点为根的时候，我们需要对整个区间进行操作，而这些如果不特殊判断都是会有问题的</p>
<p>如何讨论情况呢，下面分条阐述：</p>
<ul>
<li><p>当前点为根，直接维护一下当前的根是什么就可以了，直接关于整个区间操作</p>
</li>
<li><p>当前点在$1$到根的链上，我们可以用根的DFS序和这个点的DFS序进行比较，看看这个点的是否包含根的，如果是，那么就在链上，否则不在，在此时的父亲的区间补集（最多两个区间）上操作即可</p>
</li>
<li><p>剩下就是正常情况直接搞就可以了，在关于这个点占据的DFS区间上操作即可</p>
</li>
</ul>
<p>那么只剩下一个问题了，就是如何寻找当前树上的父亲，我们需要先把当前点旋到根，然后有两种情况：</p>
<ul>
<li><p>当前点有左儿子，那么这个点不是链的顶端，找这条链上的它的前驱即可，<strong>注意为了保证时间复杂度，找到了以后要Splay它一下</strong></p>
</li>
<li><p>当前点没有左儿子，这个点是链的顶端，直接返回它的父亲即可</p>
</li>
</ul>
<p>那么，问题就都解决了</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 400005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for (register int i = r; i &gt;= l; i--)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() (((p1 == p2 &amp;&amp; (p2 = (p1 = buffer) + fread(buffer, 1, maxn, stdin), p1 == p2), p1 == p2)) ? EOF : *p1++)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> *p1, *p2;</div><div class="line"><span class="keyword">char</span> buffer[maxn];</div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = gc(); x = <span class="number">0</span>; <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!(<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) &amp;&amp; ch != <span class="string">'-'</span>) ch = gc();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) ch = gc(), f = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + ch - <span class="string">'0'</span>, ch = gc();</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> Tree_Chain_Partition&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> erep(i, x) for (register int i = h[x]; i; i = e[i].next)</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span> root = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">        <span class="keyword">int</span> next, to; </div><div class="line">        edge(<span class="keyword">int</span> next = <span class="number">0</span>, <span class="keyword">int</span> to = <span class="number">0</span>) : next(next), to(to)&#123;&#125;</div><div class="line">    &#125;e[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line">    <span class="keyword">int</span> h[maxn], cnt = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Add_Edge</span><span class="params">(<span class="keyword">int</span>&amp; x, <span class="keyword">int</span>&amp; y)</span></span>&#123;</div><div class="line">        e[++cnt] = edge(h[x], y);</div><div class="line">        h[x] = cnt;</div><div class="line">        e[++cnt] = edge(h[y], x);</div><div class="line">        h[y] = cnt;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> fa[maxn];</div><div class="line">    <span class="keyword">int</span> siz[maxn];</div><div class="line">    <span class="keyword">int</span> son[maxn];</div><div class="line">    <span class="keyword">int</span> dfs[maxn];</div><div class="line">    <span class="keyword">int</span> idfs[maxn];</div><div class="line">    <span class="keyword">int</span> top[maxn];</div><div class="line">    <span class="keyword">int</span> d[maxn];</div><div class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        siz[x] = <span class="number">1</span>;</div><div class="line">        erep(i, x)&#123;</div><div class="line">            <span class="keyword">int</span> op = e[i].to;</div><div class="line">            <span class="keyword">if</span> (op == fa[x]) <span class="keyword">continue</span>;</div><div class="line">            fa[op] = x;</div><div class="line">            d[op] = d[x] + <span class="number">1</span>;</div><div class="line">            DFS(op);</div><div class="line">            siz[x] += siz[op];</div><div class="line">            <span class="keyword">if</span> (siz[op] &gt; siz[son[x]]) son[x] = op;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> tp)</span></span>&#123;</div><div class="line">        dfs[x] = ++t;</div><div class="line">        idfs[t] = x;</div><div class="line">        top[x] = tp;</div><div class="line">        <span class="keyword">if</span> (son[x]) DFS(son[x], tp);</div><div class="line">        erep(i, x)&#123;</div><div class="line">            <span class="keyword">int</span> op = e[i].to;</div><div class="line">            <span class="keyword">if</span> (op == fa[x] || op == son[x]) <span class="keyword">continue</span>;</div><div class="line">            DFS(op, op);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    ll sum[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line">    <span class="keyword">int</span> add[maxn &lt;&lt; <span class="number">1</span>];</div><div class="line">    <span class="keyword">int</span> qx, qy, qd;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span>&amp; o)</span></span>&#123;</div><div class="line">        sum[o] = sum[o &lt;&lt; <span class="number">1</span>] + sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span>&amp; l, <span class="keyword">int</span>&amp; r, <span class="keyword">int</span>&amp; o)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (add[o] &amp;&amp; l != r)&#123;</div><div class="line">            <span class="keyword">int</span> x = add[o];</div><div class="line">            <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">            add[o &lt;&lt; <span class="number">1</span>] += x, add[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += x;</div><div class="line">            sum[o &lt;&lt; <span class="number">1</span>] += (ll)(mid - l + <span class="number">1</span>) * x;</div><div class="line">            sum[o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += (ll)(r - mid) * x;</div><div class="line">            add[o] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (l == r)&#123;</div><div class="line">            sum[o] = d[idfs[l]] + <span class="number">1</span>;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">        init(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">        init(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">        pushup(o);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">        pushdown(l, r, o);</div><div class="line">        <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy)&#123;</div><div class="line">            add[o] += qd;</div><div class="line">            sum[o] += (ll)(r - l + <span class="number">1</span>) * qd;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">        <span class="keyword">if</span> (qx &lt;= mid) Add(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (qy &gt; mid) Add(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">        pushup(o);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">ll <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> o)</span></span>&#123;</div><div class="line">        pushdown(l, r, o);</div><div class="line">        <span class="keyword">if</span> (qx &lt;= l &amp;&amp; r &lt;= qy) <span class="keyword">return</span> sum[o];</div><div class="line">        <span class="keyword">int</span> mid = ((r - l) &gt;&gt; <span class="number">1</span>) + l;</div><div class="line">        ll ans = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (qx &lt;= mid) ans += get_sum(l, mid, o &lt;&lt; <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (qy &gt; mid) ans += get_sum(mid + <span class="number">1</span>, r, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">        DFS(<span class="number">1</span>);</div><div class="line">        DFS(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">        init(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> Tree_Chain_Partition :: init;</div><div class="line"><span class="keyword">using</span> Tree_Chain_Partition :: get_sum;</div><div class="line"><span class="keyword">using</span> Tree_Chain_Partition :: Add;</div><div class="line"><span class="keyword">using</span> Tree_Chain_Partition :: dfs;</div><div class="line"><span class="keyword">using</span> Tree_Chain_Partition :: siz;</div><div class="line"><span class="keyword">using</span> Tree_Chain_Partition :: qx;</div><div class="line"><span class="keyword">using</span> Tree_Chain_Partition :: qy;</div><div class="line"><span class="keyword">using</span> Tree_Chain_Partition :: qd;</div><div class="line"><span class="keyword">using</span> Tree_Chain_Partition :: Add_Edge;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> Link_Cut_Tree&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> ls ch[x][0]</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> rs ch[x][1]</span></div><div class="line"></div><div class="line">    <span class="keyword">int</span> root;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> ch[maxn][<span class="number">2</span>];</div><div class="line">    <span class="keyword">int</span> fa[maxn];</div><div class="line">    <span class="keyword">bool</span> rev[maxn];</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">is_root</span><span class="params">(<span class="keyword">int</span>&amp; x)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> ch[fa[x]][<span class="number">0</span>] != x &amp;&amp; ch[fa[x]][<span class="number">1</span>] != x;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (rev[x])&#123;</div><div class="line">            rev[ls] ^= <span class="number">1</span>, rev[rs] ^= <span class="number">1</span>;</div><div class="line">            swap(ls, rs);</div><div class="line">            rev[x] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> k = x;</div><div class="line">        x = fa[x];</div><div class="line">        fa[k] = fa[x];</div><div class="line">        <span class="keyword">int</span> d = ch[x][<span class="number">1</span>] == k;</div><div class="line">        <span class="keyword">if</span> (!is_root(x)) ch[fa[x]][ch[fa[x]][<span class="number">1</span>] == x] = k;</div><div class="line">        ch[x][d] = ch[k][d ^ <span class="number">1</span>];</div><div class="line">        fa[ch[x][d]] = x;</div><div class="line">        ch[k][d ^ <span class="number">1</span>] = x;</div><div class="line">        fa[x] = k;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> st[maxn];</div><div class="line">    <span class="keyword">int</span> cst = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> t = x;</div><div class="line">        <span class="keyword">while</span> (!is_root(x))&#123;</div><div class="line">            st[++cst] = x;</div><div class="line">            x = fa[x];</div><div class="line">        &#125;</div><div class="line">        st[++cst] = x;</div><div class="line">        <span class="keyword">while</span> (cst)&#123;</div><div class="line">            pushdown(st[cst]);</div><div class="line">            cst--;</div><div class="line">        &#125;</div><div class="line">        x = t;</div><div class="line">        <span class="keyword">while</span> (!is_root(x))&#123;</div><div class="line">            <span class="keyword">int</span> f1 = fa[x];</div><div class="line">            <span class="keyword">if</span> (!is_root(f1))&#123;</div><div class="line">                <span class="keyword">int</span> f2 = fa[f1];</div><div class="line">                <span class="keyword">if</span> ((ch[f1][<span class="number">1</span>] == x) ^ (ch[f2][<span class="number">1</span>] == f1)) rotate(x);</div><div class="line">                <span class="keyword">else</span> rotate(f1);</div><div class="line">            &#125;</div><div class="line">            rotate(x);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//1 正序，０ 逆序</span></div><div class="line">        <span class="keyword">if</span> (dfs[x] &lt;= dfs[root] &amp;&amp; dfs[root] + siz[root] - <span class="number">1</span> &lt;= dfs[x] + siz[x] - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> op)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (x == root) qx = <span class="number">1</span>, qy = n, qd = op, Add(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (judge(x)) qx = dfs[x], qy = dfs[x] + siz[x] - <span class="number">1</span>, qd = op, Add(<span class="number">1</span>, n, <span class="number">1</span>); </div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            qx = <span class="number">1</span>, qy = n, qd = op, Add(<span class="number">1</span>, n, <span class="number">1</span>);</div><div class="line">            x = fa[x];</div><div class="line">            qx = dfs[x], qy = dfs[x] + siz[x] - <span class="number">1</span>, qd = -op, Add(<span class="number">1</span>, n, <span class="number">1</span>); </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (x)&#123;</div><div class="line">            splay(x);</div><div class="line">            <span class="keyword">int</span> k = rs;</div><div class="line">            <span class="keyword">if</span> (t) &#123;</div><div class="line">                <span class="keyword">while</span> (pushdown(t), ch[t][<span class="number">0</span>]) t = ch[t][<span class="number">0</span>];</div><div class="line">                splay(t);</div><div class="line">                Modify(t, <span class="number">-1</span>);</div><div class="line">            &#125;</div><div class="line">            rs = t;</div><div class="line">            <span class="keyword">if</span> (k) &#123;</div><div class="line">                <span class="keyword">while</span> (pushdown(k), ch[k][<span class="number">0</span>]) k = ch[k][<span class="number">0</span>];</div><div class="line">                splay(k);</div><div class="line">                Modify(k, <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            t = x;</div><div class="line">            x = fa[x];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">moveroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        access(x);</div><div class="line">        splay(x);</div><div class="line">        root = x;</div><div class="line">        rev[x] ^= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_ans</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (x == root) qx = <span class="number">1</span>, qy = n, <span class="built_in">printf</span>(<span class="string">"%.10lf\n"</span>, (<span class="keyword">double</span>)<span class="number">1.0</span> * get_sum(<span class="number">1</span>, n, <span class="number">1</span>) / n);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (judge(x)) qx = dfs[x], qy = dfs[x] + siz[x] - <span class="number">1</span>, <span class="built_in">printf</span>(<span class="string">"%.10lf\n"</span>, (<span class="keyword">double</span>)<span class="number">1.0</span> * get_sum(<span class="number">1</span>, n, <span class="number">1</span>) / siz[x]);</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            splay(x);</div><div class="line">            qx = <span class="number">1</span>, qy = n;</div><div class="line">            ll a = get_sum(<span class="number">1</span>, n, <span class="number">1</span>), b = n;</div><div class="line">            <span class="keyword">if</span> (ls)&#123;</div><div class="line">                x = ls;</div><div class="line">                <span class="keyword">while</span> (pushdown(x), rs) x = rs;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (fa[x]) x = fa[x];</div><div class="line">            qx = dfs[x], qy = dfs[x] + siz[x] - <span class="number">1</span>, a -= get_sum(<span class="number">1</span>, n, <span class="number">1</span>), b -= siz[x];</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%.10lf\n"</span>, (<span class="keyword">double</span>)<span class="number">1.0</span> * a / b);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> Link_Cut_Tree :: access;</div><div class="line"><span class="keyword">using</span> Link_Cut_Tree :: moveroot;</div><div class="line"><span class="keyword">using</span> Link_Cut_Tree :: get_ans;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Release</span><span class="params">(<span class="keyword">int</span>&amp; x)</span></span>&#123;</div><div class="line">    access(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Recenter</span><span class="params">(<span class="keyword">int</span>&amp; x)</span></span>&#123;</div><div class="line">    moveroot(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Request</span><span class="params">(<span class="keyword">int</span>&amp; x)</span></span>&#123;</div><div class="line">    get_ans(x);</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">        freopen(<span class="string">"virus.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    read(n), read(m);</div><div class="line">    rep(i, <span class="number">1</span>, n - <span class="number">1</span>) read(x), read(y), Add_Edge(x, y);</div><div class="line">    init();</div><div class="line">    rep(i, <span class="number">1</span>, n) Link_Cut_Tree :: fa[i] = Tree_Chain_Partition :: fa[i];</div><div class="line">    Link_Cut_Tree :: root = <span class="number">1</span>;</div><div class="line">    rep(i, <span class="number">1</span>, m)&#123;</div><div class="line">        <span class="keyword">char</span> op = gc();</div><div class="line">        <span class="keyword">while</span> (op != <span class="string">'Q'</span> &amp;&amp; op != <span class="string">'L'</span> &amp;&amp; op != <span class="string">'C'</span>) op = gc();</div><div class="line">        <span class="keyword">switch</span>(op)&#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'L'</span>: read(x), Release(x); <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'C'</span>: read(x), Recenter(x); <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'Q'</span>: read(x), Request(x); <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>: <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然而我还是非常SB的用了树链剖分……</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;BZOJ 3779: 重组病毒  题解&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://gqh123.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="https://gqh123.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="题解" scheme="https://gqh123.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="BZOJ" scheme="https://gqh123.github.io/tags/BZOJ/"/>
    
      <category term="LCT" scheme="https://gqh123.github.io/tags/LCT/"/>
    
      <category term="树链剖分" scheme="https://gqh123.github.io/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
      <category term="DFS序" scheme="https://gqh123.github.io/tags/DFS%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ 3159: 决战</title>
    <link href="https://gqh123.github.io/2018/01/13/BZOJ-3159-%E5%86%B3%E6%88%98-md/"/>
    <id>https://gqh123.github.io/2018/01/13/BZOJ-3159-决战-md/</id>
    <published>2018-01-13T08:14:42.000Z</published>
    <updated>2019-06-27T07:29:24.740Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>BZOJ 3159: 决战  题解<br><a id="more"></a></p>
<h1 id="BZOJ-3159-决战"><a href="#BZOJ-3159-决战" class="headerlink" title="BZOJ 3159: 决战"></a>BZOJ 3159: 决战</h1><ul>
<li><p>Time Limit:  10 Sec </p>
</li>
<li><p>Memory Limit:  512 MB</p>
</li>
</ul>
<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p><img src="http://218.106.205.134/uploads/1(4).jpg" height="px" width="px"></p>
<p><img src="http://218.106.205.134/uploads/2.jpg" height="px" width="px"></p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>第一行有三个整数N、M和R，分别表示树的节点数、指令和询问总数，以及X国的据点。</p>
<p>接下来N-1行，每行两个整数X和Y，表示Katharon国的一条道路。</p>
<p>接下来M行，每行描述一个指令或询问，格式见题目描述。</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>对于每个询问操作，输出所求的值。</p>
<h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><p>5 8 1</p>
<p>1 2</p>
<p>2 3</p>
<p>3 4</p>
<p>4 5</p>
<p>Sum 2 4</p>
<p>Increase 3 5 3</p>
<p>Minor 1 4</p>
<p>Sum 4 5</p>
<p>Invert 1 3</p>
<p>Major 1 2</p>
<p>Increase 1 5 2</p>
<p>Sum 1 5</p>
<h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>0</p>
<p>0</p>
<p>6</p>
<p>3</p>
<p>19</p>
<h3 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h3><p>1&lt;=N,M&lt;=50000.且对于运送操作1&lt;=W&lt;=1000</p>
<h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p>Katharon+#1</p>
<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>很好的动态树技巧……</p>
<p>最近写了几发JCY课件上的题，感觉都巨强无比……应该是我太菜了，每道题都差不多写半(half)天</p>
<p>这道题也是如此，我们发现，前几个操作都是动态树的ZZ操作对吧，但是最后一个要我们资磁值的翻转，这就有点为难了，因为我们如果直接在LCT上翻转的话，实际上相当于什么都没有做对吧……</p>
<p>但如果顺着这个方向想，我们可以发现，之所以在原来的LCT上不能直接翻转，是因为它上面的值和点是对应的，我们翻转只是改变了树的形态，而点与值的对应关系并没有发生改变，而题目的要求，使得我们必须改变这种对应关系，所以，我们可以先考虑在一棵Splay中翻转对应关系，但是这个并不好维护，为什么呢？因为这种翻转是和其他的子树相关联的，比如我现在要在左子树里面查找一个值，而这个值很显然也和其他某个子树有关（如果当前树的值被翻转了），这样这种关系就会过于复杂以至于根本无法维护</p>
<p>那么还可以怎么办呢？我们发现，主要矛盾就在于点与值的捆绑维护，那么我们把它们拆开，分别来维护，不就能够解决这样的问题了吗？</p>
<p>所以，我们考虑构建两棵LCT，一棵维护结构，而另一棵维护值，注意，<strong>此时两棵LCT相同编号的点不一定是对应点</strong>，我们不妨称前者为<strong>TrueLCT</strong>，后者为<strong>ValueLCT</strong></p>
<p>我们在执行其他修改操作以及询问操作的时候，我们直接在两棵LCT上同步进行，而在值翻转的时候，我们只翻转ValueLCT上的点</p>
<p>而如何实现同步进行呢？我们知道，为了保证每次操作都能够同步，我们必须保证两棵LCT的每个Splay能够两两对应，而且对应的这两个Splay点数必须相同（内部具体结构不必完全相同），进一步，我们可以知道，这两个对应的Splay，就分别维护了某一特定链的形态和值，也即链上深度排名为$i$的点$x$，在TrueLCT中的对应的点编号就是$x$，而在ValueLCT里面对应的点是它在TrueLCT里面所在Splay对应的ValueLCT里面的Splay的排名为$i$的那个点（好好理解一下～），这样，我们就可以快速的找到一个点的值是多少，而且，通过在两棵LCT上同步进行Split操作，我们也就可以回答链的询问（因为这条链对应的那两棵Splay形态肯定是一致的），所以这种对应是有很大的意义的</p>
<p>我们发现，此时由于两个编号相同的点不一定关联，所以我们首先要在TrueLCT的每棵Splay的根上维护这个根在ValueLCT里面的对应Splay上的某个点（不一定就是根的对应点，只是为了定位所在的Splay，为了方便不妨称为定位点），这样才能够知道每个点的对应点在ValueLCT里面的哪棵Splay上，才能够进行找对应点的操作，而且，<strong>定位点信息当且仅当当前这个点是所在Splay的根的时候才有意义</strong></p>
<p><strong>注意，由于ValueLCT服务于TrueLCT，且受TrueLCT支配，所以它的具体形态无关紧要，它上面的Splay之间的具体形态信息可能是错误的，但是这样不会导致问题，因为我们在进行操作时，不会根据ValueLCT的形态来进行操作，而是根据TrueLCT的形态以及实际需要来查找或更新ValueLCT里面的对应Splay的信息，所以ValueLCT里面的具体形态无关紧要</strong></p>
<p>说起来大概就是这么多，下面是每个具体的操作方(xi)法(jie)（其实都是我入的坑……)：</p>
<ul>
<li><p>找对应点操作，假设我们要找$x$（在TrueLCT中）的对应点$x’$（在ValueLCT中），我们首先把$x$Splay到根，然后可以直接得到它在Splay中的排名$k$，然后，我们在ValueLCT中把之前提到的定位点Splay到根，然后通过排名$k$在它的子树里面寻找排名为$k$的点即可，最后，为了方便及正确性，我们把$x$的定位点更新为刚找到的它的对应点</p>
</li>
<li><p>access操作，我们可以发现，在这个操作里面我们干的无非就是两件事，一是合并Splay，二是分裂Splay，为了方便我们直接把这两个操作放在一起。假设当前以$x$为根的Splay要合并到$y$点上，$y$要与某个点$z$断开，那么，我们为了同步维护两个LCT里面的Splay形态，我们首先需要找到$x$的对应点$x’$，然后，我们同时断开$x$和$x’$的右儿子与它们各自的连接并连接到新点上即可（把它们的右儿子更新为需要的那个点），<strong>注意，由于在TrueLCT中，$x$的右儿子原先不是根，现在成为了新根，为了正确性，我们要更新它的定位点信息为$x’$原来的右儿子</strong>，同时，因为ValueLCT上的形态不保证正确，<strong>所以，$x’$新接上去的点的父亲不一定是$x’$，我们需要强制地把新连上去的点的父亲更新为$x’$</strong>，这个操作里面就是这两个细节</p>
</li>
<li><p>pushdown操作，由于我们现在要维护的信息是需要随时查询的，<strong>所以我们不能延迟信息更新，也就是说，在得到标记的那一刻就要更新自己维护的信息，而不是等到下传标记时才更新自己的信息</strong>，但是反转标记除外，因为它影响的范围是自己的下一层，在查询到下一层时当前点的标记显然已经下传完毕了，所以就不会有什么影响，<strong>注意，我们在TureLCT上维护的标记只有反转标记，信息只有左右儿子，父亲，子树大小以及定位点</strong>，剩下的都交给ValueLCT维护</p>
</li>
<li><p>rotate操作（只限于TrueLCT），我们为了保证定位点信息的正确性，需要在rotate时更新，<strong>比如现在已知单/双旋一次之后这个点就会成为根，那么我们就需要把根的定位点信息传给这个点</strong>，在ValueLCT里面就无所谓了</p>
</li>
<li><p>splay操作，其实由于没有严格限制，所以无所谓，但是为了严密性，我们最好同时对两棵LCT中的点进行Splay，也就是说，在对一个点进行Splay以后（TrueLCT中），最好把它的对应点（ValueLCT中）也Splay一下，这样处理较为方便</p>
</li>
<li><p>moveroot, split以及修改查询等操作，正常做就可以了，<strong>注意修改查询要保证当前的点（ValueLCT中）为所在Splay的根，这也就是为什么上面的Splay操作最好那样写</strong></p>
</li>
</ul>
<p>其实全都是TMD细节，就这一道题，先是写了一份一千多行的代码，结果因为没维护定位点所以错了(我本以为可以不维护这东西）……后来重新写了一份三百多行的，又调了大半天……才TMD过</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 100005</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ls ch[x][0]</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rs ch[x][1]</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _ls ch[_x][0]</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _rs ch[_x][1]</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long int</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() ((p1 == p2 &amp;&amp; (p2 = (p1 = buffer) + fread(buffer, 1, maxn, stdin), p1 == p2)) ? EOF : *p1++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for (register int i = l; i &lt;= r; i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for (register int i = r; i &gt;= l; i--)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">char</span> *p1, *p2;</div><div class="line"><span class="keyword">char</span> buffer[maxn];</div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span>&amp; <span class="title">x</span>)&#123;</span></div><div class="line">    <span class="keyword">char</span> ch = gc(); x = <span class="number">0</span>; <span class="keyword">bool</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (!(<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) &amp;&amp; ch != <span class="string">'-'</span>) ch = gc();</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) ch = gc(), f = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (<span class="string">'0'</span> &lt;= ch &amp;&amp; ch &lt;= <span class="string">'9'</span>) x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + ch - <span class="string">'0'</span>, ch = gc();</div><div class="line">    <span class="keyword">if</span> (!f) x = -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> TrueLCT&#123;</div><div class="line">    <span class="keyword">int</span> fa[maxn];</div><div class="line">    <span class="keyword">int</span> ch[maxn][<span class="number">2</span>];</div><div class="line">    <span class="keyword">bool</span> rev[maxn];</div><div class="line">    <span class="keyword">int</span> poi[maxn];<span class="comment">//只有Splay树根上的才有意义</span></div><div class="line">    <span class="keyword">int</span> siz[maxn];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">is_root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> ch[fa[x]][<span class="number">0</span>] != x &amp;&amp; ch[fa[x]][<span class="number">1</span>] != x;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        siz[x] = siz[ls] + siz[rs] + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pass</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">bool</span> r)</span></span>&#123;</div><div class="line">        rev[x] ^= r; <span class="keyword">if</span> (r) swap(ls, rs); </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (ls) pass(ls, rev[x]);</div><div class="line">        <span class="keyword">if</span> (rs) pass(rs, rev[x]);</div><div class="line">        rev[x] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> k = x;</div><div class="line">        x = fa[x];</div><div class="line">        <span class="keyword">int</span> d = ch[x][<span class="number">1</span>] == k;</div><div class="line">        fa[k] = fa[x];</div><div class="line">        <span class="keyword">if</span> (!is_root(x)) ch[fa[x]][ch[fa[x]][<span class="number">1</span>] == x] = k;</div><div class="line">        ch[x][d] = ch[k][d ^ <span class="number">1</span>];</div><div class="line">        fa[ch[x][d]] = x;</div><div class="line">        ch[k][d ^ <span class="number">1</span>] = x;</div><div class="line">        fa[x] = k;</div><div class="line">        pushup(x);</div><div class="line">        pushup(k);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> st[maxn];</div><div class="line">    <span class="keyword">int</span> cst = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> t = x;</div><div class="line">        <span class="keyword">while</span> (!is_root(x))&#123;</div><div class="line">            st[++cst] = x;</div><div class="line">            x = fa[x];</div><div class="line">        &#125;</div><div class="line">        st[++cst] = x;</div><div class="line">        <span class="keyword">while</span> (cst)&#123;</div><div class="line">            pushdown(st[cst]);</div><div class="line">            cst--;</div><div class="line">        &#125;</div><div class="line">        x = t;</div><div class="line">        <span class="keyword">while</span> (!is_root(x))&#123;</div><div class="line">            <span class="keyword">int</span> f1 = fa[x];</div><div class="line">            <span class="keyword">if</span> (!is_root(f1))&#123;</div><div class="line">                <span class="keyword">int</span> f2 = fa[f1];</div><div class="line">                <span class="keyword">if</span> (is_root(f2)) poi[x] = poi[f2];</div><div class="line">                <span class="keyword">if</span> ((ch[f1][<span class="number">1</span>] == x) ^ (ch[f2][<span class="number">1</span>] == f1)) rotate(x);</div><div class="line">                <span class="keyword">else</span> rotate(f1);</div><div class="line">                rotate(x);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> rotate(x), poi[x] = poi[f1];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> TrueLCT :: poi;</div><div class="line"><span class="keyword">using</span> TrueLCT :: pass;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> ValueLCT&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> mx[maxn];</div><div class="line">    <span class="keyword">int</span> mi[maxn];</div><div class="line">    <span class="keyword">int</span> val[maxn];</div><div class="line">    <span class="keyword">int</span> add[maxn];</div><div class="line">    ll sum[maxn];</div><div class="line">    <span class="keyword">int</span> fa[maxn];</div><div class="line">    <span class="keyword">int</span> ch[maxn][<span class="number">2</span>];</div><div class="line">    <span class="keyword">bool</span> rev[maxn];</div><div class="line">    <span class="keyword">int</span> siz[maxn];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">is_root</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> ch[fa[x]][<span class="number">0</span>] != x &amp;&amp; ch[fa[x]][<span class="number">1</span>] != x;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        siz[x] = siz[ls] + siz[rs] + <span class="number">1</span>;</div><div class="line">        sum[x] = sum[ls] + sum[rs] + val[x];</div><div class="line">        mx[x] = max(val[x], max(mx[ls], mx[rs]));</div><div class="line">        mi[x] = val[x];</div><div class="line">        <span class="keyword">if</span> (ls) mi[x] = min(mi[x], mi[ls]);</div><div class="line">        <span class="keyword">if</span> (rs) mi[x] = min(mi[x], mi[rs]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pass</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k, <span class="keyword">bool</span> r)</span></span>&#123;</div><div class="line">        mx[x] += k, mi[x] += k, val[x] += k, sum[x] += (ll)siz[x] * k, add[x] += k;</div><div class="line">        rev[x] ^= r; <span class="keyword">if</span> (r) swap(ls, rs); </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (ls) pass(ls, add[x], rev[x]);</div><div class="line">        <span class="keyword">if</span> (rs) pass(rs, add[x], rev[x]);</div><div class="line">        add[x] = rev[x] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> k = x;</div><div class="line">        x = fa[x];</div><div class="line">        <span class="keyword">int</span> d = ch[x][<span class="number">1</span>] == k;</div><div class="line">        fa[k] = fa[x];</div><div class="line">        <span class="keyword">if</span> (!is_root(x)) ch[fa[x]][ch[fa[x]][<span class="number">1</span>] == x] = k;</div><div class="line">        ch[x][d] = ch[k][d ^ <span class="number">1</span>];</div><div class="line">        fa[ch[x][d]] = x;</div><div class="line">        ch[k][d ^ <span class="number">1</span>] = x;</div><div class="line">        fa[x] = k;</div><div class="line">        pushup(x);</div><div class="line">        pushup(k);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> st[maxn];</div><div class="line">    <span class="keyword">int</span> cst = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> t = x;</div><div class="line">        <span class="keyword">while</span> (!is_root(x))&#123;</div><div class="line">            st[++cst] = x;</div><div class="line">            x = fa[x];</div><div class="line">        &#125;</div><div class="line">        st[++cst] = x;</div><div class="line">        <span class="keyword">while</span> (cst)&#123;</div><div class="line">            pushdown(st[cst]);</div><div class="line">            cst--;</div><div class="line">        &#125;</div><div class="line">        x = t;</div><div class="line">        <span class="keyword">while</span> (!is_root(x))&#123;</div><div class="line">            <span class="keyword">int</span> f1 = fa[x];</div><div class="line">            <span class="keyword">if</span> (!is_root(f1))&#123;</div><div class="line">                <span class="keyword">int</span> f2 = fa[f1];</div><div class="line">                <span class="keyword">if</span> ((ch[f1][<span class="number">1</span>] == x) ^ (ch[f2][<span class="number">1</span>] == f1)) rotate(x);</div><div class="line">                <span class="keyword">else</span> rotate(f1);</div><div class="line">            &#125;</div><div class="line">            rotate(x);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find_by_rank</span><span class="params">(<span class="keyword">int</span> rank, <span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        splay(x);</div><div class="line">        <span class="keyword">while</span> (x)&#123;</div><div class="line">            pushdown(x);</div><div class="line">            <span class="keyword">int</span> left = (ls) ? siz[ls] : <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span> (rank &lt;= left) x = ls;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (rank == left + <span class="number">1</span>) <span class="keyword">return</span> x;</div><div class="line">            <span class="keyword">else</span> rank -= left + <span class="number">1</span>, x = rs;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> ValueLCT :: add;</div><div class="line"><span class="keyword">using</span> ValueLCT :: mi;</div><div class="line"><span class="keyword">using</span> ValueLCT :: mx;</div><div class="line"><span class="keyword">using</span> ValueLCT :: sum;</div><div class="line"><span class="keyword">using</span> ValueLCT :: pass;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_value_point</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> _x = ValueLCT :: find_by_rank(TrueLCT :: siz[TrueLCT :: ls] + <span class="number">1</span>, poi[x]);</div><div class="line">    poi[x] = _x;</div><div class="line">    <span class="keyword">return</span> _x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> <span class="keyword">_t</span> = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (x)&#123;</div><div class="line">        TrueLCT :: splay(x);</div><div class="line">        <span class="keyword">int</span> _x = get_value_point(x);</div><div class="line">        ValueLCT :: splay(_x);</div><div class="line">        </div><div class="line">        poi[TrueLCT :: rs] = ValueLCT :: _rs;</div><div class="line">        TrueLCT :: rs = t;</div><div class="line">        ValueLCT :: _rs = <span class="keyword">_t</span>;</div><div class="line">        ValueLCT :: fa[<span class="keyword">_t</span>] = _x;</div><div class="line"></div><div class="line">        TrueLCT :: pushup(x);</div><div class="line">        ValueLCT :: pushup(_x);</div><div class="line"></div><div class="line">        t = x;</div><div class="line">        <span class="keyword">_t</span> = _x;</div><div class="line">        x = TrueLCT :: fa[x];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    TrueLCT :: splay(x);</div><div class="line">    <span class="keyword">int</span> _x = get_value_point(x);</div><div class="line">    ValueLCT :: splay(_x);</div><div class="line">    <span class="keyword">return</span> _x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">moveroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    access(x);</div><div class="line">    <span class="keyword">int</span> _x = splay(x);</div><div class="line">    pass(x, <span class="number">1</span>);</div><div class="line">    pass(_x, <span class="number">0</span>, <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> _x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    moveroot(y);</div><div class="line">    access(x);</div><div class="line">    <span class="keyword">int</span> _x = splay(x);</div><div class="line">    <span class="keyword">return</span> _x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> _x = moveroot(x); </div><div class="line">    TrueLCT :: fa[x] = y;</div><div class="line">    ValueLCT :: fa[_x] = poi[y];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> _x = split(x, y);</div><div class="line">    pass(_x, z, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">flip</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> _x = split(x, y);</div><div class="line">    pass(_x, <span class="number">0</span>, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_mx</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> _x = split(x, y);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, mx[_x]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_mi</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> _x = split(x, y);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, mi[_x]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> _x = split(x, y);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, sum[_x]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></div><div class="line">        freopen(<span class="string">"war.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">int</span> x, y, z;</div><div class="line">    read(n), read(m), read(x);</div><div class="line">    rep(i, <span class="number">1</span>, n) poi[i] = i;</div><div class="line">    rep(i, <span class="number">1</span>, n - <span class="number">1</span>) read(x), read(y), link(x, y);</div><div class="line">    rep(i, <span class="number">1</span>, m)&#123;</div><div class="line">        <span class="keyword">char</span> op = gc();</div><div class="line">        <span class="keyword">while</span> (op != <span class="string">'M'</span> &amp;&amp; op != <span class="string">'S'</span> &amp;&amp; op != <span class="string">'I'</span>) op = gc();</div><div class="line">        <span class="keyword">switch</span>(op)&#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'I'</span>: &#123;</div><div class="line">                op = gc(), op = gc();</div><div class="line">                read(x), read(y);</div><div class="line">                <span class="keyword">if</span> (op == <span class="string">'c'</span>) read(z), Add(x, y, z); </div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">'v'</span>) flip(x, y);</div><div class="line">                <span class="keyword">else</span> assert(<span class="literal">false</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">case</span> <span class="string">'S'</span>: read(x), read(y), get_sum(x, y); <span class="keyword">break</span>; </div><div class="line">            <span class="keyword">case</span> <span class="string">'M'</span>: &#123;</div><div class="line">                op = gc();</div><div class="line">                read(x), read(y);</div><div class="line">                <span class="keyword">if</span> (op == <span class="string">'a'</span>) get_mx(x, y);</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">'i'</span>) get_mi(x, y);</div><div class="line">                <span class="keyword">else</span> assert(<span class="literal">false</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">default</span>: assert(<span class="literal">false</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><del>namespace和assert大法好啊！！！</del></p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;BZOJ 3159: 决战  题解&lt;br&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://gqh123.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="BZOJ" scheme="https://gqh123.github.io/tags/BZOJ/"/>
    
      <category term="LCT" scheme="https://gqh123.github.io/tags/LCT/"/>
    
  </entry>
  
</feed>
